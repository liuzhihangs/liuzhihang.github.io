<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Notes</title>
  <icon>https://www.gravatar.com/avatar/9a661d73a4ebd8479e19c696ac6daf24</icon>
  <subtitle>Notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuzhihang.com/"/>
  <updated>2020-09-27T14:54:57.558Z</updated>
  <id>https://liuzhihang.com/</id>
  
  <author>
    <name>liuzhihang</name>
    <email>liuzhihangs@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【JDK源码笔记】- 基于数组的有界阻塞队列 —— ArrayBlockingQueue</title>
    <link href="https://liuzhihang.com/2020/09/27/source-code-arrayblockingqueue.html"/>
    <id>https://liuzhihang.com/2020/09/27/source-code-arrayblockingqueue.html</id>
    <published>2020-09-27T14:50:00.000Z</published>
    <updated>2020-09-27T14:54:57.558Z</updated>
    
    <summary type="html">
    
      在阅读完和 AQS 相关的锁以及同步辅助器之后，来一起阅读 JUC 下的和队列相关的源码。先从第一个开始：ArrayBlockingQueue。
    
    </summary>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/JDK/"/>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/tags/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>【JDK源码笔记】- 使用递增计数器的线程同步工具 —— 信号量，它的原理是什么样子的？</title>
    <link href="https://liuzhihang.com/2020/09/21/source-code-semaphore.html"/>
    <id>https://liuzhihang.com/2020/09/21/source-code-semaphore.html</id>
    <published>2020-09-20T23:00:00.000Z</published>
    <updated>2020-09-21T00:04:01.368Z</updated>
    
    <summary type="html">
    
      在 JUC 中线程同步器除了 CountDownLatch 和 CycleBarrier ，还有一个叫做 Semaphore （信号量），同样是基于 AQS 实现的。下面来看看信号量的内部原理。
    
    </summary>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/JDK/"/>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/tags/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>【工作笔记】- 你有没有想过为什么交易和退款要拆开不同的表？</title>
    <link href="https://liuzhihang.com/2020/09/19/work-trans-refund-table.html"/>
    <id>https://liuzhihang.com/2020/09/19/work-trans-refund-table.html</id>
    <published>2020-09-19T02:00:00.000Z</published>
    <updated>2020-09-19T02:02:51.081Z</updated>
    
    <summary type="html">
    
      近期做新项目，在设计表结构的时候，突然想起来之前面试的时候遇到的一个问题，那时候也是初出茅庐，对很多东西一知半解（当然现在也是），当时那个小哥哥问我为什么交易和退款要拆成两个表？是基于什么考虑？有什么好处和优点么？
    
    </summary>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/tags/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【JDK源码笔记】- CyclicBarrier 不就是比 CountDownLatch 多了个回环么？</title>
    <link href="https://liuzhihang.com/2020/09/13/source-code-cyclicbarrier.html"/>
    <id>https://liuzhihang.com/2020/09/13/source-code-cyclicbarrier.html</id>
    <published>2020-09-12T17:30:00.000Z</published>
    <updated>2020-09-12T18:05:58.207Z</updated>
    
    <summary type="html">
    
      看完 CountDownLatch 正准备表示一番，突然看到了一个 CyclicBarrier —— 回环屏障。沃特？回环还屏障？说比 CountDownLatch 要多一个回环，那咱可得瞧一瞧，看一看了！
    
    </summary>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/JDK/"/>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/tags/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>【工具册】- 给大家介绍下，这是我的流程图软件 —— draw.io</title>
    <link href="https://liuzhihang.com/2020/09/06/source-tool-drawio.html"/>
    <id>https://liuzhihang.com/2020/09/06/source-tool-drawio.html</id>
    <published>2020-09-06T09:00:00.000Z</published>
    <updated>2020-09-12T17:22:04.211Z</updated>
    
    <summary type="html">
    
      之前推了一篇文章《十张图带大家看懂 ES 原理 ！明白为什么说：ES 是准实时的！》，很多小伙伴都比较好奇在文章中的图是用的什么画图软件？看那么明显的手绘风格，当然是手画的啦！（开玩笑），其实我用的是 draw.io ，下面分享我的画图软件 —— draw.io 。
    
    </summary>
    
    
      <category term="工具册" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E5%85%B7%E5%86%8C/"/>
    
    
      <category term="工具册" scheme="https://liuzhihang.com/tags/%E5%B7%A5%E5%85%B7%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>【JDK源码笔记】- 快来看看！AQS 和  CountDownLatch 有怎么样的关系？</title>
    <link href="https://liuzhihang.com/2020/09/06/source-code-countdownlatch.html"/>
    <id>https://liuzhihang.com/2020/09/06/source-code-countdownlatch.html</id>
    <published>2020-09-06T04:00:00.000Z</published>
    <updated>2020-09-12T17:22:04.112Z</updated>
    
    <summary type="html">
    
      CountDownLatch 一个同步辅助工具，同样是基于 AQS 实现，本篇文件主要是介绍 CountDownLatch 的使用，以及源码。
    
    </summary>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/JDK/"/>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/tags/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch 技术分享】—— 十张图带大家看懂 ES 原理 ！明白为什么说：ES 是准实时的！</title>
    <link href="https://liuzhihang.com/2020/08/29/technology-sharing-es-5.html"/>
    <id>https://liuzhihang.com/2020/08/29/technology-sharing-es-5.html</id>
    <published>2020-08-28T17:20:00.000Z</published>
    <updated>2020-09-12T17:22:04.165Z</updated>
    
    <summary type="html">
    
      说到 Elasticsearch ，其中最明显的一个特点就是 *near real-time* 准实时 —— 当文档存储在Elasticsearch中时，将在1秒内以几乎实时的方式对其进行索引和完全搜索。那为什么说 ES 是准实时的呢？
    
    </summary>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ELK" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/ELK/"/>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/tags/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ELK" scheme="https://liuzhihang.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch 技术分享】—— ES 查询检索数据的过程，是什么样子的？</title>
    <link href="https://liuzhihang.com/2020/08/26/technology-sharing-es-4.html"/>
    <id>https://liuzhihang.com/2020/08/26/technology-sharing-es-4.html</id>
    <published>2020-08-26T12:20:00.000Z</published>
    <updated>2020-09-12T17:22:04.178Z</updated>
    
    <summary type="html">
    
      ES 使用过程中常用的就是查询以及检索，那查询和检索的过程，什么样的呢？
    
    </summary>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ELK" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/ELK/"/>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/tags/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ELK" scheme="https://liuzhihang.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch 技术分享】—— Elasticsearch 存储一条数据， put 过程是什么样子的？</title>
    <link href="https://liuzhihang.com/2020/08/26/technology-sharing-es-3.html"/>
    <id>https://liuzhihang.com/2020/08/26/technology-sharing-es-3.html</id>
    <published>2020-08-25T16:10:00.000Z</published>
    <updated>2020-09-12T17:22:04.108Z</updated>
    
    <summary type="html">
    
      在前面已经介绍了 ES 中常用的一些名词，知道了数据是存储在 shard 中的，而 index 会映射一个或者多个 shard 。那这时候我要存储一条数据到某个索引下，这条数据是在哪个 index 下的呢？
    
    </summary>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ELK" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/ELK/"/>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/tags/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ELK" scheme="https://liuzhihang.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch 技术分享】—— ES 常用名词及结构</title>
    <link href="https://liuzhihang.com/2020/08/23/technology-sharing-es-2.html"/>
    <id>https://liuzhihang.com/2020/08/23/technology-sharing-es-2.html</id>
    <published>2020-08-23T02:00:00.000Z</published>
    <updated>2020-09-12T17:22:04.123Z</updated>
    
    <summary type="html">
    
      Elasticsearch 常用的名词
    
    </summary>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ELK" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/ELK/"/>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/tags/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ELK" scheme="https://liuzhihang.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch 技术分享】—— Elasticsearch ？倒排索引？这都是什么？</title>
    <link href="https://liuzhihang.com/2020/08/18/technology-sharing-es-1.html"/>
    <id>https://liuzhihang.com/2020/08/18/technology-sharing-es-1.html</id>
    <published>2020-08-18T05:00:00.000Z</published>
    <updated>2020-09-12T17:22:04.115Z</updated>
    
    <summary type="html">
    
      Elasticsearch 从入门到进门
    
    </summary>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ELK" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/ELK/"/>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/tags/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ELK" scheme="https://liuzhihang.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>【JDK源码笔记】- 除了读写锁，JUC 下面还有个 StampedLock！还不过来了解一下么？</title>
    <link href="https://liuzhihang.com/2020/08/09/source-code-stamped-lock.html"/>
    <id>https://liuzhihang.com/2020/08/09/source-code-stamped-lock.html</id>
    <published>2020-08-09T07:30:00.000Z</published>
    <updated>2020-09-12T17:22:04.225Z</updated>
    
    <summary type="html">
    
      为什么有了 ReentrantLock 和 ReentrantReadWriteLock 之后还要设计一个 StampedLock ？ 
    
    </summary>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/JDK/"/>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/tags/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发常用API</title>
    <link href="https://liuzhihang.com/2020/08/01/idea-plugin-development-common-api.html"/>
    <id>https://liuzhihang.com/2020/08/01/idea-plugin-development-common-api.html</id>
    <published>2020-08-01T03:58:16.000Z</published>
    <updated>2020-09-12T17:22:04.188Z</updated>
    
    <summary type="html">
    
      在看完 IDEA 插件开发简易教程后，小伙伴们是否迫不及待的想自己上手整一个插件了？心里规划好了一二三，但是却不知道从哪里开始下手。下面我分享下自己整理的一些常用的 API。 
    
    </summary>
    
    
      <category term="IDEA" scheme="https://liuzhihang.com/categories/IDEA/"/>
    
    
      <category term="plugin" scheme="https://liuzhihang.com/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>【工具册】- IDEA 插件找不到？看这里！那就自己敲一个！</title>
    <link href="https://liuzhihang.com/2020/07/29/tool-book-copy-as-json.html"/>
    <id>https://liuzhihang.com/2020/07/29/tool-book-copy-as-json.html</id>
    <published>2020-07-29T05:00:00.000Z</published>
    <updated>2020-09-12T17:22:04.200Z</updated>
    
    <summary type="html">
    
      小伙伴你是否想亲手写一个插件，或者你是否有一些插件的想法，但是找不到插件。那就自己实现一个吧
    
    </summary>
    
    
      <category term="工具册" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E5%85%B7%E5%86%8C/"/>
    
      <category term="IDEA" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E5%85%B7%E5%86%8C/IDEA/"/>
    
    
      <category term="plugin" scheme="https://liuzhihang.com/tags/plugin/"/>
    
      <category term="工具册" scheme="https://liuzhihang.com/tags/%E5%B7%A5%E5%85%B7%E5%86%8C/"/>
    
      <category term="IDEA" scheme="https://liuzhihang.com/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>【JDK源码笔记】- 快进来！花几分钟看一下 ReentrantReadWriteLock 的原理！</title>
    <link href="https://liuzhihang.com/2020/07/27/source-code-reentrant-read-write-lock.html"/>
    <id>https://liuzhihang.com/2020/07/27/source-code-reentrant-read-write-lock.html</id>
    <published>2020-07-27T15:50:00.000Z</published>
    <updated>2020-09-12T17:22:04.133Z</updated>
    
    <summary type="html">
    
      在看完 ReentrantLock 之后，在高并发场景下 ReentrantLock 已经足够使用，但是因为 ReentrantLock 是独占锁，同时只有一个线程可以获取该锁，而很多应用场景都是读多写少，这时候使用 ReentrantLock 就不太合适了。读多写少的场景该如何使用？在 JUC 包下同样提供了读写锁 ReentrantReadWriteLock 来应对读多写少的场景。
    
    </summary>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/JDK/"/>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/tags/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>【JDK源码笔记】- 不能再被问住了！ReentrantLock 源码、画图一起看一看！</title>
    <link href="https://liuzhihang.com/2020/07/25/source-code-reentrant-lock.html"/>
    <id>https://liuzhihang.com/2020/07/25/source-code-reentrant-lock.html</id>
    <published>2020-07-25T01:50:00.000Z</published>
    <updated>2020-09-12T17:22:04.221Z</updated>
    
    <summary type="html">
    
      在阅读完 JUC 包下的 AQS 源码之后，其中有很多疑问，最大的疑问就是 state 究竟是什么含义？并且 AQS 主要定义了队列的出入，但是获取资源、释放资源都是交给子类实现的，那子类是怎么实现的呢？ 
    
    </summary>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/JDK/"/>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/tags/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>【工作笔记】- 老大说新项目的结构和 xxx 项目一样就可以了，我 ……</title>
    <link href="https://liuzhihang.com/2020/07/18/work-archetype.html"/>
    <id>https://liuzhihang.com/2020/07/18/work-archetype.html</id>
    <published>2020-07-18T05:00:00.000Z</published>
    <updated>2020-09-12T17:22:04.217Z</updated>
    
    <summary type="html">
    
      又要开发新项目了，还是创建新项目，怎么办？老大说按照 xxx 项目的结构创建一个新项目就可以了。
    
    </summary>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Archetype" scheme="https://liuzhihang.com/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/Archetype/"/>
    
    
      <category term="工作笔记" scheme="https://liuzhihang.com/tags/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Archetype" scheme="https://liuzhihang.com/tags/Archetype/"/>
    
  </entry>
  
  <entry>
    <title>【JDK源码笔记】- 别走！这里有个笔记：图文讲解 AQS ，一起看看 AQS 的源码……(图文较长)</title>
    <link href="https://liuzhihang.com/2020/07/12/source-code-aqs.html"/>
    <id>https://liuzhihang.com/2020/07/12/source-code-aqs.html</id>
    <published>2020-07-12T05:00:00.000Z</published>
    <updated>2020-09-12T17:22:04.170Z</updated>
    
    <summary type="html">
    
      AbstractQueuedSynchronizer 抽象队列同步器，简称 AQS 。是在 JUC 包下面一个非常重要的基础组件，JUC 包下面的并发锁 `ReentrantLock` `CountDownLatch` 等都是基于 AQS 实现的。所以想进一步研究锁的底层原理，非常有必要先了解 AQS 的原理。
    
    </summary>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/JDK/"/>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/tags/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>【JDK源码笔记】- JUC 包下工具类，它的名字叫 LockSupport ！你造么？</title>
    <link href="https://liuzhihang.com/2020/07/05/source-code-locksupport.html"/>
    <id>https://liuzhihang.com/2020/07/05/source-code-locksupport.html</id>
    <published>2020-07-05T12:20:20.000Z</published>
    <updated>2020-09-12T17:22:04.137Z</updated>
    
    <summary type="html">
    
      LockSupport 是 JUC 中常用的一个工具类，主要作用是挂起和唤醒线程。在阅读 JUC 源码中经常看到，所以很有必要了解一下。
    
    </summary>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/JDK/"/>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/tags/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>【JDK源码笔记】- JDK 8 新增的 LongAdder，得过来看一下！</title>
    <link href="https://liuzhihang.com/2020/06/28/source-code-longadder.html"/>
    <id>https://liuzhihang.com/2020/06/28/source-code-longadder.html</id>
    <published>2020-06-28T15:50:20.000Z</published>
    <updated>2020-09-12T17:22:04.161Z</updated>
    
    <summary type="html">
    
      在介绍 AtomicInteger 时，已经说明在高并发下大量线程去竞争更新同一个原子变量时，因为只有一个线程能够更新成功，其他的线程在竞争失败后，只能一直循环，不断的进行 CAS 尝试，从而浪费了 CPU 资源。而在 JDK 8 中新增了 LongAdder 用来解决高并发下变量的原子操作。
    
    </summary>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/categories/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/JDK/"/>
    
    
      <category term="源码笔记" scheme="https://liuzhihang.com/tags/%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JDK" scheme="https://liuzhihang.com/tags/JDK/"/>
    
  </entry>
  
</feed>
