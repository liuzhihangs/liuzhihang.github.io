<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【工具册】- IDEA 插件找不到？看这里！那就自己敲一个！</title>
      <link href="/2020/07/29/tool-book-copy-as-json.html"/>
      <url>/2020/07/29/tool-book-copy-as-json.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>大家都经常使用 IDEA 进行开发，肯定会使用一些 IDEA 插件，我之前也写过两个插件，不过已经很久没有更新了，就让它先放着吧！</p><p>那小伙伴你是否想亲手写一个插件，或者你是否有一些插件的想法，但是找不到插件。那就自己实现一个吧！</p><br><p>公众号：liuzhihangs，记录工作学习中的技术、开发及源码笔记；时不时分享一些生活中的见闻感悟。欢迎大佬来指导！</p></blockquote><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="使用-Gradle-创建"><a href="#使用-Gradle-创建" class="headerlink" title="使用 Gradle 创建"></a>使用 Gradle 创建</h4><p>写插件，先从创建项目开始：</p><p><code>File</code> -&gt; <code>New</code> -&gt; <code>Project...</code></p><ul><li>这里使用 Gradle，其中 Java 已经默认选中，咱们再额外选择 <strong>IntelliJ Platform Plugin</strong>。</li></ul><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/create-CS5lN3.png" alt="create-CS5lN3"></p><ul><li>点击 <strong>Next</strong> ，然后填写项目名称，路径等选项。</li></ul><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/create2-rBTM8z.png" alt="create2-rBTM8z"></p><ul><li>项目结构</li></ul><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/structure-oKmDur.png" alt="structure-oKmDur"></p><p><strong>build.gradle</strong> 为项目配置文件。<br><strong>resources/META-INF/plugin.xml</strong> 为插件配置文件。</p><h4 id="使用-GitHub-模版"><a href="#使用-GitHub-模版" class="headerlink" title="使用 GitHub 模版"></a>使用 GitHub 模版</h4><ol><li>访问 <a href="https://github.com/JetBrains/intellij-platform-plugin-template">https://github.com/JetBrains/intellij-platform-plugin-template</a></li><li>点击 <strong>Use this template</strong> 创建模版。<img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/use-this-template-Z9tfjX.png" alt="use-this-template-Z9tfjX"></li><li>Clone 项目到自己本地。</li></ol><p>注：模版生成的项目是使用的 <strong>Kotlin</strong>，所以这里使用的第一种方式创建。</p><h3 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h3><h4 id="修改-build-gradle-配置文件"><a href="#修改-build-gradle-配置文件" class="headerlink" title="修改 build.gradle 配置文件"></a>修改 build.gradle 配置文件</h4><p>原内容如下：</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/build-gradle-K0gj4a.png" alt="build-gradle-K0gj4a"></p><p>修改后：</p><pre class=" language-java"><code class="language-java">plugins <span class="token punctuation">{</span>    id <span class="token string">'java'</span>    id <span class="token string">'org.jetbrains.intellij'</span> version <span class="token string">'0.4.15'</span><span class="token punctuation">}</span>group <span class="token string">'com.liuzhihang.toolkit'</span>version <span class="token string">'1.0.2'</span>sourceCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>repositories <span class="token punctuation">{</span>    <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    maven <span class="token punctuation">{</span> url <span class="token string">"https://maven.aliyun.com/repository/public"</span> <span class="token punctuation">}</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    testCompile group<span class="token operator">:</span> <span class="token string">'junit'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'junit'</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token string">'4.12'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// See https://github.com/JetBrains/gradle-intellij-plugin/</span>intellij <span class="token punctuation">{</span>    version <span class="token string">'2019.1.1'</span>    pluginName <span class="token string">'Copy as Json'</span>    updateSinceUntilBuild <span class="token boolean">false</span>    sameSinceUntilBuild <span class="token boolean">false</span><span class="token punctuation">}</span>patchPluginXml <span class="token punctuation">{</span>    <span class="token function">pluginDescription</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span>descriptionFile<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token function">changeNotes</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span>changesFile<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ol><li>修改 <strong>repositories</strong> 使用阿里云</li><li>修改 <strong>patchPluginXml</strong> 使用外置文件</li><li>在<strong>根目录</strong>下创建 parts 路径，并创建 <strong>changeNotes.html</strong>、<strong>pluginDescription.html</strong></li></ol><h4 id="修改-resources-META-INF-plugin-xml-插件信息"><a href="#修改-resources-META-INF-plugin-xml-插件信息" class="headerlink" title="修改 resources/META-INF/plugin.xml 插件信息"></a>修改 resources/META-INF/plugin.xml 插件信息</h4><p>原内容如下：</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/plugin-xml-AuzOSc.png" alt="plugin-xml-AuzOSc"></p><p>修改后：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idea-plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>com.liuzhihang.toolkit.copyasjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Copy as Json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vendor</span> <span class="token attr-name">email</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>liuzhihangs@qq.com<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://liuzhihang.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Liu ZhiHang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vendor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[ Description will be added by gradle build]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html         on how to target different products --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>depends</span><span class="token punctuation">></span></span>com.intellij.modules.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>depends</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idea-version</span> <span class="token attr-name">since-build</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>181.00<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span> <span class="token attr-name">defaultExtensionNs</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.intellij<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Add your extensions here --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>actions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>actions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>idea-plugin</span><span class="token punctuation">></span></span></code></pre><p>plugin.xml 说明：<a href="https://jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_configuration_file.html">https://jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_configuration_file.html</a></p><h4 id="创建-Action"><a href="#创建-Action" class="headerlink" title="创建 Action"></a>创建 Action</h4><ol><li><p>先在 main 下 创建 java 目录，及包路径。</p></li><li><p><code>New</code> -&gt; <code>Plugin DevKit</code> -&gt; <code>Action</code>  <img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/new-action-Pbv61Y.png" alt="new-action-Pbv61Y"></p></li><li><p>设置 Action 的 <strong>id</strong> 、<strong>Class Name</strong> 、 <strong>description</strong> 、 <strong>group</strong> 及<strong>快捷键</strong>等<img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/create-action-5rIhur.png" alt="create-action-5rIhur"></p></li><li><p>这时候会发现在 plugin.xml 也插入了 <strong>action</strong>。</p></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>actions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Toolkit.Json.CopyAsJsonAction<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.liuzhihang.toolkit.action.CopyAsJsonAction<span class="token punctuation">"</span></span>            <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CopyAsJsonAction<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Copy As Json<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add-to-group</span> <span class="token attr-name">group-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EditorTabsGroup<span class="token punctuation">"</span></span> <span class="token attr-name">anchor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">keymap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$default<span class="token punctuation">"</span></span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shift meta J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>actions</span><span class="token punctuation">></span></span></code></pre><p>到这里已经结构完全创建完毕了，下面将演示插件 <strong>copy-as-json</strong> 的内部逻辑。当然这块也可以直接跳过，阅读源码即可。</p><p>源码地址：文末相关资料或公众号发送 <strong>copy-as-json</strong> 获取。</p><p>插件效果：将 JavaBean 复制为 Json 字符串。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/demo-gNnhR9.gif" alt="demo-gNnhR9"></p><h4 id="开发笔记"><a href="#开发笔记" class="headerlink" title="开发笔记"></a>开发笔记</h4><p>首先需要知道一些常用的 API，常用 API 可以阅读官方文档或者关注公众号后面会推送，这里仅介绍一些在这里用到的。</p><ul><li>打开 <strong>CopyAsJsonAction</strong> </li></ul><p>该类继承并需要实现 <strong>actionPerformed</strong> 方法。在 <strong>actionPerformed</strong> 方法中可以通过以下三个方法获取到项目相关信息：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取项目</span>Project project <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>PlatformDataKeys<span class="token punctuation">.</span>PROJECT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取Psi文件</span>PsiFile psiFile <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>CommonDataKeys<span class="token punctuation">.</span>PSI_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取当前编辑的文件</span>Editor editor <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>CommonDataKeys<span class="token punctuation">.</span>EDITOR<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>获取到当前编辑的文件</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token keyword">static</span> PsiClass <span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> Editor editor<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> PsiFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getCaretModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PsiElement element <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">findElementAt</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前类</span>        PsiClass target <span class="token operator">=</span> PsiTreeUtil<span class="token punctuation">.</span><span class="token function">getParentOfType</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> PsiClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> target <span class="token keyword">instanceof</span> <span class="token class-name">SyntheticElement</span> <span class="token operator">?</span> null <span class="token operator">:</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>从当前编辑的文件里面获取到字段</li></ul><p>将当前编辑的 JavaBean 中的字段提取，并转换为 Map。</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> fieldsMap <span class="token operator">=</span> <span class="token function">getFields</span><span class="token punctuation">(</span>selectedClass<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>getFields 方法篇幅较长，请参考源码。</p><ul><li>将字段转化成 Json 字符串，并格式化</li></ul><p>使用 Gson 将 Map 转换为 Json 字符串，并格式化。其中格式化自定义了缩进。</p><p>见代码：<code>com.liuzhihang.toolkit.utils.GsonFormatUtil</code></p><pre class=" language-java"><code class="language-java">Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String json <span class="token operator">=</span> GsonFormatUtil<span class="token punctuation">.</span><span class="token function">gsonFormat</span><span class="token punctuation">(</span>gson<span class="token punctuation">,</span> fieldsMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用自定义缩进格式 String json = new GsonBuilder().setPrettyPrinting().create().toJson(fieldsMap);</span>StringSelection selection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringSelection</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>将 Json 字符串拷贝到剪贴板</li></ul><pre class=" language-java"><code class="language-java">StringSelection selection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringSelection</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>Clipboard clipboard <span class="token operator">=</span> Toolkit<span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemClipboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clipboard<span class="token punctuation">.</span><span class="token function">setContents</span><span class="token punctuation">(</span>selection<span class="token punctuation">,</span> selection<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>发出提示 success</li></ul><pre class=" language-java"><code class="language-java">String message <span class="token operator">=</span> <span class="token string">"Convert "</span> <span class="token operator">+</span> selectedClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" to JSON success, copied to clipboard."</span><span class="token punctuation">;</span>Notification success <span class="token operator">=</span> NOTIFICATION_GROUP<span class="token punctuation">.</span><span class="token function">createNotification</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> NotificationType<span class="token punctuation">.</span>INFORMATION<span class="token punctuation">)</span><span class="token punctuation">;</span>Notifications<span class="token punctuation">.</span>Bus<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> project<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h4><p>右侧 <code>Gradle</code> -&gt; <code>选择 intellij</code> -&gt; <code>点击 runlde</code></p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/run-GfscZn.png" alt="run-GfscZn"></p><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>右侧 <code>Gradle</code> -&gt; 选择 <code>intellij</code> -&gt; <code>点击 buildPlugin</code></p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/build-epNxlA.png" alt="build-epNxlA"></p><p>此时在项目路径下会生成插件，把这个插件包发给小兄弟安装使用就行了。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/build-1-2aX8za.png" alt="build-1-2aX8za"></p><h4 id="上传到-IDEA-插件库"><a href="#上传到-IDEA-插件库" class="headerlink" title="上传到 IDEA 插件库"></a>上传到 IDEA 插件库</h4><p>访问 <a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com/</a> 创建账号，将插件包上传到仓库即可。当然也有其他的方式，这块就没有研究了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面的方式已经简单开发一个插件了，要问这个插件有什么用？</p><p>其实就是在写文档，或者接口调用的时候，直接将 Java Bean 复制为 Json 串，省过一个一个敲，然后手写 Json 了。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/postman-7trAcJ.gif" alt="postman-7trAcJ"></p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/req111-JvWo5q.gif" alt="req111-JvWo5q"></p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><p>[1] IntelliJ Platform SDK DevGuide：<a href="https://jetbrains.org/intellij/sdk/docs/intro/intellij_platform.html">https://jetbrains.org/intellij/sdk/docs/intro/intellij_platform.html</a><br>[2] JetBrains Plugins Repository：<a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com/</a><br>[3] Toolkit： <a href="https://github.com/liuzhihangs/toolkit">https://github.com/liuzhihangs/toolkit</a><br>[4] copy-as-json：<a href="https://github.com/liuzhihangs/copy-as-json">https://github.com/liuzhihangs/copy-as-json</a><br>[5] copy-as-json 插件地址：<a href="https://plugins.jetbrains.com/plugin/13606-copy-as-json">https://plugins.jetbrains.com/plugin/13606-copy-as-json</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具册 </category>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具册 </tag>
            
            <tag> IDEA </tag>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 快进来！花几分钟看一下 ReentrantReadWriteLock 的原理！</title>
      <link href="/2020/07/27/source-code-reentrant-read-write-lock.html"/>
      <url>/2020/07/27/source-code-reentrant-read-write-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>在看完 ReentrantLock 之后，在高并发场景下 ReentrantLock 已经足够使用，但是因为 ReentrantLock 是独占锁，同时只有一个线程可以获取该锁，而很多应用场景都是读多写少，这时候使用 ReentrantLock 就不太合适了。读多写少的场景该如何使用？在 JUC 包下同样提供了读写锁 ReentrantReadWriteLock 来应对读多写少的场景。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>支持类似 ReentrantLock 语义的 ReadWriteLock 的实现。</p><p>具有以下属性：</p><ul><li><strong>获取顺序</strong></li></ul><p>此类不会将读取优先或写入优先强加给锁访问的排序。但是，它确实支持可选的<em>公平</em> 策略。</p><p>支持<strong>公平模式</strong>和<strong>非公平模式</strong>，默认为<strong>非公平模式</strong>。</p><ul><li><strong>重入</strong></li></ul><p>允许 reader 和 writer 按照 <code>ReentrantLock</code> 的样式重新获取读锁或写锁。在写线程释放持有的所有写锁后，reader 才允许重入使用它们。此外，writer 可以获取读锁，但反过来则不成立。</p><ul><li><strong>锁降级</strong></li></ul><p>重入还允许从写锁降级为读锁，通过先获取写锁，然后获取读锁，最后释放写锁的方式降级。但是，从读锁升级到写锁是<strong>不可能的</strong>。</p><ul><li><strong>锁获取的中断</strong></li></ul><p>读锁和写锁都支持锁获取期间的中断。</p><ul><li><strong><code>Condition</code> 支持</strong></li></ul><p>写锁提供了一个 <code>Condition</code> 实现，对于写锁来说，该实现的方式与 <code>ReentrantLock.newCondition()</code> 提供的 <code>Condition</code> 实现对 <code>ReentrantLock</code> 所做的行为相同。当然，此 <code>Condition</code> 只能用于写锁。读锁不支持 <code>Condition</code>。</p><ul><li><strong>监测</strong></li></ul><p>此类支持一些确定是保持锁还是争用锁的方法。这些方法设计用于监视系统状态，而不是同步控制。</p><p>锁最多支持 65535 个递归写锁和 65535 个读锁</p><p>以上为 <em>Java Api 官方文档</em><sup>[1]</sup> 的解释，总结一下内容如下：</p><ol><li>支持非公平和公平模式，默认为非公平模式。</li><li>支持重入，读锁可以重入获取读锁，写锁可以重入获取写锁，写锁可以获取读锁，读锁不可以获取写锁。</li><li>锁可以降级，从写锁降级为读锁，但是不可能从读锁升级到写锁。</li></ol><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CachedData</span> <span class="token punctuation">{</span>    Object data<span class="token punctuation">;</span>    <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> cacheValid<span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantReadWriteLock rwl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">processCachedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读锁加锁</span>        rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取写锁之前必须释放读锁</span>            rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 写锁加锁</span>            rwl<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 重新检查状态，因为另一个线程可能</span>                <span class="token comment" spellcheck="true">// 在执行操作之前获取了写锁定并更改了状态</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    data <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    cacheValid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 通过在释放写锁之前获取读锁来降级</span>                rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                rwl<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Unlock write, still hold read</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">use</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面只是官方文档提供的一个 demo。</p><h4 id="问题疑问"><a href="#问题疑问" class="headerlink" title="问题疑问"></a>问题疑问</h4><ol><li>在 ReentrantReadWriteLock 中 state 代表什么？</li><li>线程获取锁的流程是怎么样的？</li><li>读锁和写锁的可重入性是如何实现的？</li><li>当前线程获取锁失败，被阻塞的后续操作是什么？</li><li>锁降级是怎么降级的？</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ReentrantReadWriteLock-uml-SQCZqu.png" alt="ReentrantReadWriteLock-uml-SQCZqu"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantReadWriteLock</span> <span class="token keyword">implements</span> <span class="token class-name">ReadWriteLock</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>6992448646407690164L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 提供读锁的内部类 */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantReadWriteLock<span class="token punctuation">.</span>ReadLock readerLock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 提供写锁的内部类 */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantReadWriteLock<span class="token punctuation">.</span>WriteLock writerLock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 执行所有同步机制 */</span>    <span class="token keyword">final</span> Sync sync<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>之前在阅读 ReentrantLock 源码的时候 state 代表了锁的状态，0 表示没有线程持有锁，大于 1 表示已经有线程持有锁及其重入的次数。而在 ReentrantReadWriteLock 是读写锁，那就需要保存<strong>读锁</strong>和<strong>写锁</strong>两种状态的，那是怎么样表示的呢？</p><p>在 ReentrantReadWriteLock 中同样存在一个 Sync 继承了 AbstractQueuedSynchronizer，也是 FairSync、NonfairSync 的父类。内部定义了 state 的一些操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6317671515068378041L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 移位数</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_SHIFT   <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单位</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_UNIT    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最大数量 1 &lt;&lt; 16 -> 65536</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_COUNT      <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算独占数使用 1 &lt;&lt; 16 -> 65536</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXCLUSIVE_MASK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回共享保留数</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">>>></span> SHARED_SHIFT<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回独占保留数 </span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> EXCLUSIVE_MASK<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 AQS 中定义 state 为 int 类型，而在 ReentrantReadWriteLock 中，将 state 的 高 16 位和低 16 位拆开表示读写锁。其中高 16 位表示读锁，低 16 位表示写锁。分别使用 sharedCount 和 exclusiveCount 方法获取读锁和写锁的当前状态。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ReentrantReadWriteLock-state-JusW2l.png" alt="ReentrantReadWriteLock-state-JusW2l"></p><p>下面分别从读锁和写锁的角度来看如何进行加锁和释放锁的？</p><h4 id="ReadLock-lock"><a href="#ReadLock-lock" class="headerlink" title="ReadLock.lock"></a>ReadLock.lock</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReadLock</span>     <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取读取锁。     * 如果写锁没有被另一个线程持有，则获取读锁并立即返回。     * 如果写锁由另一个线程持有，则出于线程调度目的，     * 当前线程将被禁用，并处于休眠状态，直到获取读锁为止。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用 AQS 获取共享资源</span>        sync<span class="token punctuation">.</span><span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ReentrantReadWriteLock-AQS-Share-gTrD2e.png" alt="ReentrantReadWriteLock-AQS-Share-gTrD2e"></p><p>获取共享资源，这块使用的 AQS 的逻辑，其中 tryAcquireShared(arg) 是在 ReentrantReadWriteLock.Sync 中实现的。并且 AQS 中有规定，tryAcquireShared 分为三种返回值：</p><ol><li>小于 0: 表示失败；</li><li>等于 0: 表示共享模式获取资源成功，但后续的节点不能以共享模式获取成功; </li><li>大于 0: 表示共享模式获取资源成功，后续节点在共享模式获取也可能会成功，在这种情况下，后续等待线程必须检查可用性。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 state 值</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 独占计数不为 0 且 不是当前线程， 说明已经有写锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取共享计数（读锁计数）</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不需要阻塞读锁 &amp;&amp; 共享计数小于最大值 &amp;&amp; state 更新成功</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> MAX_COUNT <span class="token operator">&amp;&amp;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当前读锁计数为 0</span>                <span class="token comment" spellcheck="true">// firstReader是获得读锁的第一个线程</span>                <span class="token comment" spellcheck="true">// firstReaderHoldCount是firstReader的保持计数</span>                firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>                firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 读锁重入</span>                firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当前缓存计数</span>                HoldCounter rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 当前线程没有计数 或者 没有创建计数器</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 创建计数，基于 ThreadLocal</span>                    cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                     readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 计数累加</span>                rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 完整地获取共享锁方法，作为tryAcquireShared方法因CAS获取锁失败后的处理。</span>        <span class="token comment" spellcheck="true">// 因为前面可能失败 CAS 失败， 队列策略失败等原因。</span>        <span class="token keyword">return</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>先获取 state ，通过 exclusiveCount 方法获取到写锁的计数值，不为 0 且 不是当前线程， 说明已经有写锁。返回 -1 失败。</li><li>通过 sharedCount 获取读锁计数，判断是否需要阻塞以及是否超过上限后，使用 CAS 更新 读锁计数。</li><li>设置或更新 firstReader、firstReaderHoldCount、 cachedHoldCounter。</li><li>最后会进行完整的获取共享锁方法，作为之前获取失败的后续处理方法。</li></ol><p>firstReader：firstReader是获得读锁的第一个线程；<br>firstReaderHoldCount：firstReaderHoldCount是firstReader的保持计数。即获得读锁的第一个线程的重入次数。<br>cachedHoldCounter：最后一个获得读锁的线程获得读锁的重入次数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>Thread current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HoldCounter rh <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无限循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否有写锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 有写锁，但是不是当前线程，直接返回失败</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 需要阻塞</span>            <span class="token comment" spellcheck="true">// 没有写锁，确保没有重新获取读锁</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// assert firstReaderHoldCount > 0;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当前线程的读锁计数 ThreadLocal 中</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 计数结束，remove 掉</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 为 0 直接失败</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 到达上限 抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> MAX_COUNT<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// CAS 设置读锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>                firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null<span class="token punctuation">)</span>                    rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                    rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>                rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                cachedHoldCounter <span class="token operator">=</span> rh<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cache for release</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>首先会一直循环</li><li>有写锁，但是不是当前线程，直接返回失败。<strong>但是，有写锁，如果是当前线程，是会继续执行的。</strong></li><li>设置或更新 firstReader、firstReaderHoldCount、 cachedHoldCounter。</li></ol><p>当存在写锁（独占锁）时，方法会返回 -1 失败，后续会调用 AQS 的 doAcquireShared 方法，循环获取资源。doAcquireShared 方法会不断循环，尝试获取读锁，一旦获取到读锁，当前节点会立即唤醒后续节点，后续节点开始尝试获取读锁，依次传播。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ReentrantReadWriteLock-1-rl0DjC.png" alt="ReentrantReadWriteLock-1-rl0DjC"></p><h4 id="ReadLock-unlock"><a href="#ReadLock-unlock" class="headerlink" title="ReadLock.unlock"></a>ReadLock.unlock</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReadLock</span>     <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用 AQS 的 releaseShared 释放共享资源方法。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ReadLock-unlock-LE7vUH.png" alt="ReadLock-unlock-LE7vUH"></p><p>其中 tryReleaseShared 有 ReadLock 实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一个线程是当前线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReaderHoldCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            firstReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            firstReaderHoldCount<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一个线程不是当前线程，更新自己的 ThreadLocal 里面的计数</span>        HoldCounter rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>            rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token function">unmatchedUnlockException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">--</span>rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">-</span> SHARED_UNIT<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用 CAS 更新 state</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 但是如果现在读和写锁都已释放，</span>            <span class="token comment" spellcheck="true">// 它可能允许等待的写程序继续进行。</span>            <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>如果是第一个线程，直接更新技术，不是则更新自己 ThreadLocal 里面保存的计数。</li><li>循环，使用 CAS 更新 state 的值。</li><li>如果 state 更新后的值为 0，说明没有线程持有读锁或者写锁了。</li><li>当 state 为 0，此时会调用 AQS 的 doReleaseShared 方法。此时队列如果有写锁，那就会被写锁获取的锁。</li></ol><h4 id="WriteLock-lock"><a href="#WriteLock-lock" class="headerlink" title="WriteLock.lock"></a>WriteLock.lock</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WriteLock</span>     <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取写入锁。     * 如果没有其他线程持有读锁或写锁，会直接返回，并将写锁计数设置为1。     * 如果当前线程持有写锁，则将写锁计数 +1，然后返回。     * 如果锁正在被其他线程持有，则当前线程用于线程调度目的，     * 当前线程将被禁用，并处于休眠状态，直到获取读锁并将写锁计数设置为1。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/WriteLock.lock-wBuvUA.png" alt="WriteLock.lock-wBuvUA"></p><p>tryAcquire 方法由 Write 自己实现，方式和 ReentrantLock 类似。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果读锁计数为非零或写锁计数为非零，并且所有者是另一个线程，则失败。</span>    <span class="token comment" spellcheck="true">// 如果计数饱和，则失败。只有在count不为零时，才可能发生这种情况。</span>    <span class="token comment" spellcheck="true">// 否则，如果该线程是可重入获取或队列策略允许的话，则有资格进行锁定。</span>    <span class="token comment" spellcheck="true">// 如果是这样，请更新状态并设置所有者。</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写锁计数</span>    <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// c ！= 0 说明有有线程获取锁了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// (Note: if c != 0 and w == 0 then shared count != 0)</span>        <span class="token comment" spellcheck="true">// 判断是不是自己，不是自己 返回 false</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断有没有超过上限</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span> <span class="token operator">></span> MAX_COUNT<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重入</span>        <span class="token function">setState</span><span class="token punctuation">(</span>c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不需要阻塞，或者 CAS 更新 state 失败</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>获取 state ， 如果 state 不为 0 则判断是否为当前线程重入获取。</li><li>state 为 0 ，则当前线程 CAS 更新 state，获取锁。</li><li>更新成功之后绑定当前线程。</li><li>如果失败会继续调用 AQS 的 acquireQueued，将当前阻塞放在 AQS 队列中。AQS 会不断循环，等待上一个锁释放后，尝试获得锁。</li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ReentrantReadWriteLock-2-mQAgGL.png" alt="ReentrantReadWriteLock-2-mQAgGL"></p><h4 id="WriteLock-unlock"><a href="#WriteLock-unlock" class="headerlink" title="WriteLock.unlock"></a>WriteLock.unlock</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WriteLock</span>     <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果当前线程是此锁的持有者，则保持计数递减。 </span>    <span class="token comment" spellcheck="true">// 如果保持现在的计数为零，则解除锁定。 </span>    <span class="token comment" spellcheck="true">// 如果当前线程不是此锁的持有者则IllegalMonitorStateException异常。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/Write-unlock-bwHAcw.png" alt="Write-unlock-bwHAcw"></p><p>同样这块代码是使用 AQS 的逻辑，tryRelease 部分由 WriteLock 自己实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nextc <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>free<span class="token punctuation">)</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>如果是当前线程重入，扣减重入次数。</li><li>扣减后如果为 0，则设置锁持有线程为 null，更新 state 值。AQS 会唤醒后续节点获取锁。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p><strong>Q：</strong>在 ReentrantReadWriteLock 中 state 代表什么？</p><p><strong>A：</strong>state 代表锁的状态。state 为 0 ，没有线程持有锁，state 的高 16 为代表读锁状态，低 16 为代表写锁状态。通过位运算可以获取读写锁的实际值。</p><p><strong>Q：</strong>线程获取锁的流程是怎么样的？</p><p><strong>A：</strong>可以参考上面的源码笔记，以及后面的流程图。</p><p><strong>Q：</strong>读锁和写锁的可重入性是如何实现的？</p><p><strong>A：</strong>在加锁的时候，判断是否为当前线程，如果是当前线程，则直接累加计数。值得注意的是：读锁重入计数使用的 ThreadLocal 在线程中缓存计数，而写锁则直接用的 state 进行累加（其实和 state 低 16 位进行累加一样）。</p><p><strong>Q：</strong>当前线程获取锁失败，被阻塞的后续操作是什么？</p><p><strong>A：</strong>获取失败，会放到 AQS 等待队列中，在队列中不断循环，监视前一个节点是否为 head ，是的话，会重新尝试获取锁。</p><p><strong>Q：</strong>锁降级是怎么降级的？</p><p><strong>A：</strong> <img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/write-to-read-koAuqm.png" alt="write-to-read-koAuqm"><br>如图，在圈出部分 fullTryAcquireShared 代码中，可以看出来，在获取读锁的时候，如果当前线程持有写锁，是可以获取读锁的。这块就是指锁降级，比如线程 A 获取到了写锁，当线程 A 执行完毕时，它需要获取当前数据，假设不支持锁降级，就会导致 A 释放写锁，然后再次请求读锁。而在这中间是有可能被其他阻塞的线程获取到写锁的。从而导致线程 A 在一次执行过程中数据不一致。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>ReentrantReadWriteLock 读写锁，内部实现是 ReadLock 读锁 和 WriteLock 写锁。读锁，允许共享；写锁，是独占锁。</li><li>读写锁都支持重入，读锁的重入次数记录在线程维护的 ThreadLocal 中，写锁维护在 state 上（低 16 位）。</li><li>支持锁降级，从写锁降级为读锁，防止脏读。</li><li>ReadLock 和 WriteLock 都是通过 AQS 来实现的。获取锁失败后会放到 AQS 等待队列中，后续不断尝试获取锁。区别在读锁只有存在写锁的时候才放到等待队列，而写锁是只要存在非当前线程锁（无论写锁还是读锁）都会放到等待队列。<img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/read-write-different-gzNdCo.png" alt="read-write-different-gzNdCo"></li><li>通过源码分析，可以得出读写锁适合在<strong>读多写少</strong>的场景中使用。</li></ol><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><p>[1] Java Api：<a href="https://docs.oracle.com/javase/8/docs/api/overview-summary.html">https://docs.oracle.com/javase/8/docs/api/overview-summary.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 不能再被问住了！ReentrantLock 源码、画图一起看一看！</title>
      <link href="/2020/07/25/source-code-reentrant-lock.html"/>
      <url>/2020/07/25/source-code-reentrant-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在阅读完 JUC 包下的 AQS 源码之后，其中有很多疑问，最大的疑问就是 state 究竟是什么含义？并且 AQS 主要定义了队列的出入，但是获取资源、释放资源都是交给子类实现的，那子类是怎么实现的呢？下面开始了解 ReentrantLock。 </p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一个可重入的互斥锁与隐式监视器锁synchronized具有相同的基本行为和语义，但功能更强大。</p><p>具有以下特征：</p><ol><li>互斥性：同时只有一个线程可以获取到该锁，此时其他线程请求获取锁，会被阻塞，然后被放到该锁内部维护的一个 AQS 阻塞队列中。</li><li>可重入性：维护 state 变量，初始为 0，当一个线程获取到锁时，state 使用 cas 更新为 1，本线程再次申请获取锁，会对 state 进行 CAS 递增，重复获取次数即 state，最多为 2147483647 。试图超出此限制会从锁定方法抛出 Error。</li><li>公平/非公平性：在初始化时，可以通过构造器传参，指定是否为公平锁，还是非公平锁。当设置为 true 时，为公平锁，线程争用锁时，会倾向于等待时间最长的线程。</li></ol><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// block until condition holds</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ... method body</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="问题疑问？"><a href="#问题疑问？" class="headerlink" title="问题疑问？"></a>问题疑问？</h4><p>首先在阅读本文时，对 AQS 有了一定的了解，如果不了解的话，可以看以下之前的文章。<a href="">图文讲解 AQS</a></p><ol><li>在 AQS 中介绍 state 时，说 state 含义由子类进行定义，那在 ReentrantLock 中 state 代表什么？</li><li>ReentrantLock 和 AQS 有什么关系？</li><li>线程是如何获取到锁的？</li><li>锁的可重入性是如何实现的？</li><li>当前线程获取锁失败，被阻塞的后续操作是什么？</li><li>公平锁和非公平锁是如何体现的？</li><li>锁是如何释放的？</li></ol><p>将通过源码及画图的方式，围绕上面几个问题，展开阅读和分析。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ReentrantLock-uml-DDnlDW.png" alt="ReentrantLock-uml-DDnlDW"></p><p>基本结构如图所示，ReentrantLock 类实现了接口 Lock，在接口 Lock 中定义了使用锁时的方法，方法及含义如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取锁，如果没有获取到，会阻塞。</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取锁，如果没有获取到，会阻塞。响应中断。</span>    <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试获取锁，如果获取到，返回 true，没有获取到 返回 false</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试获取锁，没有有获取到，会等待指定时间，响应中断。</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 释放锁</span>    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而 ReentrantLock 也只是实现了 Lock 接口，并实现了这些方法，那 ReentrantLock 和 AQS 到底有什么关系呢？这就需要看内部具体如何实现的了。</p><p>通过上面类图可以看出，在 ReentrantLock 中含有两个内部类，分别是 NonfairSync FairSync 而它俩又实现了 抽象类 Sync，抽象类 Sync 继承了 AbstractQueuedSynchronizer 即 AQS。具体代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Sync sync<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 锁的同步控制基础类。 子类具体到公平和非公平的版本。 使用AQS状态来表示持有该锁的数量。</span>    <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 省略 ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 非公平锁逻辑 省略 ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 公平锁逻辑 省略 ...</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 默认非公平锁</span>    <span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 根据传参指定公平锁还是非公平锁，true 公平锁，false 非公平锁</span>    <span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过上面代码可以看出：</p><ol><li>锁的基本控制是由 NonfairSync 和 FairSync 进行控制的，而它俩的父类 Sync 继承了 AQS (AbstractQueuedSynchronizer)，这也就是说明 ReentrantLock 的实现和 AQS 是有关的。</li><li>NonfairSync 代表非公平锁实现逻辑，FairSync 代表公平锁实现逻辑。</li><li>构造器传参可以看出，初始化时，默认为 NonfairSync 非公平锁。也可以指定声明为公平锁或非公平锁，传参 true 为 公平锁，false 为非公平锁。</li></ol><p>具体 ReentrantLock 和 AQS 的关系是怎样的，就需要通过加锁的过程来分析了。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/878c841a671f102ddc2cdeae35faa4cc-pKLxAS.gif" alt="878c841a671f102ddc2cdeae35faa4cc-pKLxAS"></p><h4 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h4><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ReentrantLock-lock-4apftk.png" alt="ReentrantLock-lock-4apftk"></p><p>如图所示，默认声明非公平锁，lock 方法内部调用 <code>sync.lock();</code> 此时应该是使用的非公平锁内部的 lock 加锁操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过 CAS 设置 state 值 0 -> 1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 设置成功当前线程获取到了锁</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// 设置失败，则调用 AQS 的方法，尝试获取锁。</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>首先会 使用 CAS 更新 state 的值， 此时就会发现， state 在这里代表的锁的状态。 0 未加锁，1 加锁。</li><li>设置失败，会调用 AQS 的 acquire(1); 方法。</li></ol><p>再看下 AQS 的 acquire 代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// tryAcquire 尝试获取 state，获取失败则会加入到队列</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在之前分析 AQS 源码时，已经介绍 tryAcquire 是尝试获取 state 的值，AQS 中并不提供可用的方法，此处是由子类实现的。所以这块代码还是在 NonfairSync 类中自己实现的业务逻辑。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// NonfairSync 实现</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用父类的方法</span>        <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// NonfairSync 的父类 Sync 中有实现</span>    <span class="token comment" spellcheck="true">// state 传参是 1</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前线程</span>        <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 state</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果 c 是 0 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用 cas 更新为 1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置持有线程为当前</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是当前线程持有</span>            <span class="token comment" spellcheck="true">// 对 state 进行累加</span>            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 不允许超过 int 的最大值 2147483647 + 1 = -2147483648</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置 state 的值</span>            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>当前线程加锁，直接使用 CAS 方式对 state 从 0 更新为 1，更新成功，则获得锁，更新失败，则获取失败。</li><li>更新失败后会调用 AQS 的 <code>acquire(1);</code> 方法， 此处传参为 1。</li><li>tryAcquire 再次尝试获取锁。<ol><li>state 是 0，尝试获取。获取成功返回 true；</li><li>state 不是 0，判断是否为当前线程持有，是当前线程持有则对 state 进行累加。</li></ol></li><li>tryAcquire 获取锁失败，则走 AQS 的 acquireQueued 逻辑，创建节点，并加入到等待队列中。</li></ol><p>流程画图如下：</p><ul><li>初始为单个线程</li></ul><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ReentrantLock-1-1ozuSU.png" alt="ReentrantLock-1-1ozuSU"></p><ul><li>此时其他线程来请求获取锁</li></ul><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ReentrantLock-2-zO9REa.png" alt="ReentrantLock-2-zO9REa"></p><ul><li>加锁流程图</li></ul><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ReentrantLock-nonfair-LcRGc7.png" alt="ReentrantLock-nonfair-LcRGc7"></p><h4 id="再来看下公平锁是如何体现的？"><a href="#再来看下公平锁是如何体现的？" class="headerlink" title="再来看下公平锁是如何体现的？"></a>再来看下公平锁是如何体现的？</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>3000897897090466540L<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断有无节点排队</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>拉出来代码比较一下：</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/compare-UFOHD0.png" alt="compare-UFOHD0"></p><p>可以看出在公平锁（FairSync）中多了一个判断条件</p><p><strong><code>!hasQueuedPredecessors()</code></strong></p><p>hasQueuedPredecessors 方法在 AQS 中，如果有当前线程前面的线程排队返回true，如果当前线程是在队列的头部或队列为空，返回false。</p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>     Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>    Node s<span class="token punctuation">;</span>    <span class="token keyword">return</span> h <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>thread <span class="token operator">!=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果当前加锁时已经有节点在排队，那就去节点尾部排队，否则才会去抢占锁。</p><p>到这里基本上已经知道公平锁和非公平锁的区别了：</p><p>非公平锁：不管有没有节点在排队，都会试图去获取锁，如果获取失败，进入 acquire 方法，还是会试图获取一次，之后才会进入队列中。<br>公平锁：已经有节点在排队，那就自己去节点后面排队。</p><h4 id="tryLock"><a href="#tryLock" class="headerlink" title="tryLock"></a>tryLock</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>直接调用的 Sync 中的 nonfairTryAcquire， 尝试获取锁，获取失败，就返回 false，获取到锁或者是当前线程持有锁则对 state 累加后都返回 true。</p><h4 id="unlock"><a href="#unlock" class="headerlink" title="unlock"></a>unlock</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>发现 unlock 直接调用的 AQS 的 release 方法，进行释放资源。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这块在 AQS 中有介绍，也说明 tryRelease 由子类进行实现，现在在 ReentrantLock 重点关注 tryRelease 的实现。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 释放资源，传入值为 1</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>获取当前的 state 进行 -1 操作；</li><li>判断了下当前线程是否为持有线程；</li><li>如果释放完之后 state 为 0 ，则设置持有线程为 null；</li><li>更新并返回 state 的值。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面的源码及画图，基本上对开始的问题已经有了答案：</p><p><strong>Q</strong>：在 AQS 中介绍 state 时，说 state 含义由子类进行定义，那在 ReentrantLock 中 state 代表什么？<br><strong>A</strong>：在 ReentrantLock 中 state 代表加锁状态，0 没有线程获得锁，大于等于 1 已经有线程获得锁，大于 1 说明该获得锁的线程多次重入。</p><p><strong>Q</strong>：ReentrantLock 和 AQS 有什么关系？<br><strong>A</strong>：ReentrantLock 内部基于 AQS 实现，无论是锁状态，还是进入等待队列，锁释放等都是基于 AQS 实现。ReentrantLock 的公平锁和非公平锁都是 NonfairSync、FairSync 来实现的，而他们的父类 Sync 继承了 AQS。</p><p><strong>Q</strong>：线程是如何获取到锁的？<br><strong>A</strong>：线程通过修改 state 字段的状态来获取到锁。</p><p><strong>Q</strong>：锁的可重入性是如何实现的？<br><strong>A</strong>：当前线程发现 state 不是 0 ，则说明有锁已经被获取了，此时会判断当前获取到锁的线程是不是自己，如果是，则对 state 进行累加。</p><p><strong>Q</strong>：当前线程获取锁失败，被阻塞的后续操作是什么？<br><strong>A</strong>：获取失败，会放到 AQS 等待队列中，在队列中不断循环，监视前一个节点是否为 head ，是的话，会重新尝试获取锁。</p><p><strong>Q</strong>：公平锁和非公平锁是如何体现的？<br><strong>A</strong>：公平锁主要体现在如果当前队列中已经有排队的线程了，则自己直接排在后面。非公平锁是不管当前队列都没有线程排队，都会直接尝试修改 state 获取锁。</p><p><strong>Q</strong>：锁是如何释放的？<br><strong>A</strong>：锁释放资源，即将 state 进行 -1 操作，如果 -1 后 state 为 0，则释放节点，后续节点尝试获取锁。此处可以看 AQS 相关逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工作笔记】- 老大说新项目的结构和 xxx 项目一样就可以了，我 ……</title>
      <link href="/2020/07/18/work-archetype.html"/>
      <url>/2020/07/18/work-archetype.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>又要开发新项目了，还是创建新项目，怎么办？老大说按照 xxx 项目的结构创建一个新项目就可以了。</p></blockquote><p>在工作中经常有新项目需要创建，此时就会有三种常用的方式</p><p><strong>CC 大法</strong> 新建项目，然后找到之前的各种工具类，复制粘贴进来，此时还不一定能跑起来，然后再进行各种调试。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-cc-45VBU1.png" alt="archetype-cc-45VBU1"></p><p><strong>CD 大法</strong> 复制老项目，然后改 module 名字，依赖名字，删除老代码，当然也不一定能跑起来，此时再进行各种调试。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-cc1-SPx1ct.png" alt="archetype-cc1-SPx1ct"></p><p>当然，这里肯定不是使用这两种办法，下面咱们介绍一种更简洁的方式，使用 maven archetype 生成项目模版，一键创建项目。</p><p>Action！！！</p><h3 id="什么是-Archetype-？"><a href="#什么是-Archetype-？" class="headerlink" title="什么是 Archetype ？"></a>什么是 Archetype ？</h3><p>简而言之，Archetype 是 Maven 项目模板工具箱。</p><p><em>An archetype is defined as an original pattern or model from which all other things of the same kind are made.</em> </p><p>原型被定义为原始样式或模型，从中可以制成所有其他同类项目。</p><p>官方解释，简洁明了，就是使用已有的项目，生成一个模版。以后使用这个模版就可以快速生成结构相同的项目了。在团队开发中很有用。</p><p>其实就是官方解释，地址贴上来：<a href="http://maven.apache.org/archetype/maven-archetype-plugin/index.html">http://maven.apache.org/archetype/maven-archetype-plugin/index.html</a></p><p>下面使用 IDEA 作为演示工具，一步一步开始介绍。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/8e83e6d78b16698fb19762806acadd1c-ZXYM5I.jpg" alt="8e83e6d78b16698fb19762806acadd1c-ZXYM5I"></p><h3 id="准备模版项目"><a href="#准备模版项目" class="headerlink" title="准备模版项目"></a>准备模版项目</h3><p>这里还是要有一个模版项目，比如这样：</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype1-lZkrqX.png" alt="archetype1-lZkrqX"></p><p>这是一个多 module 项目，一个简单的 demo</p><ol><li>使用了 nacos 作为注册中心；</li><li>fegin 作为调用工具；</li><li>有通用校验 token 工具类；</li><li>假设里面也有一些公司的公共配置（MQ，链路监控，统一日志等）。</li></ol><p>当然这个项目是可以跑起来的。新创建的项目也是这个模版。</p><h3 id="进入主题"><a href="#进入主题" class="headerlink" title="进入主题"></a>进入主题</h3><h4 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h4><p>*<em>archetype:generate *</em></p><p>这样是基于当前项目生成，你也可以使用官网的用法分别指定参数</p><ol><li><strong>mvn archetype:generate</strong> 然后一步一步按照提示输入；</li><li>一次性输入，其中 <code>DarchetypeGroupId</code> <code>、DarchetypeArtifactId</code> <code>、DarchetypeVersion</code> 为生成的 Archetype 项目的组织版本。</li></ol><pre class=" language-bash"><code class="language-bash">mvn archetype:generate                                  \  -DarchetypeGroupId<span class="token operator">=</span><span class="token operator">&lt;</span>archetype-groupId<span class="token operator">></span>                \  -DarchetypeArtifactId<span class="token operator">=</span><span class="token operator">&lt;</span>archetype-artifactId<span class="token operator">></span>          \  -DarchetypeVersion<span class="token operator">=</span><span class="token operator">&lt;</span>archetype-version<span class="token operator">></span>                \  -DgroupId<span class="token operator">=</span><span class="token operator">&lt;</span>my.groupid<span class="token operator">></span>                                \  -DartifactId<span class="token operator">=</span><span class="token operator">&lt;</span>my-artifactId<span class="token operator">></span></code></pre><p>高级用法 <strong>mvn clean archetype:create-from-project</strong></p><p>执行图示如下：</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-iterm-GONbvt.png" alt="archetype-iterm-GONbvt"></p><p>执行后返回 IDEA 查看项目，在 <code>target/generated-sources</code> 目录下的 <code>archetype</code> 即生成的项目模版。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-afer-term-vP3Tz3.png" alt="archetype-afer-term-vP3Tz3"></p><p>结构如图所示：</p><ol><li>main/resources/archetype-resources：项目的模版，生成新项目，就是根据这块的代码进行生成的。<ol><li>.idea 无用，删除掉。</li><li><strong>rootArtifactId</strong>xxx 项目的各个 module</li></ol></li><li>main/resources/META-INF/maven/archetype-metadata.xml：模版工程的元数据配置。</li></ol><p>可以把 archetype 拷出去，这是一个单独的工程模版，拷出去之后，使用 IDEA 打开。</p><p>下面开始介绍 archetype 里面都有什么。</p><h3 id="archetype-模版项目介绍"><a href="#archetype-模版项目介绍" class="headerlink" title="archetype 模版项目介绍"></a>archetype 模版项目介绍</h3><p>使用 IDEA 打开之后发现，还是一个 Maven 项目。</p><h4 id="archetype-resources"><a href="#archetype-resources" class="headerlink" title="archetype-resources"></a>archetype-resources</h4><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-structure-xUdYE2.png" alt="archetype-structure-xUdYE2"></p><p>打开 pom 文件，可以看到里面 <code>${groupId}</code> 、 <code>${artifactId}</code> 、<code>${version}</code> 使用占位符指定的组织版本，这些就是新创建项目时指定的。</p><h4 id="archetype-metadata-xml"><a href="#archetype-metadata-xml" class="headerlink" title="archetype-metadata.xml"></a>archetype-metadata.xml</h4><p>archetype-metadata.xml 里面为元数据配置。</p><ul><li>fileSet：用来生成一些项目中的文件。如果文件或目录名称包含 <code>__property__</code> 模式，则将其替换为相应的属性值。</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>filtered</td><td>boolean</td><td>过滤文集，将指定文件直接复制不需要修改。<strong>默认值为：false。</strong></td></tr><tr><td>packaged</td><td>boolean</td><td>打包文件，指定文件将在package属性之前的目录结构中生成/复制。它们可以是非打包的，这意味着所选文件将在没有该前缀的情况下生成/复制。<strong>默认值为：false。</strong></td></tr><tr><td>encoding</td><td>String</td><td>过滤内容时使用的编码。</td></tr></tbody></table><p>fileSet 包含以下元素：</p><table><thead><tr><th>元素</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>directory</td><td>String</td><td>生成项目文件的目录</td></tr><tr><td>includes/include*</td><td>List<String></td><td>包含文件</td></tr><tr><td>excludes/exclude*</td><td>List<String></td><td>排除文件</td></tr></tbody></table><p>因为生成项目不需要 .idea *.iml 文件，所以直接删除：</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-metadata1-iVIvLq.png" alt="archetype-metadata1-iVIvLq"></p><ul><li>module 就是要生成的项目一共几个 module</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>The module’s artifactId.</td></tr><tr><td>dir</td><td>String</td><td>The module’s directory.</td></tr><tr><td>name</td><td>String</td><td>The module’s name.</td></tr></tbody></table><table><thead><tr><th>元素</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>fileSets/fileSet*</td><td>List<FileSet></td><td>文件</td></tr><tr><td>modules/module*</td><td>List<ModuleDescriptor></td><td>模块</td></tr></tbody></table><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-metadata2-HCnJqd.png" alt="archetype-metadata2-HCnJqd"></p><p>可以看出里面就是自己的项目模版。</p><p><code>__rootArtifactId__-controller</code> 在生成的时候，就会根据传入的 artifactId 生成指定的 module 名字。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>clean install </li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-clean-install-zbua0z.png" alt="archetype-clean-install-zbua0z"></p><ol start="2"><li>IDEA Add Archetype</li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-maven-b3sZ6a.png" alt="archetype-maven-b3sZ6a"></p><ol start="3"><li>选择使用 Archetype 生成新项目</li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-maven2-HDnFc4.png" alt="archetype-maven2-HDnFc4"></p><ol start="4"><li>填写新生成项目的名字等</li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-maven3-sbJlI1.png" alt="archetype-maven3-sbJlI1"></p><ol start="5"><li>生成新项目</li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-generate-5GUrpu.png" alt="archetype-generate-5GUrpu"></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><strong>Q:</strong> 如何自定义包路径？</p><p><strong>A:</strong> 可以使用 <code>requiredProperties</code> 自定义参数。通过传入自定义的参数，来生成自定的包路径。</p><p>比如发现新生成项目的包路径都是 <code>com.liuzhihang.archetype</code>，这样肯定是不行的，每个项目有每个项目自己的包路径。只需要做以下修改：</p><ol><li>将 <code>requiredProperties</code> 添加到项目中，然后添加新变量 <code>middlePackage</code>。</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>requiredProperties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--使用archetype时候必须要求输入的参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>requiredProperty</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>groupId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--可以设置默认值，使用archetype会使用默认值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultValue</span><span class="token punctuation">></span></span>com.liuzhihang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defaultValue</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>requiredProperty</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>requiredProperty</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>package<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultValue</span><span class="token punctuation">></span></span>com.liuzhihang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defaultValue</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>requiredProperty</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>requiredProperty</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middlePackage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultValue</span><span class="token punctuation">></span></span>${rootArtifactId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defaultValue</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>requiredProperty</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>requiredProperties</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>修改模版的文件名</li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-middle-mH0Gzf.png" alt="archetype-middle-mH0Gzf"></p><p>如果文件或目录名称包含 <code>__property__</code> 模式，则将其替换为相应的属性值。到这里还不行，因为生成的包名还没改。</p><ol start="3"><li>修改内部文件的包路径。包括 <strong>.java</strong> 、** .xml** 、** .properties** 等。</li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-change-middle-3C0Msb.png" alt="archetype-change-middle-3C0Msb"></p><ol start="4"><li>重新 clean install</li></ol><p>注：此时可能会报错，需要在 <code>src/test/resources/projects/basic/archetype.properties</code> 下添加 <code>middlePackage=basic</code> 再重新尝试下。</p><p>在生成时注意指定 <code>middlePackage</code> 属性。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-middle-1-r8qOco.png" alt="archetype-middle-1-r8qOco"></p><p><strong>Q:</strong> 我想自定义 Application 的名字怎么弄？</p><p><strong>A:</strong> 同样使用 <code>requiredProperties</code> 自定义参数。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>requiredProperty</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>appName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>requiredProperty</span><span class="token punctuation">></span></span></code></pre><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-app-name-Vt9Xj3.png" alt="archetype-app-name-Vt9Xj3"></p><p>当然也可以起一个通用的名字。</p><p><strong>Q:</strong> 别的小伙伴怎么用？</p><p><strong>A:</strong> 当然是 deploy 到私服了， 在 pom 里面添加如下配置，指定自己公司的私服。deploy ，这样就可以和小伙伴一起愉快的使用啦。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 远程仓库 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus Release Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://liuzhihang.com:xxxx/repository/maven-releases/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus Snapshot Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://liuzhihang.com:xxxx/repository/maven-snapshots/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">></span></span></code></pre><p><strong>Q:</strong> 我要怎么从 IDEA 删除 Archetype ​？</p><p><strong>A:</strong> 这么好用怎么舍得删除​呢？只要找到以下路径</p><pre class=" language-bash"><code class="language-bash">liuzhihang % <span class="token operator">></span> <span class="token function">pwd</span>/Users/liuzhihang/Library/Caches/JetBrains/IntelliJIdea2020.1/Maven/Indices</code></pre><p>里面有一个 <code>UserArchetypes.xml​</code>， 打开，删除掉里面的 archetype 就行。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/archetype-delete-ZyQULu.png" alt="archetype-delete-ZyQULu"></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>Maven Archetype 文档：<a href="http://maven.apache.org/archetype/maven-archetype-plugin/index.html">http://maven.apache.org/archetype/maven-archetype-plugin/index.html</a></p><p>代码地址：<a href="https://github.com/liuzhihangs/archetype-demo">https://github.com/liuzhihangs/archetype-demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
          <category> Archetype </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
            <tag> Archetype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 别走！这里有个笔记：图文讲解 AQS ，一起看看 AQS 的源码……(图文较长)</title>
      <link href="/2020/07/12/source-code-aqs.html"/>
      <url>/2020/07/12/source-code-aqs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>AbstractQueuedSynchronizer 抽象队列同步器，简称 AQS 。是在 JUC 包下面一个非常重要的基础组件，JUC 包下面的并发锁 <code>ReentrantLock</code> <code>CountDownLatch</code> 等都是基于 AQS 实现的。所以想进一步研究锁的底层原理，非常有必要先了解 AQS 的原理。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>先看下 AQS 的类图结构，以及源码注释，有一定的大概了解之后再从源码入手，一步一步研究它的底层原理。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/aqs.png" alt="aqs"></p><p>“ 源码注释</p><p>提供了实现阻塞锁和相关同步器依靠先入先出（FIFO）等待队列（信号量，事件等）的框架。 此类中设计了一个对大多数基于 AQS 的同步器有用的原子变量来表示状态（state）。 子类必须定义 protected 方法来修改这个 state，并且定义 state 值在对象中的具体含义是 acquired 或 released。 考虑到这些，在这个类中的其他方法可以实现所有排队和阻塞机制。 子类可以保持其他状态字段，但只能使用方法 getState 、setState 和 compareAndSetState 以原子方式更新 state 。</p><p>子类应被定义为用于实现其封闭类的同步性能的非公共内部辅助类。 类AbstractQueuedSynchronizer没有实现任何同步接口。 相反，它定义了一些方法，如 acquireInterruptibly 可以通过具体的锁和相关同步器来调用适当履行其公共方法。</p><p>此类支持独占模式和共享模式。 在独占模式下，其他线程不能获取成功，共享模式下可以（但不一定）获取成功。 此类不“理解”，在机械意义上这些不同的是，当共享模式获取成功，则下一个等待的线程（如果存在）也必须确定它是否能够获取。 线程在不同模式下的等待共享相同的FIFO队列。 通常情况下，实现子类只支持其中一种模式，但同时使用两种模式也可以，例如ReadWriteLock 。 仅共享模式不需要定义支持未使用的模式的方法的子类。</p><p>这个类中定义了嵌套类 AbstractQueuedSynchronizer.ConditionObject ，可用于作为一个 Condition 由子类实现，并使用 isHeldExclusively 方法说明当前线程是否以独占方式进行，release()、 getState() acquire() 方法用于操作 state 原子变量。</p><p>此类提供检查和监视内部队列的方法，以及类似方法的条件对象。 根据需要进使用以用于它们的同步机制。</p><p>要使用这个类用作同步的基础上，需要重新定义以下方法，如使用，通过检查和或修改 getState 、setState 或 compareAndSetState 方法：</p><p>tryAcquire<br>tryRelease<br>tryAcquireShared<br>tryReleaseShared<br>isHeldExclusively</p><p>“</p><p>通过上面的注释可以得出大概的印象：</p><ol><li>内部依靠先入先出（FIFO） 等待队列。</li><li>存在 state 表示状态信息。state 值只能用 getState 、setState 和 compareAndSetState 方法以原子方式更新。</li><li>支持独占模式和共享模式，但具体需要子类实现具体支持哪种模式。</li><li>嵌套 AbstractQueuedSynchronizer.ConditionObject 可以作为 Condition 由子类实现。</li><li>子类需要重新定义  tryAcquire、tryRelease、tryAcquireShared、tryReleaseShared、isHeldExclusively 方法。</li></ol><h3 id="队列节点-Node"><a href="#队列节点-Node" class="headerlink" title="队列节点 Node"></a>队列节点 Node</h3><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/node-1P32mR.png" alt="node-1P32mR"></p><p>Node节点，包含以下元素：</p><table><thead><tr><th>元素</th><th>含义</th></tr></thead><tbody><tr><td>prev</td><td>上一个节点</td></tr><tr><td>next</td><td>下一个节点</td></tr><tr><td>thread</td><td>持有线程</td></tr><tr><td>waitStatus</td><td>节点状态</td></tr><tr><td>nextWaiter</td><td>下一个处于 CONDITION 状态的节点</td></tr></tbody></table><p>组合成等待队列则如下：</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/node-fifo.png" alt="node-fifo"></p><p>下面是等待队列节点的 Node 属性：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 节点正在共享模式下等待的标记</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node SHARED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指示节点正在以独占模式等待的标记</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node EXCLUSIVE <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指示线程已取消</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指示后续线程需要唤醒</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIGNAL    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指示线程正在等待条件</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONDITION <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指示下一次acquireShared应该无条件传播</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PROPAGATE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 状态字段，仅使用以下值     * SIGNAL -1 ：当前节点释放或者取消时，必须 unpark 他的后续节点。     * CANCELLED 1 ：由于超时（timeout）或中断（interrupt），该节点被取消。节点永远不会离开此状态。特别是，具有取消节点的线程永远不会再次阻塞。     * CONDITION -2 ：该节点目前在条件队列。 但它不会被用作同步队列节点，直到转移，转移时的状态将被设置为 0 。     * PROPAGATE -3 ：releaseShared 应该被传播到其他节点。      * 0：都不是     * 值以数字表示以简化使用，大多数时候可以检查符号（是否大于0）以简化使用     */</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 上一个节点</span>    <span class="token keyword">volatile</span> Node prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下一个节点</span>    <span class="token keyword">volatile</span> Node next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 节点持有线程</span>    <span class="token keyword">volatile</span> Thread thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 链接下一个等待条件节点，或特殊值共享</span>    Node nextWaiter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 节点是否处于 共享状态 是， 返回 true</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextWaiter <span class="token operator">==</span> SHARED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回前一个节点， 使用时 前一个节点不能为空</span>    <span class="token keyword">final</span> Node <span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NullPointerException <span class="token punctuation">{</span>        Node p <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Used to establish initial head or SHARED marker</span>    <span class="token punctuation">}</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">,</span> Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// Used by addWaiter</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> mode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">,</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Used by Condition</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> waitStatus<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 Node 节点中需要重点关注 waitStatus</p><ol><li>默认状态为 0；</li><li>waitStatus &gt; 0 (CANCELLED 1) 说明该节点超时或者中断了，需要从队列中移除；</li><li>waitStatus = -1 SIGNAL 当前线程的前一个节点的状态为 SIGNAL，则当前线程需要阻塞（unpark）；</li><li>waitStatus = -2 CONDITION -2 ：该节点目前在条件队列；</li><li>waitStatus = -3 PROPAGATE -3 ：releaseShared 应该被传播到其他节点，在共享锁模式下使用。</li></ol><p>了解完 Node 的结构之后，再了解下 AQS 结构，并从常用方法入手，逐步了解具体实现逻辑。</p><h3 id="AbstractQueuedSynchronizer"><a href="#AbstractQueuedSynchronizer" class="headerlink" title="AbstractQueuedSynchronizer"></a>AbstractQueuedSynchronizer</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractOwnableSynchronizer</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 等待队列的头，延迟初始化。 除了初始化，它是仅经由方法setHead修改。 注意：如果头存在，其waitStatus保证不会是 CANCELLED 状态</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待队列的尾部，延迟初始化。 仅在修改通过方法ENQ添加新节点等待。</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同步状态 </span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取状态</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置状态值</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">int</span> newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state <span class="token operator">=</span> newState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 原子更新状态值</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// See below for intrinsics setup to support this</span>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 AQS 中主要参数为：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>head</td><td>等待队列头</td></tr><tr><td>tail</td><td>等待队列尾</td></tr><tr><td>state</td><td>同步状态</td></tr></tbody></table><p>通过注释了解到，在 AQS 里主要分为两种操作模式，分别是：独占模式、共享模式，下面分别从两个不同的角度去分析源码。</p><table><thead><tr><th>操作</th><th>含义</th></tr></thead><tbody><tr><td>acquire</td><td>以独占模式获取，忽略中断。 通过调用至少一次实施tryAcquire ，在成功时返回。 否则，线程排队，可能重复查封和解封，调用tryAcquire直到成功为止。 这种方法可以用来实现方法Lock.lock 。</td></tr><tr><td>release</td><td>以独占模式释放。 通过疏通一个或多个线程，如果实现tryRelease返回true。 这种方法可以用来实现方法Lock.unlock 。</td></tr><tr><td>acquireShared</td><td>获取在共享模式下，忽略中断。 通过至少一次第一调用实现tryAcquireShared ，在成功时返回。 否则，线程排队，可能重复查封和解封，调用tryAcquireShared直到成功为止。</td></tr><tr><td>releaseShared</td><td>以共享模式释放。 通过疏通一个或多个线程，如果实现tryReleaseShared返回true。</td></tr></tbody></table><p>无论是共享模式还是独占模式在这里面都会用到 addWaiter 方法，将当前线程及模式创建排队节点。</p><h4 id="独占模式"><a href="#独占模式" class="headerlink" title="独占模式"></a>独占模式</h4><h5 id="获取独占资源-acquire"><a href="#获取独占资源-acquire" class="headerlink" title="获取独占资源 acquire"></a>获取独占资源 acquire</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// tryAcquire 尝试获取 state，获取失败则会加入到队列</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在独占模式下会尝试获取 state，当获取失败时会调用 acquireQueued(addWaiter(Node.EXCLUSIVE), arg)。</p><ol><li>tryAcquire(arg)，尝试获取 state 这块由子类自己实现，不同的子类逻辑不同，这块在介绍子类代码时会说明。</li><li>获取 state 失败后，会进行 acquireQueued(addWaiter(Node.EXCLUSIVE), arg)，这块代码可以拆分为两块：addWaiter(Node.EXCLUSIVE)，acquireQueued(node, arg)。</li><li>addWaiter(Node.EXCLUSIVE) 返回的是当前新创建的节点。</li><li>acquireQueued(node, arg) 线程获取锁失败，使用 addWaiter(Node.EXCLUSIVE) 放入等待队列，而 acquireQueued(node, arg) 使用循环，不断的为队列中的节点去尝试获取资源，直到获取成功或者被中断。</li></ol><p>总结获取资源主要分为三步：</p><ol><li>尝试获取资源</li><li>入队列</li><li>出队列</li></ol><p>尝试获取资源 <code>tryAcquire(arg)</code>，由子类实现，那下面则着手分别分析 <code>入队列</code>、<code>出队列</code>。</p><h6 id="入队列：addWaiter-Node-EXCLUSIVE"><a href="#入队列：addWaiter-Node-EXCLUSIVE" class="headerlink" title="入队列：addWaiter(Node.EXCLUSIVE)"></a>入队列：addWaiter(Node.EXCLUSIVE)</h6><p>使用 <code>addWaiter(Node.EXCLUSIVE)</code> 方法将节点插入到队列中，步骤如下：</p><ol><li>根据传入的模式创建节点</li><li>判断尾节点是否存在，不存在则需要使用 <code>enq(node)</code> 方法初始化节点，存在则直接<code>尝试</code>插入尾部。</li><li><code>尝试</code>插入尾部时使用 CAS 插入，防止并发情况，如果插入失败，会调用 <code>enq(node)</code> 自旋直到插入。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定位到队列末尾的 node</span>    Node pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 新节点的上一个节点 指向尾节点</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用 CAS 设置尾节点，tail 如果等于 pred 则更新为 node</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 更新成功则将 pred 的下一个节点指向 node</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 尾节点没有初始化，或竞争失败，自旋</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * tailOffset 也就是成员变量 tail 的值 * 此处相当于：比较 tail 的值和 expect 的值是否相等， 相等则更新为 update */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>Node expect<span class="token punctuation">,</span> Node update<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tailOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSetHead</span><span class="token punctuation">(</span>Node update<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> headOffset<span class="token punctuation">,</span> null<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 尾节点为空 需要初始化头节点，此时头尾节点是一个</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Must initialize</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不为空 循环赋值</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看完代码和注释肯定还是有点模糊，现在用图一步一步进行说明。</p><p>因为根据<code>初始尾节点是否为空</code>分为两种情况，这里使用两幅图：</p><ol><li>第一幅为第一次添加节点，此时 head 会延迟初始化；</li><li>第二幅图为已经存在队列，进行插入节点；</li><li>注意看代码，enq 方法返回的是<code>之前的尾节点</code>；</li><li>addWaiter 方法 返回的是<code>当前插入的新创建的节点</code>。</li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/aqs-addwaiter-1.png" alt="aqs-addwaiter-1"></p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/cas-add-waiter-02.png" alt="cas-add-waiter-02"></p><p>节点添加到队列之后，返回当前节点，而下一步则需要调用方法 <code>acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</code> 不断的去获取资源。</p><h6 id="出队列：acquireQueued-addWaiter-Node-EXCLUSIVE-arg"><a href="#出队列：acquireQueued-addWaiter-Node-EXCLUSIVE-arg" class="headerlink" title="出队列：acquireQueued(addWaiter(Node.EXCLUSIVE), arg)"></a>出队列：acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</h6><p>方法会通过循环不断尝试获取拿到资源，直到成功。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是否拿到资源</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 中断状态</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无限循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前节点之前的节点</span>            <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 前一个节点是头节点， 说明当前节点是 头节点的 next 即真实的第一个数据节点 （因为 head 是虚拟节点）</span>            <span class="token comment" spellcheck="true">// 然后再尝试获取资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取成功之后 将头指针指向当前节点</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                 p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// p 不是头节点， 或者 头节点未能获取到资源 （非公平情况下被别的节点抢占） </span>            <span class="token comment" spellcheck="true">// 判断 node 是否要被阻塞，</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>不断获取本节点的上一个节点是否为 head，因为 head 是虚拟节点，如果当前节点的上一个节点是 head 节点，则当前节点为 <code>第一个数据节点</code>；</li><li>第一个数据节点不断的去获取资源，获取成功，则将 head 指向当前节点；</li><li>当前节点不是头节点，或者 <code>tryAcquire(arg)</code> 失败（失败可能是非公平锁）。这时候需要判断前一个节点状态决定<code>当前节点是否要被阻塞</code>（前一个节点状态是否为 SIGNAL）。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 根据上一个节点的状态，判断当前线程是否应该被阻塞 * SIGNAL -1 ：当前节点释放或者取消时，必须 unpark 他的后续节点。 * CANCELLED 1 ：由于超时（timeout）或中断（interrupt），该节点被取消。节点永远不会离开此状态。特别是，具有取消节点的线程永远不会再次阻塞。 * CONDITION -2 ：该节点目前在条件队列。 但它不会被用作同步队列节点，直到转移，转移时的状态将被设置为 0 。 * PROPAGATE -3 ：releaseShared 应该被传播到其他节点。  * 0：都不是 * */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>Node pred<span class="token punctuation">,</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 前一个节点的等待状态</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 前一个节点需要 unpark 后续节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前节点处于取消状态</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将取消的节点从队列中移除</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置前一个节点为 SIGNAL 状态</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 <code>shouldParkAfterFailedAcquire</code> 方法中，会判断前一个节点的状态，同时取消在队列中当前节点前面无效的节点。</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/aqs-acquire.png" alt="aqs-acquire"></p><p>再继续阅读 出队列 acquireQueued 方法，发现有一个 finally 会判断状态后执行 <code>cancelAcquire(node);</code> ，也就是上面流程图中下面的红色方块。</p><h6 id="cancelAcquire-Node-node"><a href="#cancelAcquire-Node-node" class="headerlink" title="cancelAcquire(Node node)"></a>cancelAcquire(Node node)</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是否拿到资源</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 省略</span>        <span class="token comment" spellcheck="true">// 在 finally 会将当前节点置为取消状态</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 节点不存在 直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取消节点关联线程</span>    node<span class="token punctuation">.</span>thread <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//跳过已经取消的节点，获取当前节点之前的有效节点</span>    Node pred <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取当前节点之前的有效节点的下一个节点</span>    Node predNext <span class="token operator">=</span> pred<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前节点设置为取消</span>    node<span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> Node<span class="token punctuation">.</span>CANCELLED<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前节点如果是尾节点，则将最后一个有效节点设置为尾节点，并将 predNext 设置为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> pred<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">compareAndSetNext</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> predNext<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ws<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// pred 不是头节点(node 的上一个有效节点 不是 head) &amp;&amp; （ pred的状态是 SIGNAL ||  pred 的状态设置为 SIGNAL 成功 ） &amp;&amp; pred 的绑定线程不为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> head <span class="token operator">&amp;&amp;</span>         <span class="token punctuation">(</span><span class="token punctuation">(</span>ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">)</span> <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL <span class="token operator">||</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>         pred<span class="token punctuation">.</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前节点的后继节点</span>            Node next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 后继节点不为空 且 状态有效 将 pred 的 后继节点设置为 当前节点的后继节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> next<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">compareAndSetNext</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> predNext<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// node 的上一个有效节点 是 head， 或者其他情况 唤醒当前节点的下一个有效节点</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断当前节点状态</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 将节点状态更新为 0 </span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下一个节点， 一般是下一个节点应该就是需要唤醒的节点，即颁发证书。</span>    Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 大于 0  CANCELLED ： 线程已取消</span>    <span class="token comment" spellcheck="true">// 但是有可能 后继节点 为空或者被取消了。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从尾节点开始遍历，直到定位到 t.waitStatus &lt;= 0 的节点</span>        <span class="token comment" spellcheck="true">// 定位到后并不会停止，会继续执行，相当于找到最开始的那个需要唤醒的节点</span>        <span class="token comment" spellcheck="true">// t.waitStatus &lt;= 0 ： SIGNAL（ -1 后续线程需要释放） </span>        <span class="token comment" spellcheck="true">//                     CONDITION （ -2 线程正在等待条件） </span>        <span class="token comment" spellcheck="true">//                     PROPAGATE （ -3 releaseShared 应该被传播到其他节点）</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定位到需要唤醒的节点后 进行 unpark</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>流程分析：</p><ol><li>找到当前节点的前一个非无效节点 pred；</li><li>当前节点如果是尾节点，则将最后一个有效节点设置为尾节点，并将 predNext 设置为空；</li><li>pred 不是头节点 &amp;&amp; （ pred的状态是 SIGNAL ||  pred 的状态设置为 SIGNAL 成功 ） &amp;&amp; pred 的绑定线程不为空；</li><li>其他情况。</li></ol><p>下面分别画图：</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/1-RD0LEx.png" alt="1-RD0LEx"></p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/2-PHY9bi.png" alt="2-PHY9bi"></p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/3-rOnnvu.png" alt="3-rOnnvu"></p><p><strong>Q: 通过图可以看出来，只操作了 next 指针，但是没有操作 prev 指针，这是为什么呢？</strong></p><p><strong>A:</strong> 在 <code>出队列：acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</code> 方法中，<code>shouldParkAfterFailedAcquire</code> 方法会判断前一个节点的状态，同时取消在队列中当前节点前面无效的节点。这时候会移除之前的无效节点，此处也是为了防止指向一个已经被移除的节点。同时保证 prev 的稳定，有利于从 tail 开始遍历列表，这块在 <code>unparkSuccessor(node);</code> 中也可以看到是从后往前表里列表。</p><p><strong>Q: unparkSuccessor(Node node) 为什么从后往前遍历？</strong></p><p><strong>A:</strong></p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/AQS-8IDBPX.png" alt="AQS-8IDBPX"></p><p>在 <code>addWaiter(Node.EXCLUSIVE)</code> 插入新节点时，使用的是 <code>尾插法</code>，看红框部分，此时有可能还未指向next。</p><p><strong>Q: node.next = node; 这块导致 head不是指向最新节点，链表不就断了么？</strong><br><strong>A：</strong> acquireQueued 方法介绍中，里面有个循环，会不断尝试获取资源，成功之后会设置为 head。并且在 shouldParkAfterFailedAcquire 中也会清除当前节点前的无效节点。</p><h5 id="释放独占资源-release"><a href="#释放独占资源-release" class="headerlink" title="释放独占资源 release"></a>释放独占资源 release</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以独占模式释放。 通过释放一个或多个线程，如果实现tryRelease返回true。 这种方法可以用来实现方法Lock.unlock 。</p><ol><li>tryRelease(arg) 操作释放资源，同样是由子类实现，后面介绍子类时会进行说明。返回 true 说明资源现在已经没有线程持有了，其他节点可以尝试获取；</li><li>释放成功，且 head != null &amp;&amp; h.waitStatus != 0, 会继续执行 unparkSuccessor(h)；</li><li>这块会看到 只要 tryRelease(arg) 操作释放资源成功， 后面无论执行是否成功，都会返回 true，unparkSuccessor(h) 相当于只是附加操作。</li></ol><h4 id="共享模式"><a href="#共享模式" class="headerlink" title="共享模式"></a>共享模式</h4><h5 id="获取共享资源-acquireShared"><a href="#获取共享资源-acquireShared" class="headerlink" title="获取共享资源 acquireShared"></a>获取共享资源 acquireShared</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 小于 0 表示获取资源失败</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">doAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加到节点 此处是共享节点</span>    <span class="token keyword">final</span> Node node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>SHARED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据是否拿到资源 判断是否需要取消</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 返回前一个节点</span>            <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 再次尝试获取共享资源</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 表示获取成功</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 设置当前节点为头节点 并尝试唤醒后续节点</span>                    <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 释放头节点 GC 会回收</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span>                        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>tryAcquireShared(arg)，尝试获取资源，这块由子类实现；</li><li>返回值分为 3 种：<ol><li>小于 0: 表示失败；</li><li>等于 0: 表示共享模式获取资源成功，但后续的节点不能以共享模式获取成功; </li><li>大于 0: 表示共享模式获取资源成功，后续节点在共享模式获取也可能会成功，在这种情况下，后续等待线程必须检查可用性。</li></ol></li><li>在失败后会使用 <code>doAcquireShared(arg);</code> 不断获取资源；</li><li><code>final Node node = addWaiter(Node.SHARED);</code> 同样会创建节点；</li><li>在循环中不断判断前一个节点如果是 head，则尝试获取资源；</li><li>在共享模式下获取到资源后会使用 <code>setHeadAndPropagate(node, r);</code> 设置头节点，同时唤醒后续节点。</li></ol><h6 id="设置头节点，并传播唤醒后续节点"><a href="#设置头节点，并传播唤醒后续节点" class="headerlink" title="设置头节点，并传播唤醒后续节点"></a>设置头节点，并传播唤醒后续节点</h6><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// node 是当前节点</span><span class="token comment" spellcheck="true">// propagate 是 前一步 tryAcquireShared 的返回值 进来时 >=0</span><span class="token comment" spellcheck="true">// 大于 0: 表示共享模式获取资源成功，后续节点在共享模式获取也可能会成功，在这种情况下，后续等待线程必须检查可用性。</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> propagate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 记录下当前头节点</span>    Node h <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Record old head for check below</span>    <span class="token comment" spellcheck="true">// 设置传入 node 为头节点</span>    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断条件，唤醒后续节点</span>    <span class="token comment" spellcheck="true">// propagate > 0 有后续资源</span>    <span class="token comment" spellcheck="true">// h == null 旧的头节点 因为前面 addWaiter， 肯定不会为空，应该是防止 h.waitStatus &lt; 0 空指针的写法</span>    <span class="token comment" spellcheck="true">// (h = head) == null 当前的 头节点，再判断状态</span>    <span class="token comment" spellcheck="true">// waitStatus &lt; 0 后续节点就需要被唤醒</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>propagate <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> h <span class="token operator">==</span> null <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>        <span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后续节点为共享，则需要唤醒</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="doReleaseShared-释放共享资源"><a href="#doReleaseShared-释放共享资源" class="headerlink" title="doReleaseShared() 释放共享资源"></a>doReleaseShared() 释放共享资源</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从头开始</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断队列是否为空，就是刚初始化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> ws <span class="token operator">=</span> h<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// SIGNAL（ -1 后续线程需要释放）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将等待状态更新为 0 如果失败，会循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// loop to recheck cases</span>                <span class="token comment" spellcheck="true">// 唤醒后续节点， 同时将当前节点设置为 取消</span>                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果状态是 0 则会更新状态为 PROPAGATE</span>            <span class="token comment" spellcheck="true">// PROPAGATE （ -3 releaseShared 应该被传播到其他节点）</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Node<span class="token punctuation">.</span>PROPAGATE<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// loop on failed CAS</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断头节点有没有变化，有变化 是因为竞争，别的线程获取到了锁，会继续循环</span>        <span class="token comment" spellcheck="true">// 没有变化直接结束</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> head<span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">// loop if head changed</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>从头节点开始进行，如果 h != null &amp;&amp; h != tail 说明队列不是空或者刚初始化；</li><li>节点状态为 SIGNAL（ -1 ）说明后续线程需要释放；</li><li>会更改当前节点状态，成功后唤醒后续节点，失败则继续循环；</li><li>节点状态如果是 0 则更新为 PROPAGATE，会将状态传播。</li></ol><h5 id="释放共享资源-releaseShared"><a href="#释放共享资源-releaseShared" class="headerlink" title="释放共享资源 releaseShared"></a>释放共享资源 releaseShared</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 释放共享资源</span>        <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以共享模式释放。 通过释放一个或多个线程，如果实现tryReleaseShared返回true。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>Q: AQS 到底是什么？</strong><br><strong>A:</strong> AQS 内部提供了一个先入先出（FIFO）双向等待队列，内部依靠 Node 实现，并提供了在<code>独占模式</code>和<code>共享模式</code>下的出入队列的公共方法。而关于状态信息 state 的定义是由子类实现。tryAcquire、tryRelease、tryAcquireShared、tryReleaseShared等尝试获取资源操作都是由子类进行定义和实现的。而 AQS 中提供了子类获取资源之后的相关操作，包括节点 Node 的出入队列，自旋获取资源等等。</p><p><strong>Q: AQS 获取资源失败后会如何操作？</strong><br><strong>A:</strong> 线程获取资源失败后，会放到等待队列中，在队列中会不断尝试获取资源（自旋），说明线程只是进入等待状态，后面还是可以再次获取资源的。</p><p><strong>Q: AQS 等待队列的数据结构是什么？</strong><br><strong>A:</strong> CLH变体的先入先出（FIFO）双向等待队列。（CLH锁是一个自旋锁。能确保无饥饿性。提供先来先服务的公平性。是一种基于链表的可扩展、高性能、公平的自旋锁，申请线程仅仅在本地变量上自旋，它不断轮询前驱的状态，如果发现前驱释放了锁就结束自旋。）</p><p><strong>Q: AQS 等待队列中的节点如何获取获取和释放资源的？</strong><br><strong>A:</strong> 可以看下<code>独占模式</code>中的讲述过程，通过代码梳理。</p><p>本文分别从 <code>独占模式</code> 和 <code>共享模式</code>介绍的 AQS 基本逻辑，并通过源码和作图理解基本思路。但是并没有对需要子类实现的业务逻辑做介绍。这块会在后面介绍 <code>ReentrantLock</code>、<code>CountDownLatch</code> 等子类的时候做介绍。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- JUC 包下工具类，它的名字叫 LockSupport ！你造么？</title>
      <link href="/2020/07/05/source-code-locksupport.html"/>
      <url>/2020/07/05/source-code-locksupport.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>LockSupport 是 JUC 中常用的一个工具类，主要作用是挂起和唤醒线程。在阅读 JUC 源码中经常看到，所以很有必要了解一下。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>基本线程阻塞原语创建锁和其他同步类。Basic thread blocking primitives for creating locks and other synchronization classes.</p></blockquote><blockquote><p>LockSupport 类每个使用它的线程关联一个许可（在意义上的Semaphore类）。 如果许可可用，调用 park 将立即返回，并在此过程中消费它; 否则可能阻塞。如果许可不是可用，可以调用 unpark 使得许可可用。（但与Semaphore不同，许可不能累积。最多有一个。）</p><p>方法 park 和 unpark 提供了阻塞的有效手段和解锁线程不会遇到死锁问题，而 Thread.suspend 和 Thread.resume 是不能用于这种目的：因为许可的存在，一个线程调用 park 和另一个线程试图 unpark 它之间的竞争将保持活性。 此外，如果调用者线程被中断，park 将返回，并且支持设置超时。 该 park 方法也可能返回在其他任何时间，“毫无理由”，因此通常必须在一个循环中调用的返回后重新检查条件。 在这个意义上park作为“忙碌等待”不会浪费太多的时间自旋的优化，但必须以配对 unpark 使用。</p><p>这三种形式的 park 还支持 blocker 对象参数。而线程被阻塞时是允许使用监测和诊断工具，以确定线程被阻塞的原因。（诊断工具可以使用getBlocker(Thread) 方法 。）同时推荐使用带有 blocker 参数的 park方法，通常做法是 blocker 被设置为 this 。</p></blockquote><p>上面的意思总结下来个人理解是：</p><ol><li>许可（permit）的上限是1，也就是说只有 0 或 1 。</li><li>park: 没有许可的时候，permit 为 0 ，调用 park 会阻塞；有许可的时候，permit 为 1 ， 调用 park 会扣除一个许可，然后返回。</li><li>unpark：没有许可的时候，permit 为 0 ，调用 unpark 会增加一个许可，因为许可上限是 1 ， 所以调用多次也只会为 1 个。</li><li>线程初始的时候是没有许可的。</li><li>park 的当前线程如果被中断，会立即返回，并不会抛出中断异常。</li><li>park 方法的调用一般要放在一个循环判断体里面。</li></ol><p>大概如图所示：</p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/rGm1AX.png" align=center /><p>下面是源码注释中的案例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * FIFO 独占锁 */</span><span class="token keyword">class</span> <span class="token class-name">FIFOMutex</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicBoolean locked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> Queue<span class="token operator">&lt;</span>Thread<span class="token operator">></span> waiters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token operator">&lt;</span>Thread<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">boolean</span> wasInterrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     waiters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Block while not first in queue or cannot acquire lock</span>     <span class="token comment" spellcheck="true">// 不在队列头，或者锁被占用，则阻塞， 就是只有队列头的可以获得锁</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>waiters<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current <span class="token operator">||</span> <span class="token operator">!</span>locked<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ignore interrupts while waiting</span>         wasInterrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     waiters<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>wasInterrupted<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// reassert interrupt status on exit</span>       current<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     locked<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>waiters<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="线程初始有没有许可？"><a href="#线程初始有没有许可？" class="headerlink" title="线程初始有没有许可？"></a>线程初始有没有许可？</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSupportTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LockSupport park 之后……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>执行后会发现，代码在 park 处阻塞。说明，线程初始是没有许可的。</li></ol><h4 id="添加许可并消耗许可"><a href="#添加许可并消耗许可" class="headerlink" title="添加许可并消耗许可"></a>添加许可并消耗许可</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSupportTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 - park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LockSupport park 之后……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSupportTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程 "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始执行 park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程 "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行 park 结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保证 上面线程先执行，然后再主线程</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行 unpark(thread)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 unpark(thread) 结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过上面示例可以看出：</p><ol><li>执行 unpark 可以进行给予指定线程一个证书。</li><li>线程当前被 park 阻塞，此时给予证书之后， park 会消耗证书，然后继续执行。</li></ol><h4 id="许可上限为-1"><a href="#许可上限为-1" class="headerlink" title="许可上限为 1"></a>许可上限为 1</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSupportTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unpark 1次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unpark 2次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 - park 1 次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 - park 2 次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LockSupport park 之后……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>线程阻塞，可以看出 permit 只能有一个</li></ol><h4 id="中断可以使-park-继续执行并不会抛出异常"><a href="#中断可以使-park-继续执行并不会抛出异常" class="headerlink" title="中断可以使 park 继续执行并不会抛出异常"></a>中断可以使 park 继续执行并不会抛出异常</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSupportTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程 "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始执行 park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程 "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行 park 结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程 "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始执行 park 第二次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程 "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行 park 第二次 结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 保证 上面线程先执行，然后再主线程</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行 unpark(thread)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// LockSupport.unpark(thread);</span>            thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 unpark(thread) 结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-text"><code class="language-text">/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/bin/java ...线程 Thread-0开始执行 park开始执行 unpark(thread)线程 Thread-0执行 park 结束线程 Thread-0开始执行 park 第二次线程 Thread-0执行 park 第二次 结束执行 unpark(thread) 结束</code></pre><ol><li>可以看出线程中断，park 会继续执行，并且没有抛出异常。</li><li>thread.interrupt(); 调用之后， 设置线程中断标示，unpark 没有清除中断标示，第二个 park 也会继续执行。</li></ol><h4 id="使用诊断工具"><a href="#使用诊断工具" class="headerlink" title="使用诊断工具"></a>使用诊断工具</h4><pre class=" language-bash"><code class="language-bash">liuzhihang % <span class="token operator">></span> jps76690 LockSupportTest77130 Jpsliuzhihang % <span class="token operator">></span> jstack 77265<span class="token punctuation">..</span>.<span class="token string">"main"</span> <span class="token comment" spellcheck="true">#1 prio=5 os_prio=31 tid=0x00007f7f3e80a000 nid=0xe03 waiting on condition [0x000070000dfcd000]</span>   java.lang.Thread.State: WAITING <span class="token punctuation">(</span>parking<span class="token punctuation">)</span>        at sun.misc.Unsafe.park<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>        at java.util.concurrent.locks.LockSupport.park<span class="token punctuation">(</span>LockSupport.java:304<span class="token punctuation">)</span>        at com.liuzhihang.source.LockSupportTest.main<span class="token punctuation">(</span>LockSupportTest.java:14<span class="token punctuation">)</span></code></pre><ol><li>中间省略部分，但是可以看出线程进入 <code>WAITING</code> 状态</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSupport</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe UNSAFE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 为线程 thread 设置一个许可     * 无许可，则添加一个许可，有许可，则不添加     * 如果线程因为 park 被阻塞， 添加许可之后，会解除阻塞状态     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unpark</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span>            UNSAFE<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有许可，则使用该许可     * 没有许可，阻塞线程，直到获得许可     * 传递 blocker 是为了方便使用诊断工具     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span>Object blocker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> blocker<span class="token punctuation">)</span><span class="token punctuation">;</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置线程的 blocker 属性     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setBlocker</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Even though volatile, hotspot doesn't need a write barrier here.</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> parkBlockerOffset<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>LockSupport 的 park unpark 方法，实际调用的是底层 Unsafe 类的 native 方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Unsafe</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">unpark</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>既然调用了 Unsafe 到此处肯定不能善罢甘休。</p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/ffecad2c8644bab7d152be118c31722d.jpg" align=center /><h4 id="hotspot-源码"><a href="#hotspot-源码" class="headerlink" title="hotspot 源码"></a>hotspot 源码</h4><p>这块是下载的官方包中的源码，阅读并查阅资料了解的大概逻辑，不清楚之处，希望指导出来。</p><p>也可以直接跳过直接看结论。</p><p>查看jdk源码<br><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/5a83b7215107/src/share/vm/runtime/park.hpp">http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/5a83b7215107/src/share/vm/runtime/park.hpp</a></p><p>这块在以 os_linux 代码为例<br><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/5a83b7215107/src/os/linux/vm/os_linux.cpp">http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/5a83b7215107/src/os/linux/vm/os_linux.cpp</a></p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/c-parker.png" align=center /><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/c-park.png" align=center /><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/c-unpark.png" align=center /><ol><li>在底层维护了一个 <code>_counter</code> 通过更新 <code>_counter</code> 的值来标示是否有证明。</li><li>在 park 时，判断 <code>_counter</code> 为 0，则阻塞等待，为 1 则获得更新为 0 并返回。</li><li>在 unpark 时，判断 <code>_counter</code> 为 0，则给予凭证，并唤醒线程，为 1 则直接返回。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结也是和预想的是相同的。</p><ol><li>许可（permit）的上限是1，也就是说只有 0 或 1 。</li><li>park: 没有许可的时候，permit 为 0 ，调用 park 会阻塞；有许可的时候，permit 为 1 ， 调用 park 会扣除一个许可，然后返回。</li><li>unpark：没有许可的时候，permit 为 0 ，调用 unpark 会增加一个许可，因为许可上限是 1 ， 所以调用多次也只会为 1 个。</li><li>线程初始的时候是没有许可的。</li><li>park 的当前线程如果被中断，会立即返回，并不会抛出中断异常。</li></ol><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul><li>park/unpark 和 wait/notify 区别</li></ul><ol><li>park 阻塞当前线程，unpark 唤醒指定线程。</li><li>wait() 需要结合锁使用，并释放锁资源，如果没有设置超时时间，则需要 notify() 唤醒。而 notify() 是随机唤醒线程。 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- JDK 8 新增的 LongAdder，得过来看一下！</title>
      <link href="/2020/06/28/source-code-longadder.html"/>
      <url>/2020/06/28/source-code-longadder.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在介绍 AtomicInteger 时，已经说明在高并发下大量线程去竞争更新同一个原子变量时，因为只有一个线程能够更新成功，其他的线程在竞争失败后，只能一直循环，不断的进行 CAS 尝试，从而浪费了 CPU 资源。而在 JDK 8 中新增了 LongAdder 用来解决高并发下变量的原子操作。下面同样通过阅读源码来了解 LongAdder 。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一个或多个变量共同维持初值为 0 总和。 当跨线程竞争更新时，变量集可以动态增长以减少竞争。 方法 sum 返回当前变量集的总和。</p><p>当多个线程更新时，这个类是通常优选 AtomicLong ，比如用于收集统计信息，不用于细粒度同步控制的共同总和。 在低更新竞争，这两个类具有相似的特征。 但在高更新竞争时，使用 LongAdder 性能要高于 AtomicLong，同样要消耗更高的空间为代价。</p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/longadder-uml.png" align=center /><p>LongAdder 继承了 Striped64，内部维护一个 Cells 数组，相当于多个 Cell 变量， 每个 Cell 里面都有一个初始值为 0 的 long 型变量。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="Cell-类"><a href="#Cell-类" class="headerlink" title="Cell 类"></a>Cell 类</h4><p>Cell 类 是 Striped64 的静态内部类。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Contended <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Cell</span> <span class="token punctuation">{</span>    <span class="token keyword">volatile</span> <span class="token keyword">long</span> value<span class="token punctuation">;</span>    <span class="token function">Cell</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> value <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">cas</span><span class="token punctuation">(</span><span class="token keyword">long</span> cmp<span class="token punctuation">,</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Unsafe mechanics</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe UNSAFE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            UNSAFE <span class="token operator">=</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> ak <span class="token operator">=</span> Cell<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>            valueOffset <span class="token operator">=</span> UNSAFE<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>                <span class="token punctuation">(</span>ak<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>Cell 使用 @sun.misc.Contended 注解。</li><li>内部维护一个被 volatile 修饰的 long 型 value 。</li><li>提供 cas 方法，更新value。</li></ol><p>其中 @sun.misc.Contended 注解作用是为了减少缓存争用。什么是缓存争用，这里只做下简要介绍。</p><blockquote><p>伪共享<br>CPU 存在多级缓存，其中最小存储单元是 Cache Line，每个 Cache Line 能存储 64 个字节的数据。<br>在多线程场景下，A B 两个线程数据如果被存储到同一个 Cache Line 上，此时 A B 更新各自的数据，就会发生缓存争用，导致多个线程之间相互牵制，变成了串行程序，降低了并发。<br>@sun.misc.Contended 注解，则可以保证该变量独占一个 Cache Line。<br>详细可参考：<a href="http://openjdk.java.net/jeps/142">http://openjdk.java.net/jeps/142</a></p></blockquote><h4 id="Striped64-核心属性"><a href="#Striped64-核心属性" class="headerlink" title="Striped64 核心属性"></a>Striped64 核心属性</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Striped64</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** CPU 的数量，以限制表大小 */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NCPU <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * cell 数组，当非空时，大小是 2 的幂。     */</span>    <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> cells<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Base 值，在无争用时使用，表初始化竞赛期间的后备。使用 CAS 更新      */</span>    <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> base<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 调整大小和创建Cells时自旋锁（通过CAS锁定）使用。     */</span>    <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> cellsBusy<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Striped64 类主要提供以下几个属性：</p><ol><li>NCPU：CPU 的数量，以限制表大小。</li><li>cells：Cell[] cell 数组，当非空时，大小是 2 的幂。</li><li>base：long 型，Base 值，在无争用时使用，表初始化竞赛期间的后备。使用 CAS 更新。</li><li>cellsBusy：调整大小和创建Cells时自旋锁（通过CAS锁定）使用。</li></ol><p>下面看是进入核心逻辑：</p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/uFCfpw.gif" align=center /><h4 id="LongAdder-add"><a href="#LongAdder-add" class="headerlink" title="LongAdder#add"></a>LongAdder#add</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongAdder</span> <span class="token keyword">extends</span> <span class="token class-name">Striped64</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> Cell a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// cells 是 数组，base 是基础值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">casBase</span><span class="token punctuation">(</span>b <span class="token operator">=</span> base<span class="token punctuation">,</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> uncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> as<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>                <span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span>                <span class="token operator">!</span><span class="token punctuation">(</span>uncontended <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">longAccumulate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> null<span class="token punctuation">,</span> uncontended<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Striped64</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用 CAS 更新 BASE 的值</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">casBase</span><span class="token punctuation">(</span><span class="token keyword">long</span> cmp<span class="token punctuation">,</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> BASE<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回当前线程的探测值。 由于包装限制，从ThreadLocalRandom复制</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PROBE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/longadder-add.png" align=center /><ol><li>首先会对 Base 值进行 CAS 更新，当 Base 发生竞争时， 会更新数组内的 Cell 。</li><li>数组未初始化，Cell 未初始化， Cell 更新失败，即 Cell 也发生竞争时，会调用 Striped64 的 longAccumulate 方法。</li></ol><h4 id="Striped64-longAccumulate"><a href="#Striped64-longAccumulate" class="headerlink" title="Striped64#longAccumulate"></a>Striped64#longAccumulate</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Striped64</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * x 要增加的值     * wasUncontended 有没有发生竞争      */</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">longAccumulate</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> LongBinaryOperator fn<span class="token punctuation">,</span> <span class="token keyword">boolean</span> wasUncontended<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前线程有无初始化线程探测值， 给当前线程生成一个 非 0 探测值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// force initialization</span>            h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// True if last slot nonempty</span>        <span class="token comment" spellcheck="true">// 循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> Cell a<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 数组不为空切数组长度大于 0</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> as<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// (n - 1) &amp; h 获取到索引，索引处 cell 是否为 null， cell未初始化</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 判断 cellsBusy 是否为 0</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// Try to attach new Cell</span>                        Cell r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Optimistically create</span>                        <span class="token comment" spellcheck="true">// cellsBusy == 0 且 使用 casCellsBusy 方法将其更新为 1，失败会继续循环</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">boolean</span> created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// Recheck under lock</span>                                Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> j<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 重新检查状态 并创建</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rs <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> rs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rs<span class="token punctuation">[</span>j <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    rs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>                                    created <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 创建完成之后， 改回 cellsBusy 值</span>                                cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>created<span class="token punctuation">)</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 未创建继续循环</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// Slot is now non-empty</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 传入的 wasUncontended 为 false 即发生碰撞了， 修改为未碰撞， 此处会继续循环，走到下一步，相当于会一直循环这个 cell</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasUncontended<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// CAS already known to fail</span>                    wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Continue after rehash</span>                <span class="token comment" spellcheck="true">// cas 更新 cell 的 value， 成功则返回</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span> fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 数组到最大长度 即大于等于 CPU 数量， 或者 cells 数组被改变，</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> NCPU <span class="token operator">||</span> cells <span class="token operator">!=</span> as<span class="token punctuation">)</span>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// At max size or stale</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>collide<span class="token punctuation">)</span>                    collide <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 乐观锁 进行扩容</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Expand table unless stale</span>                            Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                                rs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                            cells <span class="token operator">=</span> rs<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// Retry with expanded table</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 当前探针值不能操作成功，则重新设置一个进行尝试</span>                h <span class="token operator">=</span> <span class="token function">advanceProbe</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 没有加 cellsBusy 乐观锁 且 没有初始化，且获得锁成功（此时 cellsBusy == 1）</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cells <span class="token operator">==</span> as <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">boolean</span> init <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                           <span class="token comment" spellcheck="true">// Initialize table</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        rs<span class="token punctuation">[</span>h <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                        cells <span class="token operator">=</span> rs<span class="token punctuation">;</span>                        init <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 尝试在base上累加</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casBase</span><span class="token punctuation">(</span>v <span class="token operator">=</span> base<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span> fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// Fall back on using base</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>longAccumulate 方法一共有三种情况</p><ol><li><code>(as = cells) != null &amp;&amp; (n = as.length) &gt; 0</code> 数组不为空且长度大于 0 。<ol><li>获取索引处的 cell ， cell 为空则进行初始化。</li><li>cell 不为空，使用 cas 更新， 成功 <code>break;</code> 跳出循环， 失败则还在循环内，会一直尝试。</li><li>collide 指是否发生冲突，冲突后会进行重试。</li><li>冲突后会尝试获得锁并进行扩容，扩容长度为原来的 2 倍，然后继续重试。</li><li>获得锁失败（说明其他线程在扩容）会重新进行计算探针值。</li></ol></li><li><code>cellsBusy == 0 &amp;&amp; cells == as &amp;&amp; casCellsBusy()</code> 数组为空，获得乐观锁成功。<ol><li>直接初始化数组。</li><li>初始数组长度为 2 。</li></ol></li><li><code>casBase(v = base, ((fn == null) ? v + x : fn.applyAsLong(v, x)))</code> 获得乐观锁失败。<ol><li>说明有其他线程在初始化数组，直接 CAS 更新 base 。</li></ol></li></ol><h4 id="LongAdder-sum"><a href="#LongAdder-sum" class="headerlink" title="LongAdder#sum"></a>LongAdder#sum</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongAdder</span> <span class="token keyword">extends</span> <span class="token class-name">Striped64</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> as <span class="token operator">=</span> cells<span class="token punctuation">;</span> Cell a<span class="token punctuation">;</span>        <span class="token keyword">long</span> sum <span class="token operator">=</span> base<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> as<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    sum <span class="token operator">+=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>数组为空，说明没有发生竞争，直接返回 base 。</li><li>数组不为空，说明发生竞争，累加 cell 的 value 和 base 的和进行返回。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><ol><li>LongAdder 继承了 Striped64，内部维护一个 Cells 数组，相当于多个 Cell 变量， 每个 Cell 里面都有一个初始值为 0 的 long 型变量。</li><li>未发生竞争时（Cells 数组未初始化），是对 base 变量进行原子操作。</li><li>发生竞争时，每个线程对自己的 Cell 变量的 value 进行原子操作。</li></ol><h4 id="如何确定哪个线程操作哪个-cell？"><a href="#如何确定哪个线程操作哪个-cell？" class="headerlink" title="如何确定哪个线程操作哪个 cell？"></a>如何确定哪个线程操作哪个 cell？</h4><p>通过 <code>getProbe()</code> 方法获取该线程的探测值，然后和数组长度 <code>n - 1</code> 做 <code>&amp;</code> 操作 (n - 1) &amp; h 。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PROBE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Cells-数组初始化及扩容？"><a href="#Cells-数组初始化及扩容？" class="headerlink" title="Cells 数组初始化及扩容？"></a>Cells 数组初始化及扩容？</h4><p>初始化扩容时会判断 <code>cellsBusy</code>， cellsBusy 使用 <code>volatile</code> 修饰，保证线程见可见性，同时使用 CAS 进行更新。 0 表示空闲，1 表示正在初始化或扩容。</p><p>初始化时会创建长度为 2 的 Cell 数组。扩容是创建一个长度是原数组长度 2 倍的新数组，并循环赋值。</p><p>如果线程访问分配的 Cell 元素有冲突后，会使用 <code>advanceProbe()</code> 方法重新获取探测值，再次进行尝试。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>在高并发情况下，需要相对高的性能，同时数据准确性要求不高，可以考虑使用 LongAdder。</p><p>当要保证线程安全，并允许一定的性能损耗时，并对数据准确性要求较高，优先使用 AtomicLong。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 请介绍下你了解的ThreadLocal，它的底层原理！</title>
      <link href="/2020/06/21/source-code-threadlocal.html"/>
      <url>/2020/06/21/source-code-threadlocal.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><p>业务开发中经常使用 ThreadLocal 来存储用户信息等线程私有对象… ThreadLocal 内部构造是什么样子的？为什么可以线程私有？常说的内存泄露又是怎么回事？</p><p>公众号：liuzhihangs ，记录工作学习中的技术、开发及源码笔记；时不时分享一些生活中的见闻感悟。欢迎大佬来指导！</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>ThreadLocal 类提供了线程局部变量。和正常对象不同的是，每个线程都可以访问 get()、set() 方法，获取独属于自己的副本。 ThreadLocal 实例通常是类中的私有静态字段，并且其状态和线程关联。<br>每个线程都保持对其线程局部变量副本的隐式引用，只要线程是活动的并且 ThreadLocal 实例访问; 一个线程消失之后，所有的线程局部实例的副本都会被垃圾回收（除非存在对这些副本的其他引用）。</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>有这么一种使用场景，收到 web 请求，先进行 token 验证，而这个 token，可以解析出用户 user 的信息。所以我这边一般是这样使用的：</p><ol><li>自定义注解， <code>@CheckToken</code> ， 标识该方法需要校验 token。</li><li>在 <code>Interceptor</code>（拦截器）中检查，如果方法有 <code>@CheckToken</code> 注解则校验 token。</li><li>从Header中获取 <code>Authorization</code> ，请求第三方或者自己的逻辑校验 token ，并解析成 user。</li><li>将user放到<code>ThreadLocal</code>中。</li><li>controller、service 在后续使用中， 如果需要 user 信息，可以直接从 <code>ThreadLocal</code> 中获取。</li><li>使用结束后进行remove。</li></ol><h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalUserUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用户信息保存至 ThreadLocal 中     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>User<span class="token operator">></span> USER_THREAD_LOCAL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        USER_THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> User <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        USER_THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 1. 加上注解 CheckToken * 只有方法， 类忽略 */</span><span class="token annotation punctuation">@CheckToken</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/doXxx"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Result<span class="token operator">&lt;</span>Resp<span class="token operator">></span> <span class="token function">doXxx</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Req req<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Resp resp <span class="token operator">=</span> xxxService<span class="token punctuation">.</span><span class="token function">doXxx</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 2. 3. 4. */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest arg0<span class="token punctuation">,</span> HttpServletResponse arg1<span class="token punctuation">,</span> Object arg2<span class="token punctuation">,</span> Exception arg3<span class="token punctuation">)</span>            <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        LocalUserUtils<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 请求方法是否存在注解</span>        <span class="token keyword">boolean</span> assignableFrom <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>assignableFrom<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        CheckToken checkToken <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            checkToken <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">)</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodAnnotation</span><span class="token punctuation">(</span>CheckToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 没有加注解 直接放过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>checkToken <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从Header中获取Authorization</span>        String authorization <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"header authorization : {}"</span><span class="token punctuation">,</span> authorization<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>authorization<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"从Header中获取Authorization失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> CustomExceptionEnum<span class="token punctuation">.</span>NOT_HAVE_TOKEN<span class="token punctuation">.</span><span class="token function">throwCustomException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        User user <span class="token operator">=</span> xxxUserService<span class="token punctuation">.</span><span class="token function">checkAuthorization</span><span class="token punctuation">(</span>authorization<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 放到</span>        LocalUserUtils<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 5. 使用 * 只有方法， 类忽略 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Resp <span class="token function">doXxx</span><span class="token punctuation">(</span>Req req<span class="token punctuation">)</span> <span class="token punctuation">{</span>    User user <span class="token operator">=</span> LocalUserUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// do something ...</span>    <span class="token keyword">return</span> resp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/640.jpeg"  div align=center /><h4 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h4><ol><li>为什么可以线程私有？</li><li>为什么建议声明为静态？</li><li>为什么强制使用后必须remove？</li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/19.png" alt="19"></p><p>图 | 阿里巴巴 - Java开发手册（截图）</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/6.png" alt="6"></p><p>图 | 阿里巴巴 - Java开发手册（截图）</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略 ...</span>    ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap threadLocals <span class="token operator">=</span> null<span class="token punctuation">;</span>    ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap inheritableThreadLocals <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略 ...</span><span class="token punctuation">}</span></code></pre><p>可以看出 <code>Thread</code> 对象中声明了 <code>ThreadLocal.ThreadLocalMap</code> 对象，每个线程都有自己的工作内存，每个线程都有自己的 <code>ThreadLocal. ThreadLocalMap</code> 对象，所以在线程之间是互相<code>隔离</code>的。</p><h4 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h4><p>ThreadLocal则是一个泛型类，同时提供 <code>set()</code>、<code>get()</code>、<code>remove()</code> 等<code>静态</code>方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 线程本地hashCode</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadLocalHashCode <span class="token operator">=</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取此线程局部变量的当前线程副本中的值</span>    <span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置当前线程的此线程局部变量的复制到指定的值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除当前线程的此线程局部变量的值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ThreadLocalMap只是用来维持线程本地值的定制Map</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="set-T-value-方法"><a href="#set-T-value-方法" class="headerlink" title="set(T value)方法"></a>set(T value)方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前线程</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取当前线程的 threadLocals 属性</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 存在则赋值</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// 不存在则直接创建</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根据线程获取当前线程的ThreadLocalMap</span>ThreadLocalMap <span class="token function">getMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建ThreadLocalMap 并赋值给当前线程的threadLocals字段</span><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">,</span> T firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>1.<code>Thread.currentThread()</code> 先获取到当前线程。<br>2. 获取当前线程的 <code>threadLocals</code> 属性，即 <code>ThreadLocalMap</code>。<br>3. 判断 Map 是否存在，存在则赋值，不存在则创建对象。</p><h5 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前线程</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取当前线程的 threadLocals 属性</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// map不为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据当前ThreadLocal获取的ThreadLocalMap的Entry节点</span>        ThreadLocalMap<span class="token punctuation">.</span>Entry e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取节点的value 并返回</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置初始值并返回 （null）</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>1.<code>Thread.currentThread()</code> 先获取到当前线程。<br>2. 获取当前线程的 <code>threadLocals</code> 属性，即 <code>ThreadLocalMap</code> 。<br>3. 判断 Map 不为空，根据当前 <code>ThreadLocal</code> 对象获取 <code>ThreadLocalMap.Entry</code> 节点, 从节点中获取 value。<br>4.<code>ThreadLocalMap</code> 为空或者 <code>ThreadLocalMap.Entry</code> 为空，则初始化 ThreadLocalMap 并返回。</p><h5 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前线程的ThreadLocalMap</span>    ThreadLocalMap m <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不为空， 从ThreadLocalMap中移除该属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> null<span class="token punctuation">)</span>        m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>阅读 <code>set()</code>、<code>get()</code>、<code>remove()</code> 的源码之后发现后面其实是操作的 <code>ThreadLocalMap</code>, 主要还是操作的 <code>ThreadLocalMap</code> 的 <code>set()</code>、<code>getEntry()</code>、<code>remove()</code> 以及构造函数。下面看是看 ThreadLocalMap 的源码。</p><h4 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Entry节点继承WeakReference是弱引用     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/** 与此ThreadLocal关联的值。 */</span>        Object value<span class="token punctuation">;</span>        <span class="token function">Entry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k<span class="token punctuation">,</span> Object v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始容量-必须是2的幂</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 表，根据需要调整大小. table.length必须始终为2的幂.</span>    <span class="token keyword">private</span> ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap<span class="token punctuation">.</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 表中的条目数。 </span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 扩容阈值  </span>    <span class="token keyword">private</span> <span class="token keyword">int</span> threshold<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Default to 0</span>    <span class="token comment" spellcheck="true">// 设置阀值为长度的 2/3   </span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setThreshold</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threshold <span class="token operator">=</span> len <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构造函数</span>    <span class="token function">ThreadLocalMap</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> firstKey<span class="token punctuation">,</span> Object firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 根据ThreadLocal获取节点Entry</span>    <span class="token keyword">private</span> ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap<span class="token punctuation">.</span>Entry <span class="token function">getEntry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// set ThreadLocalMap的k-v</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 移除当前值</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>Entry 继承了 <code>WeakReference&lt;ThreadLocal&lt;?&gt;</code> 也就意味着， <code>Entry 节点的 key 是弱引用</code>。</li><li>Entry 对象的key弱引用，指向的是 <code>ThreadLocal</code> 对象。</li><li>线程对象执行完毕，线程对象内实例属性会被回收，此时线程内 <code>ThreadLocal</code> 对象的<code>引用</code>被置为 <code>null</code> ，即 Entry 的 <code>key</code> 为 <code>null</code>, key 会被垃圾回收。</li><li>ThreadLocal 对象通常为私有静态变量， 生命周期不会至少不会随着线程技术而结束。</li><li>ThreadLocal 对象存在，并且 <code>Entry的 key == null &amp;&amp; value != null</code> ，这时就会造成内存泄漏。</li></ol><ul><li>小补充</li></ul><ol><li>强引用、软引用、弱引用、虚引用<pre class=" language-text"><code class="language-text">强引用（StrongReference）：最常见，直接 new Object(); 创建的即为强引用。当内存空间不足，Java虚拟机宁愿抛出 OOM，也不愿意随意回收具有强引用的对象来解决内存不足问题。软引用（SoftReference）：内存足够，垃圾回收器不会回收软引用对象；内存不足时，垃圾回收器会回收。弱引用（WeakReference）：垃圾回收器线程，发现就会回收。虚引用（PhantomReference）：任何时候都有可能被垃圾回收，必须引用队列联合使用。</code></pre></li><li>内存泄露：<pre class=" language-text"><code class="language-text">内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。—— 维基百科</code></pre></li></ol><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/SJPSIU.jpg"  div align=center /><h5 id="构造函数及hash计算"><a href="#构造函数及hash计算" class="headerlink" title="构造函数及hash计算"></a>构造函数及hash计算</h5><pre class=" language-java"><code class="language-java"><span class="token function">ThreadLocalMap</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> firstKey<span class="token punctuation">,</span> Object firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化Entry数组， 长度为16</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>INITIAL_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取key的hashCode，并计算出在数组中的索引，</span>    <span class="token comment" spellcheck="true">// 长度是 2的幂的情况下，取模 a % b == a &amp; (b - 1)</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> firstKey<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>INITIAL_CAPACITY <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>firstKey<span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置数组元素数</span>    size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置扩容阈值</span>    <span class="token function">setThreshold</span><span class="token punctuation">(</span>INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>threadLocalHashCode 是 ThreadLocal 的静态属性，通过 nextHashCode 方法获取。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadLocalHashCode <span class="token operator">=</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 被赋予了接下来的哈希码。 原子更新。 从零开始。</span><span class="token keyword">private</span> <span class="token keyword">static</span> AtomicInteger nextHashCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HASH_INCREMENT <span class="token operator">=</span> <span class="token number">0x61c88647</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 返回下一个hash码，通过步长 0x61c88647 累加生成，这块注释说明是最佳哈希值</span>    <span class="token keyword">return</span> nextHashCode<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span>HASH_INCREMENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>初始化数组，长度16。</li><li>计算 key 的 hashCode，对2的幂取模。</li><li>设置元素，元素数及扩容阈值。</li></ol><p>hashCode 通过步长 0x61c88647 累加生成， 并且使用了 AtomicInteger，保证原子性。</p><h5 id="set-方法"><a href="#set-方法" class="headerlink" title="set()方法"></a>set()方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hashcode取模求数组索引</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取数组中对应的位置， 重点关注 e = tab[i = nextIndex(i, len)]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取key</span>        ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// key 存在则覆盖</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// key 不存在则赋值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">replaceStaleEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 此时 e == null 直接执创建节点</span>    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token operator">++</span>size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// cleanSomeSlots 循环数组 查找全部key==null的Entry</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sz <span class="token operator">>=</span> threshold<span class="token punctuation">)</span>        <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>获取循环 Entry 数组，获取 tab[i] 处的 e， e != null 继续循环<ol><li>此时发现 e 的 key 不存在，并且不是 null （hash冲突了。）</li><li>那就通过 e = tab[i = nextIndex(i, len)]) 继续获取下一个 i，并获取新的 tab[i] 处的 e。</li><li>赋值替换值结束结束并返回。</li></ol></li><li>e == null 结束循环。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 下一个index，如果 i + 1 &lt; len 直接返回下一个位置  </span><span class="token comment" spellcheck="true">// 如果 i + 1 >= len 则返回 0， 从头开始。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">prevIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>这块利用环形设计，如果长度到达数组长度，则从开头开始继续查找。</li><li>int i = key.threadLocalHashCode &amp; (len-1); 求出索引，并不是从0开始的。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * staleSlot 为当前索引位置， 并且当前索引位置的 k == null */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replaceStaleEntry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">int</span> staleSlot<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    Entry e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 需要清除的 entry 的索引</span>    <span class="token keyword">int</span> slotToExpunge <span class="token operator">=</span> staleSlot<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环获取到上一个 key==null 的节点及其索引，有可能还是自己</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">prevIndex</span><span class="token punctuation">(</span>staleSlot<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token function">prevIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            slotToExpunge <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 继续上一层的循环，查找下一个 k == key 的节点索引</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>staleSlot<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// key 相等 则直接赋值</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 并且将 此处的 entry替换为 tab[staleSlot]</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tab<span class="token punctuation">[</span>staleSlot<span class="token punctuation">]</span><span class="token punctuation">;</span>            tab<span class="token punctuation">[</span>staleSlot<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果发现要清除的 entry和传入的在一个位置上， 则直接赋值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>slotToExpunge <span class="token operator">==</span> staleSlot<span class="token punctuation">)</span>                slotToExpunge <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 清除掉过期的 expungeStaleEntry(slotToExpunge) 会清除 entry的value，将其设置为null并将其设置为null， 并返回下一个需要清除的entry的索引位置</span>            <span class="token comment" spellcheck="true">// cleanSomeSlots 循环数组 查找全部key==null的Entry</span>            <span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span><span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>slotToExpunge<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果向后扫描没有找到，并且已经到第初始传入的索引位置处了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> slotToExpunge <span class="token operator">==</span> staleSlot<span class="token punctuation">)</span>            slotToExpunge <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 没找到， 直接将旧值 Entry 设置为 null 并指向新创建的Entry</span>    tab<span class="token punctuation">[</span>staleSlot<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> null<span class="token punctuation">;</span>    tab<span class="token punctuation">[</span>staleSlot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 结束之后发现要清楚的 key的索引 不等于当前传入的索引， 说明还有其他需要清除。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>slotToExpunge <span class="token operator">!=</span> staleSlot<span class="token punctuation">)</span>        <span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span><span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>slotToExpunge<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>这里存在三个属性 key， value，以及 staleSlot， staleSlot节点的 Entry != null 但是 k == null。</li><li>向前扫描获取到上一个  Entry != null 但是 k == null 的节点及其索引, 赋值给 slotToExpunge， 没有扫描到的话 slotToExpunge 还是等于 staleSlot。</li><li>向后扫描 Entry != null 的节点，因为在 set 方法中， 后面还有一段数组没有遍历。<ol><li>发现 key 相等的Entry节点了， 直接赋值，然后清除其他 Entry != null 但是 k == null 的节点， 并返回。</li><li>没有找到key相等的节点，但是找到了下一个 Entry != null 但是 k == null， 且此时 slotToExpunge 未发生变化，还是指向 staleSlot， 则 i 赋值给 slotToExpunge。</li></ol></li><li>向后扫描没有扫描到，则直接对当前节点（索引值为staleSlot）的节点的value设置为null，并指向新value。</li><li>结束之后发现 slotToExpunge 被改变了， 说明还有其他的要清除。</li></ol><h5 id="getEntry-方法"><a href="#getEntry-方法" class="headerlink" title="getEntry()方法"></a>getEntry()方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Entry <span class="token function">getEntry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// hashcode取模求数组索引</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Entry e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 存在则返回</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// 不存在</span>        <span class="token keyword">return</span> <span class="token function">getEntryAfterMiss</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Entry <span class="token function">getEntryAfterMiss</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> Entry e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// key 已经 == null 了 清除一下 value</span>            <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment" spellcheck="true">// 继续获取下一个</span>            i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>hashcode 取模求数组索引。</li><li>索引处获取到 Entry 则直接返回。</li><li>获取不到或者获取到的 Entry key 不相等时，有可能是因为 hash 冲突，被放到别的地方， 调用 getEntryAfterMiss 方法。</li><li>getEntryAfterMiss 方法中。<ol><li>e == null  返回null。</li><li>e != null  判断key， key相等返回 Entry， key == null， 那就需要清除这个节点，然后继续按照 <code>nextIndex(i, len)</code> 方法找下一个节点。</li></ol></li></ol><h4 id="remove-方法-1"><a href="#remove-方法-1" class="headerlink" title="remove()方法"></a>remove()方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hashcode 取模求数组索引</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 清除当前节点的value</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 清楚对象引用</span>            e<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// value 指向 null</span>            <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>referent <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>hashcode 取模求数组索引。</li><li>循环查找数组，将当前 key 的 Entry 的引用，将 value 设置为 null， 后面会被垃圾回收掉。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="为什么可以线程私有？"><a href="#为什么可以线程私有？" class="headerlink" title="为什么可以线程私有？"></a>为什么可以线程私有？</h4><p>ThreadLocal 的 get()、set()、remove()方法中都有 <code>Thread t = Thread.currentThread();</code> 操作的其实是本线程，获取本线程的ThreadLocalMap。</p><p>每个线程都有自己的 ThreadLocal，并且是将 value 存放在一个以 ThreadLocal 为 key 的 ThreadLocalMap 中的。所以线程间隔离。</p><h4 id="为什么建议声明为静态？"><a href="#为什么建议声明为静态？" class="headerlink" title="为什么建议声明为静态？"></a>为什么建议声明为静态？</h4><p>Java开发手册已经给出说明，还有就是，如果 ThreadLocal 设置为非静态，那就是某个线程的实例类，这样的话就会失去了线程共享的本质属性。</p><h4 id="为什么强制必须时候后remove-？"><a href="#为什么强制必须时候后remove-？" class="headerlink" title="为什么强制必须时候后remove()？"></a>为什么强制必须时候后remove()？</h4><p>这块可以和内存泄露一块说明， 通过上面的 <code>ThreadLocalMap</code> 处关于弱引用的讲解已经说明会产生内存泄露。至于如何解决也给出了答案：</p><p>1.<code>set()</code> 时清除 Entry != null &amp;&amp; key == null 的节点， 将其 value 设置为 null。<br>2.<code>getEntry()</code> 时清除<code>当前 key 到 nextIndex(i, len)==null 之间的</code> Entry != null &amp;&amp; key == null 的节点， 将其 value 设置为 null。<br>3.<code>remove()</code> 时清除<code>指定key</code>的 Entry != null &amp;&amp; key == null 的节点， 将其 value 设置为 null。</p><p>之所以使用remove()，还是为了解决内存泄露的问题。</p><h4 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h4><ol><li>使用时注意声明为 <code>private static final</code>。</li><li>使用后要 <code>remove()</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 从JUC源码看CAS，我做了个笔记 ......</title>
      <link href="/2020/06/12/source-code-cas.html"/>
      <url>/2020/06/12/source-code-cas.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>前言<br>JUC包下大量使用了CAS，工作和面试中也经常遇到CAS，包括说到乐观锁，也不可避免的想起CAS，那CAS究竟是什么？</p></blockquote><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>说到CAS，基本上都会想到乐观锁、AtomicInteger、Unsafe … </p><p>当然也有可能啥也没想到！</p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/zoi3eG.jpg" div align=center /><p>不管你们怎么想， 我第一印象是乐观锁，毕竟做交易更新交易状态经常用到乐观锁，就自然想到这个SQL：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> trans_order <span class="token keyword">set</span> order_status <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> order_no <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxx'</span> <span class="token operator">and</span> order_status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>其实就是 set和where里面都携带order_status。</p><p>那什么是CAS？</p><p>CAS就是<code>Compare-and-Swap</code>，即比较并替换，在并发算法时常用，并且在JUC（java.util.concurrent）包下很多类都使用了CAS。</p><p>非常常见的问题就是多线程操作i++问题。一般解决办法就是添加 synchronized 关键字修饰，当然也可以使用 AtomicInteger 代码举例如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CasTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> CountDownLatch LATCH <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> NUM_I <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> NUM_J <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicInteger NUM_K <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        NUM_I<span class="token operator">++</span><span class="token punctuation">;</span>                        NUM_J<span class="token operator">++</span><span class="token punctuation">;</span>                        NUM_K<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    LATCH<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LATCH<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NUM_I = "</span> <span class="token operator">+</span> NUM_I<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NUM_J = "</span> <span class="token operator">+</span> NUM_J<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NUM_K = "</span> <span class="token operator">+</span> NUM_K<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面就从<code>AtomicInteger</code>开始了解CAS。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicInteger</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6214790243416807050L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// setup to use Unsafe.compareAndSwapInt for updates</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe unsafe <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>                <span class="token punctuation">(</span>AtomicInteger<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出里面使用了<code>Unsafe</code>类下的<code>getAndAddInt</code>方法，<code>Unsafe</code>类很多方法是本地（native）方法，主要是硬件级别的<code>原子操作</code>。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @param var1 当前对象 * @param var2 当前对象在内存偏移量，Unsafe可以根据内存偏移地址获取数据 * @param var4 操作值 * @return */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> var5<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取在var1在内存的值</span>        var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将var1赋值为var5+var4， 赋值时会判断var1是否为var5</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> var5<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 原子操作</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">,</span> <span class="token keyword">int</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>至于 compareAndSwapInt 的分析就忽略了。 </p><p>看完代码过程其实就是：</p><ol><li>比较var1的值是否为var4，是的话将var1更新为var5。</li><li>如果不是的话就一直循环，直到var1是var4。</li></ol><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/3E5FDF0D-875A-4CD0-9B75-61D01ACBCD50_4_5005_c.jpeg"  div align=center /><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/iyLlPP.png"  div align=center /><ol><li>这要是一直获取不到，岂不是一直循环。线程多的情况下，会自旋很长时间，导致浪费资源。</li><li>你更新了， 我又给你更新回去了，你也不知道。ABA问题！比如像这样，A想更新值为a，还未抢到资源，这时候B进行了更新，将对象更新为了b，然后又马上更新回了a， 这时候A是什么都不知道的。</li></ol><p>以乐观锁举例：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 0 -> 1</span><span class="token keyword">update</span> trans_order <span class="token keyword">set</span> order_status <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> order_no <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxx'</span> <span class="token operator">and</span> order_status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1 -> 0</span><span class="token keyword">update</span> trans_order <span class="token keyword">set</span> order_status <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> order_no <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxx'</span> <span class="token operator">and</span> order_status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 0 -> 1</span><span class="token keyword">update</span> trans_order <span class="token keyword">set</span> order_status <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> order_no <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxx'</span> <span class="token operator">and</span> order_status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>解决办法可以添加version进行版本号控制。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 0 -> 1</span><span class="token keyword">update</span> trans_order <span class="token keyword">set</span> order_status <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> order_no <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxx'</span> <span class="token operator">and</span> order_status <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> version <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1 -> 0</span><span class="token keyword">update</span> trans_order <span class="token keyword">set</span> order_status <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> order_no <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxx'</span> <span class="token operator">and</span> order_status <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 0 -> 1</span><span class="token keyword">update</span> trans_order <span class="token keyword">set</span> order_status <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> order_no <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxx'</span> <span class="token operator">and</span> order_status <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> version <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>代码中可以看 <code>AtomicStampedReference</code> 类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 以原子方式设置该引用和标志给定的更新值的值， * 如果当前引用==预期的引用，并且当前标志==预期标志。 * * @param expectedReference 预期引用 * @param newReference 更新的值 * @param expectedStamp 预期标志 * @param newStamp 更新的标志 * @return {@code true} if successful */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span>V   expectedReference<span class="token punctuation">,</span>                                V   newReference<span class="token punctuation">,</span>                                <span class="token keyword">int</span> expectedStamp<span class="token punctuation">,</span>                                <span class="token keyword">int</span> newStamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Pair<span class="token operator">&lt;</span>V<span class="token operator">></span> current <span class="token operator">=</span> pair<span class="token punctuation">;</span>    <span class="token keyword">return</span>        expectedReference <span class="token operator">==</span> current<span class="token punctuation">.</span>reference <span class="token operator">&amp;&amp;</span>        expectedStamp <span class="token operator">==</span> current<span class="token punctuation">.</span>stamp <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>newReference <span class="token operator">==</span> current<span class="token punctuation">.</span>reference <span class="token operator">&amp;&amp;</span>            newStamp <span class="token operator">==</span> current<span class="token punctuation">.</span>stamp<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">casPair</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> Pair<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>newReference<span class="token punctuation">,</span> newStamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实就是额外增加一个标志（<code>stamp</code>）来防止ABA的问题， 类似乐观锁的version。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- HashMap红黑树</title>
      <link href="/2020/05/25/source-code-hashmap-red-black-tree.html"/>
      <url>/2020/05/25/source-code-hashmap-red-black-tree.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>前言<br>在阅读HashMap源码时，会发现在HashMap中使用了红黑树，所以需要先了解什么是红黑树，以及其原理。从而再进一步阅读HashMap中的链表到红黑树的转换，红黑树的增删节点等。</p></blockquote><blockquote><ol><li>什么是红黑树？</li><li>在HashMap中是怎么应用的？</li></ol></blockquote><h3 id="什么是红黑树？"><a href="#什么是红黑树？" class="headerlink" title="什么是红黑树？"></a>什么是红黑树？</h3><blockquote><p>红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。它在1972年由鲁道夫·贝尔发明，被称为”对称二叉B树”，它现代的名字源于Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文。红黑树的结构复杂，但它的操作有着良好的最坏情况运行时间，并且在实践中高效：它可以在O(logN)时间内完成查找、插入和删除，这里的n是树中元素的数目。</p></blockquote><h3 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h3><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：</p><ol><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/red-black-tree001.jpeg" alt="红黑树001"></p><h3 id="红黑树操作"><a href="#红黑树操作" class="headerlink" title="红黑树操作"></a>红黑树操作</h3><h4 id="左旋、右旋"><a href="#左旋、右旋" class="headerlink" title="左旋、右旋"></a>左旋、右旋</h4><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/krck8S.gif" alt="krck8S"></p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/OUd2GL.gif" alt="OUd2GL"></p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><ol><li>以二叉查找树的方法增加节点</li><li>新插入节点为红色（如果设为黑色，就会导致根到叶子的路径上有一条路上，多一个额外的黑节点，这个是很难调整的。但是设为红色节点后，可能会导致出现两个连续红色节点的冲突，那么可以通过颜色调换（color flips）和树旋转来调整。）</li></ol><p>注意：</p><ol><li>性质1和性质3是永远保持着的。</li><li>性质4只在增加红色节点、重绘黑色节点为红色，或做旋转时受到威胁。</li><li>性质5只在增加黑色节点、重绘红色节点为黑色，或做旋转时受到威胁。</li></ol><p>插入时会遇到以下五种情形：</p><blockquote><p>情形1：插入第一个节点<br>情形2：插入新节点，父节点是黑色<br>情形3：插入新节点，父节点是红色，叔父节点是红色<br>情形4：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是右子节点，父节点又是其父节点的左子节点<br>情形5：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是左子节点，父节点又是其父节点的左子节点。</p></blockquote><ul><li>情形1：</li></ul><p>操作：插入第一个节点<br>违反性质2：” 根是黑色。 “<br>情形：直接插入红色节点，然后进行染色为黑色</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/red-black-tree1.gif" alt="红黑树1"></p><ul><li>情形2：</li></ul><p>操作：插入新节点，父节点是黑色<br>未违反性质<br>情形：直接插入</p><ul><li>情形3：</li></ul><p>操作：插入新节点，父节点是红色，叔父节点是红色<br>违反性质4：” 每个红色节点必须有两个黑色的子节点。 “<br>情形：将祖父节点染色，祖父节点染色后再进行重新判断进行染色或旋转</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/red-black-tree3.gif" alt="红黑树3"></p><ul><li>情形4：</li></ul><p>操作：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是右子节点，父节点又是其父节点的左子节点<br>违反性质4：” 每个红色节点必须有两个黑色的子节点。 “<br>情形：进行左旋，旋转后父节点变成左子节点，新节点变成父节点，然后重新判断进行染色或旋转</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/red-black-tree4.gif" alt="红黑树4"></p><ul><li>情形5：</li></ul><p>操作：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是左子节点，父节点又是其父节点的左子节点。<br>违反性质4：” 每个红色节点必须有两个黑色的子节点。 “<br>情形：父节点染色为黑色，进行右旋，祖父节点变为右子节点，然后重新判断进行染色或旋转</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/red-black-tree5.gif" alt="红黑树5"></p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> parent<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// red-black tree links</span>    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> left<span class="token punctuation">;</span>    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> right<span class="token punctuation">;</span>    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// needed to unlink next upon deletion</span>    <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... 省略</span><span class="token punctuation">}</span></code></pre><h4 id="三个参数"><a href="#三个参数" class="headerlink" title="三个参数"></a>三个参数</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 链表转为树阈值。  * 大于等于8时，会转换为树。  * 8 是综合性能考虑确定的值 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 从树转换为链表的阈值 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 最小树形化容量，只有哈希表元素数到达64才会进行树转换 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span></code></pre><h4 id="链表转红黑树-treeifyBin"><a href="#链表转红黑树-treeifyBin" class="headerlink" title="链表转红黑树-treeifyBin"></a>链表转红黑树-treeifyBin</h4><ol><li>数组（哈希表）长度到达64</li><li>当链表长度大于等于8是会将链表转换为红黑树</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeifyBin</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数组为null或者数组长度小于MIN_TREEIFY_CAPACITY（64）时，进行扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TREEIFY_CAPACITY<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 头尾节点 hd-头 tl-尾</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hd <span class="token operator">=</span> null<span class="token punctuation">,</span> tl <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建树节点 Node -> TreeNode</span>            <span class="token comment" spellcheck="true">// 循环执行完之后得到的是双向链表</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token function">replacementTreeNode</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tl <span class="token operator">==</span> null<span class="token punctuation">)</span>                hd <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                p<span class="token punctuation">.</span>prev <span class="token operator">=</span> tl<span class="token punctuation">;</span>                tl<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tl <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 此时得到的仅仅是双向链表</span>        <span class="token comment" spellcheck="true">// 指针指向链表头</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> hd<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 将双向链表转换为树</span>            hd<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeify</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">)</span> <span class="token punctuation">{</span>    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> next<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        next <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">.</span>right <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 情形1：插入第一个节点</span>            x<span class="token punctuation">.</span>parent <span class="token operator">=</span> null<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前节点的 key 和 hash</span>            K k <span class="token operator">=</span> x<span class="token punctuation">.</span>key<span class="token punctuation">;</span>            <span class="token keyword">int</span> h <span class="token operator">=</span> x<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> kc <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再次循环</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> dir<span class="token punctuation">,</span> ph<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 内层循环的key</span>                K pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 当前节点的hash和内层循环的hash值作比较</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">></span> h<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// &lt; 0 left查找</span>                    dir <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ph <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// > 0 right 查找</span>                    dir <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>kc <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>                            <span class="token punctuation">(</span>kc <span class="token operator">=</span> <span class="token function">comparableClassFor</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span>                            <span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">compareComparables</span><span class="token punctuation">(</span>kc<span class="token punctuation">,</span> k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 比较对象</span>                    dir <span class="token operator">=</span> <span class="token function">tieBreakOrder</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">;</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> xp <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// dir &lt;= 0 则走 left查找 > 0 则走 right查找</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>left <span class="token operator">:</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    x<span class="token punctuation">.</span>parent <span class="token operator">=</span> xp<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        xp<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        xp<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 正式转换为红黑树</span>                    root <span class="token operator">=</span> <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">moveRootToFront</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// root 根节点</span><span class="token comment" spellcheck="true">// x 要操作的节点</span><span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 默认节点为红色</span>    x<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// xp：x的父节点</span>    <span class="token comment" spellcheck="true">// xpp：x的祖父节点</span>    <span class="token comment" spellcheck="true">// xppl：x祖父节点的左子节点</span>    <span class="token comment" spellcheck="true">// xppr：x祖父节点的右子节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> xp<span class="token punctuation">,</span> xpp<span class="token punctuation">,</span> xppl<span class="token punctuation">,</span> xppr<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 情形1： 父节点为null， 直接置为根</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xp <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            x<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 父节点黑色 或者 祖父节点为空，直接返回</span>        <span class="token comment" spellcheck="true">// 情形2：插入新节点，父节点是黑色</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>xp<span class="token punctuation">.</span>red <span class="token operator">||</span> <span class="token punctuation">(</span>xpp <span class="token operator">=</span> xp<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 父节点是祖父节点的左子节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xp <span class="token operator">==</span> <span class="token punctuation">(</span>xppl <span class="token operator">=</span> xpp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 祖父节点的右子节点不为空且是红色</span>            <span class="token comment" spellcheck="true">// 情形3：插入新节点，父节点是红色，叔父节点是红色</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xppr <span class="token operator">=</span> xpp<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> xppr<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">{</span>                xppr<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//祖父节点的右子节点设置为黑色</span>                xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父节点设置为黑色</span>                xpp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 祖父节点设置为红色</span>                x <span class="token operator">=</span> xpp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 继续操作祖父节点</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 旋转</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 新插入的是右子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> xp<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 插入的x是父节点的右子节点， 进行左旋</span>                    root <span class="token operator">=</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x <span class="token operator">=</span> xp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    xpp <span class="token operator">=</span> <span class="token punctuation">(</span>xp <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> xp<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 父节点设置为黑色</span>                    xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xpp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        xpp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 右旋</span>                        root <span class="token operator">=</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> xpp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 父节点是祖父节点的右子节点</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 祖父节点的左子节点不为空且为红色</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xppl <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> xppl<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">{</span>                xppl<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 祖父节点的左子节点设置为黑色</span>                xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父节点设置为黑色</span>                xpp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 祖父节点设置为红色</span>                x <span class="token operator">=</span> xpp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 继续操作祖父节点</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 旋转</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> xp<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    root <span class="token operator">=</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x <span class="token operator">=</span> xp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    xpp <span class="token operator">=</span> <span class="token punctuation">(</span>xp <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> xp<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xpp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        xpp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        root <span class="token operator">=</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> xpp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- HashMap扩容</title>
      <link href="/2020/05/17/source-code-hashmap-resize.html"/>
      <url>/2020/05/17/source-code-hashmap-resize.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>描述下HashMap put(k,v)的流程？<br>它的扩容流程是怎么样的？</p></blockquote><h3 id="HashMap-put-k-v-流程"><a href="#HashMap-put-k-v-流程" class="headerlink" title="HashMap put(k,v)流程"></a>HashMap put(k,v)流程</h3><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/3pSob4.png" alt="3pSob4"></p><ol><li>通过hash(key方法)获取到key的hash值</li><li>调用put方法, 将value存放到指定的位置<ol><li>根据hash值确定当前key所在node数组的索引 <code>(n - 1) &amp; hash</code></li><li>如果node[i]==null 则直接创建新数组</li><li>如果node[i]!=null<ol><li>判断 当前node的头结点的 hash和key是否都相等, 相等则需要操作的就是该node</li><li>判断当前节点是否为TreeNode，对TreeNode进行操作，并返回结果e</li><li>如果是链表则遍历链表，key存在则返回节点e，不存在则赋值</li><li>判断节点e有没有被赋值，覆盖旧值</li></ol></li><li>hashMap size进行加1，同时判断v新size是否大于扩容阈值从而判断是否需要扩容</li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>                   <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 声明Node数组tab, Node节点</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对tab数组赋值为当前HashMap的table, 并判断是否为空, 或者长度为0</span>        <span class="token comment" spellcheck="true">// 为0进行则resize()数组, 并对 n赋值为当前tab的长度</span>        <span class="token comment" spellcheck="true">// resize() 对HashMap的table扩容, 并返回扩容后的新数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对 node p 进行赋值, 数组所在位置 即 node p 如果是null 则直接赋值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// p 不为null, 声明 node e, key k</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果hash值相等且key相等, 直接将 e 赋值为当前node的头节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 如果是红黑树, 则对树进行操作, 返回节点e</span>                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 对链表进行遍历, 找到对应的节点</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 将 e 赋值为  头节点p的next, 如果下一个节点为null</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 对节点进行赋值</span>                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 如果长度到达数转换阈值, 则需要转换为红黑树</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 如果e节点的hash相等, key相等, 则 直接跳出循环 e 已经被赋值为 p.next</span>                    <span class="token comment" spellcheck="true">// 此时e节点的value没有被赋值</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 指针指向下一个节点, 继续遍历</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>                V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 对旧值进行覆盖, 并返回旧值</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否需要扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="resize-扩容过程"><a href="#resize-扩容过程" class="headerlink" title="resize()扩容过程"></a>resize()扩容过程</h3><ol><li>JDK 1.7 扩容流程, 每次都需要数组扩容后, 链表需要重新计算在新数组的位置</li><li>JDK 1.8 不需要重新计算 (优化点)<ol><li>数组下标: (n - 1) &amp; hash 即数组长度-1 &amp; key的hash</li><li>扩容后的数组下标: ((n &lt;&lt; 1) - 1) &amp; hash 相当于在 高位1之前加了个1</li></ol></li></ol><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/GRQHSY.png" alt="GRQHSY"></p><p>如图所示, 真正发生影响的是新增的那一位(红色箭头所指), 所以 oldCap &amp; hash 完全可以判断该值是放在旧索引值的位置还是放在旧索引值+旧数组长度的位置</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 旧数组</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 旧数组长度</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 旧的扩容阈值</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新的数组长度和新扩容阈值</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 旧数组存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 新数组长度为旧数组长度的2倍</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                 oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 扩容阈值是旧扩容阈值的2倍</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 旧数组不存在, 相当于首次put(K, V)时, 将数组长度置为扩容阈值</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// initial capacity was placed in threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// zero initial threshold signifies using defaults</span>        <span class="token comment" spellcheck="true">// 旧数组不存在, new HashMap()未指定长度, 初次put(K, V), 设置为默认值</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 新的扩容阈值是0, 则将扩容阈值设置为 新数组长度*负载因子</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对全局的扩容阈值进行赋值</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建新数组, 长度为新长度, 即原数组长度的2倍</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将table复制为新数组</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对旧数组进行遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 旧节点node赋值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 只有头结点, 直接计算新的位置并赋值</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 树单独处理</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// preserve order</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// next节点</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 节点hash与旧数组长度 &amp; 的结果来决定元素所在位置, 参考上面图示所讲</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 在元索引出创建新链表</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 新索引出创建链表</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 索引j处直接赋值</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 索引 j + 老数组长度位置存放hiHead</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- HashMap的初始化</title>
      <link href="/2020/05/11/source-code-hashmap-init.html"/>
      <url>/2020/05/11/source-code-hashmap-init.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>HashMap初始化参数都是什么？默认是多少？<br>为什么建议初始化设置容量？<br>tableSizeFor方法是做什么的？<br>如何获取到一个key的hash值？及计算下标？</p></blockquote><h3 id="HashMap初始化参数都是什么？默认是多少？"><a href="#HashMap初始化参数都是什么？默认是多少？" class="headerlink" title="HashMap初始化参数都是什么？默认是多少？"></a>HashMap初始化参数都是什么？默认是多少？</h3><p>HashMap初始化参数分别是初始容量和负载因子。</p><p>初始容量(threshold)：默认 16， 必须是2的幂， 最大容量为 1 &lt;&lt; 30</p><p>负载因子(loadFactor)：是指哈希表的负载因子，当哈希表的长度大于<code>capacity * loadFactor</code>时会进行扩容，默认 0.75f</p><h3 id="为什么建议初始化设置容量"><a href="#为什么建议初始化设置容量" class="headerlink" title="为什么建议初始化设置容量"></a>为什么建议初始化设置容量</h3><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/3aQLYq.png" alt="3aQLYq"></p><p>这块涉及到HashMap的扩容， 在<code>阿里巴巴Java开发手册</code>中已经说明了原因。主要是为了减少频繁的扩容造成的资源损耗。</p><h3 id="tableSizeFor方法是做什么的？"><a href="#tableSizeFor方法是做什么的？" class="headerlink" title="tableSizeFor方法是做什么的？"></a>tableSizeFor方法是做什么的？</h3><p>初始化HashMap时, 如果传入初始容量, 在初始化时会调用 <code>tableSizeFor(initialCapacity)</code> 方法寻找大于等于当前值的下一个2的幂值.</p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  -1操作, 防止当cap正好是2的幂时的处理</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// n无符号右移1位, 然后和n做 | 运算, (1|0=1 1|1=1 0|0=0 0|1=1)</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// n无符号右移2位, 然后和n做 | 运算,</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// n无符号右移4位, 然后和n做 | 运算,</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// n无符号右移8位, 然后和n做 | 运算,</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// n无符号右移16位, 然后和n做 | 运算,</span>    <span class="token comment" spellcheck="true">// 最后获得的结果为 cap-1的下一个2的幂值-1, 只需要对n+1即可</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>假设cap值为100, 即0110 0100</li><li>cap的下一个2的幂为 0111 1111 即 1000 0000</li><li>0000 = 0111 1111 + 1</li><li>只需要考虑将 首个为1的最高位之后的值置为1, 然后+1即可</li><li>为防止cap本来就是2的幂, 则需要先进行减一操作</li></ol><p>如图所示:<br><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/51Xhtj.png" alt="51Xhtj"></p><p>最后执行的结果进行加1即可</p><h3 id="如何获取到一个key的hash值？"><a href="#如何获取到一个key的hash值？" class="headerlink" title="如何获取到一个key的hash值？"></a>如何获取到一个key的hash值？</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// key的hashCode ^ 上自己的高16位， 如果是null的话则hash为0</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>获取到了hash值， 那如何计算在数组的那个位置呢？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// n为数组长度  数组下标</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash</code></pre><p>数组长度都是 2的幂<br>假设 n = 1 &gt;&gt; x<br>则 n - 1 则表示 一个低x位全为1的数</p><p>(n - 1) &amp; hash 则相当于 一个低x位全为1的数和hash做&amp;操作.</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/article/OAZssV.png" alt="OAZssV"></p><p>通过图可以看出, 参与运算的只有低x位, 相当于之前的所有值都不会有效. 所以前面的hash(key) 将key.hashCode()高低16位做^操作, 可以保证, 高低16位都能参与运算.一定程度上避免hash碰撞.在源码注释中已经说明, 是肯定会有碰撞, 但是这是权衡之后的结果.</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown代码折叠</title>
      <link href="/2020/04/20/markdown-code-folding.html"/>
      <url>/2020/04/20/markdown-code-folding.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><h4 id="折叠内容"><a href="#折叠内容" class="headerlink" title="折叠内容"></a>折叠内容</h4><details><summary>折叠内容</summary>在markdown中折叠一部分内容, 点击可以展开.</details><h4 id="折叠代码"><a href="#折叠代码" class="headerlink" title="折叠代码"></a>折叠代码</h4><details><summary>折叠代码</summary><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></details><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>使用html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>折叠内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span>在markdown中折叠一部分内容, 点击可以展开.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>折叠代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span> 代码块<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雪花算法</title>
      <link href="/2020/04/13/snowflake-algorithm.html"/>
      <url>/2020/04/13/snowflake-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>简单介绍下雪花算法, 以及Java版雪花算法的代码.<br>仅仅是一个最简单版本, 更深层次的指针回拨等. 相当于在开发过成功可以先使用.<br>尽量还是使用统一的分布式流水号生成系统, 保证流水号全局唯一.</p></blockquote><h3 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h3><pre><code>0 0000000000 0000000000 0000000000 0000000000 0 00000 00000 000000000000</code></pre><p>使用64位long型数字作为全局唯一id<br>1位 无意义 0<br>41位 时间戳<br>5位 机房id<br>5位 机器id<br>12位自增序号 表示同一时间同一机房同一机器生成的序列号</p><ol><li><p>第一位为什么无意义<br> 二进制中 第一位代表符号位, 默认 0 表示生成的序列号为正数</p></li><li><p>41位时间戳<br> 41位最大能表示 2^41-1 的数字. 毫秒值 69.7年<br> (2^41-1)/1000/60/60/24</p><p> 当时间大于69.7即时间戳差值大于 2199023255551, 会开始出现负值流水号</p></li><li><p>10位<br> 机房id+机器id 2^10 1024台机器</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 但是使用中不可能每部署一台机器都改下编号, 所以我做出以下改动</span><span class="token comment" spellcheck="true">// 8位机器号(最大256) 2位机房号</span><span class="token comment" spellcheck="true">// 机器号使用IP地址后三位 机房id 默认1</span><span class="token comment" spellcheck="true">// 只需要确保机器的ip后三位不同即可</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> MACHINE_BIT <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> DATA_CENTER_BIT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre></li></ol><p>private static final long DATA_CENTER_ID = 1;<br>private static long address;<br>static {<br>    InetAddress localIp = IpUtils.getLocalIp();<br>    address = localIp.getAddress()[3] &amp; 0xff;<br>    log.info(“当前系统的 address 为: {}”, address);<br>}</p><pre><code>4. 12位序列号    表示同一毫秒内生成的id 2^12-1 个正整数SnowFlake每秒能够产生26万ID左右优点:生成ID时不依赖于DB，完全在内存生成，高性能高可用。ID呈趋势递增，后续插入索引树的时候性能较好。缺点:依赖于系统时钟的一致性。如果某台机器的系统时钟回拨，有可能造成ID冲突，或者ID乱序### SerialNumber```javapublic class SerialNumber  {    /**     * 起始的时间戳 2018-01-01 00:00:00     */    private static final long START_STAMP = 1514736000000L;    /**     * 每一部分占用的位数     * 序列号 占用位数 12 位 (同一毫秒内生成的id 2^12-1 个正整数)     * 机器标识  占用位数 8 位 (一般是使用5位)     * 数据中心 占用位数 2 位 (一般是使用5位)     *     */    private static final long SEQUENCE_BIT = 12;    private static final long MACHINE_BIT = 8;    private static final long DATA_CENTER_BIT = 2;    /**     * 每一部分的最大值     */    private static final long MAX_DATA_CENTER_NUM = ~(-1L &lt;&lt; DATA_CENTER_BIT);    private static final long MAX_MACHINE_NUM = ~(-1L &lt;&lt; MACHINE_BIT);    private static final long MAX_SEQUENCE = ~(-1L &lt;&lt; SEQUENCE_BIT);    /**     * 每一部分向左的位移     * 机器Id左移12位 (SEQUENCE_BIT = 12)     * 数据中心左移20位 (SEQUENCE_BIT + MACHINE_BIT = 12 + 8)     * 时间戳左移22位 (DATA_CENTER_LEFT + DATA_CENTER_BIT = 12 + 8 + 2)     *     */    private static final long MACHINE_LEFT = SEQUENCE_BIT;    private static final long DATA_CENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;    private static final long TIME_STAMP_LEFT = DATA_CENTER_LEFT + DATA_CENTER_BIT;    /**     * 数据中心 机器标识 序列号 上一次时间戳     * 数据中心标识和机器标识一般是外部传入     */    private static final long DATA_CENTER_ID = 1;    private static long address;    private long sequence = 0L;    private long lastStamp = -1L;    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(&quot;yyMMdd&quot;);    static {      InetAddress localIp = IpUtils.getLocalIp();      address = localIp.getAddress()[3] &amp; 0xff;      log.info(&quot;当前系统的 address 为: {}&quot;, address);    }    /**     * 产生下一个ID     *     * @return     */    private synchronized long nextId() {        long currStamp = getNewStamp();        if (currStamp &lt; lastStamp) {            throw new RuntimeException(&quot;Clock moved backwards.  Refusing to generate id&quot;);        }        if (currStamp == lastStamp) {            // 相同毫秒内，序列号自增 (sequence + 1) &amp; (~(-1L &lt;&lt; SEQUENCE_BIT))            sequence = (sequence + 1) &amp; MAX_SEQUENCE;            // 同一毫秒的序列数已经达到最大            if (sequence == 0L) {                currStamp = getNextMill();            }        } else {            // 不同毫秒内，序列号置为0            sequence = 0L;        }        lastStamp = currStamp;        // 时间戳部分 数据中心部分 机器标识部分 序列号部分        return (currStamp - START_STAMP) &lt;&lt; TIME_STAMP_LEFT | DATA_CENTER_ID &lt;&lt; DATA_CENTER_LEFT            | address &lt;&lt; MACHINE_LEFT | sequence;    }    private long getNextMill() {        long mill = getNewStamp();        while (mill &lt;= lastStamp) {            mill = getNewStamp();        }        return mill;    }    private long getNewStamp() {        return System.currentTimeMillis();    }}</code></pre><h3 id="IpUtils"><a href="#IpUtils" class="headerlink" title="IpUtils"></a>IpUtils</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Enumeration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2019/12/19 16:03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InetAddress <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Enumeration<span class="token operator">&lt;</span>NetworkInterface<span class="token operator">></span> e <span class="token operator">=</span> NetworkInterface<span class="token punctuation">.</span><span class="token function">getNetworkInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                NetworkInterface item <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>InterfaceAddress address <span class="token operator">:</span> item<span class="token punctuation">.</span><span class="token function">getInterfaceAddresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">isLoopback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">isUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Inet4Address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> address<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> <span class="token operator">|</span> UnknownHostException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 流水号 </tag>
            
            <tag> 雪花算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目启动失败:java.lang.NoClassDefFoundError</title>
      <link href="/2020/04/12/no-class-def-found-error-rule-configuration.html"/>
      <url>/2020/04/12/no-class-def-found-error-rule-configuration.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>近期遇到一个很久没有启动过的项目, 然后启动失败, 报 java.lang.NoClassDefFoundError, 现在记录问题排查情况.</p></blockquote><h4 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h4><ul><li>错误代码较长, 可以收缩, 直接看排查</li></ul><pre><code>Error starting ApplicationContext. To display the conditions report re-run your application with &#39;debug&#39; enabled.][2020-04-10 13:26:11.478]-[main]-[]-[ERROR]-[org.springframework.boot.SpringApplication:821]-[Application run failed]org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:155) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-5.1.8.RELEASE.jar!/:5.1.8.RELEASE]        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742) [spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389) [spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.SpringApplication.run(SpringApplication.java:311) [spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213) [spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202) [spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at com.opay.im.WebApplication.main(WebApplication.java:32) [classes!/:1.0-SNAPSHOT]        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_221]        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_221]        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_221]        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_221]        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]        at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]        at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]        at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:58) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat        at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:124) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.&lt;init&gt;(TomcatWebServer.java:86) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:414) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:178) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:179) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:152) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        ... 16 moreCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;servletEndpointRegistrar&#39; defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method &#39;servletEndpointRegistrar&#39; threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;healthEndpoint&#39; defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method &#39;healthEndpoint&#39; parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;healthIndicatorRegistry&#39; defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method &#39;healthIndicatorRegistry&#39; threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration&#39;: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;dataSource&#39; defined in class path resource [com/opay/im/config/DatabaseConfig.class]: Unsatisfied dependency expressed through method &#39;dataSource&#39; parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;defaultDataSource&#39; defined in class path resource [com/opay/im/config/DatabaseConfig.class]: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org/apache/shardingsphere/api/config/RuleConfiguration        at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627) ~[spring-beans-5.1.8.RELEASE.jar!/:5.1.8.RELEASE]        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607) ~[spring-beans-5.1.8.RELEASE.jar!/:5.1.8.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321) ~[spring-beans-5.1.8.RELEASE.jar!/:5.1.8.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160) ~[spring-beans-5.1.8.RELEASE.jar!/:5.1.8.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) ~[spring-beans-5.1.8.RELEASE.jar!/:5.1.8.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.8.RELEASE.jar!/:5.1.8.RELEASE]        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.8.RELEASE.jar!/:5.1.8.RELEASE]        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.8.RELEASE.jar!/:5.1.8.RELEASE]        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.8.RELEASE.jar!/:5.1.8.RELEASE]        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-5.1.8.RELEASE.jar!/:5.1.8.RELEASE]        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:211) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:202) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:96) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.&lt;init&gt;(ServletContextInitializerBeans.java:85) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:252) ~[spring-boot-2.1.6.RELEASE.jar!/:2.1.6.RELEASE]</code></pre><h4 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h4><ol><li>开始排查是因为缺少 <code>sharding-core-api-4.0.0-RC2.2-1.8.jar</code> 包下的一个文件, 但是本地是有的</li><li>本地可以启动</li><li>服务器启动失败, 可能是jar包缺少</li><li>最后结果发现 sharding-core-api-4.0.0-RC2.2-1.8.jar 是通过公司封装的一个包传递进来的, 而封装的那个jar包在私服上已经被删除了. <del>删除原因</del></li></ol>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA插件开发常用API</title>
      <link href="/2020/01/22/idea-plugin-development-common-api.html"/>
      <url>/2020/01/22/idea-plugin-development-common-api.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在开发Toolkit过程中查阅相关资料和阅读其他开源项目总结的一些常用API.<br>整体内容来源于网络, 以及自己使用开发Toolkit过程中使用到的.<br>总结的不到位的地方欢迎指正.</p><p>使用Gradle创建插件项目请参考: <a href="https://blog.xiaohansong.com/idea-plugin-development.html">https://blog.xiaohansong.com/idea-plugin-development.html</a><br>常用API请参考: <a href="https://blog.csdn.net/ExcellentYuXiao/article/details/80273448">https://blog.csdn.net/ExcellentYuXiao/article/details/80273448</a><br>官方文档请参考: <a href="http://www.jetbrains.org/intellij/sdk/docs/welcome.html">http://www.jetbrains.org/intellij/sdk/docs/welcome.html</a></p></blockquote><h3 id="AnAction操作"><a href="#AnAction操作" class="headerlink" title="AnAction操作"></a>AnAction操作</h3><ol><li>创建Action集成<code>AnAction</code>并实现其<code>actionPerformed</code>方法. 在方法中可以获取到<code>AnActionEvent</code>对象. 代码如下:</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonFormatAction</span> <span class="token keyword">extends</span> <span class="token class-name">AnAction</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>AnActionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前project对象</span>        Project project <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>PlatformDataKeys<span class="token punctuation">.</span>PROJECT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前编辑的文件, 可以进而获取 PsiClass, PsiField 对象</span>        PsiFile psiFile <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>CommonDataKeys<span class="token punctuation">.</span>PSI_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span>        Editor editor <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>CommonDataKeys<span class="token punctuation">.</span>EDITOR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取Java类或者接口</span>        PsiClass psiClass <span class="token operator">=</span> <span class="token function">getTargetClass</span><span class="token punctuation">(</span>editor<span class="token punctuation">,</span> psiFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建并调起 DialogWrapper</span>        DialogWrapper dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonFormat</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> psiFile<span class="token punctuation">,</span> editor<span class="token punctuation">,</span> psiClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        dialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="2"><li>其他方式</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取project. 内部调用 getData(CommonDataKeys.PROJECT) = getDataContext().getData(CommonDataKeys.PROJECT)</span>Project project <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getProject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取数据上下文</span>DataContext dataContext <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getDataContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// context可以也获取到其他信息, 入参为 PlatformDataKeys 定义的字段</span>Project project1 <span class="token operator">=</span> dataContext<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>PlatformDataKeys<span class="token punctuation">.</span>PROJECT<span class="token punctuation">)</span><span class="token punctuation">;</span>Editor editor <span class="token operator">=</span> dataContext<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>PlatformDataKeys<span class="token punctuation">.</span>EDITOR<span class="token punctuation">)</span><span class="token punctuation">;</span>PsiFile psiFile <span class="token operator">=</span> dataContext<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>PlatformDataKeys<span class="token punctuation">.</span>PSI_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span>PsiElement psiElement <span class="token operator">=</span> dataContext<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>PlatformDataKeys<span class="token punctuation">.</span>PSI_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 虚拟文件</span>VirtualFile virtualFile <span class="token operator">=</span> dataContext<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>PlatformDataKeys<span class="token punctuation">.</span>VIRTUAL_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="获取PsiClass"><a href="#获取PsiClass" class="headerlink" title="获取PsiClass"></a>获取PsiClass</h3><p>PsiClass为java类或者接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> PsiClass <span class="token function">getTargetClass</span><span class="token punctuation">(</span>Editor editor<span class="token punctuation">,</span> PsiFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getCaretModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PsiElement element <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">findElementAt</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        PsiClass target <span class="token operator">=</span> PsiTreeUtil<span class="token punctuation">.</span><span class="token function">getParentOfType</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> PsiClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> target <span class="token keyword">instanceof</span> <span class="token class-name">SyntheticElement</span> <span class="token operator">?</span> null <span class="token operator">:</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Psixxx操作"><a href="#Psixxx操作" class="headerlink" title="Psixxx操作"></a>Psixxx操作</h3><h4 id="PsiClass操作API"><a href="#PsiClass操作API" class="headerlink" title="PsiClass操作API"></a>PsiClass操作API</h4><p>源码有注释且比较清楚, 此处仅记录我用到的一部分</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取全类名</span>String qualifiedName <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getQualifiedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取所有字段</span>PsiField<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="PsiField操作"><a href="#PsiField操作" class="headerlink" title="PsiField操作"></a>PsiField操作</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取字段名</span>String name <span class="token operator">=</span> psiField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="PsiElement操作"><a href="#PsiElement操作" class="headerlink" title="PsiElement操作"></a>PsiElement操作</h4><p>PsiClass和PsiField都实现了PsiElement</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 删除</span>element<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 添加元素, 向一个类中添加方法, 字段等, 也可以调用 addBefore, addAfter</span><span class="token function">add</span><span class="token punctuation">(</span>PsiElement element<span class="token punctuation">)</span></code></pre><h4 id="PsiType操作"><a href="#PsiType操作" class="headerlink" title="PsiType操作"></a>PsiType操作</h4><p>PsiType支持常用基本类型, 但是当创建对象时则不支持.需要自己创建</p><pre class=" language-java"><code class="language-java">PsiElementFactory psiElementFactory <span class="token operator">=</span> JavaPsiFacade<span class="token punctuation">.</span><span class="token function">getElementFactory</span><span class="token punctuation">(</span>project<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// String 类型</span>PsiType stringPsiType <span class="token operator">=</span> psiElementFactory<span class="token punctuation">.</span><span class="token function">createTypeFromText</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// list</span>PsiType listPsiType <span class="token operator">=</span> psiElementFactory<span class="token punctuation">.</span><span class="token function">createTypeFromText</span><span class="token punctuation">(</span><span class="token string">"java.util.List&lt;String>"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自定义list</span>PsiType typeFromText <span class="token operator">=</span> psiElementFactory<span class="token punctuation">.</span><span class="token function">createTypeFromText</span><span class="token punctuation">(</span><span class="token string">"java.util.List&lt;"</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">">"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 当前项目的所有元素 mapper, 分别填入类型, 作用域 GlobalSearchScope</span>List<span class="token operator">&lt;</span>DomFileElement<span class="token operator">&lt;</span>Mapper<span class="token operator">>></span> fileElements <span class="token operator">=</span> DomService<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFileElements</span><span class="token punctuation">(</span>Mapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> project<span class="token punctuation">,</span> GlobalSearchScope<span class="token punctuation">.</span><span class="token function">allScope</span><span class="token punctuation">(</span>project<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>需要调用<code>WriteCommandAction</code>进行异步写入.</p><pre class=" language-java"><code class="language-java">WriteCommandAction<span class="token punctuation">.</span><span class="token function">runWriteCommandAction</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">doGenerate</span><span class="token punctuation">(</span>psiClass<span class="token punctuation">,</span> jsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>插件中有一些注释, 可以参考插件的内容. 具体可以参考我的插件Toolkit.</p><h4 id="我的插件"><a href="#我的插件" class="headerlink" title="我的插件"></a>我的插件</h4><ul><li>Toolkit: <a href="https://github.com/liuzhihangs/toolkit">https://github.com/liuzhihangs/toolkit</a></li><li>copy-as-json: <a href="https://github.com/liuzhihangs/copy-as-json">https://github.com/liuzhihangs/copy-as-json</a></li></ul><h4 id="感谢"><a href="#感谢" class="headerlink" title="感谢:"></a>感谢:</h4><ul><li><p>开源项目:</p><ul><li>MyBatis support: <a href="https://github.com/zhaoqin102/mybatis-support">https://github.com/zhaoqin102/mybatis-support</a></li><li>free-idea-mybatis: <a href="https://github.com/wuzhizhan/free-idea-mybatis">https://github.com/wuzhizhan/free-idea-mybatis</a></li><li>GsonFormat: <a href="https://github.com/zzz40500/GsonFormat">https://github.com/zzz40500/GsonFormat</a></li></ul></li><li><p>相关资料:</p><ul><li>搭建开发环境: <a href="https://blog.xiaohansong.com/idea-plugin-development.html">https://blog.xiaohansong.com/idea-plugin-development.html</a></li><li>常用API请参考: <a href="https://blog.csdn.net/ExcellentYuXiao/article/details/80273448">https://blog.csdn.net/ExcellentYuXiao/article/details/80273448</a></li><li>官方文档请参考: <a href="http://www.jetbrains.org/intellij/sdk/docs/welcome.html">http://www.jetbrains.org/intellij/sdk/docs/welcome.html</a></li><li>其他查询到的资料</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac创建data目录失败</title>
      <link href="/2020/01/05/mac-create-data-directory-failed.html"/>
      <url>/2020/01/05/mac-create-data-directory-failed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>部分项目log日志输出路径为 /data/log, 发现无法创建目录<br>错误信息: <code>mkdir: cannot create directory ‘data’: Read-only file system</code></p></blockquote><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><h5 id="关闭SPI"><a href="#关闭SPI" class="headerlink" title="关闭SPI"></a>关闭SPI</h5><ol><li>重启 按住CMD+R进入恢复模式</li><li>打开终端<br><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/feature/mac-spi.jpg" alt="spi关闭"></li><li>终端输入命令：csrutil disable</li></ol><h5 id="挂载data"><a href="#挂载data" class="headerlink" title="挂载data"></a>挂载data</h5><ol><li>在用户目录(可以自己找一个目录下创建data)</li></ol><pre class=" language-bash"><code class="language-bash">~  % <span class="token operator">></span> <span class="token function">cd</span> ~~  % <span class="token operator">></span> <span class="token function">mkdir</span> data</code></pre><ol start="2"><li>执行 <code>sudo mount -uw /</code> 重新挂载根目录</li><li>建立软链<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /Users/liuzhihang/data /data</code></pre></li><li>之后可以重启再打开spi了<br><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/feature/mac-spi2.png" alt="spi关闭"></li></ol>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中插入Bilibili视频</title>
      <link href="/2019/09/14/hexo-inserts-bilibili-video.html"/>
      <url>/2019/09/14/hexo-inserts-bilibili-video.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>修改matery主题首页显示视频为Bilibili视频</p><p>在Markdown插入Bilibili视频, 并设置大小.</p></blockquote><h3 id="首先找到分享嵌入代码"><a href="#首先找到分享嵌入代码" class="headerlink" title="首先找到分享嵌入代码"></a>首先找到分享嵌入代码</h3><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://i.loli.net/2019/10/10/di3Cxcr9VLvjqM6.png" alt="Bilibili分享截图"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//player.bilibili.com/player.html?aid<span class="token punctuation">=</span>17963687&amp;cid<span class="token punctuation">=</span>29326684&amp;page<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">framespacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre><h3 id="在markdown中使用嵌入代码"><a href="#在markdown中使用嵌入代码" class="headerlink" title="在markdown中使用嵌入代码"></a>在markdown中使用嵌入代码</h3><iframe src="//player.bilibili.com/player.html?aid=17963687&cid=29326684&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="调整大小和居中等"><a href="#调整大小和居中等" class="headerlink" title="调整大小和居中等"></a>调整大小和居中等</h3><p><a href="https://www.w3school.com.cn/tags/tag_iframe.asp">iframe标签属性设置</a></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--    调整大小: width="xxx" height="xxx"--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//player.bilibili.com/player.html?aid<span class="token punctuation">=</span>17963687&amp;cid<span class="token punctuation">=</span>29326684&amp;page<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span>  <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">framespacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre><iframe src="//player.bilibili.com/player.html?aid=17963687&cid=29326684&page=1" width="700" height="480"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="设置自适应"><a href="#设置自适应" class="headerlink" title="设置自适应"></a>设置自适应</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">75%</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//player.bilibili.com/player.html?aid<span class="token punctuation">=</span>17963687&amp;cid<span class="token punctuation">=</span>29326684&amp;page<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">framespacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=17963687&cid=29326684&page=1"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><h3 id="matery-主题修改首页展示视频"><a href="#matery-主题修改首页展示视频" class="headerlink" title="matery 主题修改首页展示视频"></a>matery 主题修改首页展示视频</h3><p>找到 /themes/hexo-theme-matery/layout/_widget/video.ejs 将第十一行左右代码改成Bilibili视频即可, 引入的 script 可以删掉.</p><p>修改后如下.</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"video-player"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>video<span class="token punctuation">.</span>showTitle<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title center-align"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-video-camera"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>video<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"row"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col l8 offset-l2 m10 offset-m1 s12"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"dplayer"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dplayer-video"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"position: relative; width: 100%; height: 0; padding-bottom: 75%;"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"//player.bilibili.com/player.html?aid=16316393&amp;cid=26620787&amp;page=1"</span>  scrolling<span class="token operator">=</span><span class="token string">"no"</span> border<span class="token operator">=</span><span class="token string">"0"</span> frameborder<span class="token operator">=</span><span class="token string">"no"</span> framespacing<span class="token operator">=</span><span class="token string">"0"</span> allowfullscreen<span class="token operator">=</span><span class="token string">"true"</span> style<span class="token operator">=</span><span class="token string">"position: absolute; width: 100%; height: 100%; left: 0; top: 0;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis分布式锁的生产问题解决方案</title>
      <link href="/2019/08/18/redis-distributed-lock-production-problem-solution.html"/>
      <url>/2019/08/18/redis-distributed-lock-production-problem-solution.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://liuzhihang.com/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><pre><code>SET KEY VALUE TIME NXDEL KEY</code></pre><p>一般使用 NX, 只有在锁不存在的时候才加锁成功, 设置时间是为了锁永远得不到释放</p><h3 id="存在问题及解决方法"><a href="#存在问题及解决方法" class="headerlink" title="存在问题及解决方法"></a>存在问题及解决方法</h3><ol><li><p>A加锁, B释放</p><p> 方法: Redisson 在tryLock时</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">long</span> threadId <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">protected</span> String <span class="token function">getLockName</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> id <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> threadId<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// id 为 UUID</span></code></pre><p> 会将当前 uuId+线程id写入到锁信息中, unlock时会校验是否是当前线程</p></li><li><p>A lock锁住之后, 设置了时间, 但是在时间内未完成, 导致锁自动释放, 然后B获取锁同时进行操作</p><p> 方法: Redisson 在lock时会启动异步线程, 自动延期, 时间为 lockWatchdogTimeout(默认30s)</p><pre class=" language-java"><code class="language-java"> Timeout task <span class="token operator">=</span> commandExecutor<span class="token punctuation">.</span><span class="token function">getConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newTimeout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     省略<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> internalLockLeaseTime <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 看源码是延时 1/3的时间后开始, 就是每次1/3时间的时候延期一次. 这样理解不知道对不对</p></li><li><p>主从下, A 加锁 Master 成功后未同步给Slave 便宕机, 导致 B发现未加锁<br> 方法: 可以修改源码, 同时加锁Master-Slave 才算加锁成功</p></li><li><p>集群状态下可以参考RedLock(红锁), 加锁多台机器, 多数成功才算成功(locks.size()/2 + 1)</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonRedLock</span> <span class="token keyword">extends</span> <span class="token class-name">RedissonMultiLock</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token function">RedissonRedLock</span><span class="token punctuation">(</span>RLock<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> locks<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>locks<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何落地最终一致性事务</title>
      <link href="/2019/08/17/how-to-land-the-final-consistency-transaction.html"/>
      <url>/2019/08/17/how-to-land-the-final-consistency-transaction.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://liuzhihang.com/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="作业：如果对自己的系统落地最终一致性事务，如何落地实现？"><a href="#作业：如果对自己的系统落地最终一致性事务，如何落地实现？" class="headerlink" title="作业：如果对自己的系统落地最终一致性事务，如何落地实现？"></a>作业：如果对自己的系统落地最终一致性事务，如何落地实现？</h3><ol><li>首先熟悉自己负责的业务, 熟悉系统间交互流程, 哪些可以异步, 哪些是必须同步</li><li>异步的时候要考虑是否需要一致性, 当前系统通知流程如图</li></ol><h3 id="如何落地最终一致性事务"><a href="#如何落地最终一致性事务" class="headerlink" title="如何落地最终一致性事务"></a>如何落地最终一致性事务</h3><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/feature/0812-task.png" alt="最终一致性事务方案"></p><h3 id="根据课程思考最终一致性事务修改"><a href="#根据课程思考最终一致性事务修改" class="headerlink" title="根据课程思考最终一致性事务修改:"></a>根据课程思考最终一致性事务修改:</h3><ol><li>在收到交易请求, 成功时可以 commit half message</li><li>同时 需要实现 check方法, 供RocketMQ回调, 检查本地事务状态</li><li>在交易成功或失败时再进行commit或rollback</li><li>rollback消息 RocketMQ会定期删除</li><li>通知系统收到消息存储到本地并通知商户</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>但是考虑到在这边系统完全没有必要增加事务, 因为发送消息到MQ是在交易结束后, 直接用一个字段判断状态, 然后用定时保证投递到MQ即可.</p><pre><code>RocketMQ的两段提交 half message执行流程根据流程结果: commit/rockback</code></pre><p>可以改成</p><pre><code>执行流程RocketMQ send(普通消息)</code></pre><p>在这边的使用场景中, 因为提交了 half message 也不会发送消息, 等到流程执行结束了, 然后使用send发送普通消息即可.</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交易系统架构图</title>
      <link href="/2019/08/10/trading-system-architecture.html"/>
      <url>/2019/08/10/trading-system-architecture.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://liuzhihang.com/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="交易系统架构"><a href="#交易系统架构" class="headerlink" title="交易系统架构"></a>交易系统架构</h3><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/feature/0806-task.png" alt="交易系统架构"></p><h3 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程:"></a>请求流程:</h3><ol><li>请求首先到SLB(阿里云)经过负载均衡后, 到Nginx</li><li>Nginx做简单负载均衡后发给交易API系统, 4C8G * 5 ECS(阿里云)</li><li>交易会根据请求参数, 路由到各个子系统, 使用dubbo</li><li>子系统收到请求, 请求风控系统校验风控</li><li>请求应用中心获取应用参数 (appId, appKey等)</li><li>拼装报文,请求渠道系统</li><li>返回信息</li></ol><h3 id="日志报送流程"><a href="#日志报送流程" class="headerlink" title="日志报送流程"></a>日志报送流程</h3><ol><li>交易成功报送清结算, 报送数据中心</li><li>filebeat拉取日志, 报送kafka, 因filebeat升级 同时存在5.x和6.x 需要加中间一层, 之前是直接报logstash</li><li>logstash对数据进行过滤然后根据type 分别保送到 elasticsearch和redis</li><li>监控系统监控redis队列数据, 满足规则, 报警(发消息到通知系统)</li><li>监控系统对es数据进行过滤, 放到mysql, 用来展示商户, 渠道的交易变化等信息</li><li>kibana(直接用的kibana)提供给技术支持查询日志. es数据会定期删除, 保留15-30天的数据, 仅仅技术支持用, 不需要效率很高, 所以机器配置相对较差.</li></ol><h3 id="扩容方案"><a href="#扩容方案" class="headerlink" title="扩容方案"></a>扩容方案</h3><p>公司体量较小, QPS高峰期也就500左右, TPS高峰期在100~200, 所以基本没有遇到问题.<br>之前有过一段时间公众号支付交易量较大, 主要做法是增加公众号机器, 同时增加API系统机器.<br>假如交易量提高, 一般应对就是增加机器, 和提高机器配置, 基本上都可以应对.</p><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>定时系统是仅仅通过dubbo发送调用请求, 没有业务逻辑. 所以单体基本没有遇到挂掉. 也在考虑分布式定时任务.</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud架构原理图</title>
      <link href="/2019/08/04/springcloud-architecture-schematic.html"/>
      <url>/2019/08/04/springcloud-architecture-schematic.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://liuzhihang.com/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="springcloud-通信原理"><a href="#springcloud-通信原理" class="headerlink" title="springcloud 通信原理"></a>springcloud 通信原理</h3><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/feature/0731-task.png" alt="通信原理"></p><h3 id="1-Eureka-集群"><a href="#1-Eureka-集群" class="headerlink" title="1. Eureka 集群"></a>1. Eureka 集群</h3><ol><li>Eureka启动后, 会向其他节点注册, 相互直接视为 peer, 并互相同步注册信息.</li></ol><h3 id="2-缓存机制"><a href="#2-缓存机制" class="headerlink" title="2. 缓存机制"></a>2. 缓存机制</h3><p>Eureka存在三个map: registry、readWriteCacheMap、readOnlyCacheMap</p><p>registry: CurrentHashMap 实时更新<br>readWriteCacheMap: Guava Cache/LoadingCache     也是实时更新<br>readOnlyCacheMap: CurrentHashMap 30秒同步 readWriteCacheMap一次</p><h3 id="3-服务注册"><a href="#3-服务注册" class="headerlink" title="3. 服务注册"></a>3. 服务注册</h3><p>服务注册后每30s发送一次心跳(renew)<br>客户端每30秒请注册中心获取一次配置, 并存到本地内存中</p><p>注册中心会定时检查心跳, 连续没有3个回踢掉服务</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo底层原理架构图</title>
      <link href="/2019/08/03/dubbo-bottom-structure-diagram.html"/>
      <url>/2019/08/03/dubbo-bottom-structure-diagram.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://liuzhihang.com/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h4 id="操作流程图"><a href="#操作流程图" class="headerlink" title="操作流程图"></a>操作流程图</h4><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/feature/0730-task.png" alt="操作流程"></p><h4 id="1-服务注册-故障及下线"><a href="#1-服务注册-故障及下线" class="headerlink" title="1. 服务注册, 故障及下线"></a>1. 服务注册, 故障及下线</h4><ol><li>注册: provider和consumer同时在zk上注册临时节点, 同时consumer订阅zk /dubbo/**/providers provider地址, providers发生变化, zk自动推送给consumer</li></ol><p>zk上结构如下</p><pre class=" language-sh"><code class="language-sh">ls /dubbo/cn.xxx.xxxService[consumers, routers, providers, configurators]</code></pre><pre class=" language-url"><code class="language-url">[consumer://机器ip/接口?application=服务名&category=consumers&check=false&default.check=false&default.group=beta&default.timeout=5000&default.version=1.0.0&dubbo=2.6.2&interface=接口&methods=方法1,方法2&pid=7828&revision=0.0.1&side=consumer&timestamp=1556173624632]</code></pre><pre class=" language-url"><code class="language-url">[dubbo://机器1ip:端口/接口?anyhost=true&application=WalletOrderApplicationConsumer&delay=2000&dubbo=2.5.3&group=beta&heartbeat=10000&interface=接口&methods=方法1,方法2&pid=22419&retries=0&revision=1.0.0&side=provider&timeout=10000&timestamp=1564743170669&version=1.0.0,dubbo://机器2ip:端口/接口?anyhost=true&application=WalletOrderApplicationConsumer&delay=2000&dubbo=2.5.3&group=beta&heartbeat=10000&interface=cn.ipaynow.webank.wallet.order.api.provider.DataCenterTaskService&methods=syncRechargesRefund,syncTrans,syncTransCancel,syncTransRefunds,syncRecharges&pid=16801&retries=0&revision=0.0.1&side=provider&timeout=10000&timestamp=1563792977340&version=1.0.0]</code></pre><ol start="2"><li>故障: zk自动删除临时节点</li><li>下线: 取消注册, 主动删除节点</li></ol><h4 id="2-Proxy-动态代理"><a href="#2-Proxy-动态代理" class="headerlink" title="2. Proxy 动态代理"></a>2. Proxy 动态代理</h4><p>根据配置的接口, 生成动态代理对象, 使用 JDK + JAVAASSIST 方式</p><ol><li><p>在服务提供端，将服务的具体实现类转为Invoker</p></li><li><p>在消费端，通过 getProxy(Invoker<T> invoker)将invoker转为客户端需要的接口</p></li><li><p>Invoker封装了Provider地址及Service接口信息</p></li></ol><h4 id="3-Cluster-集群层"><a href="#3-Cluster-集群层" class="headerlink" title="3. Cluster 集群层"></a>3. Cluster 集群层</h4><p>获取到要调用的Invoker</p><ol><li>多个服务端会有多个 Invoker对象, 组合成Directory, Directory在zk推送Provider节点变更时, 会发生变化</li><li>Router, 按照路由规则选出本次可以调用的 Directory子集,  zk注册中心 routers节点下配置</li><li>LoadBalance 从子集中按照负载均衡选出本次调用<ol><li>Random LoadBalance 随机</li><li>RoundRobin LoadBalance 轮询</li><li>LeastActive LoadBalance 最少活跃</li><li>ConsistentHash LoadBalance 一致性哈希</li></ol></li><li>容错<ol><li>Failover Cluster 失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries=”2″ 来设置重试次数(不含第一次)。</li><li>Failfast Cluster：快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</li><li>Failsafe Cluster：失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</li><li>Failback Cluster：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</li><li>Forking Cluster：并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=”2″ 来设置最大并行数。</li></ol></li></ol><h4 id="4-Protocol-远程调用层"><a href="#4-Protocol-远程调用层" class="headerlink" title="4. Protocol 远程调用层"></a>4. Protocol 远程调用层</h4><p>包含两个接口, 分别是 暴露服务(export) 和 引用服务(refer) 分别对应provider 和 consumer<br>选择通信协议 dubbo, hessian, http等</p><h4 id="5-Exchange-数据交换层"><a href="#5-Exchange-数据交换层" class="headerlink" title="5. Exchange 数据交换层"></a>5. Exchange 数据交换层</h4><p>将请求信息封装为Request, 然后发送给 Transport层, 并将返回信息封装为Response</p><h4 id="6-Transport-网络传输层"><a href="#6-Transport-网络传输层" class="headerlink" title="6. Transport 网络传输层"></a>6. Transport 网络传输层</h4><p>使用netty或mina进行网络通信</p><h4 id="7-serialize-序列化层"><a href="#7-serialize-序列化层" class="headerlink" title="7. serialize 序列化层"></a>7. serialize 序列化层</h4><p>将请求报文和返回报文记性序列化和反序列化</p><h4 id="8-provider收到请求后先进行反序列化-然后在解析请求-通过动态代理调用相应方法"><a href="#8-provider收到请求后先进行反序列化-然后在解析请求-通过动态代理调用相应方法" class="headerlink" title="8. provider收到请求后先进行反序列化, 然后在解析请求, 通过动态代理调用相应方法"></a>8. provider收到请求后先进行反序列化, 然后在解析请求, 通过动态代理调用相应方法</h4>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目中使用SpringSecurity和JWT做权限认证</title>
      <link href="/2019/07/22/springsecurity-jwt-springboot-project.html"/>
      <url>/2019/07/22/springsecurity-jwt-springboot-project.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>前段时间做了一个项目, 因为涉及到权限认证, 所以分别调研了 SpringSecurity 和 Apache Shiro. 最后选择使用了 SpringSecurity + JWT做权限认证,  现在项目已经结束, 总相关笔记.<br>项目下载地址 <a href="https://github.com/liuzhihangs/jwt-demo">jwt-demo</a></p></blockquote><ol><li>使用JWT生成token</li><li>token存储在数据库中</li><li>使用 application/json 登录</li><li>使用手机号进行登录</li><li>URI动态拦截</li></ol><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ol><li>分别添加 SpringSecurity JWT 和 fastjson 依赖</li></ol><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--json--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="基础准备对象"><a href="#基础准备对象" class="headerlink" title="基础准备对象"></a>基础准备对象</h3><ul><li>主要是在<strong>用户登录成功handle</strong>时使用JWT生成Token返回给客户端.</li></ul><h4 id="基础使用dto"><a href="#基础使用dto" class="headerlink" title="基础使用dto"></a>基础使用dto</h4><p>请求返回基类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseReqDto</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String version<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseRespDto</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String resultCode<span class="token punctuation">;</span>    <span class="token keyword">private</span> String resultMsg<span class="token punctuation">;</span>    <span class="token keyword">private</span> String resultTime<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>登录请求返回对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginReqDto</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String token<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginRespDto</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRespDto</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String token<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="用于验证的用户"><a href="#用于验证的用户" class="headerlink" title="用于验证的用户"></a>用于验证的用户</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>GrantedAuthority<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetails<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 用户信息校验验证码 * * @author liuzhihang */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用户名     */</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 密码     */</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 权限集合     */</span>    <span class="token keyword">private</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> authorities<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authorities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthorities</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>authorities <span class="token operator">=</span> authorities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="用户未登录handle"><a href="#用户未登录handle" class="headerlink" title="用户未登录handle"></a>用户未登录handle</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用户登录认证, 未登录返回信息 * * @author liuzhihang * @date 2019-06-04 13:52 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationEntryPointImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> DateTimeFormatter FORMATTER <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> AuthenticationException e<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LoginRespDto respDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginRespDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultCode</span><span class="token punctuation">(</span><span class="token string">"0001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultMsg</span><span class="token punctuation">(</span><span class="token string">"用户未登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>FORMATTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>respDto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="用户登录验证失败handle"><a href="#用户登录验证失败handle" class="headerlink" title="用户登录验证失败handle"></a>用户登录验证失败handle</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用户登录认证失败返回的信息 * * @author liuzhihang * @date 2019-06-04 13:57 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationFailureHandlerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationFailureHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> DateTimeFormatter FORMATTER <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> AuthenticationException exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LoginRespDto respDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginRespDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultCode</span><span class="token punctuation">(</span><span class="token string">"0001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultMsg</span><span class="token punctuation">(</span><span class="token string">"用户登录认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>FORMATTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>respDto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="用户无权访问handle"><a href="#用户无权访问handle" class="headerlink" title="用户无权访问handle"></a>用户无权访问handle</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 当用户访问无权限页面时, 返回信息 * * @author liuzhihang * @date 2019-06-04 14:03 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessDeniedHandlerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> DateTimeFormatter FORMATTER <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> AccessDeniedException accessDeniedException<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LoginRespDto respDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginRespDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultCode</span><span class="token punctuation">(</span><span class="token string">"0002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultMsg</span><span class="token punctuation">(</span><span class="token string">"用户无权访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>FORMATTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>respDto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="用户登录成功handle"><a href="#用户登录成功handle" class="headerlink" title="用户登录成功handle"></a>用户登录成功handle</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用户登录成功之后的返回信息 * * @author liuzhihang * @date 2019-06-04 14:20 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationSuccessHandlerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationSuccessHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> DateTimeFormatter FORMATTER <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> JwtTokenUtil jwtTokenUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span>                                        Authentication authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        UserDetailsImpl userDetails <span class="token operator">=</span> <span class="token punctuation">(</span>UserDetailsImpl<span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jwtToken <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把生成的token更新到数据库中</span>        <span class="token comment" spellcheck="true">// 更新DB操作 ...</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LoginRespDto respDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginRespDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultCode</span><span class="token punctuation">(</span><span class="token string">"0000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultMsg</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        respDto<span class="token punctuation">.</span><span class="token function">setResultTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>FORMATTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>respDto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="JwtTokenUtil"><a href="#JwtTokenUtil" class="headerlink" title="JwtTokenUtil"></a>JwtTokenUtil</h2><p>主要用来生成token和通过token解析对象等操作.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>UserDetailsImpl<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Claims<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Jwts<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>SignatureAlgorithm<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetails<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Instant<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 使用 java-jwt jwt类库 * * @author liuzhihang * @date 2019-06-05 09:22 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTokenUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SignatureAlgorithm SIGN_TYPE <span class="token operator">=</span> SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SECRET <span class="token operator">=</span> <span class="token string">"jwt-secret"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * JWT超时时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRED_TIME <span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> 1000L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * claims 为自定义的私有声明, 要放在前面     * &lt;p>     * 生成token     */</span>    <span class="token keyword">public</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>UserDetails userDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> instantNow <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Claims claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">claims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>SUBJECT<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>instantNow<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>instantNow <span class="token operator">+</span> EXPIRED_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SIGN_TYPE<span class="token punctuation">,</span> SECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * claims 为自定义的私有声明, 要放在前面     * &lt;p>     * 生成token     */</span>    <span class="token keyword">public</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> instantNow <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Claims claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">claims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>SUBJECT<span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>instantNow<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>instantNow <span class="token operator">+</span> EXPIRED_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SIGN_TYPE<span class="token punctuation">,</span> SECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将token解析, 映射为 UserDetails     *     * @param jwtToken     * @return     */</span>    <span class="token keyword">public</span> UserDetails <span class="token function">getUserDetailsFromToken</span><span class="token punctuation">(</span>String jwtToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Claims claimsFromToken <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        String userName <span class="token operator">=</span> claimsFromToken<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>SUBJECT<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDetailsImpl userDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDetailsImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDetails<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证token     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">validateToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">,</span> UserDetails userDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserDetailsImpl user <span class="token operator">=</span> <span class="token punctuation">(</span>UserDetailsImpl<span class="token punctuation">)</span> userDetails<span class="token punctuation">;</span>        String username <span class="token operator">=</span> <span class="token function">getPhoneNoFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isTokenExpired</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 刷新令牌     *     * @param token 原令牌     * @return 新令牌     */</span>    <span class="token keyword">public</span> String <span class="token function">refreshToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String refreshedToken<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Claims claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> instantNow <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            refreshedToken <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>instantNow<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>instantNow <span class="token operator">+</span> EXPIRED_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SIGN_TYPE<span class="token punctuation">,</span> SECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            refreshedToken <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> refreshedToken<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取token是否过期     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">isTokenExpired</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date expiration <span class="token operator">=</span> <span class="token function">getExpirationDateFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> expiration<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据token获取username     */</span>    <span class="token keyword">public</span> String <span class="token function">getPhoneNoFromToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取token的过期时间     */</span>    <span class="token keyword">public</span> Date <span class="token function">getExpirationDateFromToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解析JWT     */</span>    <span class="token keyword">private</span> Claims <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="WebSecurityConfig-核心配置"><a href="#WebSecurityConfig-核心配置" class="headerlink" title="WebSecurityConfig 核心配置"></a>WebSecurityConfig 核心配置</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CustomizeAuthenticationFilter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>JwtPerTokenFilter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserDetailServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>AuthenticationManagerBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>HttpSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>EnableWebSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>WebSecurityConfigurerAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>http<span class="token punctuation">.</span>SessionCreationPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span>BCryptPasswordEncoder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>password<span class="token punctuation">.</span>PasswordEncoder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>AuthenticationEntryPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>access<span class="token punctuation">.</span>AccessDeniedHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>AuthenticationFailureHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>AuthenticationSuccessHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>UsernamePasswordAuthenticationFilter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2019-06-03 14:25 */</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDetailServiceImpl userDetailServiceImpl<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> JwtPerTokenFilter jwtPerTokenFilter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"authenticationEntryPointImpl"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"authenticationSuccessHandlerImpl"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> AuthenticationSuccessHandler authenticationSuccessHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"authenticationFailureHandlerImpl"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"accessDeniedHandlerImpl"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> AccessDeniedHandler accessDeniedHandler<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建用于认证授权的用户     *     * @param auth     * @throws Exception     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureUserInfo</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 放入自己的认证授权用户, 内部逻辑需要自己实现</span>        <span class="token comment" spellcheck="true">// UserDetailServiceImpl implements UserDetailsService</span>        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailServiceImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http                <span class="token comment" spellcheck="true">// 使用JWT, 关闭session</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span>SessionCreationPolicy<span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span>authenticationEntryPoint<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 登录的权限, 成功返回信息, 失败返回信息</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 配置url 权限 antMatchers: 匹配url 权限</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token string">"/getVersion"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 其他需要登录才能访问</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"@dynamicAuthorityService.hasPermission(request,authentication)"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 访问无权限 location 时</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span>accessDeniedHandler<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 自定义过滤</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFilterAt</span><span class="token punctuation">(</span><span class="token function">customAuthenticationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UsernamePasswordAuthenticationFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtPerTokenFilter<span class="token punctuation">,</span> UsernamePasswordAuthenticationFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 密码加密器     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PasswordEncoder <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * BCryptPasswordEncoder：相同的密码明文每次生成的密文都不同，安全性更高         */</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    CustomizeAuthenticationFilter <span class="token function">customAuthenticationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        CustomizeAuthenticationFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomizeAuthenticationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setAuthenticationSuccessHandler</span><span class="token punctuation">(</span>authenticationSuccessHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setAuthenticationFailureHandler</span><span class="token punctuation">(</span>authenticationFailureHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setAuthenticationManager</span><span class="token punctuation">(</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="登录校验过程"><a href="#登录校验过程" class="headerlink" title="登录校验过程"></a>登录校验过程</h2><div class="mermaid">          graph TD;    A(请求登录) --> B(CustomizeAuthenticationFilter#attemptAuthentication 解析请求的json);    B --> C(UserDetailServiceImpl#loadUserByUsername 验证用户名密码);    C --> D(AuthenticationSuccessHandlerImpl#onAuthenticationSuccess 构建返回参数 包括token);    D --> E(返回结果)          </div><h3 id="自定义拦截器解析-json-报文"><a href="#自定义拦截器解析-json-报文" class="headerlink" title="自定义拦截器解析 json 报文"></a>自定义拦截器解析 json 报文</h3><p>前端请求登录报文类型为 application/json 需要后端增加拦截器, 对登录请求报文进行解析</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>MediaType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>AuthenticationServiceException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>UsernamePasswordAuthenticationToken<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Authentication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>UsernamePasswordAuthenticationFilter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * * 自定义拦截器, 重写UsernamePasswordAuthenticationFilter 从而可以处理 application/json 中的json请求报文 * * @author liuzhihang * @date 2019-06-12 19:04 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomizeAuthenticationFilter</span> <span class="token keyword">extends</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Authentication <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>        <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// attempt Authentication when Content-Type is json</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8_VALUE<span class="token punctuation">)</span>            <span class="token operator">||</span> request<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                BufferedReader br <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String str<span class="token punctuation">;</span>                StringBuilder jsonStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    jsonStr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"本次登录请求参数:{}"</span><span class="token punctuation">,</span> jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                JSONObject jsonObject <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                UsernamePasswordAuthenticationToken authRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>                    jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAuthenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户登录, 请求参数 不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationServiceException</span><span class="token punctuation">(</span><span class="token string">"获取报文请求参数失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户登录, 请求报文格式 不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationServiceException</span><span class="token punctuation">(</span><span class="token string">"请求报文, 转换Json失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"用户登录, contentType 不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationServiceException</span><span class="token punctuation">(</span>                <span class="token string">"请求 contentType 不正确, 请使用 application/json;charset=UTF-8 或者 application/json;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="用户认证模块"><a href="#用户认证模块" class="headerlink" title="用户认证模块"></a>用户认证模块</h3><ul><li>根据获取到的username从数据库中查询到密码, 将用户名密码赋值给UserDetails对象, 返回其他的框架会进行校验</li><li>这边使用中是使用的手机号+验证码登录, 所以 上面json解析的也是 phoneNo+verificationCode</li><li>在这块 username仅仅代指登录名, 可以是手机号可以是别的.</li><li>这边使用中验证码是从redis中获取的. 获取不到返回失败, 获取到和传递的不一致也算失败.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>UserDetailsImpl<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetails<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetailsService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UsernameNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span>BCryptPasswordEncoder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"userDetailServiceImpl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用来验证登录名是否有权限进行登录     *     * 可以通过数据库进行校验 也可以通过redis 等等     *     * @param username     * @return     * @throws UsernameNotFoundException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>        UserDetailsImpl userDetailsImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDetailsImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDetailsImpl<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"liuzhihang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDetailsImpl<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userDetailsImpl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="请求校验过程"><a href="#请求校验过程" class="headerlink" title="请求校验过程"></a>请求校验过程</h2><div class="mermaid">          graph TD;    A(请求接口) --> B(JwtPerTokenFilter#doFilterInternal 验证Header中的token);    B --> C(DynamicAuthorityService#hasPermission 验证有没有请求url权限);    C --> D(处理逻辑);    D --> E(返回结果)          </div><h3 id="JWTToken拦截器"><a href="#JWTToken拦截器" class="headerlink" title="JWTToken拦截器"></a>JWTToken拦截器</h3><p>主要是拦截请求, 验证Header中的token是否正确</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JwtTokenUtil<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>UsernamePasswordAuthenticationToken<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SecurityContextHolder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetails<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>WebAuthenticationDetailsSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>OncePerRequestFilter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2019-06-05 09:09 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtPerTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JwtTokenUtil jwtTokenUtil<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 存放Token的Header Key     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HEADER_STRING <span class="token operator">=</span> <span class="token string">"token"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>HEADER_STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> token <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>jwtTokenUtil<span class="token punctuation">.</span><span class="token function">isTokenExpired</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UserDetails userDetails <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">getUserDetailsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            String username <span class="token operator">=</span> userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 通过 username 查询数据库 获取token 然后和库中token作比较</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"liuzhihang"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    UsernamePasswordAuthenticationToken authentication <span class="token operator">=</span>                            <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> null<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    authentication<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetailsSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="URI动态校验"><a href="#URI动态校验" class="headerlink" title="URI动态校验"></a>URI动态校验</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>UsernamePasswordAuthenticationToken<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Authentication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetails<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 动态权限认证 * * @author liuzhihang * @date 2019-06-25 15:51 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"dynamicAuthorityService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicAuthorityService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPermission</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Authentication authentication<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object principal <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>principal <span class="token keyword">instanceof</span> <span class="token class-name">UserDetails</span> <span class="token operator">&amp;&amp;</span> authentication <span class="token keyword">instanceof</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 本次请求的uri</span>                String uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 获取当前用户</span>                UserDetails userDetails <span class="token operator">=</span> <span class="token punctuation">(</span>UserDetails<span class="token punctuation">)</span> principal<span class="token punctuation">;</span>                String username <span class="token operator">=</span> userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"本次用户请求认证, username:{}, uri:{}"</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 从数据库取逻辑</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"liuzhihang"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"/homeInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"/getAllUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"/editUserInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"用户请求登录, uri:{} error"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>脚本在 <a href="https://github.com/liuzhihangs/jwt-demo/blob/master/src/test/java/ReqTest.http">httpclient脚本</a></p><pre class=" language-http"><code class="language-http">POST localhost:8080/login<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"liuzhihang"</span><span class="token punctuation">,</span>  <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"123456789"</span><span class="token punctuation">}</span>### 请求接口脚本POST localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>homeInfoContent<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>jsontoken<span class="token punctuation">:</span> eyJhbGciOiJIUzI1NiJ9<span class="token punctuation">.</span>eyJzdWIiOiJsaXV6aGloYW5nIiwiaWF0IjoxNTY5MDI1NjY4LCJleHAiOjE1Njk2MzA0Njh9<span class="token punctuation">.</span>Kot_uLnwtcq<span class="token operator">-</span>t5o4x3V<span class="token operator">-</span>xBnpf<span class="token operator">-</span>mKEi7OV2eAfgMCKLk###</span></code></pre><p>返回:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"resultCode"</span><span class="token operator">:</span> <span class="token string">"0000"</span><span class="token punctuation">,</span>  <span class="token property">"resultMsg"</span><span class="token operator">:</span> <span class="token string">"登录成功"</span><span class="token punctuation">,</span>  <span class="token property">"resultTime"</span><span class="token operator">:</span> <span class="token string">"20190920191038"</span><span class="token punctuation">,</span>  <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsaXV6aGloYW5nIiwiaWF0IjoxNTY4OTc3ODM4LCJleHAiOjE1Njk1ODI2Mzh9.MAS9VkFdCF3agkCgTtc0VzPMFjY42vFyIvAEzkSeAfs"</span><span class="token punctuation">}</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/larger5/article/details/81063438">前后端分离 SpringBoot + SpringSecurity + JWT + RBAC 实现用户无状态请求验证</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk使用MD5生成Id</title>
      <link href="/2019/07/20/gitalk-uses-md5-to-generate-an-id.html"/>
      <url>/2019/07/20/gitalk-uses-md5-to-generate-an-id.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Gitalk默认使用: location.pathname 作为 gitalk 的id, 但是location.path必须小于50位切换主题时, 每个主题使用的处理方式都不相同, 有可能会导致换了主题, 发现之前的评论不见了, 下面介绍使用MD5作为id, 同时在换主题时一定要修改这个id的规则.</p></blockquote><h3 id="Gitalk使用"><a href="#Gitalk使用" class="headerlink" title="Gitalk使用"></a>Gitalk使用</h3><p>使用<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">Gitalk</a>方法:</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      clientID<span class="token punctuation">:</span> <span class="token string">'GitHub Application Client ID'</span><span class="token punctuation">,</span>      clientSecret<span class="token punctuation">:</span> <span class="token string">'GitHub Application Client Secret'</span><span class="token punctuation">,</span>      repo<span class="token punctuation">:</span> <span class="token string">'GitHub repo'</span><span class="token punctuation">,</span>      owner<span class="token punctuation">:</span> <span class="token string">'GitHub repo owner'</span><span class="token punctuation">,</span>      admin<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      id<span class="token punctuation">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// Ensure uniqueness and length less than 50</span>      distractionFreeMode<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">// Facebook-like distraction free mode</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    gitalk<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span></code></pre><h3 id="使用MD5生成id"><a href="#使用MD5生成id" class="headerlink" title="使用MD5生成id"></a>使用MD5生成id</h3><ol><li>引入js</li></ol><p><a href="https://github.com/blueimp/JavaScript-MD5">MD5</a> js 下载地址</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/md5.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ol start="2"><li>修改js</li></ol><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> gitalk_id <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> page<span class="token punctuation">.</span>comments_type <span class="token operator">==</span> <span class="token string">'404'</span>   <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        gitalk_id <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'https://liuzhihang.com/404'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        clientID<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.gitalk.oauth.clientId %>'</span><span class="token punctuation">,</span>        clientSecret<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.gitalk.oauth.clientSecret %>'</span><span class="token punctuation">,</span>        repo<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.gitalk.repo %>'</span><span class="token punctuation">,</span>        owner<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.gitalk.owner %>'</span><span class="token punctuation">,</span>        admin<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>gitalk<span class="token punctuation">.</span>admin<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">,</span>        id<span class="token punctuation">:</span> gitalk_id<span class="token punctuation">,</span>        distractionFreeMode<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">// Facebook-like distraction free mode</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gitalk<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA插件--Toolkit</title>
      <link href="/2019/05/11/idea-plugin-toolkit.html"/>
      <url>/2019/05/11/idea-plugin-toolkit.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Toolkit"><a href="#Toolkit" class="headerlink" title="Toolkit"></a>Toolkit</h1><div><a href="https://plugins.jetbrains.com/plugin/12384-toolkit"><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://img.shields.io/jetbrains/plugin/v/12384-toolkit.svg" alt="JetBrains Plugins"></a><a href="https://plugins.jetbrains.com/plugin/12384-toolkit/versions"><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="http://phpstorm.espend.de/badge/12384/version" alt="Version"></a><a href="https://plugins.jetbrains.com/plugin/12384-toolkit"><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://img.shields.io/jetbrains/plugin/d/12384-toolkit.svg" alt="Downloads"></a><a href="https://github.com/liuzhihangs/toolkit/blob/master/LICENSE"><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://img.shields.io/badge/license-MIT-red.svg" alt="License"></a></div><p>一个小工具包, 暂时还有很多功能需要扩展.</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul><li>Mybatis<ul><li>通过侧栏箭头在 MyBatis XML文件和 Mapper文件之间相互跳转</li><li>mapper文件id简单检查</li></ul></li><li>Json<ul><li>JavaBean复制为Json字符串</li><li>Json字符串格式化</li><li>Json字符串转换为JavaBean</li><li>Json压缩</li></ul></li><li>XML: Xml格式化</li></ul><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ul><li>文末演示</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p><strong>在线安装:</strong></p><ul><li><code>File</code> -&gt; <code>Setting</code> -&gt; <code>Plugins</code> -&gt; 搜索 <code>Toolkit</code></li></ul></li><li><p><strong>手动安装:</strong></p><ul><li><a href="https://github.com/liuzhihangs/toolkit/releases">下载插件</a> -&gt; <code>File</code> -&gt; <code>Setting</code> -&gt; <code>Plugins</code> -&gt; <code>Install Plugin from Disk...</code></li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>右键菜单选择 <code>Tookit</code></li></ul><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h2 id="v1-0-7-2020-02-27"><a href="#v1-0-7-2020-02-27" class="headerlink" title="v1.0.7 (2020-02-27)"></a><a href="https://github.com/liuzhihangs/toolkit/releases/tag/v1.0.7">v1.0.7</a> (2020-02-27)</h2><ul><li>修改使用包装类型</li></ul><p><a href="./doc/ChangeNotes.md">查看更多历史更新记录</a></p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><h5 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis:"></a>MyBatis:</h5><p>&emsp;mybatis support: <a href="https://github.com/zhaoqin102/mybatis-support">https://github.com/zhaoqin102/mybatis-support</a></p><p>&emsp;free-idea-mybatis: <a href="https://github.com/wuzhizhan/free-idea-mybatis">https://github.com/wuzhizhan/free-idea-mybatis</a></p><h5 id="Json"><a href="#Json" class="headerlink" title="Json:"></a>Json:</h5><p>&emsp;GsonFormat: <a href="https://github.com/zzz40500/GsonFormat">https://github.com/zzz40500/GsonFormat</a></p><h2 id="本工具使用-JetBrains-IDEA-进行开发"><a href="#本工具使用-JetBrains-IDEA-进行开发" class="headerlink" title="本工具使用 JetBrains IDEA 进行开发"></a>本工具使用 JetBrains IDEA 进行开发</h2><p><a href="https://www.jetbrains.com/?from=Toolkit"><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/toolkit/jetbrains-logo.png" width="20%" height="20%"></a><a href="https://www.jetbrains.com/?from=Toolkit"><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/toolkit/idea-logo.png" width="20%" height="20%"> </a></p><h2 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h2><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/toolkit/copy-as-json.png" alt="copy-as-json"><br><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="https://liuzhihang.com/oss/pic/toolkit/gif.gif" alt="gif"></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch cat API</title>
      <link href="/2019/03/14/elasticsearch-cat-api.html"/>
      <url>/2019/03/14/elasticsearch-cat-api.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="cat-API"><a href="#cat-API" class="headerlink" title="cat API"></a>cat API</h4><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html">官方地址</a></p><blockquote><p>GET /_cat/XXX?v<br>GET /_cat/XXX?v&amp;format=json</p></blockquote><p>v 是指带着列信息</p><p>支持指定返回内容的格式 默认为text</p><p>?format=text(json/smile/yaml/cbor)</p><a id="more"></a><h5 id="查看节点别名"><a href="#查看节点别名" class="headerlink" title="查看节点别名"></a>查看节点别名</h5><blockquote><p>GET /_cat/aliases?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/aliases?v”</p></blockquote><h5 id="每个节点分配了几个shard，对磁盘的占用空间大小，使用率"><a href="#每个节点分配了几个shard，对磁盘的占用空间大小，使用率" class="headerlink" title="每个节点分配了几个shard，对磁盘的占用空间大小，使用率"></a>每个节点分配了几个shard，对磁盘的占用空间大小，使用率</h5><blockquote><p>GET /_cat/allocation?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/allocation?v”</p></blockquote><h5 id="群集或单个索引的document计数"><a href="#群集或单个索引的document计数" class="headerlink" title="群集或单个索引的document计数"></a>群集或单个索引的document计数</h5><blockquote><p>GET /_cat/count?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/count?v</p><p>GET /_cat/count/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/count/index_name?v”</p></blockquote><h5 id="显示集群中每个数据节点上fielddata当前正在使用的堆内存量"><a href="#显示集群中每个数据节点上fielddata当前正在使用的堆内存量" class="headerlink" title="显示集群中每个数据节点上fielddata当前正在使用的堆内存量"></a>显示集群中每个数据节点上fielddata当前正在使用的堆内存量</h5><blockquote><p>GET /_cat/fielddata?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/fielddata?v”</p></blockquote><h5 id="查看集群健康情况"><a href="#查看集群健康情况" class="headerlink" title="查看集群健康情况"></a>查看集群健康情况</h5><blockquote><p>GET /_cat/health?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/health?v”</p></blockquote><h5 id="查看索引的信息"><a href="#查看索引的信息" class="headerlink" title="查看索引的信息"></a>查看索引的信息</h5><blockquote><p>GET _cat/indices?v<br>GET _cat/indices/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/indices/twi*?v&amp;s=index”</p></blockquote><h5 id="查看master信息"><a href="#查看master信息" class="headerlink" title="查看master信息"></a>查看master信息</h5><blockquote><p>GET /_cat/master?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/master?v”</p></blockquote><h5 id="查看node信息"><a href="#查看node信息" class="headerlink" title="查看node信息"></a>查看node信息</h5><blockquote><p>GET /_cat/nodes?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/nodes?v”</p></blockquote><h5 id="当前pending没执行完的task的具体情况，执行的是什么操作"><a href="#当前pending没执行完的task的具体情况，执行的是什么操作" class="headerlink" title="当前pending没执行完的task的具体情况，执行的是什么操作"></a>当前pending没执行完的task的具体情况，执行的是什么操作</h5><blockquote><p>创建索引，更新映射，分配或失败分片的列表<br>GET /_cat/pending_tasks?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/pending_tasks?v”</p></blockquote><h5 id="查看安装的插件"><a href="#查看安装的插件" class="headerlink" title="查看安装的插件"></a>查看安装的插件</h5><blockquote><p>GET /_cat/plugins?v&amp;s=component&amp;h=name,component,version,description<br>curl -X GET “192.168.xxx.xxx:9200/_cat/plugins?v&amp;s=component&amp;h=name,component,version,description”</p></blockquote><h5 id="shard-recovery恢复的过程情况"><a href="#shard-recovery恢复的过程情况" class="headerlink" title="shard recovery恢复的过程情况"></a>shard recovery恢复的过程情况</h5><blockquote><p>GET /_cat/recovery?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/recovery?v”</p></blockquote><h5 id="查看在群集中注册的快照存储库"><a href="#查看在群集中注册的快照存储库" class="headerlink" title="查看在群集中注册的快照存储库"></a>查看在群集中注册的快照存储库</h5><blockquote><p>GET /_cat/repositories?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/repositories?v</p></blockquote><h5 id="查看线程池使用"><a href="#查看线程池使用" class="headerlink" title="查看线程池使用"></a>查看线程池使用</h5><blockquote><p>GET /_cat/thread_pool<br>curl -X GET “192.168.xxx.xxx:9200/_cat/thread_pool”</p></blockquote><h5 id="查看shard情况"><a href="#查看shard情况" class="headerlink" title="查看shard情况"></a>查看shard情况</h5><blockquote><p>GET _cat/shards?v<br>GET _cat/shards/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/shards/index_name?v</p></blockquote><h5 id="索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索"><a href="#索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索" class="headerlink" title="索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索"></a>索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索</h5><blockquote><p>GET /_cat/segments?v<br>GET _cat/segments/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/segments/index_name?v</p></blockquote><h5 id="查看tempalte"><a href="#查看tempalte" class="headerlink" title="查看tempalte"></a>查看tempalte</h5><blockquote><p>GET /_cat/templates?v&amp;s=name<br>curl -X GET “192.168.xxx.xxx:9200/_cat/templates?v&amp;s=name”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么es集群至少需要三个节点</title>
      <link href="/2019/03/13/why-does-the-es-cluster-require-at-least-three-nodes.html"/>
      <url>/2019/03/13/why-does-the-es-cluster-require-at-least-three-nodes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="elasticsearch集群"><a href="#elasticsearch集群" class="headerlink" title="elasticsearch集群"></a>elasticsearch集群</h4><div class="mermaid">          graph LR;    A(Master Node) --- B(Data Node);    A --- C(Data Node);    B --- C;          </div><p>Master: 在Elasticsearch中Master仅仅负责维护集群的状态</p><blockquote><ol><li>创建或删除索引</li><li>跟踪哪些节点是集群的一部分</li><li>决定将哪些碎片分配给哪个节点</li><li>等集群范围的操作</li></ol></blockquote><p>上面的一些集群信息, 是由Master节点进行维护, 但是 Master也会把节点信息, 同步给其他节点, 但是只有master节点可以修改.</p><a id="more"></a><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html">点击查看Elasticsearch节点介绍</a></p><h4 id="为什么要至少三个节点"><a href="#为什么要至少三个节点" class="headerlink" title="为什么要至少三个节点"></a>为什么要至少三个节点</h4><p>首先查看 Elasticsearch 的配置文件, 如下:<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-zen.html">Zen Discovery 官方介绍</a></p><pre class=" language-yml"><code class="language-yml"># 传递初始主机列表，以便在启动新节点时执行发现discovery.zen.ping.unicast.hosts: ["192.168.xxx.xxx:9300", "192.168.xxx.xxx:9300"]# 选举Maste时需要的节点数 (total number of master-eligible nodes / 2 + 1) 防止“防止脑裂”discovery.zen.minimum_master_nodes: 2# 一个节点多久ping一次，默认1sdiscovery.zen.fd.ping_interval: 1s# 等待ping返回时间，默认30sdiscovery.zen.fd.ping_timeout: 30s# ping超时重试次数，默认3次discovery.zen.fd.ping_retries: 3</code></pre><pre><code>discovery.zen.minimum_master_nodes: 2</code></pre><p>其中 minimum_master_nodes 配置是为了防止脑裂</p><h5 id="假设-Elasticsearch-有两个节点"><a href="#假设-Elasticsearch-有两个节点" class="headerlink" title="假设 Elasticsearch 有两个节点"></a>假设 Elasticsearch 有两个节点</h5><div class="mermaid">          graph LR;    A(Master Node) --- B(Data Node);          </div><div class="mermaid">          graph LR;    A(Master Node) -.X.- B(Data Node);          </div><ol><li><p>discovery.zen.minimum_master_nodes: 1</p><blockquote><p>此时出现网络波动, 导致 A—B 之间短暂断开连接,  根据选举规则, B将自己选举为 Master, 当网络波动结束, 就会出现两个Master的情况.</p></blockquote> <div class="mermaid">          graph LR;    A(Master Node 宕机) --- B(Data Node);          </div></li></ol><ol start="2"><li>discovery.zen.minimum_master_nodes: 2<blockquote><p>Master 出现故障, 则 B 将永远不可能将自己选择为 Master</p></blockquote></li></ol><h5 id="Elasticsearch-有三个节点"><a href="#Elasticsearch-有三个节点" class="headerlink" title="Elasticsearch 有三个节点"></a>Elasticsearch 有三个节点</h5><p>三节点配置: discovery.zen.minimum_master_nodes: 2</p><div class="mermaid">          graph LR;    A(Master Node) -.X.- B(Data Node);    A -.X.- C(Data Node);    B --- C;          </div><p>出现网络波动 A 节点 和 别的节点短暂断开连接</p><div class="mermaid">          graph LR;    A(Master Node -> Data Node) -.X.- B(Data Node -> Master Node);    A -.X.- C(Data Node);    B --- C;          </div><p>A节点降级, B和C 进行选举, 此处模拟选举B为 Master Node</p><div class="mermaid">          graph LR;    A(Data Node) --- B(Master Node);    A --- C(Data Node);    B --- C;          </div><p>网络恢复后的节点状况.</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上可以看出, 通过配置 minimum_master_nodes 来防止出现脑裂<br>同时在生产过程中, 为了尽量保持集群高可用, 至少需要三台机器搭建集群</p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 数据写入流程</title>
      <link href="/2019/03/12/elasticsearch-data-writing-process.html"/>
      <url>/2019/03/12/elasticsearch-data-writing-process.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h4><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="/resources/image/elk/elasticsearch-writing-process.png" alt="elasticsearch写入过程"></p><ol><li><p>客户端随机选择一个node发送数据, 此时该node为协调节点(coordinating node)<br> 1.1. coordinating node 通过 _id计算出该document在哪个shard上, 假设为shard0, 计算方式如下:</p><blockquote><p>hash(_id) % number_of_primary_shards</p></blockquote><p> 1.2. node 根据 cluster state 获取到 shard0 在 node1 上</p><a id="more"></a></li><li><p>将消息发送到 node1 的 P0 上</p></li><li><p>P0 收到数据后, 将数据同步到 自己的 replica shard R0上</p></li><li><p>P0 和 R0 都处理完毕, 才会返回客户端成功</p></li></ol><blockquote><p>Px 为 primary shard<br>Rx 为 replica shard<br>当客户端请求为查询时, 路由到任意 shard(primary shard 或者 replica shard) 查询到数据即可返回.</p></blockquote><h4 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h4><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="/resources/image/elk/elasticsearch-writing-detailed-process.png" alt="elasticsearch-writing-detailed-process"></p><ol><li>P0收到document, 同时将数据写入到 内存buffer和translog中</li><li>每隔1s或buffer满时, buffer中的数据会 refresh 到segment中, 而后进入os cache, 一旦segment进入到 cache中,其中的数据, 则可以被搜索到<blockquote><p>refresh 时间可以手动设置, 也可以手动触发 refresh</p></blockquote></li><li>清空buffer, translog不处理</li><li>重复1-3操作, translog不断增大, translog每隔30分钟,或大到一定量时, 会触发commit操作</li><li>将buffer中内容刷新到segment中, 并清空buffer</li><li>将一个commit point 写入到磁盘文件中, 标识此次commit 对应的 segment</li><li>执行 fsync 将 os cache 中的数据强制刷新到磁盘文件中</li><li>删除 translog 文件</li></ol><h5 id="删除和更新操作"><a href="#删除和更新操作" class="headerlink" title="删除和更新操作"></a>删除和更新操作</h5><blockquote><p>在commit时, 如果操作为删除, 生成一个 .del文件, 其中将该document标记位deleted, 并不是真正的物理删除, 此时如果有查询请求, 会先查询 .del文件中是否有该记录, 如果有, 则回复不存在.<br>在commit时, 如果为更新操作, 则是将原document标记位deleted, 同时写入一条新数据</p></blockquote><h5 id="服务宕机重启-translog-日志作用"><a href="#服务宕机重启-translog-日志作用" class="headerlink" title="服务宕机重启, translog 日志作用"></a>服务宕机重启, translog 日志作用</h5><blockquote><p>translog是先写入到 os cache中, 然后每隔5s写入到磁盘文件中, 假如服务宕掉, 可能会失去5s数据, 也可以修改写入磁盘的时机, 但是可能会影响性能<br>translog中记录的是数据操作信息, 在服务宕机重启时, 会读取translog磁盘文件, 然后将translog中的数据重新恢复到 segment中, 然后进行后续操作</p></blockquote><h5 id="segment-merge-过程"><a href="#segment-merge-过程" class="headerlink" title="segment merge 过程"></a>segment merge 过程</h5><blockquote><p>segment 持续生成, 会导致 segment不断变多, 占用<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E5%8F%A5%E6%9F%84">文件句柄</a>, cpu资源等等<br>es后台有一个专门的程序负责合并segment, 将小的 segment 合成大的segment, 同时写一个commit point, 标识 新的segment file.<br>打开新的segment供查询使用, 删除旧的 segment<br>segment 合并过程中, 被标记位 deleted 的document 不会被合并. 即: 在合并 segment时, 才将 document 真正物理删除<br>合并的segment 可以使磁盘上已经commit的索引 也可以是内存中还未commit的索引</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash input多个kafka异常</title>
      <link href="/2019/03/04/logstash-input-multiple-kafka-exceptions.html"/>
      <url>/2019/03/04/logstash-input-multiple-kafka-exceptions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><div class="mermaid">          graph LR;    filebeat --> logstash;    log4j --> logstash;    logstash --> es;          </div><p>filebeat 和 log4j appender 同时到 kafka, logstash在启动时报错, 错误如下:</p><pre><code>javax.management.InstanceAlreadyExistsException: kafka.consumer:type=app-info,id=logstash-0</code></pre><a id="more"></a><h5 id="问题原因及解决"><a href="#问题原因及解决" class="headerlink" title="问题原因及解决"></a>问题原因及解决</h5><p>input 消费kafka时, 分别指定不同的 client_id.</p><pre><code>kafka {        bootstrap_servers =&gt; [&quot;192.168.103.43:9092&quot;] # 注意这里配置的kafka的broker地址不是zk的地址        client_id =&gt; &quot;kafka_client_1&quot;        group_id =&gt; &quot;logstash&quot;        topics =&gt; [&quot;ipaynow_log&quot;]  # kafka topic 名称        consumer_threads =&gt; 5        decorate_events =&gt; true        type =&gt; &quot;string&quot;        codec =&gt; &quot;json&quot;}kafka {        bootstrap_servers =&gt; [&quot;192.168.103.43:9092&quot;] # 注意这里配置的kafka的broker地址不是zk的地址        client_id =&gt; &quot;kafka_client_2&quot;        group_id =&gt; &quot;logstash&quot;        topics =&gt; [&quot;ipaynow-hunter&quot;]  # kafka topic 名称        consumer_threads =&gt; 5        decorate_events =&gt; true        type =&gt; &quot;string&quot;        codec =&gt; plain { charset=&gt;&quot;UTF-8&quot; }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序无异常中断</title>
      <link href="/2019/02/15/no-abnormal-interruption-of-the-program.html"/>
      <url>/2019/02/15/no-abnormal-interruption-of-the-program.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><ol><li>程序执行到某一处之后停顿, 不能继续执行, 不抛出异常, 无返回值</li><li>本地测试正常</li><li>debug可以正常执行</li><li>操作为入库之前, 创建对象, 是一个很简单的set操作</li></ol><blockquote><p>payInfoExtra.setToAccType(agPayReqDto.getToAccType().getValue());</p><p>其中get操作获取的为一个枚举, 主要操作为从枚举中获取value set到另一个对象中</p></blockquote><a id="more"></a><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> AccTypeEnum <span class="token function">getToAccType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> toAccType<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="问题原因及解决"><a href="#问题原因及解决" class="headerlink" title="问题原因及解决"></a>问题原因及解决</h4><p>小伙伴在他们项目中复用本项目中的枚举类, 没有修改包名类名, 但是把枚举中value字段从 byte改成了String, 同时放在了依赖中, 提供给我们使用.<br>解决方案就很简单了, 让小伙伴修改包名类名就可以了.<br>原枚举类如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> AccTypeEnum <span class="token punctuation">{</span>    <span class="token function">PRI</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"对私"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PUB</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"对公"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span> value<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>skywalking5集群部署</title>
      <link href="/2018/12/27/skywalking5-cluster-deployment.html"/>
      <url>/2018/12/27/skywalking5-cluster-deployment.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><ol><li>skywalking-5.0.0-GA</li><li>zookeeper-3.4.10</li><li>elasticsearch-5.6.14</li></ol><p>下载地址如下:</p><pre><code>skywalking: http://skywalking.apache.org/downloads/zookeeper: http://mirrors.hust.edu.cn/apache/zookeeper/elasticsearch: https://www.elastic.co/downloads/past-releases</code></pre><a id="more"></a><h4 id="安装zk集群"><a href="#安装zk集群" class="headerlink" title="安装zk集群"></a>安装zk集群</h4><ol><li>下载并解压zk<pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz<span class="token function">tar</span> -xvf zookeeper-3.4.10.tar.gz</code></pre></li><li>修改配置文件<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> zookeeper-3.4.10/conf/<span class="token function">cp</span> zoo_sample.cfg zoo.cfgvim zoo.cfg</code></pre></li><li>内容如下<pre class=" language-bash"><code class="language-bash">tickTime<span class="token operator">=</span>2000initLimit<span class="token operator">=</span>10syncLimit<span class="token operator">=</span>5dataDir<span class="token operator">=</span>/opt/export/app/zookeeper-3.4.10/dataclientPort<span class="token operator">=</span>2181server.1<span class="token operator">=</span>192.168.***.236:2888:3888server.2<span class="token operator">=</span>192.168.***.237:2888:3888</code></pre></li><li>写入集群myid<pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> 1 <span class="token operator">></span> /opt/export/app/zookeeper-3.4.10/data/myid<span class="token comment" spellcheck="true"># 另一台机器则写入2</span></code></pre></li><li>zk基本命令<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在zk的bin目录下</span><span class="token comment" spellcheck="true"># 启动</span>./zkServer.sh start<span class="token comment" spellcheck="true"># 停止</span>./zkServer.sh stop<span class="token comment" spellcheck="true"># 查看状态</span>./zkServer.sh status<span class="token comment" spellcheck="true"># 查看zk的节点</span>./zkCli.sh<span class="token comment" spellcheck="true"># 连接后使用 ls / 命令查看</span><span class="token function">ls</span> /skywalking</code></pre></li></ol><h4 id="安装es集群"><a href="#安装es集群" class="headerlink" title="安装es集群"></a>安装es集群</h4><ol><li>下载并解压es<pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.14.tar.gz<span class="token function">tar</span> -xvf elasticsearch-5.6.14.tar.gz</code></pre></li><li>修改配置文件<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> elasticsearch-5.6.14/config/vim elasticsearch.yml</code></pre></li><li>内容如下<pre class=" language-bash"><code class="language-bash">cluster.name: CollectorDBClusternode.name: node-1path.data: /opt/export/app/elasticsearch-5.6.14/datapath.logs: /opt/export/app/elasticsearch-5.6.14/logsnetwork.host: 192.168.***.234discovery.zen.ping.unicast.hosts: <span class="token punctuation">[</span><span class="token string">"192.168.***.234:9300"</span>, <span class="token string">"192.168.***.235:9300"</span><span class="token punctuation">]</span>discovery.zen.minimum_master_nodes: 2bootstrap.memory_lock: <span class="token boolean">false</span>bootstrap.system_call_filter: <span class="token boolean">false</span><span class="token comment" spellcheck="true"># 修改上报数据线程池大小</span>thread_pool.bulk.queue_size: 1000</code></pre></li><li>常用命令<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 后台启动</span>bin/elasticsearch -d<span class="token comment" spellcheck="true"># 删除所有索引</span>curl -XDELETE 192.168.***.234:9200/*</code></pre></li></ol><h4 id="安装skywalking"><a href="#安装skywalking" class="headerlink" title="安装skywalking"></a>安装skywalking</h4><p>☞ <a href="https://github.com/apache/incubator-skywalking/blob/v5.0.0-GA/docs/cn/Deploy-backend-in-cluster-mode-CN.md">官方地址</a></p><ol><li>下载并解压<pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://mirrors.shu.edu.cn/apache/incubator/skywalking/5.0.0-GA/apache-skywalking-apm-incubating-5.0.0-GA.tar.gz<span class="token function">tar</span> -xvf apache-skywalking-apm-incubating-5.0.0-GA.tar.gz<span class="token function">mv</span> apache-skywalking-apm-incubating-5.0.0-GA skywalking-5.0.0-GA</code></pre></li><li>修改配置<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> skywalking-5.0.0-GA/config/vim application.yml</code></pre></li><li>修改内容如下<ol><li>集群配置<pre class=" language-bash"><code class="language-bash"> cluster:     zookeeper:         hostPort: 192.168.***.236:2181,192.168.***.237:2181         sessionTimeout: 100000</code></pre></li><li>es配置<pre class=" language-bash"><code class="language-bash"> storage:     elasticsearch:         clusterName: CollectorDBCluster         clusterTransportSniffer: <span class="token boolean">true</span>         clusterNodes: 192.168.***.234:9300,192.168.***.235:9300         <span class="token comment" spellcheck="true"># 其他配置</span></code></pre></li><li>其他配置<pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># host配置修改</span> host: 192.168.***.236</code></pre></li></ol></li><li>修改webapp配置<pre class=" language-bash"><code class="language-bash">vim webapp/webapp.yml</code></pre><pre class=" language-yml"><code class="language-yml">collector: path: /graphql ribbon:     ReadTimeout: 10000     listOfServers: 192.168.**.236:10800,192.168.**.237:10800</code></pre></li><li>常用命令<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动collector+webUI</span>bin/startup.sh<span class="token comment" spellcheck="true"># 只启动collector或webUI</span>bin/collectorService.shbin/webappService.sh</code></pre></li><li>探针使用<br> ☞ <a href="https://github.com/apache/incubator-skywalking/blob/v5.0.0-GA/docs/cn/Deploy-skywalking-agent-CN.md">官方地址</a><pre><code> java -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -jar yourApp.jar</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> skywalking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> skywalking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash时间戳差8个小时</title>
      <link href="/2018/12/20/logstash-timestamp-difference-8-hours.html"/>
      <url>/2018/12/20/logstash-timestamp-difference-8-hours.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h4><p>原始配置:</p><pre class=" language-logstash"><code class="language-logstash">elasticsearch {        # manage_template => false        template_overwrite => true        template => "/opt/export/app/logstash-6.4.2/bin/dynamic_templates.json"        user => xxxxxxx        password => xxxxxxx        index => "%{sys_name}-%{+YYYY.MM.dd}"        hosts => ["172.19.3.51:9200","172.19.3.52:9200"]}</code></pre><p>在使用logstash输出内容要es中时, 指定index为系统名称+时间(年月日), 时间会自动匹配‘@timestamp’字段并格式化, 但是在实际使用过程中, 发现在上午八点之前的消息会被创建到昨天的索引里面.查阅相关资料, 有介绍在时间戳上面增加8个小时的方式, 也可以使用. 这里结合自己业务使用的其他方式.</p><a id="more"></a><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li><p>主要报送内容为filebeat的日志信息, 日志统一有时间戳, 格式如下:</p><pre><code> [trans-mediapay]-[2018-12-19 02:00:00:187]-[queryThreadPool-14]-[]-[WeBankServiceImpl.java:101]-[INFO ]-[测试2点的日志]</code></pre></li><li><p>解析时间戳的时间</p><ol><li><p>先匹配整体日志, 获取’log_time’字段</p></li><li><p>匹配’log_time’字段</p></li><li><p>生成元数据 ‘[@metadata][index_suffix]’</p><pre class=" language-bash"><code class="language-bash">filter <span class="token punctuation">{</span><span class="token comment" spellcheck="true">#  日志聚合使用全量配置</span>grok <span class="token punctuation">{</span> match <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token string">"message"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"\[%{DATA:sys_name}\]-\[%{DATA:log_time}\]-\[%{DATA:thread_name}\]-\[%{DATA:trace_id}\]-\[%{DATA:class_name}\]-\[%{DATA:log_level}\]-%{GREEDYDATA:log_msg}"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>grok<span class="token punctuation">{</span> match <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token string">"log_time"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"%{INT:index_year}-%{INT:index_mouth}-%{INT:index_day}"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>mutate <span class="token punctuation">{</span><span class="token comment" spellcheck="true"># 使用元数据 [@metadata][index_suffix]</span> add_field <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token string">"[@metadata][index_suffix]"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"%{index_year}.%{index_mouth}.%{index_day}"</span> <span class="token punctuation">}</span> remove_field <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"host"</span>,<span class="token string">"beat"</span>,<span class="token string">"tags"</span>,<span class="token string">"[beat][name]"</span>,<span class="token string">"[beat][version]"</span>,<span class="token string">"prospector"</span>,<span class="token string">"@version"</span>,<span class="token string">"offset"</span>,<span class="token string">"input"</span>,<span class="token string">"y_index"</span>,<span class="token string">"M_index"</span>,<span class="token string">"d_index"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ol></li></ol><p>}</p><pre><code>3. 输出时使用元数据, 该字段不会出现在es的字段中```bashelasticsearch {        # manage_template =&gt; false        template_overwrite =&gt; true        template =&gt; &quot;/opt/export/app/logstash-6.4.2/bin/dynamic_templates.json&quot;        user =&gt; xxxxxxx        password =&gt; xxxxxxx        index =&gt; &quot;%{sys_name}-%{[@metadata][index_suffix]}&quot;        hosts =&gt; [&quot;xxxx:9200&quot;,&quot;xxxx:9200&quot;]}</code></pre>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取IP和byte转long遇到的小问题</title>
      <link href="/2018/12/10/get-the-small-problem-encountered-by-ip-and-byte-to-long.html"/>
      <url>/2018/12/10/get-the-small-problem-encountered-by-ip-and-byte-to-long.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>因为业务需求新项目的流水号系统从 ‘数据库自增步长+分段式锁’ 换成使用 <a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/ipaynow/tool/snowflake/SnowFlake.java">雪花流水号</a>, 修改机器标识和数据中心字段为自动获取ip后三位, 人工保证ip后三位不相同</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/ipaynow/tool/snowflake/SnowFlakeSerial.java">雪花流水号 - 改造版</a></p><p>修改内容如下:<br>删除构造, 修改数据位数, 添加静态代码块</p><a id="more"></a><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> MACHINE_BIT <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> DATA_CENTER_BIT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        InetAddress localHost <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address <span class="token operator">=</span> localHost<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前系统的 address 为: "</span> <span class="token operator">+</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"DATA_CENTER_ID can't be greater than MAX_DATA_CENTER_NUM or less than 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><h5 id="服务器配置host"><a href="#服务器配置host" class="headerlink" title="服务器配置host"></a>服务器配置host</h5><p>服务器对应的 hostname 需要配置ip地址</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/hosts</code></pre><h5 id="byte-转换-long需要-amp-0xff"><a href="#byte-转换-long需要-amp-0xff" class="headerlink" title="byte 转换 long需要 &amp; 0xff"></a>byte 转换 long需要 &amp; 0xff</h5><p>当获取ip大于127时转换出来为负值, 所以需要 &amp; 0xff</p>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于LinkHashMap的LRU缓存淘汰</title>
      <link href="/2018/11/19/elimination-of-lru-cache-based-on-linkhashmap.html"/>
      <url>/2018/11/19/elimination-of-lru-cache-based-on-linkhashmap.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="LRU缓存淘汰"><a href="#LRU缓存淘汰" class="headerlink" title="LRU缓存淘汰"></a>LRU缓存淘汰</h5><p>LRU缓存淘汰是redis中的一种淘汰策略, 当内存大小不足以存放数据时, 此时存入新数据, 将删除较早存入的数据.<br>在dubbo中使用LRU来缓存 hostName.<br>在mysql中使用LRU来缓存 serverSideStatementCheckCache 和 serverSideStatementCache.</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ipaynow<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>lru<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基于LinkedHashMap LRU 缓存淘汰, 以下框架中都有使用 * dubbo com.alibaba.dubbo.common.utils.LRUCache * com.mysql.jdbc.util.LRUCache * * @author liuzhihang * @date 2018/11/20 10:43 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRULinkedHashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 设置最大容量     */</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> maxCapacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_MAX_CAPACITY <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LRULinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxCapacity <span class="token operator">=</span> DEFAULT_MAX_CAPACITY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">LRULinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// accessOrder设置为true 按照时间排序</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>maxCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxCapacity <span class="token operator">=</span> maxCapacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当链表长度大于最大容量时 删除最旧的元素     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxCapacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> V <span class="token function">remove</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMaxCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> maxCapacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaxCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxCapacity <span class="token operator">=</span> maxCapacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="测试代码及结果"><a href="#测试代码及结果" class="headerlink" title="测试代码及结果"></a>测试代码及结果</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ipaynow<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>lru<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span>DateTimeFormatter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2018/11/20 10:58 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        LRULinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRULinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"value"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"------------"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>控制台输出结果:</p><pre class=" language-bash"><code class="language-bash">2018-11-20 11:13:21 398------------value52018-11-20 11:13:22 399------------value62018-11-20 11:13:23 400------------value72018-11-20 11:13:24 400------------value82018-11-20 11:13:25 400------------value9Process finished with <span class="token keyword">exit</span> code 0</code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK常用启动命令</title>
      <link href="/2018/10/29/elk-common-start-command.html"/>
      <url>/2018/10/29/elk-common-start-command.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="elasticsearch启动命令"><a href="#elasticsearch启动命令" class="headerlink" title="elasticsearch启动命令"></a>elasticsearch启动命令</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 前台启动 关闭窗口连接后自动退出</span>./bin/elasticsearch<span class="token comment" spellcheck="true"># 后台启动</span>./bin/elasticsearch  -d</code></pre><a id="more"></a><h4 id="logstash启动命令"><a href="#logstash启动命令" class="headerlink" title="logstash启动命令"></a>logstash启动命令</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 前台启动 -f 后面为配置文件</span>./logstash -f logstash.conf<span class="token comment" spellcheck="true"># 后台启动</span><span class="token function">nohup</span> ./logstash -f logstash.conf <span class="token operator">&amp;</span></code></pre><h4 id="kibana启动命令"><a href="#kibana启动命令" class="headerlink" title="kibana启动命令"></a>kibana启动命令</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 前台启动</span>./bin/kibana<span class="token comment" spellcheck="true"># 后台启动</span>./bin/kibana <span class="token operator">&amp;</span></code></pre><h5 id="kibana停止命令"><a href="#kibana停止命令" class="headerlink" title="kibana停止命令"></a>kibana停止命令</h5><p>当ps -ef | grep kibana 查不到时 可以<br>lsof -i:5601<br>kill -9 线程</p><h4 id="filebeat启动命令"><a href="#filebeat启动命令" class="headerlink" title="filebeat启动命令"></a>filebeat启动命令</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 前台启动</span>./filebeat -e -c filebeat.yml<span class="token comment" spellcheck="true"># 后台启动 不输出日志/输出日志</span><span class="token function">nohup</span> ./filebeat -e -c filebeat.yml <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span><span class="token function">nohup</span> ./filebeat -e -c filebeat.yml <span class="token operator">></span> filebeat.log <span class="token operator">&amp;</span></code></pre><h5 id="jar包启动命令"><a href="#jar包启动命令" class="headerlink" title="jar包启动命令"></a>jar包启动命令</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 前台启动</span>java -jar server.ja<span class="token comment" spellcheck="true"># 后台启动</span><span class="token function">nohup</span> java -jar server.jar <span class="token operator">&amp;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>search-guard-6 配置用户</title>
      <link href="/2018/10/24/searchguard6-configuration-user.html"/>
      <url>/2018/10/24/searchguard6-configuration-user.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="search-guard-配置用户"><a href="#search-guard-配置用户" class="headerlink" title="search-guard 配置用户"></a>search-guard 配置用户</h4><p>路径: /opt/export/app/elasticsearch-6.4.2/plugins/search-guard-6/sgconfig</p><h5 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h5><p>执行以下命令, 输入明文</p><pre class=" language-bash"><code class="language-bash">plugins/search-guard-6/tools/hasher.sh -p mycleartextpassword</code></pre><a id="more"></a><h5 id="1-配置用户及密码"><a href="#1-配置用户及密码" class="headerlink" title="1. 配置用户及密码"></a>1. 配置用户及密码</h5><p>文件: sg_internal_users.yml</p><pre class=" language-yml"><code class="language-yml">zhangsan:  hash: $2y$12$yKXk785zSTtB3kE7g.XnbOPrc690g9JE50Znwum924i2M/xYGG4qq  roles:    - trans_group</code></pre><p>格式:</p><pre class=" language-yml"><code class="language-yml">姓名:  密码: XXXX(明文的hash, 使用search-guard的工具生成)  角色:    - 角色名称</code></pre><h5 id="2-配置权限"><a href="#2-配置权限" class="headerlink" title="2. 配置权限"></a>2. 配置权限</h5><p>文件: sg_roles.xml</p><p>配置’?kibana’ 及’?kibana-6’ 权限是为了保证用户在kibana中能够正常使用kibana</p><pre class=" language-yml"><code class="language-yml">sg_trans_group:  cluster:    - cluster:monitor/nodes    - cluster:monitor/health  indices:    'log-system':      '*':        - indices:admin/mappings/fields/get        - indices:admin/validate/query        - indices:data/read/search        - indices:data/read/msearch        - indices:admin/get        - indices:data/read/field_stats    '?kibana':      '*':        - MANAGE        - INDEX        - READ        - DELETE    '?kibana-6':      '*':        - MANAGE        - INDEX        - READ        - DELETE</code></pre><p>格式:</p><pre class=" language-yml"><code class="language-yml">权限名称:  集群:    - 集群名称:权限  索引:    '索引名称':      '类型':        - 权限</code></pre><h5 id="3-配置角色映射"><a href="#3-配置角色映射" class="headerlink" title="3. 配置角色映射"></a>3. 配置角色映射</h5><p>文件: sg_roles_mapping.yml</p><p>配置完用户的账户密码, 以及相应角色权限之后, 需要将用户和权限进行关联, 关联之后即可使用</p><pre class=" language-yml"><code class="language-yml">sg_trans_group:   backendroles:    - trans_group</code></pre><p>格式:</p><pre class=" language-yml"><code class="language-yml">映射名称:  角色:    - 用户的角色</code></pre><p>也可以使用以下方式进行关联:</p><pre class=" language-yml"><code class="language-yml">sg_trans_group:   users:    - zhangsan    - lisi# 即映射名称:  用户名称:    - 用户名</code></pre><h5 id="4-使配置生效"><a href="#4-使配置生效" class="headerlink" title="4. 使配置生效"></a>4. 使配置生效</h5><p>使用以下命令</p><pre class=" language-bash"><code class="language-bash">./sgadmin.sh -cn 集群名称 -cd <span class="token punctuation">..</span>/sgconfig -ks <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/config/sgadmin-keystore.jks -kspass changeit -ts <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/config/truststore.jks -tspass changeit -nhnv</code></pre>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>search-guard-6 安装</title>
      <link href="/2018/10/23/searchguard6-installation.html"/>
      <url>/2018/10/23/searchguard6-installation.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="ES-安装-search-guard-6"><a href="#ES-安装-search-guard-6" class="headerlink" title="ES 安装 search-guard-6"></a>ES 安装 search-guard-6</h4><h6 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h6><p>☞ <a href="https://docs.search-guard.com/latest/demo-installer">官方网站</a><br>在ES目录下执行命令</p><pre><code>bin/elasticsearch-plugin install -b com.floragunn:search-guard-6:6.4.2-23.1</code></pre><p>注: 安装版本需要和Elasticsearch版本相对应. <a href="https://docs.search-guard.com/latest/search-guard-versions">查看版本</a></p><p>这里不使用官方的快速构建方法</p><a id="more"></a><h6 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h6><ol><li><p>下载脚本<br> <code>git clone https://github.com/floragunncom/search-guard-ssl.git</code></p></li><li><p>证书配置<br> 路径<br> <code>**/elasticsearch-6.4.2/search-guard-ssl/example-pki-scripts</code></p><p> 目录内容 etc下可对证书进行配置<br> <img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="/resources/image/elk/configuration.png" alt="证书配置"></p></li><li><p>修改<a href="search-guard-ssl/example-pki-scripts/example.sh">example.sh</a></p></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>OPENSSL_VER<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>openssl version<span class="token variable">)</span></span>"</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$OPENSSL_VER</span> <span class="token operator">==</span> *<span class="token string">"0.9"</span>* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"Your OpenSSL version is too old: <span class="token variable">$OPENSSL_VER</span>"</span>        <span class="token keyword">echo</span> <span class="token string">"Please install version 1.0.1 or later"</span>        <span class="token keyword">exit</span> -1<span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Your OpenSSL version is: <span class="token variable">$OPENSSL_VER</span>"</span><span class="token keyword">fi</span><span class="token keyword">set</span> -e./clean.sh<span class="token comment" spellcheck="true"># 第一个参数为CA根证书密码，第二个参数为TS密码(truststore，信任证书密码)</span>./gen_root_ca.sh capass changeit<span class="token comment" spellcheck="true"># 生成节点证书： 第一个参数为节点编号，第二个参数为keystore文件密码，第三个参数为CA根证书密码。</span><span class="token comment" spellcheck="true"># 此处我们只生成两个节点证书</span>./gen_node_cert.sh 0 changeit capass <span class="token operator">&amp;&amp;</span> ./gen_node_cert.sh 1 changeit capass<span class="token comment" spellcheck="true"># 生成客户端证书： 第一个参数为客户端名称, 第二个参数为keystore文件名称，第三个参数为CA根证书名称。</span>./gen_client_node_cert.sh spock changeit capass./gen_client_node_cert.sh kirk changeit capass./gen_client_node_cert.sh logstash changeit capass./gen_client_node_cert.sh filebeat changeit capass./gen_client_node_cert.sh kibana changeit capass<span class="token comment" spellcheck="true"># 生成一个sgadmin客户端证书，用于配置管理</span>./gen_client_node_cert.sh sgadmin changeit capass<span class="token comment" spellcheck="true"># 生成一个javaapi访问的客户端证书</span>./gen_client_node_cert.sh javaapi changeit capass<span class="token function">rm</span> -f ./*tmp*</code></pre><ol start="4"><li>生成证书移动到elasticsearch config 在ES目录下</li></ol><pre class=" language-bash"><code class="language-bash">./example.sh<span class="token function">cp</span> node-0-keystore.jks sgadmin-keystore.jks truststore.jks /opt/export/app/elasticsearch-6.4.2/config/</code></pre><ol start="5"><li>配置elasticsearch.yml, 增加以下配置</li></ol><pre class=" language-yml"><code class="language-yml"># 配置节点间通信证书，节点间通信使用TLS是强制的searchguard.ssl.transport.keystore_filepath: node-0-keystore.jkssearchguard.ssl.transport.keystore_password: changeitsearchguard.ssl.transport.truststore_filepath: truststore.jkssearchguard.ssl.transport.truststore_password: changeit# 设置不校验hostnamesearchguard.ssl.transport.enforce_hostname_verification: falsesearchguard.ssl.transport.resolve_hostname: false# 配置管理员证书DNsearchguard.authcz.admin_dn:  - CN=sgadmin,OU=client,O=client,L=Test, C=DEbootstrap.memory_lock: falsebootstrap.system_call_filter: falsexpack.security.enabled: false</code></pre><ol start="6"><li>启动访问需要权限</li></ol><h6 id="添加脚本权限并初始化用户"><a href="#添加脚本权限并初始化用户" class="headerlink" title="添加脚本权限并初始化用户"></a>添加脚本权限并初始化用户</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/export/app/elasticsearch-6.4.2/plugins/search-guard-6/tools<span class="token function">chmod</span> +x *.sh./sgadmin.sh -cn cluster-es -cd <span class="token punctuation">..</span>/sgconfig -ks <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/config/sgadmin-keystore.jks -kspass changeit -ts <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/config/truststore.jks -tspass changeit -nhnv</code></pre><p>每次更新用户权限或者新增修改用户, 只需要重新执行第三条命令, 更新用户信息即可</p><h4 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h4><p>参照官方网站安装配置即可. <a href="https://docs.search-guard.com/latest/demo-installer">官方网站</a>, 或者按照以下步骤.</p><ol><li>在kibana安装目录下执行一下吗命令</li></ol><pre class=" language-bash"><code class="language-bash">bin/kibana-plugin <span class="token function">install</span> https://search.maven.org/remotecontent?filepath<span class="token operator">=</span>com/floragunn/search-guard-kibana-plugin/6.4.2-15/search-guard-kibana-plugin-6.4.2-15.zip</code></pre><ol start="2"><li>修改kibana.yml</li></ol><pre class=" language-yml"><code class="language-yml"># Use HTTPS instead of HTTP# elasticsearch.url: "https://localhost:9200"elasticsearch.url: "http://localhost:9200"# Configure the Kibana internal server userelasticsearch.username: "kibanaserver"elasticsearch.password: "kibanaserver"# Disable SSL verification because we use self-signed demo certificateselasticsearch.ssl.verificationMode: none# Whitelist the Search Guard Multi Tenancy Headerelasticsearch.requestHeadersWhitelist: [ "Authorization", "sgtenant" ]</code></pre><ol start="3"><li>打开对应域名登录<br><code>http://localhost:5601/</code></li></ol><h4 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h4><p>以上内容为参考自<a href="https://www.jianshu.com/u/d58afc984a4f">M醉逍遥</a>, 并搭建成功后总结记录, 以作备忘. 链接如下:<br><a href="https://www.jianshu.com/p/319913a944af">https://www.jianshu.com/p/319913a944af</a></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2018/10/08/hexo-build-blog.html"/>
      <url>/2018/10/08/hexo-build-blog.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>下载地址: <a href="https://nodejs.org/en/">https://nodejs.org</a></p><p>查看当前版本: node -v</p><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="/resources/hexo/node-v.png" alt="node-v"></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><pre><code>npm install</code></pre><p>也可以使用<a href="https://npm.taobao.org/">淘宝镜像</a></p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm install hexo</code></pre><a id="more"></a><h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><pre><code>hexo init</code></pre><h5 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h5><pre><code>hexo clean</code></pre><h5 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h5><pre><code>hexo ghexo generate</code></pre><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><pre><code>hexo shexo server</code></pre><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><pre><code>hexo dhexo deploy</code></pre><h5 id="生成并部署"><a href="#生成并部署" class="headerlink" title="生成并部署"></a>生成并部署</h5><pre><code>hexo g -d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器cpu占用率高</title>
      <link href="/2018/09/25/server-cpu-occupancy-rate-is-high.html"/>
      <url>/2018/09/25/server-cpu-occupancy-rate-is-high.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-top-命令找到占用cpu最高的进程"><a href="#1-top-命令找到占用cpu最高的进程" class="headerlink" title="1. top 命令找到占用cpu最高的进程"></a>1. top 命令找到占用cpu最高的进程</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">top</span> - 14:37:14 up 34 days, 13:27,  2 users,  load average: 0.21, 0.29, 0.29Tasks: 151 total,   1 running, 150 sleeping,   0 stopped,   0 zombieCpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  4.4%us,  2.7%sy,  0.0%ni, 90.9%id,  0.5%wa,  0.0%hi,  0.2%si,  1.3%stMem:  16334064k total, 16171240k used,   162824k free,    16716k buffersSwap: 16383996k total,  4470816k used, 11913180k free,   539788k cachedPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND1818 tomcat    20   0 3643m 983m 7548 S  0.7 24.8 190:40.13 java</code></pre><a id="more"></a><p>字段解释:<br>top - 时间 运行时间 用户 系统负载<br>Tasks: 进程相关信息<br>Cpu(s): cpu相关信息<br>Mem: 内存相关<br>Swap: 交换区相关信息</p><p>进程相关信息<br>PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</p><h3 id="2-使用top-H-p-查看该进程内所有线程"><a href="#2-使用top-H-p-查看该进程内所有线程" class="headerlink" title="2. 使用top -H -p  查看该进程内所有线程"></a>2. 使用top -H -p <pid> 查看该进程内所有线程</h3><p>top -H -p 1818</p><pre class=" language-bash"><code class="language-bash">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND6656 tomcat    20   0 4193m 608m  11m R 21.0  3.8   1419:44 java</code></pre><h3 id="3-printf-“-x-n”-将10进制线程号转换为16进制结果"><a href="#3-printf-“-x-n”-将10进制线程号转换为16进制结果" class="headerlink" title="3. printf “%x\n”  将10进制线程号转换为16进制结果"></a>3. printf “%x\n” <pid> 将10进制线程号转换为16进制结果</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>liuzhihang@test08 ~<span class="token punctuation">]</span>$ <span class="token function">printf</span> <span class="token string">"%x\n"</span> 1876754<span class="token punctuation">[</span>liuzhihang@test08 ~<span class="token punctuation">]</span>$</code></pre><h3 id="4-jstack-grep"><a href="#4-jstack-grep" class="headerlink" title="4. jstack  |grep "></a>4. jstack <pid> |grep <tid></h3><p>jstack 1818 | grep 754 -A 30</p><p>pid 为第一次执行top命令时的 pid<br>tid 为将第二次的pid进行十六进制转换后的结果</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"catalina-8180-89"</span> <span class="token comment" spellcheck="true">#1842 daemon prio=5 os_prio=0 tid=0x00007f4ec4096000 nid=0x5d96 waiting on condition [0x00007f4e87545000]</span>   java.lang.Thread.State: WAITING <span class="token punctuation">(</span>parking<span class="token punctuation">)</span>    at sun.misc.Unsafe.park<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    - parking to <span class="token function">wait</span> <span class="token keyword">for</span>  <span class="token operator">&lt;</span>0x00000000f418f898<span class="token operator">></span> <span class="token punctuation">(</span>a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="token variable">$ConditionObject</span><span class="token punctuation">)</span>    at java.util.concurrent.locks.LockSupport.park<span class="token punctuation">(</span>LockSupport.java:175<span class="token punctuation">)</span>    at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="token variable">$ConditionObject</span>.await<span class="token punctuation">(</span>AbstractQueuedSynchronizer.java:2039<span class="token punctuation">)</span>    at java.util.concurrent.LinkedBlockingQueue.take<span class="token punctuation">(</span>LinkedBlockingQueue.java:442<span class="token punctuation">)</span>    at org.apache.tomcat.util.threads.TaskQueue.take<span class="token punctuation">(</span>TaskQueue.java:104<span class="token punctuation">)</span>    at org.apache.tomcat.util.threads.TaskQueue.take<span class="token punctuation">(</span>TaskQueue.java:32<span class="token punctuation">)</span>    at java.util.concurrent.ThreadPoolExecutor.getTask<span class="token punctuation">(</span>ThreadPoolExecutor.java:1074<span class="token punctuation">)</span>    at java.util.concurrent.ThreadPoolExecutor.runWorker<span class="token punctuation">(</span>ThreadPoolExecutor.java:1134<span class="token punctuation">)</span>    at java.util.concurrent.ThreadPoolExecutor<span class="token variable">$Worker</span>.run<span class="token punctuation">(</span>ThreadPoolExecutor.java:624<span class="token punctuation">)</span>    at org.apache.tomcat.util.threads.TaskThread<span class="token variable">$WrappingRunnable</span>.run<span class="token punctuation">(</span>TaskThread.java:61<span class="token punctuation">)</span>    at java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:748<span class="token punctuation">)</span><span class="token string">"catalina-8180-88"</span> <span class="token comment" spellcheck="true">#1841 daemon prio=5 os_prio=0 tid=0x00007f4eb848e800 nid=0x5d94 waiting on condition [0x00007f4e8bd8b000]</span>   java.lang.Thread.State: WAITING <span class="token punctuation">(</span>parking<span class="token punctuation">)</span>    at sun.misc.Unsafe.park<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final finally finalize区别</title>
      <link href="/2018/09/06/final-finally-finalize-difference.html"/>
      <url>/2018/09/06/final-finally-finalize-difference.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final为java关键字, 可以作用于成员变量、方法、类上<br>1.作用于成员变量上, 基本类型则值不可修改, 如果成员变量为对象, 则该对象的引用不可修改.<br>2.作用于方法, 该方法不可被重写<br>3.作用于类, 该类不可继承</p><a id="more"></a><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>异常处理的关键字, 无论异常是否发生, finally内逻辑总会执行.</p><h4 id="finally-和-return-的执行顺序"><a href="#finally-和-return-的执行顺序" class="headerlink" title="finally 和 return 的执行顺序"></a>finally 和 return 的执行顺序</h4><p>1.一般使用逻辑, return在try-catch-finally之后, 证明, 无论是否异常, finally都会执行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">finallyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">finallyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// int i = 1 / 0;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"最终return返回"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.在try/catch内添加return<br>try/catch内的return执行完后会继续执行finally, 但是从打印结果来开, finally的语句先打印, 原因是因为 return的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">finallyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">finallyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// int i = 1 / 0;</span>            <span class="token keyword">return</span> <span class="token string">"try - return返回"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// return "catch - return返回";</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"最终return返回"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-bash"><code class="language-bash">处理逻辑finally执行了try - return返回</code></pre><p>3.finally里面添加return语句<br>finally里面return执行完后会直接返回, 不会再执行try块中的return语句</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">finallyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">finallyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// int i = 1 / 0;</span>            <span class="token keyword">return</span> <span class="token string">"try - return返回"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// return "catch - return返回";</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"finally - return返回"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// return "最终return返回";</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行结果</p><pre class=" language-bash"><code class="language-bash">处理逻辑finally执行了finally - return返回</code></pre><p>4.finally内添加逻辑改变变量值<br>1).try中的return值只是暂时放在栈中, 所以最终返回的还是 10, finally中并没有改变其值<br>2).try中的return值如果是对象, 栈中存放的是对象的引用, 对象属性值还是可以通过finally修改</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">finallyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">finallyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"try - return返回: "</span> <span class="token operator">+</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// return "catch - return返回";</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"最终return返回: "</span> <span class="token operator">+</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-bash"><code class="language-bash">处理逻辑finally执行了try - return返回: 10</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Temp temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token punctuation">.</span>temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">finallyTest</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Temp <span class="token function">finallyTest</span><span class="token punctuation">(</span>Temp temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// return "catch - return返回";</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span>temp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Temp</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Temp{"</span> <span class="token operator">+</span>                <span class="token string">"temp="</span> <span class="token operator">+</span> temp <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打印结果</p><pre class=" language-bash"><code class="language-bash">处理逻辑finally执行了Temp<span class="token punctuation">{</span>temp<span class="token operator">=</span>100<span class="token punctuation">}</span></code></pre><h3 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h3><p>Object类的方法, 子类可重写, 主要是垃圾回收时使用.</p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池原理及源码解析</title>
      <link href="/2018/09/05/thread-pool-principle-and-source-code-analysis.html"/>
      <url>/2018/09/05/thread-pool-principle-and-source-code-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="线程池处理流程"><a href="#线程池处理流程" class="headerlink" title="线程池处理流程"></a>线程池处理流程</h3><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="/resources/concurrent/thread-pool.png" alt="线程池处理流程"></p><ol><li>判断核心线程池是否已满, 不满则创建新线程执行任务</li><li>等待队列如果有界, 判断等待队列是否已满, 不满, 则添加任务到等待队列</li><li>判断最大线程数是否已满, 不满则创建新线程执行任务</li><li>最大线程数已满, 按照既定策略处理新任务<a id="more"></a><h3 id="全参构造及各参数含义"><a href="#全参构造及各参数含义" class="headerlink" title="全参构造及各参数含义"></a>全参构造及各参数含义</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExecutorService</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 核心线程数</span>                           <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 最大线程数</span>                           <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 核心线程外线程的存活时间</span>                           TimeUnit unit<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 存活时间的单位</span>                           BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 保存等待执行的线程的阻塞队列</span>                           ThreadFactory threadFactory<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 线程工厂</span>                           RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 线程拒绝策略</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>         maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>         maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>         keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span>             null <span class="token operator">:</span>             AccessController<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 省略 . . .</span><span class="token punctuation">}</span></code></pre></li><li>workQueue阻塞队列<br>ArrayBlockingQueue: 是一个基于数组结构的有界阻塞队列, 此队列按 FIFO(先进先出) 原则对元素进行排序.<br>LinkedBlockingQueue: 一个基于链表结构的阻塞队列,此队列按 FIFO(先进先出) 排序元素, 吞吐量通常要高于ArrayBlockingQueue. 静态工厂方法Executors.newFixedThreadPool()使用了这个队列<br>SynchronousQueue: 一个不存储元素的阻塞队列. 每个插入操作必须等到另一个线程调用移除操作, 否则插入操作一直处于阻塞状态, 吞吐量通常要高于LinkedBlockingQueue, 静态工厂方法Executors.newCachedThreadPool使用了这个队列.<br>PriorityBlockingQueue: 一个具有优先级的无限阻塞队列.</li></ol><p>2.threadFactory线程工厂<br>可以使用默认的工厂也可以自定义工厂, 或者使用 google guava 提供的工厂, 可以为线程命名和设置是否为守护线程</p><pre class=" language-bash"><code class="language-bash">// 默认工厂ThreadFactory threadFactory <span class="token operator">=</span> Executors.defaultThreadFactory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// google guava工具提供ThreadFactory namedThreadFactory <span class="token operator">=</span> new ThreadFactoryBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span>.setNameFormat<span class="token punctuation">(</span><span class="token string">"demo-pool-%d"</span><span class="token punctuation">)</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.handler线程拒绝策略<br>当线程池达到最大线程数, 并且队列满了, 新的线程要采取的处理策略.<br>1.AbortPolicy 拒绝新任务并抛出RejectedExecutionException异常<br>2.CallerRunsPolicy 直接在调用程序的线程中运行<br>3.DiscardOldestPolicy 放弃最早的任务, 即队列最前面的任务<br>4.DiscardPolicy 丢弃, 不处理</p><h3 id="Executors初始化线程池的四种方式"><a href="#Executors初始化线程池的四种方式" class="headerlink" title="Executors初始化线程池的四种方式"></a>Executors初始化线程池的四种方式</h3><p>这四种初始化线程池的方式, 前三种都是调用 ThreadPoolExecutor 类的构造创建的线程池, 只不过使用的阻塞队列方式不同.</p><ol><li>newFixedThreadPool()</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Executors</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 固定线程池     * 核心线程数 = 最大线程数     * 超时时间为0     * LinkedBlockingQueue无界队列, 会持续等待     * 使用默认拒绝策略 AbortPolicy     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>newCachedThreadPool()</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Executors</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 无界线程池     * 核心线程数0 最大线程数 (2³¹ -1)     * 超时时间 60秒     * SynchronousQueue不存储元素的阻塞队列     * 线程空闲时间超过60秒, 会自动释放资源, 提交任务如果没有空闲线程, 则会创建新线程     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                         60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                         <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.newSingleThreadExecutor()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Executors</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建只有 1个线程的线程池     * 如果线程异常, 则创建一个新的线程继续执行任务     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.newSingleThreadExecutor()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Executors</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * ScheduledThreadPoolExecutor 继承 ThreadPoolExecutor 类     * 可以在指定时间周期内执行任务     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExecutorService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * ctx 为原子类型的变量, 有两个概念    * workerCount, 表示有效的线程数    * runState, 表示线程状态, 是否正在运行, 关闭等    */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>RUNNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 29</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> Integer<span class="token punctuation">.</span>SIZE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 容量 2²⁹-1</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// runState is stored in the high-order bits 线程池的五中状态</span>    <span class="token comment" spellcheck="true">// 即高3位为111, 接受新任务并处理排队任务</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 即高3位为000, 不接受新任务, 但处理排队任务</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 即高3位为001, 不接受新任务, 不处理排队任务, 并中断正在进行的任务</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 即高3位为010, 所有任务都已终止, 工作线程为0, 线程转换到状态TIDYING, 将运行terminate()钩子方法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 即高3位为011, 标识terminate（）已经完成</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Packing and unpacking ctl 用来计算线程的方法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span>CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="execute方法"><a href="#execute方法" class="headerlink" title="execute方法"></a>execute方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExecutorService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 空则抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前线程池的状态</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算工作线程数 并判断是否小于核心线程数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// addWorker提交任务, 提交成功则结束</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 提交失败再次获取当前状态</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断线程状态, 并插入队列, 失败则移除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 再次获取状态</span>            <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果状态不是RUNNING, 并移除失败</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 调用拒绝策略</span>                <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果工作线程为0 则调用 addWorker</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 提交任务失败 走拒绝策略</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="addWorker方法"><a href="#addWorker方法" class="headerlink" title="addWorker方法"></a>addWorker方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExecutorService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 检查任务是否可以提交     *     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>        retry<span class="token operator">:</span>        <span class="token comment" spellcheck="true">// 外层循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取当前状态</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Check if queue empty only if necessary. 检查线程池是否关闭</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>                   firstTask <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>                   <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 内层循环</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 工作线程大于容量 或者大于 核心或最大线程数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">>=</span> CAPACITY <span class="token operator">||</span>                    wc <span class="token operator">>=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// CAS 线程数增加, 成功则调到外层循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span> retry<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 失败则再次获取线程状态</span>                c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Re-read ctl</span>                <span class="token comment" spellcheck="true">// 不相等则重新走外层循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                    <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// else CAS failed due to workerCount change; retry inner loop</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 创建新worker 开始新线程         */</span>        <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Worker w <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 加锁</span>                mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Recheck while holding lock.</span>                    <span class="token comment" spellcheck="true">// Back out on ThreadFactory failure or if</span>                    <span class="token comment" spellcheck="true">// shut down before lock acquired.</span>                    <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                        <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 判断线程是否存活, 已存活抛出非法异常</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// precheck that t is startable</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//  设置包含池中的所有工作线程。仅在持有mainLock时访问 workers是 HashSet 集合</span>                        <span class="token comment" spellcheck="true">//  private final HashSet&lt;Worker> workers = new HashSet&lt;Worker>();</span>                        workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 设置池最大大小, 并将 workerAdded设置为 true</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> largestPoolSize<span class="token punctuation">)</span>                            largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                        workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 解锁</span>                    mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 添加成功 开始启动线程 并将 workerStarted 设置为 true</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 启动线程失败</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>                <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 启动线程失败, 加锁     * 移除线程, 并减少线程总数     * 转换状态     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> null<span class="token punctuation">)</span>                workers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程相关</title>
      <link href="/2018/09/04/multithreaded-correlation.html"/>
      <url>/2018/09/04/multithreaded-correlation.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>多个线程同时或交替运行, 单核CPU为顺序执行(交替执行), 多核情况下, 每个CPU有自己的运算器, 所以在多个CPU中可以同时运行.</p><a id="more"></a><h3 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h3><p>1.继承Thread</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>开始线程, 可以看出main线程和测试线程是两个独立的线程<br>调用myThread.run();方法相当于直接在主线程运行run方法, 而不是开启一个新的线程去执行</p><p>2.实现Runnable接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyRunable runable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.使用线程池<br>3.1 可以在spring中配置相关线程池, 使用时从容器取出即可, 也可以自己声明线程池</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>threadPool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 核心线程数，默认为1 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>corePoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 最大线程数，默认为Integer.MAX_VALUE --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE    &lt;property name="queueCapacity" value="1000" /> --></span>    <span class="token comment" spellcheck="true">&lt;!-- 线程池维护线程所允许的空闲时间，默认为60s --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keepAliveSeconds<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 队列最大长度 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queueCapacity<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rejectedExecutionHandler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- AbortPolicy:直接抛出java.utils.concurrent.RejectedExecutionException异常 --></span>        <span class="token comment" spellcheck="true">&lt;!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 --></span>        <span class="token comment" spellcheck="true">&lt;!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 --></span>        <span class="token comment" spellcheck="true">&lt;!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>3.2 Executors 创建线程池</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当手动创建线程池时, 如果IDEA安装阿里 P3C 插件后会报错提示以下内容, 建议</p><pre class=" language-bash"><code class="language-bash">线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。说明： Executors 返回的线程池对象的弊端如下：1） FixedThreadPool 和 SingleThreadPool:允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。2） CachedThreadPool 和 ScheduledThreadPool:允许的创建线程数量为 Integer.MAX_VALUE， 可能会创建大量的线程，从而导致 OOM。</code></pre><p>建议使用如下方式:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定时任务 建议为线程起名</span>        ScheduledExecutorService executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">BasicThreadFactory<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">namingPattern</span><span class="token punctuation">(</span><span class="token string">"example-schedule-pool-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 线程工厂</span>        ThreadFactory namedThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"demo-pool-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Common Thread Pool</span>        ExecutorService pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> 0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> namedThreadFactory<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//gracefully shutdown</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>1.myThread.setPriority(1);设置优先级<br>2.优先级从低到高为 1-10, Thread类提供 Thread.MIN_PRIORITY=1, Thread.NORM_PRIORITY=5, Thread.MAX_PRIORITY=10<br>3.默认优先级为 5 即 NORM_PRIORITY<br>4.优先级高的仅代表获取进入运行机会的几率大, 并不代表一定会比优先级低的先执行</p><h3 id="sleep-和wait"><a href="#sleep-和wait" class="headerlink" title="sleep()和wait()"></a>sleep()和wait()</h3><p>1.sleep()线程未释放锁, 时间结束后线程继续执行<br>2.wait线程释放锁, 需要使用notify或notifyAll<br>3.wait常用于线程之间的交互</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 交替打印奇偶数 * * @author liuzhihang * @date 2018/9/4 18:39 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AlternateNum</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Num num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Odd</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Even</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Num</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> anInt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Odd</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Num num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Odd</span><span class="token punctuation">(</span>Num num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span>anInt <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用同一把锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奇数 -> "</span> <span class="token operator">+</span> num<span class="token punctuation">.</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>                    num<span class="token punctuation">.</span>anInt<span class="token operator">++</span><span class="token punctuation">;</span>                    num<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    num<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        num<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Even</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Num num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Even</span><span class="token punctuation">(</span>Num num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span>anInt <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用同一把锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"偶数 -> "</span> <span class="token operator">+</span> num<span class="token punctuation">.</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>                    num<span class="token punctuation">.</span>anInt<span class="token operator">++</span><span class="token punctuation">;</span>                    num<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    num<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        num<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射和序列化破解单例</title>
      <link href="/2018/08/27/reflection-and-serialization-cracking-singleton.html"/>
      <url>/2018/08/27/reflection-and-serialization-cracking-singleton.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>主要介绍通过反射的方式获取单例对象, 验证<a href="https://liuzhihangs.github.io/2018/02/21/lazy-singleton-mode-thread-safe.html">单例模式</a>的安全性.<br>主要从以下几个角度来介绍反射下的单例<br>饿汉式<br>双重锁检查<br><a href="https://liuzhihangs.github.io/2018/08/17/use-enumeration-to-implement-a-singleton.html">枚举单例</a></p><a id="more"></a><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p><a href="https://github.com/liuzhihangs/demo_design_pattern/blob/master/src/main/java/com/liuzhihang/demo/singleton/HungerPattern.java">饿汉式</a>直接使用反射即可破解单例模式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            HungerPattern hungerPattern <span class="token operator">=</span> HungerPattern<span class="token punctuation">.</span><span class="token function">getHungerPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span>HungerPattern<span class="token operator">></span> hungerPatternClass <span class="token operator">=</span> HungerPattern<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>            Constructor<span class="token operator">&lt;</span>HungerPattern<span class="token operator">></span> conA <span class="token operator">=</span> hungerPatternClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Constructor<span class="token operator">&lt;</span>HungerPattern<span class="token operator">></span> conB <span class="token operator">=</span> hungerPatternClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conA<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conB<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HungerPattern instanceA <span class="token operator">=</span> conA<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HungerPattern instanceB <span class="token operator">=</span> conB<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// instanceA 和 instanceB 不是同一对象</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hungerPattern<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instanceA<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instanceB<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-bash"><code class="language-bash">D:\jdk1.8\bin\java.exe <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token keyword">.</span>713338599168423058821270929Process finished with <span class="token keyword">exit</span> code 0</code></pre><h3 id="双重锁检查"><a href="#双重锁检查" class="headerlink" title="双重锁检查"></a>双重锁检查</h3><p><a href="https://github.com/liuzhihangs/demo_design_pattern/blob/master/src/main/java/com/liuzhihang/demo/singleton/DoubleCheckLockLazyPattern.java">双重锁检查</a>同样存在相同的情况</p><ol><li>直接使用<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">{</span></code></pre></li></ol><pre><code>public static void main(String[] args) {    try {        DoubleCheckLockLazyPattern pattern = DoubleCheckLockLazyPattern.getDoubleCheckLockLazyPattern();        Class&lt;DoubleCheckLockLazyPattern&gt; patternClass = DoubleCheckLockLazyPattern.class;        Constructor&lt;DoubleCheckLockLazyPattern&gt; conA = patternClass.getDeclaredConstructor();        Constructor&lt;DoubleCheckLockLazyPattern&gt; conB = patternClass.getDeclaredConstructor();        conA.setAccessible(true);        conB.setAccessible(true);        DoubleCheckLockLazyPattern patternA = conA.newInstance();        DoubleCheckLockLazyPattern patternB = conA.newInstance();        System.out.println(pattern.hashCode());        System.out.println(patternA.hashCode());        System.out.println(patternB.hashCode());    } catch (Exception e) {        e.printStackTrace();    }}</code></pre><p>}</p><pre><code>输出结果```bashD:\jdk1.8\bin\java.exe . . .713338599168423058821270929Process finished with exit code 0</code></pre><ol start="2"><li>在双重锁检查私有构造内加入异常</li></ol><pre class=" language-bash"><code class="language-bash">public class DoubleCheckLockLazyPattern <span class="token punctuation">{</span>    private DoubleCheckLockLazyPattern<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        // 加入异常判断, 防止反射        <span class="token keyword">if</span> <span class="token punctuation">(</span>doubleCheckLockLazyPattern <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throw new RuntimeException<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    private static volatile DoubleCheckLockLazyPattern doubleCheckLockLazyPattern <span class="token operator">=</span> null<span class="token punctuation">;</span>    public static DoubleCheckLockLazyPattern getDoubleCheckLockLazyPattern<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        try <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>doubleCheckLockLazyPattern <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                // 一系列操作                Thread.sleep<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span>                synchronized <span class="token punctuation">(</span>DoubleCheckLockLazyPattern.class<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    // 二次检查                    <span class="token keyword">if</span> <span class="token punctuation">(</span>doubleCheckLockLazyPattern <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        doubleCheckLockLazyPattern <span class="token operator">=</span> new DoubleCheckLockLazyPattern<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> doubleCheckLockLazyPattern<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-bash"><code class="language-bash">D:\jdk1.8\bin\java.exe <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token keyword">.</span>java.lang.reflect.InvocationTargetException    at sun.reflect.NativeConstructorAccessorImpl.newInstance0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at sun.reflect.NativeConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>NativeConstructorAccessorImpl.java:62<span class="token punctuation">)</span>    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>DelegatingConstructorAccessorImpl.java:45<span class="token punctuation">)</span>    at java.lang.reflect.Constructor.newInstance<span class="token punctuation">(</span>Constructor.java:423<span class="token punctuation">)</span>    at com.liuzhihang.demo.singleton.ReflectTest.main<span class="token punctuation">(</span>ReflectTest.java:24<span class="token punctuation">)</span>Caused by: java.lang.RuntimeException    at com.liuzhihang.demo.singleton.DoubleCheckLockLazyPattern.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>DoubleCheckLockLazyPattern.java:15<span class="token punctuation">)</span>    <span class="token punctuation">..</span>. 5 <span class="token function">more</span></code></pre><ol start="3"><li>通过序列化反序列化获取对象</li></ol><p>DoubleCheckLockLazyPattern 实现序列化</p><pre class=" language-bash"><code class="language-bash">public class ReflectTest <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        try <span class="token punctuation">{</span>            DoubleCheckLockLazyPattern pattern <span class="token operator">=</span> DoubleCheckLockLazyPattern.getDoubleCheckLockLazyPattern<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileOutputStream fos<span class="token operator">=</span> new FileOutputStream<span class="token punctuation">(</span><span class="token string">"C:/Users/liuzhihang/desktop/pattern.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectOutputStream oos <span class="token operator">=</span> new ObjectOutputStream<span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos.writeObject<span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fos.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectInputStream oisA <span class="token operator">=</span> new ObjectInputStream<span class="token punctuation">(</span>new FileInputStream<span class="token punctuation">(</span><span class="token string">"C:/Users/liuzhihang/desktop/pattern.txt"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            DoubleCheckLockLazyPattern patternA<span class="token operator">=</span> <span class="token punctuation">(</span>DoubleCheckLockLazyPattern<span class="token punctuation">)</span> oisA.readObject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectInputStream oisB <span class="token operator">=</span> new ObjectInputStream<span class="token punctuation">(</span>new FileInputStream<span class="token punctuation">(</span><span class="token string">"C:/Users/liuzhihang/desktop/pattern.txt"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            DoubleCheckLockLazyPattern patternB<span class="token operator">=</span> <span class="token punctuation">(</span>DoubleCheckLockLazyPattern<span class="token punctuation">)</span> oisB.readObject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span>pattern.hashCode<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span>patternA.hashCode<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span>patternB.hashCode<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-bash"><code class="language-bash">D:\jdk1.8\bin\java.exe <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token keyword">.</span>25895249917022972011996181658Process finished with <span class="token keyword">exit</span> code 0</code></pre><ol start="4"><li>修改反序列化方法, 可以防止反序列化</li></ol><p>添加以下方法</p><pre class=" language-bash"><code class="language-bash">private Object readResolve<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> doubleCheckLockLazyPattern<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-bash"><code class="language-bash">D:\jdk1.8\bin\java.exe <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token keyword">.</span>258952499258952499258952499Process finished with <span class="token keyword">exit</span> code 0</code></pre><h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> SingletonEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 单例     */</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">private</span> Resource resource<span class="token punctuation">;</span>    <span class="token function">SingletonEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Resource <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> resource<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Resource</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="枚举单例分析"><a href="#枚举单例分析" class="headerlink" title="枚举单例分析"></a>枚举单例分析</h4><p>在枚举反射获取对象时抛出异常, 通过 Constructor类 源码可以看出, 在反射创建对象时会判断是否是枚举修饰, 是则抛出异常</p><pre class=" language-bash"><code class="language-bash">  @CallerSensitive    public T newInstance<span class="token punctuation">(</span>Object <span class="token punctuation">..</span>. initargs<span class="token punctuation">)</span>        throws InstantiationException, IllegalAccessException,               IllegalArgumentException, InvocationTargetException    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>override<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Reflection.quickCheckMemberAccess<span class="token punctuation">(</span>clazz, modifiers<span class="token punctuation">))</span> <span class="token punctuation">{</span>                Class<span class="token operator">&lt;</span>?<span class="token operator">></span> caller <span class="token operator">=</span> Reflection.getCallerClass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                checkAccess<span class="token punctuation">(</span>caller, clazz, null, modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">((</span>clazz.getModifiers<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> Modifier.ENUM<span class="token punctuation">)</span> <span class="token operator">!=</span> 0<span class="token punctuation">)</span>            throw new IllegalArgumentException<span class="token punctuation">(</span><span class="token string">"Cannot reflectively create enum objects"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConstructorAccessor ca <span class="token operator">=</span> constructorAccessor<span class="token punctuation">;</span>   // <span class="token function">read</span> volatile        <span class="token keyword">if</span> <span class="token punctuation">(</span>ca <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ca <span class="token operator">=</span> acquireConstructorAccessor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        @SuppressWarnings<span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        T inst <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> ca.newInstance<span class="token punctuation">(</span>initargs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> inst<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>同时在父类 Enum类 中重写了 readObject方法, 所以枚举也可以避免反序列化</p><pre class=" language-bash"><code class="language-bash">    /**     * prevent default deserialization     */    private void readObject<span class="token punctuation">(</span>ObjectInputStream in<span class="token punctuation">)</span> throws IOException,        ClassNotFoundException <span class="token punctuation">{</span>        throw new InvalidObjectException<span class="token punctuation">(</span><span class="token string">"can't deserialize enum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2018/08/24/reflection.html"/>
      <url>/2018/08/24/reflection.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>java反射可以在运行时获取对象的成员和属性, 并且可以动态的创建对象并调用对象的属性.<br>反射一般编程中很少使用,但是在很多框架中都使用了反射, 比如配置Spring的Xml配置文件中, 就使用全类名配置方式, 其实就是反射的一种使用方式.</p><p>同时反射对单例模式有一定的影响, 可以参考<a href="https://liuzhihang.com/2018/08/27/reflection-and-serialization-cracking-singleton.html">反射获取单例对象</a></p><a id="more"></a><h3 id="获取反射对象"><a href="#获取反射对象" class="headerlink" title="获取反射对象"></a>获取反射对象</h3><p>获取反射Class对象一共三种方式</p><pre class=" language-bash"><code class="language-bash">// 1. 使用实例获取User user <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span>? extends User<span class="token operator">></span> aClass <span class="token operator">=</span> user.getClass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 2. 使用类获取Class<span class="token operator">&lt;</span>User<span class="token operator">></span> userClass <span class="token operator">=</span> User.class<span class="token punctuation">;</span>// 3. 全类名获取, 可能会抛出 ClassNotFoundException 异常Class<span class="token operator">&lt;</span>?<span class="token operator">></span> aClass1 <span class="token operator">=</span> Class.forName<span class="token punctuation">(</span><span class="token string">"com.liuzhihang.tool.reflect.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><ol><li>获取字段<pre class=" language-bash"><code class="language-bash">// 获取所有公有字段 <span class="token punctuation">(</span>public<span class="token punctuation">)</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass.getFields<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 获取所有字段 <span class="token punctuation">(</span>public 缺省, protected, private<span class="token punctuation">)</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass.getDeclaredFields<span class="token punctuation">(</span><span class="token punctuation">)</span>// 获取指定公共字段Field age <span class="token operator">=</span> aClass.getField<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 获取指定字段 <span class="token punctuation">(</span>public 缺省, protected, private<span class="token punctuation">)</span>Field userName <span class="token operator">=</span> aClass.getDeclaredField<span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="获取构造"><a href="#获取构造" class="headerlink" title="获取构造"></a>获取构造</h3><ol><li>获取构造<pre class=" language-bash"><code class="language-bash">// 获取所有构造 不能获取私有Constructor<span class="token operator">&lt;</span>?<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> aClass.getConstructors<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>// 获取指定参数类型的构造 不能获取私有 空则获取空参构造 getConstructor(Class&lt;?&gt;… parameterTypes)<br>Constructor<User> constructor = aClass.getConstructor(String.class);</p><p>// 获取所有构造 包含私有<br>Constructor&lt;?&gt;[] declaredConstructors = aClass.getDeclaredConstructors();</p><p>// 获取指定参数类型的构造 可以获取私有 空则获取空参构造 getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)<br>Constructor<User> declaredConstructor = aClass.getDeclaredConstructor(String.class);</p><pre><code>2. 使用构造创建对象可以通过 constructor.setAccessible(true); 暴力破解忽略访问修饰符, 来使用私有构造参数```bashConstructor&lt;User&gt; constructor = aClass.getDeclaredConstructor(String.class);// 暴力破解constructor.setAccessible(true);User test = constructor.newInstance(&quot;test&quot;);</code></pre><h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><ol><li>获取方法<pre class=" language-bash"><code class="language-bash">// 获取所有公共方法<span class="token punctuation">(</span>包含父类<span class="token punctuation">)</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass.getMethods<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 获取所有方法Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass.getDeclaredMethods<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 获取私有方法 第一个参数填方法名称Method address <span class="token operator">=</span> aClass.getDeclaredMethod<span class="token punctuation">(</span><span class="token string">"setAddress"</span>, String.class<span class="token punctuation">)</span><span class="token punctuation">;</span>// 获取公共方法Method address <span class="token operator">=</span> aClass.getMethod<span class="token punctuation">(</span><span class="token string">"setAddress"</span>, String.class<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><pre><code>2. 使用方法```bashClass&lt;?&gt; aClass = Class.forName(&quot;com.liuzhihang.tool.reflect.User&quot;)Method address = aClass.getDeclaredMethod(&quot;setAddress&quot;, String.class);User user = aClass.getConstructor().newInstance();System.out.println(user.toString());// 解除私有限制address.setAccessible(true);// 使用invoke来调用方法address.invoke(user, &quot;北京&quot;);System.out.println(user.toString());</code></pre><h3 id="获取其他属性"><a href="#获取其他属性" class="headerlink" title="获取其他属性"></a>获取其他属性</h3><p>还可以获取类实现的接口, 父类, 注解, 以及判断类的类型等多种使用方式.</p>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkList相关学习</title>
      <link href="/2018/08/23/linklist-related-learning.html"/>
      <url>/2018/08/23/linklist-related-learning.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>LinkList也是工作中常见的集合, 底层使用双向链表结构<br>比较适合新增和删除, 查询和修改需要遍历相对<a href="https://liuzhihang.com/2018/08/23/arraylist-related-learning.html">ArrayList</a>比较消耗性能</p></blockquote><a id="more"></a><h3 id="内部类-Node"><a href="#内部类-Node" class="headerlink" title="内部类 Node"></a>内部类 Node</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 元素值</span>    E item<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下一个节点</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 上一个几点</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造一个新节点 指向上一个节点和下一个节点</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="add-新增"><a href="#add-新增" class="headerlink" title="add 新增"></a>add 新增</h3><p>通过代码可以看出, 在新增元素时只需要创建一个新节点 Node, 并将原始链表最后一个Node的next指向新Node</p><pre class=" language-bash"><code class="language-bash">public boolean add<span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    linkLast<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>/** * Links e as last element. */void linkLast<span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // 声明 l 为最后一个节点    final Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    // 创建新节点, 指向上一个节点, 下一个节点为空    final Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> new Node<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>l, e, null<span class="token punctuation">)</span><span class="token punctuation">;</span>    // 最后一个节点为新创建的节点    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    // 判断是否为第一个元素, 否则将 新创建的 Node加入链表    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        l.next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size++<span class="token punctuation">;</span>    modCount++<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="remove-删除"><a href="#remove-删除" class="headerlink" title="remove 删除"></a>remove 删除</h3><p>1.删除操作需要遍历链表找到相应元素, 然后移动指针即可<br>2.删除首尾元素直接移动指针即可 removeFirst()/removeLast() 方法</p><pre class=" language-bash"><code class="language-bash">public boolean remove<span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        // 遍历链表        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x.next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x.item <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                unlink<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x.next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o.equals<span class="token punctuation">(</span>x.item<span class="token punctuation">))</span> <span class="token punctuation">{</span>                unlink<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>/** * 删除元素 */E unlink<span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // assert x <span class="token operator">!=</span> null<span class="token punctuation">;</span>    final E element <span class="token operator">=</span> x.item<span class="token punctuation">;</span>    final Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> x.next<span class="token punctuation">;</span>    final Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev <span class="token operator">=</span> x.prev<span class="token punctuation">;</span>    // 判断上一个Node是否为空    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        // 空, 该节点为链表头, 将下一个节点设置为链表头        first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        // 不为空, 将上一个节点的next 指向当前节点的 next, 并将当前节点的 prev置为空        prev.next <span class="token operator">=</span> next<span class="token punctuation">;</span>        x.prev <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    // 判断下一个Node是否为空    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        // 空, 该节点为链表尾, 将链表尾设置为当前节点的上一个节点        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        // 不为空, 将下一个节点的prev, 设置为上一个节点, 并将当前节点的 next置为空        next.prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        x.next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    x.item <span class="token operator">=</span> null<span class="token punctuation">;</span>    size--<span class="token punctuation">;</span>    modCount++<span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="get-set"><a href="#get-set" class="headerlink" title="get/set"></a>get/set</h3><p>get/set时都需要获取指定索引的元素, 使用二分法查找, 然后进行遍历查找, 所以此处相较于<a href="https://liuzhihang.com/2018/08/23/arraylist-related-learning.html">ArrayList</a>多了遍历查询, 虽然使用了二分法进行优化, 但是get/set操作相比ArrayList来说性能还是相对较差</p><pre class=" language-bash"><code class="language-bash">public E get<span class="token punctuation">(</span>int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // 校验索引    checkElementIndex<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    // 二分法遍历查找节点    <span class="token keyword">return</span> node<span class="token punctuation">(</span>index<span class="token punctuation">)</span>.item<span class="token punctuation">;</span><span class="token punctuation">}</span>public E set<span class="token punctuation">(</span>int index, E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // 校验索引    checkElementIndex<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    // 二分法遍历查找节点    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> node<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    // 修改Node节点的 item值    E oldVal <span class="token operator">=</span> x.item<span class="token punctuation">;</span>    x.item <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span><span class="token punctuation">}</span>/** * 返回指定索引处非null节点. */Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">(</span>int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // assert isElementIndex<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    // 判断索引是否小于长度的一半 <span class="token punctuation">(</span>二分法<span class="token punctuation">)</span> 然后遍历查找    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> 1<span class="token punctuation">))</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            x <span class="token operator">=</span> x.next<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> size - 1<span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i--<span class="token punctuation">)</span>            x <span class="token operator">=</span> x.prev<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
            <tag> LinkList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList相关学习</title>
      <link href="/2018/08/23/arraylist-related-learning.html"/>
      <url>/2018/08/23/arraylist-related-learning.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>ArrayList是工作中常用的集合, 基于数组实现, 可以插入空数据, 也支持随机访问.<br>ArrayList比较适合 get/set操作, 因为 add/remove需要移动数据, 相对来说比较消耗性能.</p></blockquote><h3 id="默认初始长度"><a href="#默认初始长度" class="headerlink" title="默认初始长度"></a>默认初始长度</h3><p>1.默认初始长度为 10<br>2.底层结构为Object[] 数组</p><a id="more"></a><pre class=" language-bash"><code class="language-bash">private static final int DEFAULT_CAPACITY <span class="token operator">=</span> 10<span class="token punctuation">;</span>private static final Object<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>/** * 构造一个初始容量为10的空列表 */public ArrayList<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="添加方法-add"><a href="#添加方法-add" class="headerlink" title="添加方法 add()"></a>添加方法 add()</h3><ol><li>向数组中添加元素, 流程如下</li></ol><pre class=" language-bash"><code class="language-bash">/** * 将指定的元素追加到此列表的末尾. */public boolean add<span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // 扩容    ensureCapacityInternal<span class="token punctuation">(</span>size + 1<span class="token punctuation">)</span><span class="token punctuation">;</span>  // Increments modCount<span class="token operator">!</span><span class="token operator">!</span>    // 添加元素    elementData<span class="token punctuation">[</span>size++<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.扩容过程</p><pre class=" language-bash"><code class="language-bash">transient Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>// 扩容private void ensureCapacityInternal<span class="token punctuation">(</span>int minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ensureExplicitCapacity<span class="token punctuation">(</span>calculateCapacity<span class="token punctuation">(</span>elementData, minCapacity<span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span>// 计算容量, elementData为空 则使用默认容量 10, 指定容量private static int calculateCapacity<span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData, int minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math.max<span class="token punctuation">(</span>DEFAULT_CAPACITY, minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span><span class="token punctuation">}</span>// 修改次数自增, 并且如果 新的长度-原长度<span class="token operator">></span>0 则使用 grow<span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span>方法进行扩容private void ensureExplicitCapacity<span class="token punctuation">(</span>int minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount++<span class="token punctuation">;</span>    // overflow-conscious code    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity - elementData.length <span class="token operator">></span> 0<span class="token punctuation">)</span>        grow<span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>添加元素赋值<pre class=" language-bash"><code class="language-bash">elementData<span class="token punctuation">[</span>size++<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span></code></pre></li></ol><h3 id="扩容流程-grow-minCapacity"><a href="#扩容流程-grow-minCapacity" class="headerlink" title="扩容流程 grow(minCapacity)"></a>扩容流程 grow(minCapacity)</h3><p>通过扩容流程可以看出扩容过程中, 是将创建一个原数组1.5倍大小的新数组, 同时将数组元素复制到新数组, 所以一般使用中, 尽量指定数组大小, 从而避免数组的复制.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 增加容量确保能容纳 minCapacity 数量的元素 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// overflow-conscious code</span>    <span class="token comment" spellcheck="true">// 获取当前 elementData 的长度</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取新的长度 为当前长度的 1.5倍</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 比较并交换</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 防止超出最大长度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>    <span class="token comment" spellcheck="true">// 数组复制</span>    elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="删除-remove-方法"><a href="#删除-remove-方法" class="headerlink" title="删除 remove 方法"></a>删除 remove 方法</h3><p>删除过程中使用 System.arraycopy 本地方法, 对数组进行复制, 所以 ArrayList的 新增和删除方法性能不如, <a href="https://liuzhihang.com/2018/08/23/linklist-related-learning.html">LinkList</a>, 但是 get和set方法, 则直接根据索引修改数据, 比较适合对数据进行修改的操作.</p><pre class=" language-bash"><code class="language-bash">/** * 删除指定位置的元素, 后面的元素将前移 */public E remove<span class="token punctuation">(</span>int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // 检查索引 否则抛出 IndexOutOfBoundsException<span class="token punctuation">(</span>outOfBoundsMsg<span class="token punctuation">(</span>index<span class="token punctuation">))</span>    rangeCheck<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    // 修改次数自增    modCount++<span class="token punctuation">;</span>    E oldValue <span class="token operator">=</span> elementData<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    int numMoved <span class="token operator">=</span> size - index - 1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> 0<span class="token punctuation">)</span>        // 数组复制        System.arraycopy<span class="token punctuation">(</span>elementData, index+1, elementData, index,                         numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span>--size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> // <span class="token function">clear</span> to <span class="token keyword">let</span> GC <span class="token keyword">do</span> its work    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span>/** * 删除指定元素 */public boolean remove<span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int index <span class="token operator">=</span> 0<span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index++<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                fastRemove<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int index <span class="token operator">=</span> 0<span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index++<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o.equals<span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>                fastRemove<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>/** * System.arraycopy 方法拷贝 删除 */private void fastRemove<span class="token punctuation">(</span>int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount++<span class="token punctuation">;</span>    int numMoved <span class="token operator">=</span> size - index - 1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> 0<span class="token punctuation">)</span>        System.arraycopy<span class="token punctuation">(</span>elementData, index+1, elementData, index,                         numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span>--size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> // <span class="token function">clear</span> to <span class="token keyword">let</span> GC <span class="token keyword">do</span> its work<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@Value注入属性的小bug</title>
      <link href="/2018/08/21/value-injects-a-small-bug-in-the-property.html"/>
      <url>/2018/08/21/value-injects-a-small-bug-in-the-property.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Value注入属性"><a href="#Value注入属性" class="headerlink" title="@Value注入属性"></a>@Value注入属性</h4><p>工作中一些公共属性, 一般通过@Value注入的对象的属性中, 使用方式如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeChatConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 微信支付参数    */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${wx.appId}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String WX_APP_ID<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过@Value注解, 将配置文件中的值注入到对象属性中, 在使用时只需要注入WeChatConfig对象然后调用即可, 而实际工作中, 往往用静态属性, 方便使用, 于是可以写成如下方式</p><a id="more"></a><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeChatConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 微信支付参数    */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${wx.appId}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String WX_APP_ID<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用此方式不会报错, 但是却取不到属性值, 并且不会报错. 变通方式可以如下:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeChatConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 微信支付参数    */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${wx.appId}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String WX_APP_ID<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${wx.app.id}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setWxAppId</span><span class="token punctuation">(</span>String wxAppId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        WX_APP_ID <span class="token operator">=</span> wxAppId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意: 此处的 set方法不可以设置为静态, 否则同样不能注入属性</p>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用枚举实现单例</title>
      <link href="/2018/08/17/use-enumeration-to-implement-a-singleton.html"/>
      <url>/2018/08/17/use-enumeration-to-implement-a-singleton.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>介绍使用枚举的方式创建单例, 其他方式可以参考<a href="https://liuzhihang.com/2018/02/21/singleton-pattern.html">单例模式</a></p><a id="more"></a><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用枚举单例 * * @author liuzhihang * @date 2018/8/17 17:34 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">SingletonPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonPattern <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>   SingleEnum<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">getSingletonPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">enum</span> SingleEnum <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 单例         */</span>        INSTANCE<span class="token punctuation">;</span>        <span class="token keyword">private</span> SingletonPattern singletonPattern<span class="token punctuation">;</span>        <span class="token function">SingleEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>singletonPattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> SingletonPattern <span class="token function">getSingletonPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> singletonPattern<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.比双重锁检查相对简洁<br>2.线程安全<br>3.自动处理序列化<br>4.防止反射</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch基本语句</title>
      <link href="/2018/06/26/elasticsearch-basic-statement.html"/>
      <url>/2018/06/26/elasticsearch-basic-statement.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="查看集群"><a href="#查看集群" class="headerlink" title="查看集群"></a>查看集群</h3><h4 id="1-查看集群健康"><a href="#1-查看集群健康" class="headerlink" title="1. 查看集群健康"></a>1. 查看集群健康</h4><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/_cat/health?v"</span></code></pre><h4 id="2-查看集群节点"><a href="#2-查看集群节点" class="headerlink" title="2. 查看集群节点"></a>2. 查看集群节点</h4><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/_cat/nodes?v"</span></code></pre><a id="more"></a><h4 id="3-查看集群所有索引"><a href="#3-查看集群所有索引" class="headerlink" title="3. 查看集群所有索引"></a>3. 查看集群所有索引</h4><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/_cat/indices?v"</span></code></pre><h3 id="get-获取指定数据"><a href="#get-获取指定数据" class="headerlink" title="get 获取指定数据"></a>get 获取指定数据</h3><h4 id="1-直接获取数据"><a href="#1-直接获取数据" class="headerlink" title="1. 直接获取数据"></a>1. 直接获取数据</h4><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty"</span></code></pre><p>格式为 /{index}/{type}/{id}</p><table><thead><tr><th align="left">字段</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">monitor_log_mch_order_out</td><td align="left">索引 (_index)</td></tr><tr><td align="left">logs</td><td align="left">索引的类型 (_type), 不知道类型可以用 _all 匹配</td></tr><tr><td align="left">AWSudIFgTuj3oZBEhyxK</td><td align="left">id (_id)</td></tr><tr><td align="left">pretty</td><td align="left">json格式显示数据, 可省略</td></tr><tr><td align="left">#### 2. 屏蔽或只查看 _source</td><td align="left"></td></tr><tr><td align="left">```bash</td><td align="left"></td></tr><tr><td align="left">curl -X GET “localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty&amp;_source=false”</td><td align="left"></td></tr><tr><td align="left">```</td><td align="left"></td></tr><tr><td align="left">添加 _source=false 即可</td><td align="left"></td></tr><tr><td align="left">```bash</td><td align="left"></td></tr><tr><td align="left">curl -X GET “localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK/_source?pretty”</td><td align="left"></td></tr><tr><td align="left">```</td><td align="left"></td></tr></tbody></table><h4 id="3-过滤字段"><a href="#3-过滤字段" class="headerlink" title="3. 过滤字段"></a>3. 过滤字段</h4><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty&amp;_source_include=log*&amp;_source_exclude=logType"</span></code></pre><p>获取包含 log* 且不为 logType 的字段</p><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty&amp;_source=logType,logLevel"</span></code></pre><p>只查询指定字段的简易写法</p><h3 id="mget-多条件匹配查询"><a href="#mget-多条件匹配查询" class="headerlink" title="mget 多条件匹配查询"></a>mget 多条件匹配查询</h3><ol><li><p>匹配多个索引, 同时查询多个id的数据</p><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/_mget?pretty"</span> -H <span class="token string">'Content-Type: application/json'</span> -d<span class="token string">'{ "docs" : [     {         "_index" : "monitor_log_mch_order_out",         "_type" : "logs",         "_id" : "AWSudIFgTuj3oZBEhyxK"     },     {         "_index" : "monitor_log_mch_order_out",         "_type" : "logs",         "_id" : "AWSuXewETuj3oZBEhywS"     } ]}'</span></code></pre></li><li><p>可以将索引写在host后面, 代表查询的都为同一索引下的数据</p><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/_mget?pretty"</span> -H <span class="token string">'Content-Type: application/json'</span> -d<span class="token string">'{ "docs" : [     {         "_type" : "logs",         "_id" : "AWSudIFgTuj3oZBEhyxK"     },     {         "_type" : "logs",         "_id" : "AWSuXewETuj3oZBEhywS"     } ]}'</span></code></pre></li><li><p>合并index和type, 代表查询的都为同一索引下type也相同的数据</p><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/logs/_mget?pretty"</span> -H <span class="token string">'Content-Type: application/json'</span> -d<span class="token string">'{ "docs" : [     {         "_id" : "AWSudIFgTuj3oZBEhyxK"     },     {         "_id" : "AWSuXewETuj3oZBEhywS"     } ]}'</span></code></pre><p>简化后如下:</p><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/logs/_mget?pretty"</span> -H <span class="token string">'Content-Type: application/json'</span> -d<span class="token string">'{ "ids" : ["AWSudIFgTuj3oZBEhyxK", "AWSuXewETuj3oZBEhywS"]}'</span></code></pre></li></ol><p>注: 当多个条件的 _type 相同时 可以使用 _all 或者省略</p><ol start="4"><li>过滤字段, 每个Id分别对 _source进行过滤<pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/_mget?pretty"</span> -H <span class="token string">'Content-Type: application/json'</span> -d<span class="token string">'{ "docs" : [     {         "_id" : "AWSudIFgTuj3oZBEhyxK",         "_source" : false     },     {         "_id" : "AWSuXewETuj3oZBEhywS",         "_source" : ["bizId", "method"]     },     {         "_id" : "AWSuLAYqTuj3oZBEhysH",         "_source" : {             "include": ["log*"],             "exclude": ["logLevel"]         }     } ]}'</span></code></pre></li></ol><h3 id="search-搜索"><a href="#search-搜索" class="headerlink" title="_search 搜索"></a>_search 搜索</h3><h4 id="1-匹配bizId-查询"><a href="#1-匹配bizId-查询" class="headerlink" title="1. 匹配bizId 查询"></a>1. 匹配bizId 查询</h4><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/_search?pretty&amp;q=bizId:2009011201807190133430748068"</span></code></pre><h4 id="2-同时指定类型"><a href="#2-同时指定类型" class="headerlink" title="2. 同时指定类型"></a>2. 同时指定类型</h4><p>同时指定类型, 多个类型用 ‘,’ 隔开, 也支持多个索引勇士搜索, 多个索引用 ‘,’ 隔开, 或者模糊搜索</p><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/logs/_search?pretty&amp;q=bizId:2009011201807190133430748068"</span></code></pre><h4 id="3-占位符-all-匹配所有索引"><a href="#3-占位符-all-匹配所有索引" class="headerlink" title="3. 占位符 _all 匹配所有索引"></a>3. 占位符 _all 匹配所有索引</h4><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/_all/logs/_search?pretty&amp;q=bizId:2009011201807190133430748068"</span></code></pre><h4 id="4-匹配所有索引所有类型"><a href="#4-匹配所有索引所有类型" class="headerlink" title="4. 匹配所有索引所有类型"></a>4. 匹配所有索引所有类型</h4><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/_search?pretty&amp;q=bizId:2009011201807190133430748068"</span></code></pre><p>注: q 代表映射query_string</p><h4 id="5-请求体的方式"><a href="#5-请求体的方式" class="headerlink" title="5. 请求体的方式"></a>5. 请求体的方式</h4><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/logs/_search?pretty"</span> -H <span class="token string">'Content-Type: application/json'</span> -d<span class="token string">'{    "query" : {        "term" : { "bizId" : "2009011201807190133430748068" }    }}'</span></code></pre><h4 id="6-分页查询-from-size"><a href="#6-分页查询-from-size" class="headerlink" title="6. 分页查询 from/size"></a>6. 分页查询 from/size</h4><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/logs/_search?pretty"</span> -H <span class="token string">'Content-Type: application/json'</span> -d<span class="token string">'{    "from" : 0, "size" : 1,    "query" : {        "term" : { "bizId" : "2009011201807190133430748068" }    }}'</span></code></pre><h4 id="7-查询并过滤字段"><a href="#7-查询并过滤字段" class="headerlink" title="7. 查询并过滤字段"></a>7. 查询并过滤字段</h4><p>根据字段查询并筛选掉指定字段</p><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/_search?pretty"</span> -H <span class="token string">'Content-Type: application/json'</span> -d<span class="token string">'{    "_source": {        "includes": [ "costTime", "bizId" ],        "excludes": [ "logLevel" ]    },    "query" : {        "term" : { "bizId" : "2009011201807190133430748068" }    }}'</span></code></pre><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><h4 id="1-按照时间范围查询"><a href="#1-按照时间范围查询" class="headerlink" title="1. 按照时间范围查询"></a>1. 按照时间范围查询</h4><p>可以省略索引查询全部</p><pre class=" language-bash"><code class="language-bash">curl -X GET <span class="token string">"localhost:9200/monitor_log_mch_order_out/_search?pretty"</span> -H <span class="token string">'Content-Type: application/json'</span> -d<span class="token string">'{    "query": {        "range" : {            "time" : {                "gte": "2018-07-19 00:14:25:000",                "lte": "2018-07-19 00:14:30:000",                "format": "yyyy-MM-dd HH:mm:ss:SSS"            }        }    }}'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash配置</title>
      <link href="/2018/06/20/logstash-configuration.html"/>
      <url>/2018/06/20/logstash-configuration.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class=" language-yaml"><code class="language-yaml">input <span class="token punctuation">{</span>    beats <span class="token punctuation">{</span>        port =<span class="token punctuation">></span> "5043"    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置日志输入方式为 filebeat, 并配置端口</p><a id="more"></a><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><pre class=" language-yaml"><code class="language-yaml">filter <span class="token punctuation">{</span>    grok <span class="token punctuation">{</span>        match =<span class="token punctuation">></span> <span class="token punctuation">{</span>        "message" =<span class="token punctuation">></span> "\<span class="token punctuation">[</span>%<span class="token punctuation">{</span>DATA<span class="token punctuation">:</span>time<span class="token punctuation">}</span>\<span class="token punctuation">]</span><span class="token punctuation">-</span>\<span class="token punctuation">[</span>%<span class="token punctuation">{</span>DATA<span class="token punctuation">:</span>method<span class="token punctuation">}</span>\<span class="token punctuation">]</span> <span class="token punctuation">-</span> \<span class="token punctuation">[</span>%<span class="token punctuation">{</span>DATA<span class="token punctuation">:</span>catalina<span class="token punctuation">}</span>\<span class="token punctuation">]</span> <span class="token punctuation">-</span>\<span class="token punctuation">[</span>%<span class="token punctuation">{</span>DATA<span class="token punctuation">:</span>logLevel<span class="token punctuation">}</span>\<span class="token punctuation">]</span> <span class="token punctuation">-</span> \<span class="token punctuation">[</span>%<span class="token punctuation">{</span>DATA<span class="token punctuation">:</span>index_prefix<span class="token punctuation">}</span>\<span class="token punctuation">|</span>%<span class="token punctuation">{</span>WORD<span class="token punctuation">:</span>logType<span class="token punctuation">}</span>\<span class="token punctuation">|</span>%<span class="token punctuation">{</span>WORD<span class="token punctuation">:</span>sysNo<span class="token punctuation">}</span>\<span class="token punctuation">|</span>%<span class="token punctuation">{</span>WORD<span class="token punctuation">:</span>objType<span class="token punctuation">}</span>\<span class="token punctuation">|</span>%<span class="token punctuation">{</span>DATA<span class="token punctuation">:</span>funcode<span class="token punctuation">}</span>\<span class="token punctuation">|</span>%<span class="token punctuation">{</span>WORD<span class="token punctuation">:</span>monitorObjNo<span class="token punctuation">}</span>\<span class="token punctuation">|</span>%<span class="token punctuation">{</span>WORD<span class="token punctuation">:</span>bizId<span class="token punctuation">}</span>\<span class="token punctuation">|</span>%<span class="token punctuation">{</span>WORD<span class="token punctuation">:</span>respCode<span class="token punctuation">}</span>\<span class="token punctuation">|</span>%<span class="token punctuation">{</span>DATA<span class="token punctuation">:</span>respMsg<span class="token punctuation">}</span>\<span class="token punctuation">|</span>%<span class="token punctuation">{</span>WORD<span class="token punctuation">:</span>costTime<span class="token punctuation">}</span><span class="token punctuation">|</span>%<span class="token punctuation">{</span>DATA<span class="token punctuation">:</span>exField<span class="token punctuation">}</span>\<span class="token punctuation">]</span>"        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    grok<span class="token punctuation">{</span>         match =<span class="token punctuation">></span> <span class="token punctuation">{</span> "time" =<span class="token punctuation">></span> <span class="token punctuation">[</span><span class="token string">"%{INT:y_index}-%{INT:M_index}-%{INT:d_index}"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mutate <span class="token punctuation">{</span>        add_field =<span class="token punctuation">></span> <span class="token punctuation">{</span> "<span class="token punctuation">[</span>@metadata<span class="token punctuation">]</span><span class="token punctuation">[</span>index_suffix<span class="token punctuation">]</span>" =<span class="token punctuation">></span> "%<span class="token punctuation">{</span>y_index<span class="token punctuation">}</span>%<span class="token punctuation">{</span>M_index<span class="token punctuation">}</span>%<span class="token punctuation">{</span>d_index<span class="token punctuation">}</span>" <span class="token punctuation">}</span>        remove_field =<span class="token punctuation">></span> <span class="token punctuation">[</span><span class="token string">"beat"</span><span class="token punctuation">,</span><span class="token string">"host"</span><span class="token punctuation">,</span><span class="token string">"thread"</span><span class="token punctuation">,</span><span class="token string">"class"</span><span class="token punctuation">,</span><span class="token string">"source"</span><span class="token punctuation">,</span><span class="token string">"tags"</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"y_index"</span><span class="token punctuation">,</span><span class="token string">"M_index"</span><span class="token punctuation">,</span><span class="token string">"d_index"</span><span class="token punctuation">]</span>        lowercase =<span class="token punctuation">></span> <span class="token punctuation">[</span> <span class="token string">"index_prefix"</span> <span class="token punctuation">]</span>        lowercase =<span class="token punctuation">></span> <span class="token punctuation">[</span> <span class="token string">"funcode"</span> <span class="token punctuation">]</span>        lowercase =<span class="token punctuation">></span> <span class="token punctuation">[</span> <span class="token string">"objType"</span> <span class="token punctuation">]</span>        lowercase =<span class="token punctuation">></span> <span class="token punctuation">[</span> <span class="token string">"monitorObjNo"</span> <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>使用gork过滤器对日志进行筛选, 并对部分字段赋值.</li><li>使用mutate插件对字段进行转换, add_field 为添加字段 [@metadata][index_suffix] 意思是添加临时字段, 该字段不会输出到es中</li></ol><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><pre class=" language-yaml"><code class="language-yaml">output <span class="token punctuation">{</span>        if  <span class="token punctuation">[</span>logType<span class="token punctuation">]</span> == "info"  <span class="token punctuation">{</span>                 elasticsearch <span class="token punctuation">{</span>                        hosts =<span class="token punctuation">></span> <span class="token punctuation">[</span> <span class="token string">"xxx.xxx.xxx.xxx:9200"</span> <span class="token punctuation">]</span>                        index =<span class="token punctuation">></span> "%<span class="token punctuation">{</span>index_prefix<span class="token punctuation">}</span>_%<span class="token punctuation">{</span>objType<span class="token punctuation">}</span>_%<span class="token punctuation">{</span>funcode<span class="token punctuation">}</span>_%<span class="token punctuation">{</span><span class="token punctuation">[</span>@metadata<span class="token punctuation">]</span><span class="token punctuation">[</span>index_suffix<span class="token punctuation">]</span><span class="token punctuation">}</span>"                        user =<span class="token punctuation">></span> elastic                        password =<span class="token punctuation">></span> xxx                 <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        if <span class="token punctuation">[</span>logType<span class="token punctuation">]</span> == "error" <span class="token punctuation">{</span>                redis <span class="token punctuation">{</span>                        data_type =<span class="token punctuation">></span> "list"                        db =<span class="token punctuation">></span> 0                        <span class="token comment" spellcheck="true">#key => "%{index_prefix}_%{sysNo}_%{objType}_%{funcode}_%{[@metadata][index_suffix]}"</span>                        key =<span class="token punctuation">></span> "%<span class="token punctuation">{</span>index_prefix<span class="token punctuation">}</span>_%<span class="token punctuation">{</span>sysNo<span class="token punctuation">}</span>_%<span class="token punctuation">{</span>objType<span class="token punctuation">}</span>_%<span class="token punctuation">{</span>monitorObjNo<span class="token punctuation">}</span>"                        host =<span class="token punctuation">></span> "xxx.xxx.xxx.xxx"                        port =<span class="token punctuation">></span> "6379"                        password =<span class="token punctuation">></span> "xxx"                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>将过滤后的字段按照类型输出到Es或者redis队列中</p><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><pre><code>    ./bin/logstash -f first-pipelines.yml    nohup ./logstash -f ../first-pipelines.yml &gt;/dev/null 2&gt;&amp;1 &amp;</code></pre><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 输出到控制台</span>stdout <span class="token punctuation">{</span> codec =<span class="token punctuation">></span> rubydebug <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>filebeat配置</title>
      <link href="/2018/06/20/filebeat-configuration.html"/>
      <url>/2018/06/20/filebeat-configuration.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="filebeat配置"><a href="#filebeat配置" class="headerlink" title="filebeat配置"></a>filebeat配置</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">filebeat.prospectors</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">input_type</span><span class="token punctuation">:</span> log<span class="token comment" spellcheck="true">#读取日志的路径</span>  <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /opt/export/log/info<span class="token punctuation">-</span>xxx.log  <span class="token key atrule">fields</span><span class="token punctuation">:</span>    <span class="token key atrule">log_type</span><span class="token punctuation">:</span> <span class="token string">"monitor_log"</span>  <span class="token key atrule">fields_under_root</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment" spellcheck="true">#过滤部分日志</span>  <span class="token key atrule">include_lines</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Monitor_log'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#----------------------------- Logstash output --------------------------------</span><span class="token key atrule">output.logstash</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># The Logstash hosts</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"xxx.xxx.xxx.xxx:5043"</span><span class="token punctuation">,</span><span class="token string">"xxx.xxx.xxx.xxx:5043"</span><span class="token punctuation">]</span>  <span class="token key atrule">loadbalance</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment" spellcheck="true">#================================ Logging =====================================</span><span class="token key atrule">logging.level</span><span class="token punctuation">:</span> info<span class="token key atrule">logging.to_files</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">logging.to_syslog</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">logging.files</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> /opt/export/app/filebeat/logs  <span class="token key atrule">name</span><span class="token punctuation">:</span> mybeat.log  <span class="token key atrule">keepfiles</span><span class="token punctuation">:</span> <span class="token number">5</span></code></pre><p>过滤不包含指定字段的日志, 并仅仅输出到logstash, 也可以直接输出到Elasticsearch</p><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><ol><li>前台启动：关闭窗口连接后自动退出</li></ol><pre class=" language-bash"><code class="language-bash">./filebeat -e -c filebeat.yml</code></pre><ol start="2"><li>后台启动:</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">nohup</span> ./filebeat -e -c filebeat.yml <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span></code></pre><ol start="3"><li>关闭:</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">kill</span> -9 xxxx</code></pre>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控系统架构</title>
      <link href="/2018/06/20/monitoring-system-architecture.html"/>
      <url>/2018/06/20/monitoring-system-architecture.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="监控系统基本框架"><a href="#监控系统基本框架" class="headerlink" title="监控系统基本框架"></a>监控系统基本框架</h3><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="/resources/image/elk/elk.png" alt="监控系统基本架构"></p><a id="more"></a><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li>各业务系统按照指定格式打印日志</li><li>filebeat自动读取日志信息, 并进行过滤, 输出到logstash</li><li>logstash进行二次处理, 将日志内容格式化, 并将 info日志和error日志分别存放到Elasticsearch和redis队列中</li><li>监控系统定时从Es和redis中获取数据, 存放到mysql并进行报警分析</li><li>使用EChart图形化展示信息<br>…</li></ol>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程的生命周期</title>
      <link href="/2018/06/15/thread-life-cycle.html"/>
      <url>/2018/06/15/thread-life-cycle.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="/resources/concurrent/thread-life.png" alt="java内存模型"></p><a id="more"></a><h3 id="图解析"><a href="#图解析" class="headerlink" title="图解析"></a>图解析</h3><p>1.一般情况下线程主要经历: 准备, 就绪, 运行, 死亡四种状态.<br>2.准备:即创建线程, 包括集成Thread, 线程池, spring方式等等<br>3.就绪:线程创建并调用start()方法并不代表线程将立即获得资源, 而是进入到就绪状态进行资源分配<br>4.运行:抢占到资源的线程将执行, 执行过程可能会含有一些别的操作<br>&emsp;1).线程等待, 直到调用 notify()或notifyAll()方法被唤醒, 这里唤醒后不会立即继续执行线程, 而是进入就绪状态重新抢占资源<br>&emsp;2).线程休眠, 直到休眠时间结束, 同样结束后不会立即继续执行线程, 而是进入就绪状态重新抢占资源<br>&emsp;3).线程阻塞, IO资源阻塞, 锁等方式使线程进入阻塞队列, 释放锁将继续执行<br>5.死亡: 调用<del>stop()</del>方法, 线程中断, 或线程执行完毕则线程死亡</p>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized锁的介绍</title>
      <link href="/2018/06/13/introduction-of-synchronized-lock.html"/>
      <url>/2018/06/13/introduction-of-synchronized-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="synchronized锁的使用"><a href="#synchronized锁的使用" class="headerlink" title="synchronized锁的使用"></a>synchronized锁的使用</h3><p>synchronized可以使用在方法和代码块中, 使用的方式不同锁代表的含义不同, 下面将从几个方面进行介绍.</p><ul><li>普通方法</li><li>静态方法</li><li>代码块synchronized(this)</li><li>代码块synchronized(*.class)</li></ul><a id="more"></a><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>在使用synchronized关键字中锁主要分为两类, 一种是对象锁, 另一种类锁</li><li>普通加锁方法和synchronized(this)都是对象锁, 静态加锁方法和synchronized(*.class)都是类锁</li><li>对象锁: 同一对象持有锁, 相同对象等待, 其他对象不受影响; 不同对象持有锁, 互不影响.</li><li>类锁: 类锁时, 只要该类的对象持有锁, 无论是否为同一对象访问静态同步方法时都等待, 访问非静态同步方法不受影响.</li><li>对象锁和类锁互相不影响</li></ul><h3 id="测试代码及过程"><a href="#测试代码及过程" class="headerlink" title="测试代码及过程"></a>测试代码及过程</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>sync<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2018/7/11 16:25 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncMainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SyncTest syncTest1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// SyncTest syncTest2 = new SyncTest();</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> syncTest1<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"线程 01 "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> syncTest1<span class="token punctuation">.</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"线程 02 "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SyncTest</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上为一个简单的测试代码, 指使用两个线程分别调用两个方法, 通过打印结果可以看出顺序是乱序的, 其中线程的 start() 顺序并不代表线程的执行顺序, 在下面测试中假设是 “线程01” 先执行.</p><h4 id="1-A-B-方法分别添加synchronized关键字-同一对象"><a href="#1-A-B-方法分别添加synchronized关键字-同一对象" class="headerlink" title="1.A B 方法分别添加synchronized关键字 + 同一对象"></a>1.A B 方法分别添加synchronized关键字 + 同一对象</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SyncTest</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结论: 方法 A 阻塞, 方法 B 等待 A 执行完毕后才继续执行.</p><h4 id="2-A-B-方法分别添加synchronized关键字-不同对象"><a href="#2-A-B-方法分别添加synchronized关键字-不同对象" class="headerlink" title="2.A B 方法分别添加synchronized关键字 + 不同对象"></a>2.A B 方法分别添加synchronized关键字 + 不同对象</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncMainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SyncTest syncTest1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SyncTest syncTest2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> syncTest1<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"线程 01 "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> syncTest2<span class="token punctuation">.</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"线程 02 "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SyncTest</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结论: 方法 A 阻塞, 方法 B 不受影响.</p><h4 id="3-A-方法分别添加synchronized关键字-B方法不添加"><a href="#3-A-方法分别添加synchronized关键字-B方法不添加" class="headerlink" title="3.A 方法分别添加synchronized关键字 B方法不添加"></a>3.A 方法分别添加synchronized关键字 B方法不添加</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SyncTest</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结论: 方法 A 阻塞, 方法 B 不受影响.</p><h4 id="4-A-B-方法分别添加-static-synchronized-不同对象"><a href="#4-A-B-方法分别添加-static-synchronized-不同对象" class="headerlink" title="4.A B 方法分别添加 static synchronized  + 不同对象"></a>4.A B 方法分别添加 static synchronized  + 不同对象</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncMainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SyncTest syncTest1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SyncTest syncTest2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> syncTest1<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"线程 01 "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> syncTest2<span class="token punctuation">.</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"线程 02 "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SyncTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结论: 方法 A 阻塞, 方法 B 等待 A结束后继续执行.</p><h4 id="5-A-方法添加-static-synchronized-B-方法添加-synchronized-不同对象"><a href="#5-A-方法添加-static-synchronized-B-方法添加-synchronized-不同对象" class="headerlink" title="5.A 方法添加 static synchronized, B 方法添加 synchronized  + 不同对象"></a>5.A 方法添加 static synchronized, B 方法添加 synchronized  + 不同对象</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncMainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SyncTest syncTest1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SyncTest syncTest2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> syncTest1<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"线程 01 "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> syncTest2<span class="token punctuation">.</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"线程 02 "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SyncTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结论: 方法 A 阻塞, 方法 B 不受影响.</p><h4 id="6-A-B-方法内添加-synchronized-this"><a href="#6-A-B-方法内添加-synchronized-this" class="headerlink" title="6.A B 方法内添加 synchronized(this)"></a>6.A B 方法内添加 synchronized(this)</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SyncTest</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结论: 同一对象 A 阻塞 B等待, 不同对象 A阻塞 B不受影响</p><h4 id="7-A-B-方法内添加-synchronized-SyncTest-class"><a href="#7-A-B-方法内添加-synchronized-SyncTest-class" class="headerlink" title="7.A B 方法内添加 synchronized(SyncTest.class)"></a>7.A B 方法内添加 synchronized(SyncTest.class)</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SyncTest</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SyncTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SyncTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结论: 同一/不同对象 A 阻塞 B等待</p><h4 id="8-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-this"><a href="#8-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-this" class="headerlink" title="8.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(this)"></a>8.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(this)</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SyncTest</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SyncTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结论: 同一/不同对象 A 阻塞 B不受影响</p><h4 id="9-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-OtherObj"><a href="#9-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-OtherObj" class="headerlink" title="9.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(OtherObj)"></a>9.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(OtherObj)</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SyncTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String string <span class="token operator">=</span> <span class="token string">"lock"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SyncTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结论: 同一/不同对象 A 阻塞 B不受影响</p>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized同步锁原理</title>
      <link href="/2018/06/11/synchronized-synchronous-lock-principle.html"/>
      <url>/2018/06/11/synchronized-synchronous-lock-principle.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>在多线程操作中volatile关键字可以保证共享变量的内存可见性, 但是并不能保证操作的原子性, 这时候就需要用到锁, synchronized同步锁是java关键字, 是内置的语言实现.</li><li>synchronized加锁和线程结束或异常锁的释放过程由JVM进行控制</li><li>synchronized关键字可以使用在方法和同步代码块中, 不同的使用方式, 锁的结果是不同的</li><li>重量级锁 + 可重入</li></ul><a id="more"></a><h3 id="synchronized底层原理"><a href="#synchronized底层原理" class="headerlink" title="synchronized底层原理"></a>synchronized底层原理</h3><p>1.代码示例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>java<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2018/06/11 16:05 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">syncTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.使用 javap -v SynchronizedTest.class 查看代码的对应字节码如下:</p><pre><code>$ javap -v SynchronizedTest.classClassfile /C:/Users/liuzhihang/Desktop/SynchronizedTest.class  Last modified 2018-7-10; size 518 bytes  MD5 checksum ba48def77b226e7b9ac28121ec423c16  Compiled from &quot;SynchronizedTest.java&quot;public class com.liuzhihang.tool.java.SynchronizedTest  minor version: 0  major version: 52  flags: ACC_PUBLIC, ACC_SUPERConstant pool:    // 常量池省略{      // 构造方法省略  public void syncTest1();    descriptor: ()V    flags: ACC_PUBLIC    Code:      stack=3, locals=3, args_size=1         0: aload_0         1: dup         2: astore_1         3: monitorenter         4: aload_0         5: dup         6: getfield      #2                    // Field i:I         9: iconst_1        10: iadd        11: putfield      #2                    // Field i:I        14: aload_1        15: monitorexit        16: goto          24        19: astore_2        20: aload_1        21: monitorexit        22: aload_2        23: athrow        24: return      Exception table:          // 省略代码  public synchronized void syncTest2();    descriptor: ()V    flags: ACC_PUBLIC, ACC_SYNCHRONIZED    Code:      stack=3, locals=1, args_size=1         0: aload_0         1: dup         2: getfield      #3                  // Field j:I         5: iconst_1         6: iadd         7: putfield      #3                  // Field j:I        10: return      LineNumberTable:        line 22: 0        line 23: 10}SourceFile: &quot;SynchronizedTest.java&quot;</code></pre><p>3.结论</p><ul><li>同步语句块的实现使用的是 monitorenter 和 monitorexit 指令, 其中有两个 monitorexit 因为不能确保是正常结束还是异常结束, 所以另一个是用来确保异常结束时释放 monitor指令.</li><li>同步方法时使用的是 flags中的 ACC_SYNCHRONIZED 来标识该方法为同步方法, JVM在调用该方法时便会执行相应的同步调用.</li><li>每个线程都维护自己的监视器(monitor), 只要是同步调用进行相关操作时要先获得 monitor, 否则将被阻塞</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volatile关键字</title>
      <link href="/2018/06/09/volatile-keyword.html"/>
      <url>/2018/06/09/volatile-keyword.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在多线程操作共享变量时, 会使用volatile修饰共享变量, 比如单例模式的双重锁检查中, 并且在concurrent包下也大量使用了volatile关键字;<br>volatile可以对类属性进行修饰, 从而确保线程每次都是从主存中获取属性, 操作完毕后写回主存.</p><a id="more"></a><h3 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h3><img src= "https://liuzhihang.com/oss/pic/loading.gif" data-src="/resources/image/loading.gif" data-original="/resources/concurrent/volatile.png" width="800" hegiht="800" align=center /><p> 在多线程同时对共享变量进行操作过程中, 每个线程会拷贝一份共享变量到自己的工作内存中进行相关操作, 操作完毕后会将结果写入到主存中.<br> 而volatile关键字可以保证操作的可见性和有序性, 但是却不能保证原子性.</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>指一个操作或者多个操作要么全部执行要么全部都不执行, 操作过程整体是一个原子, 不被分割打断.</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>当多个线程访问同一个变量时, 一个线程修改了这个变量的值, 其他线程能够立即看得到修改的值.</p><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>即程序执行的顺序按照代码的先后顺序执行<br>主要原因是因为处理器在处理程序时会进行指令重排, 对代码进行优化, 指令重排在单线程中得到的结果是一致的, 但是在多线程中就会造成各种错误.</p><h3 id="volatile关键字作用"><a href="#volatile关键字作用" class="headerlink" title="volatile关键字作用"></a>volatile关键字作用</h3><p>1.使用volatile关键字修饰的变量,会强制将修改的值写入到主存中<br>2.volatile不保证原子性, 在多线程操作下仅能保证操作别的线程可见, 在多线程情况下同时操作共享变量依然会有数据不正确的情况.<br>3.volatile会防止指令重排</p>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAop代理的选择</title>
      <link href="/2018/05/21/springaop-agent-selection.html"/>
      <url>/2018/05/21/springaop-agent-selection.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Spring动态创建bean过程, 是如何进行选择使用 jdk还是cglib进行代理的, 可以通过源码进行解析</p><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>通过断点进行跟踪主要执行过程在 DefaultAopProxyFactory, 通过判断条件是使用Cglib还是Jdk</p><a id="more"></a><h3 id="相关源码解析"><a href="#相关源码解析" class="headerlink" title="相关源码解析"></a>相关源码解析</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAopProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AopProxyFactory</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AopProxy <span class="token function">createAopProxy</span><span class="token punctuation">(</span>AdvisedSupport config<span class="token punctuation">)</span> <span class="token keyword">throws</span> AopConfigException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断条件 是否优化, 返回是否直接代理目标类以及任何接口或者没有用户提供的代理接口</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> config<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasNoUserSuppliedProxyInterfaces</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"TargetSource cannot determine target class: "</span> <span class="token operator">+</span>                        <span class="token string">"Either an interface or a target is required for proxy creation."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//判断是否是接口, 和已经使用jdk代理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjenesisCglibAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Determine whether the supplied {@link AdvisedSupport} has only the     * {@link org.springframework.aop.SpringProxy} interface specified     * (or no proxy interfaces specified at all).     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasNoUserSuppliedProxyInterfaces</span><span class="token punctuation">(</span>AdvisedSupport config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ifcs <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getProxiedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ifcs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ifcs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> SpringProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>ifcs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cglib动态代理</title>
      <link href="/2018/05/18/cglib-dynamic-proxy.html"/>
      <url>/2018/05/18/cglib-dynamic-proxy.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Spring动态代理可以选择使用jdk动态代理, 或者cglib动态代理,  cglib动态代理位于 net.sf.cglib.proxy 包下.</p><p>使用时涉及<br>接口: net.sf.cglib.proxy.MethodInterceptor<br>用来生成动态子类的类类: net.sf.cglib.proxy.Enhancer</p><p>注意: cglib 动态代理是基于类的代理, 是通过对指定的业务类生成一个子类, 并覆盖其中业务方法实现代理. 因为使用继承, 所以被代理类不能使 final 修饰</p><a id="more"></a><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>1.创建MethodInterceptor接口的实现类, 并编写intercept方法的实现<br>2.通过methodProxy.invokeSuper(o, objects);调用父类的方法<br>3.创建Enhancer, 通过 setSuperclass(Class superclass)方法指定父类(被代理类), 通过 setCallback(final Callback callback)方法指定代理<br>4.enhancer.create() 生成代理, 调用被代理类的方法</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>按照步骤编写简易逻辑代码.</p><h4 id="创建MethodInterceptor接口的实现类"><a href="#创建MethodInterceptor接口的实现类" class="headerlink" title="创建MethodInterceptor接口的实现类"></a>创建MethodInterceptor接口的实现类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 基于类的代理 即使类没有实现接口也可以被代理 * 主要是基于类生成一个继承的子类 所以 类和方法不要声明为 final * * * @author liuzhihang * @date 2018/5/18 10:10 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMethodInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib动态代理 before . . ."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invoke <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            invoke <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib动态代理 error: "</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib动态代理 after . . ."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建Enhancer"><a href="#创建Enhancer" class="headerlink" title="创建Enhancer"></a>创建Enhancer</h4><p>创建Enhancer, 通过 setSuperclass(Class superclass)方法指定父类(被代理类), 通过 setCallback(final Callback callback)方法指定代理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibMainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>SubjectCglib<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SubjectCglib subjectCglib <span class="token operator">=</span> <span class="token punctuation">(</span>SubjectCglib<span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subjectCglib<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token string">"liuzhihang"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="可以将二者合并到MyInterceptor中"><a href="#可以将二者合并到MyInterceptor中" class="headerlink" title="可以将二者合并到MyInterceptor中"></a>可以将二者合并到MyInterceptor中</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 基于类的代理 即使类没有实现接口也可以被代理 * * * @author liuzhihang * @date 2018/5/18 10:10 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCglibInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object object<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib动态代理 before . . ."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invoke <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            invoke <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib动态代理 error: "</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib动态代理 after . . ."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk动态代理及源码解析</title>
      <link href="/2018/05/17/jdk-dynamic-proxy-and-source-code-analysis.html"/>
      <url>/2018/05/17/jdk-dynamic-proxy-and-source-code-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Spring动态代理可以选择使用jdk动态代理, 或者cglib动态代理,  jdk动态代理位于 java.lang.reflect 包下.</p><p>使用时涉及<br>接口: java.lang.reflect.InvocationHandler<br>动态代理类: java.lang.reflect.Proxy</p><p>注意: JDK 动态代理是基于接口的代理, 只能对实现接口的类生成代理, 不能对类进行代理</p><a id="more"></a><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>1.创建InvocationHandler接口的实现类, 并编写invoke方法的实现<br>2.创建被代理类的接口及实现类<br>3.使用动态代理类Proxy的静态方法生成代理类实例<br>4.使用实例调用方法</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>按照步骤编写简易逻辑代码.</p><h4 id="创建InvocationHandler接口的实现类"><a href="#创建InvocationHandler接口的实现类" class="headerlink" title="创建InvocationHandler接口的实现类"></a>创建InvocationHandler接口的实现类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * JDK 动态代理 * 基于接口的代理, 只能对实现接口的类生成代理, 不能对类进行代理 * * @author liuzhihang * @date 2018/5/17 10:36 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 目标对象     */</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyInvocationHandler</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jdk 动态代理 before . . . "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前代理方法为:"</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jdk 动态代理 after . . . "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建被代理类的接口及实现类"><a href="#创建被代理类的接口及实现类" class="headerlink" title="创建被代理类的接口及实现类"></a>创建被代理类的接口及实现类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 被代理类的接口 * @author liuzhihang * @date 2018/5/17 10:47 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取名字     * @return     */</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取年龄     * @param name     * @return     */</span>    String <span class="token function">getAge</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 被代理类 * * @author liuzhihang * @date 2018/5/17 10:48 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubjectImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubjectImpl的获取名字方法 . . ."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"liuzhihang"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getAge</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"开始获取年龄 . . ."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"25"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="使用动态代理类Proxy的静态方法生成代理类实例"><a href="#使用动态代理类Proxy的静态方法生成代理类实例" class="headerlink" title="使用动态代理类Proxy的静态方法生成代理类实例"></a>使用动态代理类Proxy的静态方法生成代理类实例</h4><p>获取代理类实例有以下两种方式, 一种是通过Proxy.newProxyInstance(..)获取,  一种是通过 Proxy.getProxyClass(..) 方式获取<br>1.Proxy.newProxyInstance(..)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 当代理类实例调用方法时, 会自动跳转到代理类关联的 handler 对象, 通过 method.invoke(target, args) 进行调用 * * * @author liuzhihang * @date 2018/5/17 10:49 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyMainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Subject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubjectImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader classLoader <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyInvocationHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成代理类实例</span>        Subject proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span>Subject<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String instanceAge <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token string">"liuzhihang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> instanceAge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.Proxy.getProxyClass(..)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 当代理类实例调用方法时, 会自动跳转到代理类关联的 handler 对象, 通过 method.invoke(target, args) 进行调用 * 此方式有异常抛出 * * @author liuzhihang * @date 2018/5/17 10:49 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyMainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        Subject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubjectImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader classLoader <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyInvocationHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> proxyClass <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">getProxyClass</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>            Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">=</span> proxyClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>InvocationHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Subject subject1 <span class="token operator">=</span> <span class="token punctuation">(</span>Subject<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>            String name1 <span class="token operator">=</span> subject1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String instanceAge1 <span class="token operator">=</span> subject1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token string">"liuzhihang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> instanceAge1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> IllegalAccessException <span class="token operator">|</span> InvocationTargetException <span class="token operator">|</span> InstantiationException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><pre><code>D:\jdk1.8\bin\java.exe . . .liuzhihang 25jdk 动态代理 before . . .当前代理方法为:public abstract java.lang.String com.liuzhihang.tool.proxy.jdk.Subject.getName()SubjectImpl的获取名字方法 . . .jdk 动态代理 after . . .jdk 动态代理 before . . .当前代理方法为:public abstract java.lang.String com.liuzhihang.tool.proxy.jdk.Subject.getAge(java.lang.String)liuzhihang开始获取年龄 . . .jdk 动态代理 after . . .Process finished with exit code 0</code></pre><p>结论: 代理实例在每次调用方法是都会通过代理类进行调用</p><h3 id="相关源码解析"><a href="#相关源码解析" class="headerlink" title="相关源码解析"></a>相关源码解析</h3><p>完整注释可自己查看相关源码, 源码过程应当DeBug多走走.<br>1.调用 Proxy.newProxyInstance 方法</p><pre><code> /** * 返回指定接口的代理类实例，该接口将方法调用分派给指定的调用处理程序 */@CallerSensitivepublic static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException {    // 非空校验    Objects.requireNonNull(h);    final Class&lt;?&gt;[] intfs = interfaces.clone();    // 获取系统安全接口    final SecurityManager sm = System.getSecurityManager();    if (sm != null) {        // 校验权限        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);    }    /*     * 从缓存中获取代理类 或者 生成新的代理类     */    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);    /*     * 通过反射获取构造函数对象并生成代理类实例     */    try {        if (sm != null) {            checkNewProxyPermission(Reflection.getCallerClass(), cl);        }        // 获取构造        final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);        final InvocationHandler ih = h;        // 验证代理类的修饰符        if (!Modifier.isPublic(cl.getModifiers())) {            // 修改访问权限            AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() {                public Void run() {                    // 将此对象的可访问标志设置为指定的布尔值, true表示反射对象在使用时应禁止Java语言访问检查, false表示反射对象应强制执行Java语言访问检查                    cons.setAccessible(true);                    return null;                }            });        }        //生成实例, 并将参数传入构造        return cons.newInstance(new Object[]{h});    } catch (IllegalAccessException | InstantiationException e) {        throw new InternalError(e.toString(), e);    } catch (InvocationTargetException e) {        Throwable t = e.getCause();        if (t instanceof RuntimeException) {            throw (RuntimeException) t;        } else {            throw new InternalError(t.toString(), t);        }    } catch (NoSuchMethodException e) {        throw new InternalError(e.toString(), e);    }}</code></pre><p>可以看出获取代理类是在 Class&lt;?&gt; cl = getProxyClass0(loader, intfs); 处, 继续相关逻辑<br>2.获取代理类相关逻辑</p><pre><code>/** * 生成代理类, 之前必须进行权限检查 */private static Class&lt;?&gt; getProxyClass0(ClassLoader loader,                                       Class&lt;?&gt;... interfaces) {    if (interfaces.length &gt; 65535) {        throw new IllegalArgumentException(&quot;interface limit exceeded&quot;);    }    //如果由实现给定接口的给定加载器定义的代理类存在，则它将简单地返回缓存副本; 否则，它将通过Proxy Class Factory创建代理类    return proxyClassCache.get(loader, interfaces);}</code></pre><p>3.proxyClassCache.get(loader, interfaces);<br>java.lang.reflect.WeakCache#get(..) 介绍</p><pre><code> /** * 通过缓存查找值, 如果缓存中没有给定的（key，sub Key）对的条目或条目已被清除，则它总是评估{Key sub Key Factory}函数并可选择评估{Factory value}函数 */public V get(K key, P parameter) {    // 非空校验    Objects.requireNonNull(parameter);    // 判断移除队列    expungeStaleEntries();    // 缓存key    Object cacheKey = CacheKey.valueOf(key, refQueue);    // 延迟加载使用二级map    ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap = map.get(cacheKey);    if (valuesMap == null) {        ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; oldValuesMap                = map.putIfAbsent(cacheKey,                valuesMap = new ConcurrentHashMap&lt;&gt;());        if (oldValuesMap != null) {            valuesMap = oldValuesMap;        }    }    // 创建子key 并根据key 检索supplier    Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter));    // 根据key获取supplier    Supplier&lt;V&gt; supplier = valuesMap.get(subKey);    Factory factory = null;    while (true) {        if (supplier != null) {            // supplier 可能为 Factory 或者 CacheValue&lt;V&gt; 的实例, 从缓存中获取到则直接返回            V value = supplier.get();            if (value != null) {                return value;            }        }        // factory不存在则创建        if (factory == null) {            factory = new Factory(key, parameter, subKey, valuesMap);        }        // supplier 为null        if (supplier == null) {            // 从valuesMap获取supplier            supplier = valuesMap.putIfAbsent(subKey, factory);            if (supplier == null) {                // successfully installed Factory                supplier = factory;            }            // else retry with winning supplier        } else {            if (valuesMap.replace(subKey, supplier, factory)) {                // successfully replaced                // cleared CacheEntry / unsuccessful Factory                // with our Factory                supplier = factory;            } else {                // retry with current supplier                supplier = valuesMap.get(subKey);            }        }    }}</code></pre><p>可以发现重点在 Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter)); 获取 subKey 的过程中.<br>4.subKeyFactory.apply(key, parameter)<br>Debug发现在此处调用的是 java.lang.reflect.Proxy.ProxyClassFactory 静态内部类,<br>此处根据接口的数量生成二级缓存</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/** * 一个工厂函数, 用于生成, 定义并返回给定ClassLoader和接口数组的代理类 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ProxyClassFactory</span>        <span class="token keyword">implements</span> <span class="token class-name">BiFunction</span><span class="token operator">&lt;</span>ClassLoader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 所有代理类的前缀</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String proxyClassNamePrefix <span class="token operator">=</span> <span class="token string">"$Proxy"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// next number to use for generation of unique proxy class names</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLong nextUniqueNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在IdentityHashMap中, 当且仅当两个key严格相等（key1==key2）时，IdentityHashMap才认为两个key相等</span>        Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Boolean<span class="token operator">></span> interfaceSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdentityHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环接口数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> intf <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*             * 验证类加载器是否将此接口的名称解析为同一个Class对象             */</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> interfaceClass <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取接口的 class</span>                interfaceClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>intf<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceClass <span class="token operator">!=</span> intf<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                        intf <span class="token operator">+</span> <span class="token string">" is not visible from class loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*             * 验证interfaceClass是否为接口             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interfaceClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                        interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is not an interface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*             * 验证接口是否重复             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceSet<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                        <span class="token string">"repeated interface: "</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        String proxyPkg <span class="token operator">=</span> null<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// package to define proxy class in</span>        <span class="token keyword">int</span> accessFlags <span class="token operator">=</span> Modifier<span class="token punctuation">.</span>PUBLIC <span class="token operator">|</span> Modifier<span class="token punctuation">.</span>FINAL<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 验证所有非公开代理接口是否在同一个包中         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> intf <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> flags <span class="token operator">=</span> intf<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                accessFlags <span class="token operator">=</span> Modifier<span class="token punctuation">.</span>FINAL<span class="token punctuation">;</span>                String name <span class="token operator">=</span> intf<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> n <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String pkg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyPkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    proxyPkg <span class="token operator">=</span> pkg<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pkg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>proxyPkg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                            <span class="token string">"non-public interfaces from different packages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyPkg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果没有非公开的代理接口，使用 com.sun.proxy package</span>            proxyPkg <span class="token operator">=</span> ReflectUtil<span class="token punctuation">.</span>PROXY_PACKAGE <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         * 为要生成的代理类选择一个名称         */</span>        <span class="token keyword">long</span> num <span class="token operator">=</span> nextUniqueNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String proxyName <span class="token operator">=</span> proxyPkg <span class="token operator">+</span> proxyClassNamePrefix <span class="token operator">+</span> num<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 生成代理类         */</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxyClassFile <span class="token operator">=</span> ProxyGenerator<span class="token punctuation">.</span><span class="token function">generateProxyClass</span><span class="token punctuation">(</span>proxyName<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> accessFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">defineClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> proxyName<span class="token punctuation">,</span>                    proxyClassFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> proxyClassFile<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassFormatError</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*             * A ClassFormatError here means that (barring bugs in the             * proxy class generation code) there was some other             * invalid aspect of the arguments supplied to the proxy             * class creation (such as virtual machine limitations             * exceeded).             */</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.生辰给代理类<br>byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);<br>可以在测试类中添加以下内容打印出代理类:</p><pre><code>System.setProperty(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</code></pre><p>代理类内容如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Source code recreated from a .class file by IntelliJ IDEA</span><span class="token comment" spellcheck="true">// (powered by Fernflower decompiler)</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>Subject<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>UndeclaredThrowableException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $Proxy0 <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m3<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m2<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m4<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m0<span class="token punctuation">;</span>    <span class="token keyword">public</span> $<span class="token function">Proxy0</span><span class="token punctuation">(</span>InvocationHandler var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>var1<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m2<span class="token punctuation">,</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">getAge</span><span class="token punctuation">(</span>String var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m4<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>var1<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m0<span class="token punctuation">,</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            m1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m3 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.liuzhihang.tool.proxy.jdk.Subject"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m2 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m4 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.liuzhihang.tool.proxy.jdk.Subject"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getAge"</span><span class="token punctuation">,</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m0 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>var3<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出生成的$Proxy0类继承Proxy动态代理类并实现了Subject被代理接口, 实现所有方法<br>通过 super.h.invoke(this, m1, new Object[]{var1}) 内部调用了 InvocationHandler.invoke(…)方法, 通过反射调用代理实例的方法</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒汉单例模式线程安全</title>
      <link href="/2018/02/21/lazy-singleton-mode-thread-safe.html"/>
      <url>/2018/02/21/lazy-singleton-mode-thread-safe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>一个类中只有一个实例, 且能够自行实例化提供这个实例, 同时提供全局访问的方法.</p></blockquote><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>1.构造私有化: 确保外部不能使用new直接创建对象<br>2.内部静态属性创建实例<br>3.对外公共静态获取对象方法</p><a id="more"></a><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 单例模式 * 1. 构造私有化: 确保外部不能使用new直接创建对象 * 2. 内部静态属性创建实例 * 3. 对外公共静态获取对象方法 * * @author liuzhihang * @date 2018/3/27 17:45 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">SingletonPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonPattern singletonPattern <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonPattern <span class="token function">getSingletonPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonPattern <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            singletonPattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singletonPattern<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>1.懒汉式: 懒汉模式, 项目启动时不生成对象, 而是在首次创建该对象的时候生成唯一实例</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 懒汉模式, 项目启动时不生成对象, 而是在首次创建该对象的时候生成唯一实例 * * @author liuzhihang * @date 2018/4/2 16:24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazyPattern lazyPattern <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyPattern <span class="token function">getLazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyPattern <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 模拟一系列耗时操作</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lazyPattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazyPattern<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.饿汉式: 项目启动时, 进行加载, 会导致项目启动较慢, 并且无论后面是否用到都会进行加载</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * * 饿汉式单例模式 * 项目启动时, 进行加载, 会导致项目启动较慢, 并且无论后面是否用到都会进行加载 * * @author liuzhihang * @date 2018/4/2 18:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungerPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">HungerPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> HungerPattern hungerPattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungerPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HungerPattern <span class="token function">getHungerPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hungerPattern<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>在多线程情况下对单例模式进行测试:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2018/3/27 19:02 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadTest<span class="token punctuation">[</span><span class="token punctuation">]</span> threadTests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadTests<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threadTests<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadTests<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threadTests<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 懒汉模式</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LazyPattern<span class="token punctuation">.</span><span class="token function">getLazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 饿汉模式</span>        <span class="token comment" spellcheck="true">// System.out.println(HungerPattern.getHungerPattern().hashCode());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果:</p><p>1.饿汉模式</p><pre><code>D:\jdk1.8\bin\java.exe . . .1294123621129412362112941236211294123621129412362112941236211294123621129412362112941236211294123621Process finished with exit code 0</code></pre><p>2.懒汉模式</p><pre><code>D:\jdk1.8\bin\java.exe . . .14091981613591281341385166630924507082676413855088322625749263951409198161442414714896298396Process finished with exit code 0</code></pre><p>结论: 在懒汉单例模式下不能保证线程的安全性</p><h3 id="懒汉模式的线程安全优化"><a href="#懒汉模式的线程安全优化" class="headerlink" title="懒汉模式的线程安全优化"></a>懒汉模式的线程安全优化</h3><p>饿汉模式会造成资源浪费, 启动慢等结果, 下面对懒汉模式进行线程安全优化.</p><h4 id="synchronized-锁住静态方法"><a href="#synchronized-锁住静态方法" class="headerlink" title="synchronized 锁住静态方法"></a>synchronized 锁住静态方法</h4><p>锁住静态方法 类级锁 影响范围较大, 导致效率相对较低</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 懒汉式 * 在方法上添加 synchronized 关键字 锁类 * 同步方法的方式, 导致效率相对较低 * * @author liuzhihang * @date 2018/4/3 14:27 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncLazyPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">SyncLazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SyncLazyPattern syncLazyPattern <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> SyncLazyPattern <span class="token function">getSyncLazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>syncLazyPattern <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                syncLazyPattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncLazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> syncLazyPattern<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="synchronized-锁住代码块"><a href="#synchronized-锁住代码块" class="headerlink" title="synchronized 锁住代码块"></a>synchronized 锁住代码块</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>singleton<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 锁代码块的方式虽然可以保证结果一致性 * 但锁住很多操作, 同样会导致效率低下 * * @author liuzhihang * @date 2018/4/3 15:22 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncCodeBlockLazyPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">SyncCodeBlockLazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SyncCodeBlockLazyPattern syncCodeBlockLazyPattern <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SyncCodeBlockLazyPattern <span class="token function">getSyncCodeBlockLazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 锁住具体执行业务逻辑的代码</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SyncCodeBlockLazyPattern<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>syncCodeBlockLazyPattern <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    syncCodeBlockLazyPattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncCodeBlockLazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> syncCodeBlockLazyPattern<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="双重检查锁机制-推荐"><a href="#双重检查锁机制-推荐" class="headerlink" title="双重检查锁机制(推荐)"></a>双重检查锁机制(推荐)</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>singleton<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 双重锁检查机制, 仅锁住创建对象的部分代码 * 注意: 在对象前 添加 volatile 关键字 确保可见性, 即 每次获取值从主内存中获取, 同时防止指令重排序 * * @author liuzhihang * @date 2018/4/3 15:29 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboCheckLockLazyPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">DubboCheckLockLazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> DubboCheckLockLazyPattern dubboCheckLockLazyPattern <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DubboCheckLockLazyPattern <span class="token function">getDubboCheckLockLazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dubboCheckLockLazyPattern <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 一系列操作</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DubboCheckLockLazyPattern<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 二次检查</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dubboCheckLockLazyPattern <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dubboCheckLockLazyPattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DubboCheckLockLazyPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dubboCheckLockLazyPattern<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poi读写Excel简单介绍</title>
      <link href="/2018/02/15/poi-read-and-write-excel-brief-introduction.html"/>
      <url>/2018/02/15/poi-read-and-write-excel-brief-introduction.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Apache POI 可以对Microsoft Office 进行操作, 下面是工作中使用的对Excel进行读写操作的常用方式.</p></blockquote><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- excel poi --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><a id="more"></a><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>主要介绍读写时, 分别常用到的一些对象及其含义, 方便自己编写util.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>poi<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>hssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>HSSFWorkbook<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>Row<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>Sheet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>Workbook<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>xssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>XSSFSheet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>xssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>XSSFWorkbook<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2018/4/20 16:12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// readerTest();</span>        <span class="token function">writerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"c:Users/liuzhihang/Desktop/test.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取的文件存在!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 操作 .xls 的 workbook</span>        Workbook hssfWorkbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 操作 .xlsx 的 workbook</span>        XSSFWorkbook xssfWorkbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 sheet 页</span>        XSSFSheet sheet <span class="token operator">=</span> xssfWorkbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 0 行 操作对象</span>        Row row0 <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建单元格并赋值</span>        row0<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"序号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写入文件</span>        xssfWorkbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"c:Users/liuzhihang/Desktop/parkingLotTempLate.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Workbook workBook <span class="token operator">=</span> ExcelUtil<span class="token punctuation">.</span><span class="token function">getWorkBook</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 excel 页</span>        <span class="token comment" spellcheck="true">// Sheet sheetByIndex = workBook.getSheetAt(0);</span>        <span class="token comment" spellcheck="true">// Sheet sheetByName = workBook.getSheet("Sheet0");</span>        <span class="token comment" spellcheck="true">// 操作 sheet</span>        Sheet sheet <span class="token operator">=</span> workBook<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取最后一行行数 从 0 开始</span>        <span class="token keyword">int</span> lastRowNum <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取总行数</span>        <span class="token keyword">int</span> physicalNumberOfRows <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getPhysicalNumberOfRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 操作行 获取第0行</span>        Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String value <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ExcelUtil-简单工具"><a href="#ExcelUtil-简单工具" class="headerlink" title="ExcelUtil 简单工具"></a>ExcelUtil 简单工具</h3><p>poi读写 excel 的简单工具 <a href="https://github.com/liuzhihangs/my_project/blob/master/my_project_tool/src/main/java/com/liuzhihang/tool/excel/poi/ExcelUtil.java">ExcelUtil</a>, 实际工作中可结合javaBean使用并重新编写util.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>poi<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Log4j2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>hssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>HSSFWorkbook<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>Cell<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>Row<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>Sheet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>Workbook<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>xssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>XSSFWorkbook<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2018/4/20 12:02 */</span><span class="token annotation punctuation">@Log4j2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 读取两列excel 返回第二列的集合     *     * @param workbook     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">readExcelForTwoColumns</span><span class="token punctuation">(</span>Workbook workbook<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workbook <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"获取 workbook 为null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Sheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取总行数</span>            <span class="token keyword">int</span> rowNum <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//正文内容应该从第二行开始，第一行为文件的标头的标题</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String value <span class="token operator">=</span> <span class="token function">getCellValue</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 写 excel     *     * @param excelFile     * @param list     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writerExcelForTwoColumns</span><span class="token punctuation">(</span>File excelFile<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>excelFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            Workbook workBook <span class="token operator">=</span> null<span class="token punctuation">;</span>            String fileName <span class="token operator">=</span> excelFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".xls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                workBook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                workBook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"文件格式不正确!, 当前文件名:{}"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"文件格式不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 创建第 0 页</span>            Sheet sheet <span class="token operator">=</span> workBook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Row row1 <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"序号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"编号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            workBook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"写excel失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取工作表     *     * @param file     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Workbook <span class="token function">getWorkBook</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Workbook workbook <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".xls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"文件格式不正确!, 当前文件名:{}"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"文件格式不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> workbook<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取单元格的数据     *     * @param cell     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getCellValue</span><span class="token punctuation">(</span>Cell cell<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cell <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getCellTypeEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 数字</span>                <span class="token keyword">case</span> NUMERIC<span class="token operator">:</span>                    <span class="token keyword">return</span> cell<span class="token punctuation">.</span><span class="token function">getNumericCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 字符串</span>                <span class="token keyword">case</span> STRING<span class="token operator">:</span>                    <span class="token keyword">return</span> cell<span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 公式</span>                <span class="token keyword">case</span> FORMULA<span class="token operator">:</span>                    <span class="token keyword">return</span> cell<span class="token punctuation">.</span><span class="token function">getCellFormula</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 布尔</span>                <span class="token keyword">case</span> BOOLEAN<span class="token operator">:</span>                    <span class="token keyword">return</span> cell<span class="token punctuation">.</span><span class="token function">getBooleanCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> ERROR<span class="token operator">:</span>                    <span class="token keyword">return</span> cell<span class="token punctuation">.</span><span class="token function">getErrorCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 空</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poi </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>protostuff序列化工具</title>
      <link href="/2018/02/05/protostuff-serialization-tool.html"/>
      <url>/2018/02/05/protostuff-serialization-tool.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在很多地方都需要用到序列化, 比如在使用redis缓存对象时, 一般情况是实现java Serializable接口. 简单介绍下在慕课网学习到的一个新的序列化工具 —- protostuff.</p><p>在学习中介绍使用该工具可以大大减少对象序列化后字节所占空间, 并提高序列化时间等.</p><p>1.<a href="https://www.imooc.com/video/11823">慕课网课程地址</a><br>2.<a href="https://github.com/eishay/jvm-serializers/wiki">序列化相关工具比较</a></p><a id="more"></a><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- protostuff 序列化工具 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dyuproject.protostuff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>protostuff-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dyuproject.protostuff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>protostuff-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="相关使用"><a href="#相关使用" class="headerlink" title="相关使用"></a>相关使用</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>dyuproject<span class="token punctuation">.</span>protostuff<span class="token punctuation">.</span>LinkedBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>dyuproject<span class="token punctuation">.</span>protostuff<span class="token punctuation">.</span>ProtostuffIOUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>dyuproject<span class="token punctuation">.</span>protostuff<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>RuntimeSchema<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2018/4/18 15:04 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtostuffUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RuntimeSchema<span class="token operator">&lt;</span>T<span class="token operator">></span> schema <span class="token operator">=</span> RuntimeSchema<span class="token punctuation">.</span><span class="token function">createFrom</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ProtostuffIOUtil<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> schema<span class="token punctuation">,</span> LinkedBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>LinkedBuffer<span class="token punctuation">.</span>DEFAULT_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">unSerialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RuntimeSchema<span class="token operator">&lt;</span>T<span class="token operator">></span> schema <span class="token operator">=</span> RuntimeSchema<span class="token punctuation">.</span><span class="token function">createFrom</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>        T message <span class="token operator">=</span> schema<span class="token punctuation">.</span><span class="token function">newMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProtostuffIOUtil<span class="token punctuation">.</span><span class="token function">mergeFrom</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> message<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2018/4/17 19:01 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2018/4/17 19:02 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtostuffTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"test0001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"测试用户0001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialize <span class="token operator">=</span> ProtostuffUtil<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User unSerialize <span class="token operator">=</span> ProtostuffUtil<span class="token punctuation">.</span><span class="token function">unSerialize</span><span class="token punctuation">(</span>serialize<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>unSerialize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>结果<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token string">"test0001"</span><span class="token punctuation">,</span><span class="token string">"userName"</span><span class="token operator">:</span><span class="token string">"测试用户0001"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token string">"test0001"</span><span class="token punctuation">,</span><span class="token string">"userName"</span><span class="token operator">:</span><span class="token string">"测试用户0001"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> serialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transactional声明式事务</title>
      <link href="/2018/01/27/transactional-declarative-transaction.html"/>
      <url>/2018/01/27/transactional-declarative-transaction.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>1.声明式事务管理建立在AOP之上的. 其本质是对方法前后进行拦截, 然后在目标方法开始之前创建或者加入一个事务, 在执行完目标方法之后根据执行情况提交或者回滚事务.<br>2.声明式事务最大的优点就是不需要通过编程的方式管理事务, 这样就不需要在业务逻辑代码中掺杂事务管理的代码, 只需在配置文件中做相关的事务规则声明(或通过基于@Transactional注解的方式), 便可以将事务规则应用到业务逻辑中.<br>3.声明式事务不足的地方在于, 与编程式事务相比, 只能作用到方法级别, 无法像编程式事务那样可以作用到代码块级别.</p><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><p>1.添加命名空间</p><a id="more"></a><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span>  <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name">.</span> <span class="token attr-name">.</span> <span class="token attr-name">.</span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        . . .        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>2.添加相关事务支持</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 指向数据源 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>masterDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启事务的Annotation支持 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="Transactional注解-使用"><a href="#Transactional注解-使用" class="headerlink" title="@Transactional注解 使用"></a>@Transactional注解 使用</h3><p>@Transactional 可以作用于接口,接口方法,类以及类方法上. 只需要在相应接口,类或方法上加上@Transactional注解即可.</p><h3 id="Transactional-注解介绍"><a href="#Transactional-注解介绍" class="headerlink" title="@Transactional 注解介绍"></a>@Transactional 注解介绍</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Documented<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Inherited<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AliasFor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>TransactionDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Isolation<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Propagation<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Target({ElementType.METHOD, ElementType.TYPE}) : 可用于接口, 类, 枚举, 注解, 方法 * @Retention(RetentionPolicy.RUNTIME) : 注解会在class字节码文件中存在，在运行时可以通过反射获取到 * @Inherited :　子类可以继承父类中的注解 * @Documented : 注解将被包含在javadoc中 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Transactional</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 事务管理器的别名     * 系统指定多个事务管理器时可通过别名进行区分     */</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"transactionManager"</span><span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 可通过在 transactionManager 中设置 &lt;qualifier value="managerOne"/> 属性类指定名称     * 可用于确定目标事务管理器，匹配特定的限定符值（或bean名称）     */</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    String <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 事务的传播机制     * 默认 Propagation.REQUIRED     */</span>    Propagation <span class="token function">propagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 事务的隔离级别     * 默认 Isolation.DEFAULT     */</span>    Isolation <span class="token function">isolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> Isolation<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 事务超时时间     * 默认 TransactionDefinition.TIMEOUT_DEFAULT 即 -1     */</span>    <span class="token keyword">int</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> TransactionDefinition<span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置事务只读     */</span>    <span class="token keyword">boolean</span> <span class="token function">readOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚     * rollbackFor = Exception.class 或 rollbackFor = {RuntimeException.class, Exception.class}     */</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rollbackFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时, 事务进行回滚     */</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rollbackForClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则不进行事务回滚     */</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">noRollbackFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时, 事务不进行回滚     */</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">noRollbackForClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="传播行为介绍"><a href="#传播行为介绍" class="headerlink" title="传播行为介绍"></a>传播行为介绍</h3><p>事务的传播行为, 一共 7 种<br>1.枚举介绍</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>TransactionDefinition<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Propagation <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 支持当前事务, 如果不存在, 则创建一个新事务     * 事务的默认设置     */</span>    <span class="token function">REQUIRED</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_REQUIRED<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 支持当前事务, 如果不存在, 则以非事务方式执行     */</span>    <span class="token function">SUPPORTS</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_SUPPORTS<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 支持当前事务, 如果不存在则抛出异常     */</span>    <span class="token function">MANDATORY</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_MANDATORY<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 开始一个新的事务, 并暂停当前事务(如果存在)     */</span>    <span class="token function">REQUIRES_NEW</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_REQUIRES_NEW<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 以非事务方式执行, 暂停当前事务(如果存在)     */</span>    <span class="token function">NOT_SUPPORTED</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NOT_SUPPORTED<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 以非事务方式执行, 如果存在则抛出异常     */</span>    <span class="token function">NEVER</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 如果当前事务存在, 则在嵌套事务中执行.     * 如果事务不存在, 则等同于 PROPAGATION_REQUIRED     */</span>    <span class="token function">NESTED</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NESTED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token function">Propagation</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.列表</p><table><thead><tr><th>Propagation</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED</td><td>支持当前事务, 如果不存在, 则创建一个新事务</td></tr><tr><td>SUPPORTS</td><td>支持当前事务, 如果不存在, 则以非事务方式执行</td></tr><tr><td>MANDATORY</td><td>支持当前事务, 如果不存在则抛出异常</td></tr><tr><td>REQUIRES_NEW</td><td>开始一个新的事务, 并暂停当前事务(如果存在)</td></tr><tr><td>NOT_SUPPORTED</td><td>以非事务方式执行, 暂停当前事务(如果存在)</td></tr><tr><td>NEVER</td><td>以非事务方式执行, 如果存在则抛出异常</td></tr><tr><td>NESTED</td><td>如果当前事务存在, 则在嵌套事务中执行. 如果事务不存在, 则等同于 PROPAGATION_REQUIRED</td></tr></tbody></table><h3 id="隔离级别介绍"><a href="#隔离级别介绍" class="headerlink" title="隔离级别介绍"></a>隔离级别介绍</h3><p>1.枚举介绍</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>TransactionDefinition<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Isolation <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用底层数据存储默认的隔离级别     * 一般存储底层默认为: READ_COMMITTED     */</span>    <span class="token function">DEFAULT</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>ISOLATION_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 读未提交     * 会出现脏读和不可重复读, 一般不使用     */</span>    <span class="token function">READ_UNCOMMITTED</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>ISOLATION_READ_UNCOMMITTED<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 读已提交     * 该级别仅禁止事务读取其中未提交更改的行     * 可能会出现不可重复读取和幻像读取     */</span>    <span class="token function">READ_COMMITTED</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>ISOLATION_READ_COMMITTED<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 可重复读     * 禁止事务读取其中有未提交更改的行, 并且还禁止一个事务读取一行, 第二个事务更改该行. 并且第一个事务重新读取该行, 第二次获取不同值的情况     * 即 禁止 读未提交, 不可重复读     * 会出现幻读     */</span>    <span class="token function">REPEATABLE_READ</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>ISOLATION_REPEATABLE_READ<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 串行     * 所有事物依次执行, 不会影响别的事务, 所以会防止 不可重复读 脏读 幻读     * 会影响性能     */</span>    <span class="token function">SERIALIZABLE</span><span class="token punctuation">(</span>TransactionDefinition<span class="token punctuation">.</span>ISOLATION_SERIALIZABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token function">Isolation</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.列表</p><table><thead><tr><th>Isolation</th><th>含义</th></tr></thead><tbody><tr><td>DEFAULT</td><td>使用底层数据存储默认的隔离级别, 一般存储底层默认为: READ_COMMITTED</td></tr><tr><td>READ_UNCOMMITTED</td><td>读未提交, 会出现脏读和不可重复读, 一般不使用</td></tr><tr><td>READ_COMMITTED</td><td>该级别仅禁止事务读取其中未提交更改的行. 可能会出现不可重复读取和幻像读取</td></tr><tr><td>REPEATABLE_READ</td><td>可重复读, 禁止事务读取其中有未提交更改的行, 并且还禁止一个事务读取一行, 第二个事务更改该行. 并且第一个事务重新读取该行, 第二次获取不同值的情况. 即 禁止 读未提交, 不可重复读. 会出现幻读</td></tr><tr><td>SERIALIZABLE</td><td>串行, 所有事物依次执行, 不会影响别的事务, 所以会防止 不可重复读 脏读 幻读. 会影响性能</td></tr></tbody></table><p>3.脏读 幻读 不可重复读</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>脏读</td><td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</td></tr><tr><td>幻读</td><td>事务读取时不存在该数据, 读取后发现该数据存在. 中间因为别的事务在进行插入操作</td></tr><tr><td>不可重复读</td><td>一个事务在读取该数据时另一个事务在修改该数据, 导致多次读取数据内容不一致</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> transactional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数包装类型的缓存</title>
      <link href="/2018/01/15/integer-wrapper-type-cache.html"/>
      <url>/2018/01/15/integer-wrapper-type-cache.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>部分包装类型存在缓存机制, 会在JVM启动时, 缓存一定数量的对象, 有助于节省内存, 提高性能.</p></blockquote><h3 id="缓存区间"><a href="#缓存区间" class="headerlink" title="缓存区间"></a>缓存区间</h3><table><thead><tr><th>类型</th><th>范围</th><th>是否修改</th></tr></thead><tbody><tr><td>Integer</td><td>-128 到 127</td><td>true : -XX:AutoBoxCacheMax=size 修改</td></tr><tr><td>ByteCache</td><td>-128 到 127</td><td>false</td></tr><tr><td>ShortCache</td><td>-128 到 127</td><td>false</td></tr><tr><td>LongCache</td><td>-128 到 127</td><td>false</td></tr><tr><td>CharacterCache</td><td>0 到 127</td><td>false</td></tr></tbody></table><a id="more"></a><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class=" language-java"><code class="language-java">    Integer a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    Integer b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    Integer c <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    Integer d <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    Integer e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer f <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f <span class="token operator">==</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>== 在比较对象时, 判断是否指向同一地址</p><p>a b f 都是从缓存中取出数据, 所以地址是相同的</p><p>c d 不在缓存范围内, 所以是新的对象</p><p>e 是新对象</p><h3 id="IntegerCache"><a href="#IntegerCache" class="headerlink" title="IntegerCache"></a>IntegerCache</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> Integer cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// high value may be configured by property</span>            <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>            String integerCacheHighPropValue <span class="token operator">=</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// Maximum array size is Integer.MAX_VALUE</span>                    h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> NumberFormatException nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// If the property cannot be parsed into an int, ignore it.</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            high <span class="token operator">=</span> h<span class="token punctuation">;</span>            cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// range [-128, 127] must be interned (JLS7 5.1.7)</span>            <span class="token keyword">assert</span> IntegerCache<span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token function">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>可以通过设置 java.lang.Integer.IntegerCache.high 来修改缓存的值. 方法为修改 JVM 的启动参数 -XX:AutoBoxCacheMax=size</p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interceptor拦截器</title>
      <link href="/2018/01/10/interceptor.html"/>
      <url>/2018/01/10/interceptor.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Interceptor: 拦截器，作用类似 Filter, 主要作用是拦截用户请求, 在 Action 执行的前后各执行一段代码, 进行相应的业务处理.</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>权限认证<br>统一逻辑处理<br>日志监控等</p><a id="more"></a><h3 id="使用方式及方法介绍"><a href="#使用方式及方法介绍" class="headerlink" title="使用方式及方法介绍"></a>使用方式及方法介绍</h3><p>使用方式分为两种, 一种为: 实现HandlerInterceptor接口或者是继承实现了HandlerInterceptor接口的类, 另一种为: 实现Spring的WebRequestInterceptor接口, 或者是继承实现了WebRequestInterceptor的类.<br>1.HandlerInterceptor 介绍</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 请求处理之前调用 链式 会按照声明顺序依次执行     * 返回 true 则继续执行下一个 Interceptor 无则执行 Controller     * 返回 false 请求结束     */</span>    <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在请求处理之后，DispatcherServlet进行视图返回渲染之前进行调用，可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作。     * 调度程序Servlet在执行链中处理一个处理程序，由任意数量的拦截器组成，处理器本身在最后。 使用这种方法，每个拦截器可以后处理一个执行，并按照执行链的相反顺序进行应用     */</span>    <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求处理完成后的回调，即渲染视图后的回调。 将被调用处理程序执行的任何结果，从而允许适当的资源清理。     * 注意：只有当这个拦截器的预处理方法已经成功完成并返回时才会被调用     * 与postHandle方法一样，该方法将以相反的顺序在链中的每个拦截器上调用，因此第一个拦截器将成为最后被调用的拦截器     */</span>    <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.WebRequestInterceptor 介绍</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>ModelMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span>WebRequest<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WebRequestInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 在调用之前拦截请求处理程序的执行。 允许准备上下文资源（如Hibernate Session）并将它们公开为请求属性或线程本地对象.     * 即 准备一些需要的资源, 例如, 将请求属性放置到 WebRequest 中     * 无返回对象     */</span>    <span class="token keyword">void</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>WebRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在视图呈现前（如果有的话）在成功调用之后拦截请求处理程序的执行。     * 允许在成功处理程序执行后修改上下文资源（例如，刷新休眠会话）     * 可以通过修改 ModelMap 的属性来改变你返回的试图模型     */</span>    <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>WebRequest request<span class="token punctuation">,</span> ModelMap model<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 求处理完成后的回调，即渲染视图后的回调。 将被调用处理程序执行的任何结果，从而允许适当的资源清理。     * 注意：只有在拦截器的预处理方法成功完成时才会调用     */</span>    <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>WebRequest request<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="xml-配置"><a href="#xml-配置" class="headerlink" title="xml 配置"></a>xml 配置</h3><p>1.在 *-servlet.xml 中添加 MVC schema</p><pre class=" language-xml"><code class="language-xml">    xmlns:mvc="http://www.springframework.org/schema/mvc"    xsi:schemaLocation=" http://www.springframework.org/schema/mvc    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</code></pre><p>2.配置 mvc:interceptors 标签</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 拦截路径 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 指定拦截器 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.liuzhihang.myprojext.controller.interceptor.RequestInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>myprojext<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>interceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理逻辑</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> interceptor </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>utils工具--ValidationUtil 参数校验</title>
      <link href="/2017/12/30/utils-tool-validationutil-parameter-check.html"/>
      <url>/2017/12/30/utils-tool-validationutil-parameter-check.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在工作中不可避免的要面对很多参数校验, 比如写新接口时需要对传入VO的必要字段进行校验, String 是否为空, Integer 最小值, 对象是否为null, 等等.<br>而使用 hibernate的validator工具对参数进行校验, 可以极大的简化流程, 当然不可避免的就是需要在被校验字段上加上注解信息.</p><h6 id="1-相关依赖"><a href="#1-相关依赖" class="headerlink" title="1. 相关依赖"></a>1. 相关依赖</h6><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 参数校验工具 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.4.2.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish.web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>el-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><a id="more"></a><h6 id="2-ValidationUtil"><a href="#2-ValidationUtil" class="headerlink" title="2. ValidationUtil"></a>2. ValidationUtil</h6><p>对加上相关注解字段进行校验, 使用到 <a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/xml/JaxbUtil.java">ValidationUtil.java</a>和<a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/validate/ValidationResult.java">ValidationResult.java</a>两个文件, 也可在工具中直接抛出异常.</p><p>ValidationUtil 内容如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>validate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>CollectionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>ConstraintViolation<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Validation<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Validator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>IntrospectionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>Introspector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>PropertyDescriptor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 对添加 hibernate.validator 注解的字段进行校验 * * 使用前 需要引入 hibernate-validator 依赖 * * @author liuzhihang * @date 2017/11/22 11:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidationUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Validator validator <span class="token operator">=</span> Validation<span class="token punctuation">.</span><span class="token function">buildDefaultValidatorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 会 验证 所有字段     *     * @param obj     * @param &lt;T>     * @return 返回所有不符合的信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ValidationResult <span class="token function">validateAllField</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ValidationResult result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidationResult</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder errorMsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">setHasPass</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setErrorMsg</span><span class="token punctuation">(</span><span class="token string">"The class is null!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>ConstraintViolation<span class="token operator">&lt;</span>T<span class="token operator">>></span> violationSet <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>violationSet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>ConstraintViolation<span class="token operator">&lt;</span>T<span class="token operator">></span> violation <span class="token operator">:</span> violationSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>                errorMsg<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>violation<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result<span class="token punctuation">.</span><span class="token function">setHasPass</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setErrorMsg</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证指定字段 是否符合信息     *     * @param obj     * @param fieldName     * @param &lt;T>     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ValidationResult <span class="token function">validateOneField</span><span class="token punctuation">(</span>T obj<span class="token punctuation">,</span> String fieldName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ValidationResult result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidationResult</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">setHasPass</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setErrorMsg</span><span class="token punctuation">(</span><span class="token string">"The class is null!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>ConstraintViolation<span class="token operator">&lt;</span>T<span class="token operator">>></span> violationSet <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validateProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>violationSet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>ConstraintViolation<span class="token operator">&lt;</span>T<span class="token operator">></span> violation <span class="token operator">:</span> violationSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">setHasPass</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">setErrorMsg</span><span class="token punctuation">(</span>violation<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证 所有字段, 当第一个不符合时 则直接返回信息     *     * @param obj     * @param &lt;T>     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ValidationResult <span class="token function">validateAllFieldForOneBack</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ValidationResult result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidationResult</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">setHasPass</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setErrorMsg</span><span class="token punctuation">(</span><span class="token string">"The class is null!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            PropertyDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> propertyDescriptors <span class="token operator">=</span> Introspector<span class="token punctuation">.</span><span class="token function">getBeanInfo</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertyDescriptor propertyDescriptor <span class="token operator">:</span> propertyDescriptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token function">validateOneField</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> propertyDescriptor<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getHasPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IntrospectionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">setHasPass</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setErrorMsg</span><span class="token punctuation">(</span><span class="token string">"This validate has error : "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ValidationResult 内容如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>validate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Description: * @Author: liuzhihang * @Date: 2018/1/6 17:57 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidationResult</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Boolean hasPass<span class="token punctuation">;</span>    <span class="token keyword">private</span> String errorMsg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ValidationResult</span><span class="token punctuation">(</span>Boolean hasPass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hasPass <span class="token operator">=</span> hasPass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Boolean <span class="token function">getHasPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hasPass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHasPass</span><span class="token punctuation">(</span>Boolean hasPass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hasPass <span class="token operator">=</span> hasPass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setErrorMsg</span><span class="token punctuation">(</span>String errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ValidationResult{"</span> <span class="token operator">+</span>                <span class="token string">"hasPass="</span> <span class="token operator">+</span> hasPass <span class="token operator">+</span>                <span class="token string">", errorMsg='"</span> <span class="token operator">+</span> errorMsg <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="3-常用注解"><a href="#3-常用注解" class="headerlink" title="3. 常用注解"></a>3. 常用注解</h6><pre><code>Bean Validation 中内置的 constraint@Null   被注释的元素必须为 null@NotNull    被注释的元素必须不为 null@AssertTrue     被注释的元素必须为 true@AssertFalse    被注释的元素必须为 false@Min(value)     被注释的元素必须是一个数字，其值必须大于等于指定的最小值@Max(value)     被注释的元素必须是一个数字，其值必须小于等于指定的最大值@DecimalMin(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值@DecimalMax(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值@Size(max=, min=)   被注释的元素的大小必须在指定的范围内@Digits (integer, fraction)     被注释的元素必须是一个数字，其值必须在可接受的范围内@Past   被注释的元素必须是一个过去的日期@Future     被注释的元素必须是一个将来的日期@Pattern(regex=,flag=)  被注释的元素必须符合指定的正则表达式Hibernate Validator 附加的 constraint@NotBlank(message =)   验证字符串非null，且长度必须大于0@Email  被注释的元素必须是电子邮箱地址@Length(min=,max=)  被注释的字符串的大小必须在指定的范围内@NotEmpty   被注释的字符串的必须非空@Range(min=,max=,message=)  被注释的元素必须在合适的范围内</code></pre><h6 id="4-测试示例"><a href="#4-测试示例" class="headerlink" title="4 测试示例"></a>4 测试示例</h6><p><a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/validate/ValidationVo.java">代码</a>:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>validate<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>NotBlank<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>NotEmpty<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>Min<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>NotNull<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuzhihang * @date 2017/11/22 18:25 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidationVo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"The name must notEmpty!"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"The age must notNull!"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"The age must greater than 0!"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ValidationVo validationVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidationVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ValidationUtil<span class="token punctuation">.</span><span class="token function">validateAllField</span><span class="token punctuation">(</span>validationVo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        validationVo<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ValidationUtil<span class="token punctuation">.</span><span class="token function">validateAllField</span><span class="token punctuation">(</span>validationVo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        validationVo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"二蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ValidationUtil<span class="token punctuation">.</span><span class="token function">validateAllField</span><span class="token punctuation">(</span>validationVo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果:</p><pre><code>ValidationResult{hasPass=false, errorMsg=&#39;The name must notEmpty!The age must notNull!&#39;}ValidationResult{hasPass=false, errorMsg=&#39;The name must notEmpty!&#39;}ValidationResult{hasPass=true, errorMsg=&#39;null&#39;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> validation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml解析--dom4j</title>
      <link href="/2017/12/30/xml-parsing-dom4j.html"/>
      <url>/2017/12/30/xml-parsing-dom4j.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在工作中有时候会用到dom4j对xml文件或者字符串进行解析, 以下内容为随手笔记, 防止以后遗忘.</p><h5 id="1-相关依赖"><a href="#1-相关依赖" class="headerlink" title="1. 相关依赖"></a>1. 相关依赖</h5><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- dom4j --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><a id="more"></a><h5 id="2-获取dom对象"><a href="#2-获取dom对象" class="headerlink" title="2. 获取dom对象"></a>2. 获取dom对象</h5><p>获取dom对象方式主要以下几种:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 读取 xml 文件 方式</span>    SAXReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Document doc1 <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/main/java/com/liuzhihang/tool/xml/alipay.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析 xml 文本 方式</span>    String aliPayStr <span class="token operator">=</span> XmlTest<span class="token punctuation">.</span><span class="token function">getAliPayStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Document doc2 <span class="token operator">=</span> DocumentHelper<span class="token punctuation">.</span><span class="token function">parseText</span><span class="token punctuation">(</span>aliPayStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 主动创建</span>    Document doc3 <span class="token operator">=</span> DocumentHelper<span class="token punctuation">.</span><span class="token function">createDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Element element <span class="token operator">=</span> doc3<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="3-操作dom对象"><a href="#3-操作dom对象" class="headerlink" title="3. 操作dom对象"></a>3. 操作dom对象</h6><p>当获取到dom对象后便可以通过以下方式对dom进行操作</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 获取根节点</span>    Element rootElement <span class="token operator">=</span> dom<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// System.out.println(rootElement.getName());</span>    <span class="token comment" spellcheck="true">// 获取子节点</span>    Element element <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"response"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"alipay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// System.out.println(element.asXML());</span>    <span class="token comment" spellcheck="true">// 获取节点的文字</span>    String text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"alipay_buyer_login_id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// System.out.println(text);</span>    <span class="token comment" spellcheck="true">// 获取节点下的所有节点 快捷键 iter / itco</span>    List elements <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// for (Object o : elements) {</span>    <span class="token comment" spellcheck="true">//     Element tempElement = (Element) o;</span>    <span class="token comment" spellcheck="true">//     System.out.println(tempElement.getName() + "\t" + tempElement.getText());</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// for (Iterator iterator = elements.iterator(); iterator.hasNext(); ) {</span>    <span class="token comment" spellcheck="true">//     Element next =  (Element)iterator.next();</span>    <span class="token comment" spellcheck="true">//     System.out.println(next.getName() + "\t" + next.getText());</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// 获取节点下所有节点 Iterator对象 快捷键 itit</span>    Iterator iterator <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">elementIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// while (iterator.hasNext()) {</span>    <span class="token comment" spellcheck="true">//     Element next =  (Element)iterator.next();</span>    <span class="token comment" spellcheck="true">//     System.out.println(next.getName() + "\t" + next.getText());</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// 添加节点</span>    Element testElement <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"testElement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指定添加文字</span>    testElement<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"测试添加文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">asXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除节点</span>    <span class="token keyword">boolean</span> remove <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>testElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>remove <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">asXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="4-详细代码"><a href="#4-详细代码" class="headerlink" title="4. 详细代码"></a>4. 详细代码</h6><p><a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/xml/Dom4jTest.java">Dom4jTest.java</a></p>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml解析--JaxbUtil</title>
      <link href="/2017/12/17/xml-parsing-jaxbutil.html"/>
      <url>/2017/12/17/xml-parsing-jaxbutil.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要介绍使用jaxb对xml进行解析, 互转.</p><p>jaxb 是相对较多的xml工具, 只需要在javaBean的属性上添加相应注解, 就可以使用工具进行解析. 具体使用过程如下:</p><h5 id="1-编写javaBean并添加注解"><a href="#1-编写javaBean并添加注解" class="headerlink" title="1. 编写javaBean并添加注解"></a>1. 编写javaBean并添加注解</h5><p>使用过程中一般常用@XmlRootElement, @XmlAccessorType, @XmlElement, @XmlAttribute四个注解, 其余使用方式可以再自行深入研究.</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@XmlRootElement</span><span class="token operator">:</span> 根元素<span class="token annotation punctuation">@XmlAccessorType</span><span class="token operator">:</span> java对象生成xml文件时对java对象属性的访问方式    属性为XmlAccessType<span class="token punctuation">.</span>FIELD 指java所有成员变量<span class="token annotation punctuation">@XmlElement</span><span class="token operator">:</span> 子节点<span class="token punctuation">,</span> name 可指定节点名<span class="token annotation punctuation">@XmlAttribute</span><span class="token operator">:</span> 映射为xml文件的属性<span class="token punctuation">,</span> name 可指定属性名</code></pre><a id="more"></a><p>javaBean:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@XmlRootElement</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"alipay"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@XmlAccessorType</span><span class="token punctuation">(</span>XmlAccessType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AliPayXml</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"alipay_buyer_login_id"</span> <span class="token punctuation">)</span>    <span class="token keyword">private</span> String buyerLoginId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"alipay_buyer_user_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String buyerUserId<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="2-使用-JaxbUtil"><a href="#2-使用-JaxbUtil" class="headerlink" title="2. 使用 JaxbUtil"></a>2. 使用 JaxbUtil</h5><p><a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/xml/JaxbUtil.java">JaxbUtil</a>代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuzhihang<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>xml<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>JAXBContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>JAXBException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Marshaller<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Unmarshaller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StringReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StringWriter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Jaxb 工具 * * @author liuzhihang * @date 2017/11/28 19:13 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JaxbUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CHARTSET <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">bean2Xml</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> JAXBException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">bean2Xml</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> CHARTSET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">bean2Xml</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> String chartset<span class="token punctuation">)</span> <span class="token keyword">throws</span> JAXBException <span class="token punctuation">{</span>        JAXBContext jaxbContext <span class="token operator">=</span> JAXBContext<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Marshaller marshaller <span class="token operator">=</span> jaxbContext<span class="token punctuation">.</span><span class="token function">createMarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        marshaller<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Marshaller<span class="token punctuation">.</span>JAXB_FORMATTED_OUTPUT<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        marshaller<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Marshaller<span class="token punctuation">.</span>JAXB_ENCODING<span class="token punctuation">,</span> chartset<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringWriter writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        marshaller<span class="token punctuation">.</span><span class="token function">marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> writer<span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">xml2Bean</span><span class="token punctuation">(</span>String xmlString<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> JAXBException <span class="token punctuation">{</span>        JAXBContext jaxbContext <span class="token operator">=</span> JAXBContext<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        Unmarshaller unmarshaller <span class="token operator">=</span> jaxbContext<span class="token punctuation">.</span><span class="token function">createUnmarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        T t <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> unmarshaller<span class="token punctuation">.</span><span class="token function">unmarshal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>xmlString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-测试代码"><a href="#3-测试代码" class="headerlink" title="3. 测试代码"></a>3. 测试代码</h5><p>待测试字符串: xmlStr</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alipay</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alipay_buyer_login_id</span><span class="token punctuation">></span></span>176****3035<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alipay_buyer_login_id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alipay_buyer_user_id</span><span class="token punctuation">></span></span>2088912868994947<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alipay_buyer_user_id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alipay</span><span class="token punctuation">></span></span></code></pre><p>测试代码:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description: * @Author: liuzhihang * @Date: 2017/12/17 23:11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JaxbTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JAXBException <span class="token punctuation">{</span>        String aliPayXmlStr <span class="token operator">=</span> <span class="token string">"&lt;alipay>\n"</span> <span class="token operator">+</span>                <span class="token string">"  &lt;alipay_buyer_login_id>176****3035&lt;/alipay_buyer_login_id>\n"</span> <span class="token operator">+</span>                <span class="token string">"  &lt;alipay_buyer_user_id>2088912868994947&lt;/alipay_buyer_user_id>\n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;/alipay>"</span><span class="token punctuation">;</span>        AliPayXml aliPayXml <span class="token operator">=</span> JaxbUtil<span class="token punctuation">.</span><span class="token function">xml2Bean</span><span class="token punctuation">(</span>aliPayXmlStr<span class="token punctuation">,</span> AliPayXml<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>aliPayXml<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果:</p><p>打印的为json格式结果, 可debugger查看. 同样也可以将javaBean转换为xmlStr</p><pre><code>{&quot;buyerLoginId&quot;:&quot;176****3035&quot;,&quot;buyerUserId&quot;:&quot;2088912868994947&quot;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
