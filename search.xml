<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【JDK源码笔记】- HashMap红黑树</title>
      <link href="/2020/05/25/source-code-hashmap-red-black-tree.html"/>
      <url>/2020/05/25/source-code-hashmap-red-black-tree.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>前言<br>在阅读HashMap源码时，会发现在HashMap中使用了红黑树，所以需要先了解什么是红黑树，以及其原理。从而再进一步阅读HashMap中的链表到红黑树的转换，红黑树的增删节点等。</p></blockquote><blockquote><ol><li>什么是红黑树？</li><li>在HashMap中是怎么应用的？</li></ol></blockquote><h3 id="什么是红黑树？"><a href="#什么是红黑树？" class="headerlink" title="什么是红黑树？"></a>什么是红黑树？</h3><blockquote><p>红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。它在1972年由鲁道夫·贝尔发明，被称为”对称二叉B树”，它现代的名字源于Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文。红黑树的结构复杂，但它的操作有着良好的最坏情况运行时间，并且在实践中高效：它可以在O(logN)时间内完成查找、插入和删除，这里的n是树中元素的数目。</p></blockquote><h3 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h3><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：</p><ol><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</li></ol><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/red-black-tree001.jpeg" alt="红黑树001"></p><h3 id="红黑树操作"><a href="#红黑树操作" class="headerlink" title="红黑树操作"></a>红黑树操作</h3><h4 id="左旋、右旋"><a href="#左旋、右旋" class="headerlink" title="左旋、右旋"></a>左旋、右旋</h4><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/krck8S.gif" alt="krck8S"></p><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/OUd2GL.gif" alt="OUd2GL"></p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><ol><li>以二叉查找树的方法增加节点</li><li>新插入节点为红色（如果设为黑色，就会导致根到叶子的路径上有一条路上，多一个额外的黑节点，这个是很难调整的。但是设为红色节点后，可能会导致出现两个连续红色节点的冲突，那么可以通过颜色调换（color flips）和树旋转来调整。）</li></ol><p>注意：</p><ol><li>性质1和性质3是永远保持着的。</li><li>性质4只在增加红色节点、重绘黑色节点为红色，或做旋转时受到威胁。</li><li>性质5只在增加黑色节点、重绘红色节点为黑色，或做旋转时受到威胁。</li></ol><p>插入时会遇到以下五种情形：</p><blockquote><p>情形1：插入第一个节点<br>情形2：插入新节点，父节点是黑色<br>情形3：插入新节点，父节点是红色，叔父节点是红色<br>情形4：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是右子节点，父节点又是其父节点的左子节点<br>情形5：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是左子节点，父节点又是其父节点的左子节点。</p></blockquote><ul><li>情形1：</li></ul><p>操作：插入第一个节点<br>违反性质2：” 根是黑色。 “<br>情形：直接插入红色节点，然后进行染色为黑色</p><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/red-black-tree1.gif" alt="红黑树1"></p><ul><li>情形2：</li></ul><p>操作：插入新节点，父节点是黑色<br>未违反性质<br>情形：直接插入</p><ul><li>情形3：</li></ul><p>操作：插入新节点，父节点是红色，叔父节点是红色<br>违反性质4：” 每个红色节点必须有两个黑色的子节点。 “<br>情形：将祖父节点染色，祖父节点染色后再进行重新判断进行染色或旋转</p><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/red-black-tree3.gif" alt="红黑树3"></p><ul><li>情形4：</li></ul><p>操作：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是右子节点，父节点又是其父节点的左子节点<br>违反性质4：” 每个红色节点必须有两个黑色的子节点。 “<br>情形：进行左旋，旋转后父节点变成左子节点，新节点变成父节点，然后重新判断进行染色或旋转</p><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/red-black-tree4.gif" alt="红黑树4"></p><ul><li>情形5：</li></ul><p>操作：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是左子节点，父节点又是其父节点的左子节点。<br>违反性质4：” 每个红色节点必须有两个黑色的子节点。 “<br>情形：父节点染色为黑色，进行右旋，祖父节点变为右子节点，然后重新判断进行染色或旋转</p><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/red-black-tree5.gif" alt="红黑树5"></p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="keyword">boolean</span> red;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三个参数"><a href="#三个参数" class="headerlink" title="三个参数"></a>三个参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表转为树阈值。 </span></span><br><span class="line"><span class="comment"> * 大于等于8时，会转换为树。 </span></span><br><span class="line"><span class="comment"> * 8 是综合性能考虑确定的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从树转换为链表的阈值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最小树形化容量，只有哈希表元素数到达64才会进行树转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><h4 id="链表转红黑树-treeifyBin"><a href="#链表转红黑树-treeifyBin" class="headerlink" title="链表转红黑树-treeifyBin"></a>链表转红黑树-treeifyBin</h4><ol><li>数组（哈希表）长度到达64</li><li>当链表长度大于等于8是会将链表转换为红黑树</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">// 数组为null或者数组长度小于MIN_TREEIFY_CAPACITY（64）时，进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 头尾节点 hd-头 tl-尾</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 创建树节点 Node -&gt; TreeNode</span></span><br><span class="line">            <span class="comment">// 循环执行完之后得到的是双向链表</span></span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 此时得到的仅仅是双向链表</span></span><br><span class="line">        <span class="comment">// 指针指向链表头</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">// 将双向链表转换为树</span></span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">        x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 情形1：插入第一个节点</span></span><br><span class="line">            x.parent = <span class="keyword">null</span>;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            root = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当前节点的 key 和 hash</span></span><br><span class="line">            K k = x.key;</span><br><span class="line">            <span class="keyword">int</span> h = x.hash;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 再次循环</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> dir, ph;</span><br><span class="line">                <span class="comment">// 内层循环的key</span></span><br><span class="line">                K pk = p.key;</span><br><span class="line">                <span class="comment">// 当前节点的hash和内层循环的hash值作比较</span></span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    <span class="comment">// &lt; 0 left查找</span></span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    <span class="comment">// &gt; 0 right 查找</span></span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                            (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                            (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    <span class="comment">// 比较对象</span></span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="comment">// dir &lt;= 0 则走 left查找 &gt; 0 则走 right查找</span></span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    <span class="comment">// 正式转换为红黑树</span></span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// root 根节点</span></span><br><span class="line"><span class="comment">// x 要操作的节点</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认节点为红色</span></span><br><span class="line">    x.red = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// xp：x的父节点</span></span><br><span class="line">    <span class="comment">// xpp：x的祖父节点</span></span><br><span class="line">    <span class="comment">// xppl：x祖父节点的左子节点</span></span><br><span class="line">    <span class="comment">// xppr：x祖父节点的右子节点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 情形1： 父节点为null， 直接置为根</span></span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 父节点黑色 或者 祖父节点为空，直接返回</span></span><br><span class="line">        <span class="comment">// 情形2：插入新节点，父节点是黑色</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 父节点是祖父节点的左子节点</span></span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">            <span class="comment">// 祖父节点的右子节点不为空且是红色</span></span><br><span class="line">            <span class="comment">// 情形3：插入新节点，父节点是红色，叔父节点是红色</span></span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                xppr.red = <span class="keyword">false</span>; <span class="comment">//祖父节点的右子节点设置为黑色</span></span><br><span class="line">                xp.red = <span class="keyword">false</span>; <span class="comment">// 父节点设置为黑色</span></span><br><span class="line">                xpp.red = <span class="keyword">true</span>; <span class="comment">// 祖父节点设置为红色</span></span><br><span class="line">                x = xpp; <span class="comment">// 继续操作祖父节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 旋转</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 新插入的是右子节点</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                    <span class="comment">// 插入的x是父节点的右子节点， 进行左旋</span></span><br><span class="line">                    root = rotateLeft(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 父节点设置为黑色</span></span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="comment">// 右旋</span></span><br><span class="line">                        root = rotateRight(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 父节点是祖父节点的右子节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 祖父节点的左子节点不为空且为红色</span></span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                xppl.red = <span class="keyword">false</span>; <span class="comment">// 祖父节点的左子节点设置为黑色</span></span><br><span class="line">                xp.red = <span class="keyword">false</span>; <span class="comment">// 父节点设置为黑色</span></span><br><span class="line">                xpp.red = <span class="keyword">true</span>; <span class="comment">// 祖父节点设置为红色</span></span><br><span class="line">                x = xpp; <span class="comment">// 继续操作祖父节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 旋转</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- HashMap扩容</title>
      <link href="/2020/05/17/source-code-hashmap-resize.html"/>
      <url>/2020/05/17/source-code-hashmap-resize.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>描述下HashMap put(k,v)的流程？<br>它的扩容流程是怎么样的？</p></blockquote><h3 id="HashMap-put-k-v-流程"><a href="#HashMap-put-k-v-流程" class="headerlink" title="HashMap put(k,v)流程"></a>HashMap put(k,v)流程</h3><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/3pSob4.png" alt="3pSob4"></p><ol><li>通过hash(key方法)获取到key的hash值</li><li>调用put方法, 将value存放到指定的位置<ol><li>根据hash值确定当前key所在node数组的索引 <code>(n - 1) &amp; hash</code></li><li>如果node[i]==null 则直接创建新数组</li><li>如果node[i]!=null<ol><li>判断 当前node的头结点的 hash和key是否都相等, 相等则需要操作的就是该node</li><li>判断当前节点是否为TreeNode，对TreeNode进行操作，并返回结果e</li><li>如果是链表则遍历链表，key存在则返回节点e，不存在则赋值</li><li>判断节点e有没有被赋值，覆盖旧值</li></ol></li><li>hashMap size进行加1，同时判断v新size是否大于扩容阈值从而判断是否需要扩容</li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明Node数组tab, Node节点</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="comment">// 对tab数组赋值为当前HashMap的table, 并判断是否为空, 或者长度为0</span></span><br><span class="line">        <span class="comment">// 为0进行则resize()数组, 并对 n赋值为当前tab的长度</span></span><br><span class="line">        <span class="comment">// resize() 对HashMap的table扩容, 并返回扩容后的新数组</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">// 对 node p 进行赋值, 数组所在位置 即 node p 如果是null 则直接赋值</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// p 不为null, 声明 node e, key k</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// 如果hash值相等且key相等, 直接将 e 赋值为当前node的头节点</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 如果是红黑树, 则对树进行操作, 返回节点e</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 对链表进行遍历, 找到对应的节点</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">// 将 e 赋值为  头节点p的next, 如果下一个节点为null</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 对节点进行赋值</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">// 如果长度到达数转换阈值, 则需要转换为红黑树</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果e节点的hash相等, key相等, 则 直接跳出循环 e 已经被赋值为 p.next</span></span><br><span class="line">                    <span class="comment">// 此时e节点的value没有被赋值</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 指针指向下一个节点, 继续遍历</span></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="comment">// 对旧值进行覆盖, 并返回旧值</span></span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="comment">// 是否需要扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="resize-扩容过程"><a href="#resize-扩容过程" class="headerlink" title="resize()扩容过程"></a>resize()扩容过程</h3><ol><li>JDK 1.7 扩容流程, 每次都需要数组扩容后, 链表需要重新计算在新数组的位置</li><li>JDK 1.8 不需要重新计算 (优化点)<ol><li>数组下标: (n - 1) &amp; hash 即数组长度-1 &amp; key的hash</li><li>扩容后的数组下标: ((n &lt;&lt; 1) - 1) &amp; hash 相当于在 高位1之前加了个1</li></ol></li></ol><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/GRQHSY.png" alt="GRQHSY"></p><p>如图所示, 真正发生影响的是新增的那一位(红色箭头所指), 所以 oldCap &amp; hash 完全可以判断该值是放在旧索引值的位置还是放在旧索引值+旧数组长度的位置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">// 旧数组</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">// 旧数组长度</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">// 旧的扩容阈值</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="comment">// 新的数组长度和新扩容阈值</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 旧数组存在</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新数组长度为旧数组长度的2倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            <span class="comment">// 扩容阈值是旧扩容阈值的2倍</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 旧数组不存在, 相当于首次put(K, V)时, 将数组长度置为扩容阈值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        <span class="comment">// 旧数组不存在, new HashMap()未指定长度, 初次put(K, V), 设置为默认值</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新的扩容阈值是0, 则将扩容阈值设置为 新数组长度*负载因子</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对全局的扩容阈值进行赋值</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    <span class="comment">// 创建新数组, 长度为新长度, 即原数组长度的2倍</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    <span class="comment">// 将table复制为新数组</span></span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 对旧数组进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">// 旧节点node赋值</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">// 只有头结点, 直接计算新的位置并赋值</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">// 树单独处理</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">// next节点</span></span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 节点hash与旧数组长度 &amp; 的结果来决定元素所在位置, 参考上面图示所讲</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 在元索引出创建新链表</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 新索引出创建链表</span></span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">// 索引j处直接赋值</span></span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">// 索引 j + 老数组长度位置存放hiHead</span></span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- HashMap的初始化</title>
      <link href="/2020/05/11/source-code-hashmap-init.html"/>
      <url>/2020/05/11/source-code-hashmap-init.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>HashMap初始化参数都是什么？默认是多少？<br>为什么建议初始化设置容量？<br>tableSizeFor方法是做什么的？<br>如何获取到一个key的hash值？及计算下标？</p></blockquote><h3 id="HashMap初始化参数都是什么？默认是多少？"><a href="#HashMap初始化参数都是什么？默认是多少？" class="headerlink" title="HashMap初始化参数都是什么？默认是多少？"></a>HashMap初始化参数都是什么？默认是多少？</h3><p>HashMap初始化参数分别是初始容量和负载因子。</p><p>初始容量(threshold)：默认 16， 必须是2的幂， 最大容量为 1 &lt;&lt; 30</p><p>负载因子(loadFactor)：是指哈希表的负载因子，当哈希表的长度大于<code>capacity * loadFactor</code>时会进行扩容，默认 0.75f</p><h3 id="为什么建议初始化设置容量"><a href="#为什么建议初始化设置容量" class="headerlink" title="为什么建议初始化设置容量"></a>为什么建议初始化设置容量</h3><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/3aQLYq.png" alt="3aQLYq"></p><p>这块涉及到HashMap的扩容， 在<code>阿里巴巴Java开发手册</code>中已经说明了原因。主要是为了减少频繁的扩容造成的资源损耗。</p><h3 id="tableSizeFor方法是做什么的？"><a href="#tableSizeFor方法是做什么的？" class="headerlink" title="tableSizeFor方法是做什么的？"></a>tableSizeFor方法是做什么的？</h3><p>初始化HashMap时, 如果传入初始容量, 在初始化时会调用 <code>tableSizeFor(initialCapacity)</code> 方法寻找大于等于当前值的下一个2的幂值.</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>; <span class="comment">//  -1操作, 防止当cap正好是2的幂时的处理</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// n无符号右移1位, 然后和n做 | 运算, (1|0=1 1|1=1 0|0=0 0|1=1)</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>; <span class="comment">// n无符号右移2位, 然后和n做 | 运算,</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>; <span class="comment">// n无符号右移4位, 然后和n做 | 运算,</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>; <span class="comment">// n无符号右移8位, 然后和n做 | 运算,</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>; <span class="comment">// n无符号右移16位, 然后和n做 | 运算,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后获得的结果为 cap-1的下一个2的幂值-1, 只需要对n+1即可</span></span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>假设cap值为100, 即0110 0100</li><li>cap的下一个2的幂为 0111 1111 即 1000 0000</li><li>0000 = 0111 1111 + 1</li><li>只需要考虑将 首个为1的最高位之后的值置为1, 然后+1即可</li><li>为防止cap本来就是2的幂, 则需要先进行减一操作</li></ol><p>如图所示:<br><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/51Xhtj.png" alt="51Xhtj"></p><p>最后执行的结果进行加1即可</p><h3 id="如何获取到一个key的hash值？"><a href="#如何获取到一个key的hash值？" class="headerlink" title="如何获取到一个key的hash值？"></a>如何获取到一个key的hash值？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// key的hashCode ^ 上自己的高16位， 如果是null的话则hash为0</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到了hash值， 那如何计算在数组的那个位置呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// n为数组长度  数组下标</span></span><br><span class="line">i = (n - <span class="number">1</span>) &amp; hash</span><br></pre></td></tr></table></figure><p>数组长度都是 2的幂<br>假设 n = 1 &gt;&gt; x<br>则 n - 1 则表示 一个低x位全为1的数</p><p>(n - 1) &amp; hash 则相当于 一个低x位全为1的数和hash做&amp;操作.</p><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/article/OAZssV.png" alt="OAZssV"></p><p>通过图可以看出, 参与运算的只有低x位, 相当于之前的所有值都不会有效. 所以前面的hash(key) 将key.hashCode()高低16位做^操作, 可以保证, 高低16位都能参与运算.一定程度上避免hash碰撞.在源码注释中已经说明, 是肯定会有碰撞, 但是这是权衡之后的结果.</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown代码折叠</title>
      <link href="/2020/04/20/markdown-code-folding.html"/>
      <url>/2020/04/20/markdown-code-folding.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><h4 id="折叠内容"><a href="#折叠内容" class="headerlink" title="折叠内容"></a>折叠内容</h4><details><summary>折叠内容</summary>在markdown中折叠一部分内容, 点击可以展开.</details><h4 id="折叠代码"><a href="#折叠代码" class="headerlink" title="折叠代码"></a>折叠代码</h4><details><summary>折叠代码</summary><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>使用html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span>折叠内容<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">在markdown中折叠一部分内容, 点击可以展开.</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span>折叠代码<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> 代码块</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雪花算法</title>
      <link href="/2020/04/13/snowflake-algorithm.html"/>
      <url>/2020/04/13/snowflake-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>简单介绍下雪花算法, 以及Java版雪花算法的代码.<br>仅仅是一个最简单版本, 更深层次的指针回拨等. 相当于在开发过成功可以先使用.<br>尽量还是使用统一的分布式流水号生成系统, 保证流水号全局唯一.</p></blockquote><h3 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 0000000000 0000000000 0000000000 0000000000 0 00000 00000 000000000000</span><br></pre></td></tr></table></figure><p>使用64位long型数字作为全局唯一id<br>1位 无意义 0<br>41位 时间戳<br>5位 机房id<br>5位 机器id<br>12位自增序号 表示同一时间同一机房同一机器生成的序列号</p><ol><li><p>第一位为什么无意义<br> 二进制中 第一位代表符号位, 默认 0 表示生成的序列号为正数</p></li><li><p>41位时间戳<br> 41位最大能表示 2^41-1 的数字. 毫秒值 69.7年<br> (2^41-1)/1000/60/60/24</p><p> 当时间大于69.7即时间戳差值大于 2199023255551, 会开始出现负值流水号</p></li><li><p>10位<br> 机房id+机器id 2^10 1024台机器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 但是使用中不可能每部署一台机器都改下编号, 所以我做出以下改动</span></span><br><span class="line"><span class="comment">// 8位机器号(最大256) 2位机房号</span></span><br><span class="line"><span class="comment">// 机器号使用IP地址后三位 机房id 默认1</span></span><br><span class="line"><span class="comment">// 只需要确保机器的ip后三位不同即可</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MACHINE_BIT = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DATA_CENTER_BIT = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DATA_CENTER_ID = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> address;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    InetAddress localIp = IpUtils.getLocalIp();</span><br><span class="line">    address = localIp.getAddress()[<span class="number">3</span>] &amp; <span class="number">0xff</span>;</span><br><span class="line">    log.info(<span class="string">"当前系统的 address 为: &#123;&#125;"</span>, address);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>12位序列号<br> 表示同一毫秒内生成的id 2^12-1 个正整数</p></li></ol><p>SnowFlake每秒能够产生26万ID左右</p><p>优点:<br>生成ID时不依赖于DB，完全在内存生成，高性能高可用。<br>ID呈趋势递增，后续插入索引树的时候性能较好。<br>缺点:<br>依赖于系统时钟的一致性。如果某台机器的系统时钟回拨，有可能造成ID冲突，或者ID乱序</p><h3 id="SerialNumber"><a href="#SerialNumber" class="headerlink" title="SerialNumber"></a>SerialNumber</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialNumber</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 起始的时间戳 2018-01-01 00:00:00</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> START_STAMP = <span class="number">1514736000000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一部分占用的位数</span></span><br><span class="line"><span class="comment">     * 序列号 占用位数 12 位 (同一毫秒内生成的id 2^12-1 个正整数)</span></span><br><span class="line"><span class="comment">     * 机器标识  占用位数 8 位 (一般是使用5位)</span></span><br><span class="line"><span class="comment">     * 数据中心 占用位数 2 位 (一般是使用5位)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SEQUENCE_BIT = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MACHINE_BIT = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DATA_CENTER_BIT = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一部分的最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_DATA_CENTER_NUM = ~(-<span class="number">1L</span> &lt;&lt; DATA_CENTER_BIT);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_MACHINE_NUM = ~(-<span class="number">1L</span> &lt;&lt; MACHINE_BIT);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_SEQUENCE = ~(-<span class="number">1L</span> &lt;&lt; SEQUENCE_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一部分向左的位移</span></span><br><span class="line"><span class="comment">     * 机器Id左移12位 (SEQUENCE_BIT = 12)</span></span><br><span class="line"><span class="comment">     * 数据中心左移20位 (SEQUENCE_BIT + MACHINE_BIT = 12 + 8)</span></span><br><span class="line"><span class="comment">     * 时间戳左移22位 (DATA_CENTER_LEFT + DATA_CENTER_BIT = 12 + 8 + 2)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MACHINE_LEFT = SEQUENCE_BIT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DATA_CENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TIME_STAMP_LEFT = DATA_CENTER_LEFT + DATA_CENTER_BIT;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心 机器标识 序列号 上一次时间戳</span></span><br><span class="line"><span class="comment">     * 数据中心标识和机器标识一般是外部传入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DATA_CENTER_ID = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastStamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">"yyMMdd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">      InetAddress localIp = IpUtils.getLocalIp();</span><br><span class="line">      address = localIp.getAddress()[<span class="number">3</span>] &amp; <span class="number">0xff</span>;</span><br><span class="line">      log.info(<span class="string">"当前系统的 address 为: &#123;&#125;"</span>, address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生下一个ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> currStamp = getNewStamp();</span><br><span class="line">        <span class="keyword">if</span> (currStamp &lt; lastStamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Clock moved backwards.  Refusing to generate id"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currStamp == lastStamp) &#123;</span><br><span class="line">            <span class="comment">// 相同毫秒内，序列号自增 (sequence + 1) &amp; (~(-1L &lt;&lt; SEQUENCE_BIT))</span></span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; MAX_SEQUENCE;</span><br><span class="line">            <span class="comment">// 同一毫秒的序列数已经达到最大</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0L</span>) &#123;</span><br><span class="line">                currStamp = getNextMill();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不同毫秒内，序列号置为0</span></span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lastStamp = currStamp;</span><br><span class="line">        <span class="comment">// 时间戳部分 数据中心部分 机器标识部分 序列号部分</span></span><br><span class="line">        <span class="keyword">return</span> (currStamp - START_STAMP) &lt;&lt; TIME_STAMP_LEFT | DATA_CENTER_ID &lt;&lt; DATA_CENTER_LEFT</span><br><span class="line">            | address &lt;&lt; MACHINE_LEFT | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getNextMill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> mill = getNewStamp();</span><br><span class="line">        <span class="keyword">while</span> (mill &lt;= lastStamp) &#123;</span><br><span class="line">            mill = getNewStamp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getNewStamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IpUtils"><a href="#IpUtils" class="headerlink" title="IpUtils"></a>IpUtils</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/19 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InetAddress <span class="title">getLocalIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Enumeration&lt;NetworkInterface&gt; e = NetworkInterface.getNetworkInterfaces(); e.hasMoreElements(); ) &#123;</span><br><span class="line">                NetworkInterface item = e.nextElement();</span><br><span class="line">                <span class="keyword">for</span> (InterfaceAddress address : item.getInterfaceAddresses()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (item.isLoopback() || !item.isUp()) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (address.getAddress() <span class="keyword">instanceof</span> Inet4Address) &#123;</span><br><span class="line">                        <span class="keyword">return</span> address.getAddress();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> InetAddress.getLocalHost();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException | UnknownHostException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 流水号 </tag>
            
            <tag> 雪花算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目启动失败:java.lang.NoClassDefFoundError</title>
      <link href="/2020/04/12/no-class-def-found-error-rule-configuration.html"/>
      <url>/2020/04/12/no-class-def-found-error-rule-configuration.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>近期遇到一个很久没有启动过的项目, 然后启动失败, 报 java.lang.NoClassDefFoundError, 现在记录问题排查情况.</p></blockquote><h4 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h4><ul><li>错误代码较长, 可以收缩, 直接看排查</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error starting ApplicationContext. To display the conditions report re-run your application with &#39;debug&#39; enabled.]</span><br><span class="line">[2020-04-10 13:26:11.478]-[main]-[]-[ERROR]-[org.springframework.boot.SpringApplication:821]-[Application run failed]</span><br><span class="line">org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat</span><br><span class="line">        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:155) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]</span><br><span class="line">        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742) [spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389) [spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.SpringApplication.run(SpringApplication.java:311) [spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213) [spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202) [spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at com.opay.im.WebApplication.main(WebApplication.java:32) [classes!&#x2F;:1.0-SNAPSHOT]</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_221]</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_221]</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_221]</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_221]</span><br><span class="line">        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]</span><br><span class="line">        at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]</span><br><span class="line">        at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]</span><br><span class="line">        at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:58) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]</span><br><span class="line">Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat</span><br><span class="line">        at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:124) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.&lt;init&gt;(TomcatWebServer.java:86) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:414) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:178) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:179) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:152) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        ... 16 more</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;servletEndpointRegistrar&#39; defined in class path resource [org&#x2F;springframework&#x2F;boot&#x2F;actuate&#x2F;autoconfigure&#x2F;endpoint&#x2F;web&#x2F;ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method &#39;servletEndpointRegistrar&#39; threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;healthEndpoint&#39; defined in class path resource [org&#x2F;springframework&#x2F;boot&#x2F;actuate&#x2F;autoconfigure&#x2F;health&#x2F;HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method &#39;healthEndpoint&#39; parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;healthIndicatorRegistry&#39; defined in class path resource [org&#x2F;springframework&#x2F;boot&#x2F;actuate&#x2F;autoconfigure&#x2F;health&#x2F;HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method &#39;healthIndicatorRegistry&#39; threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration&#39;: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;dataSource&#39; defined in class path resource [com&#x2F;opay&#x2F;im&#x2F;config&#x2F;DatabaseConfig.class]: Unsatisfied dependency expressed through method &#39;dataSource&#39; parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;defaultDataSource&#39; defined in class path resource [com&#x2F;opay&#x2F;im&#x2F;config&#x2F;DatabaseConfig.class]: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org&#x2F;apache&#x2F;shardingsphere&#x2F;api&#x2F;config&#x2F;RuleConfiguration</span><br><span class="line">        at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]</span><br><span class="line">        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]</span><br><span class="line">        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]</span><br><span class="line">        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]</span><br><span class="line">        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]</span><br><span class="line">        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]</span><br><span class="line">        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]</span><br><span class="line">        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]</span><br><span class="line">        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]</span><br><span class="line">        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]</span><br><span class="line">        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:211) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:202) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:96) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.&lt;init&gt;(ServletContextInitializerBeans.java:85) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br><span class="line">        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:252) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]</span><br></pre></td></tr></table></figure><h4 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h4><ol><li>开始排查是因为缺少 <code>sharding-core-api-4.0.0-RC2.2-1.8.jar</code> 包下的一个文件, 但是本地是有的</li><li>本地可以启动</li><li>服务器启动失败, 可能是jar包缺少</li><li>最后结果发现 sharding-core-api-4.0.0-RC2.2-1.8.jar 是通过公司封装的一个包传递进来的, 而封装的那个jar包在私服上已经被删除了. <del>删除原因</del></li></ol>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA插件开发常用API</title>
      <link href="/2020/01/22/idea-plugin-development-common-api.html"/>
      <url>/2020/01/22/idea-plugin-development-common-api.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在开发Toolkit过程中查阅相关资料和阅读其他开源项目总结的一些常用API.<br>整体内容来源于网络, 以及自己使用开发Toolkit过程中使用到的.<br>总结的不到位的地方欢迎指正.</p><p>使用Gradle创建插件项目请参考: <a href="https://blog.xiaohansong.com/idea-plugin-development.html">https://blog.xiaohansong.com/idea-plugin-development.html</a><br>常用API请参考: <a href="https://blog.csdn.net/ExcellentYuXiao/article/details/80273448">https://blog.csdn.net/ExcellentYuXiao/article/details/80273448</a><br>官方文档请参考: <a href="http://www.jetbrains.org/intellij/sdk/docs/welcome.html">http://www.jetbrains.org/intellij/sdk/docs/welcome.html</a></p></blockquote><h3 id="AnAction操作"><a href="#AnAction操作" class="headerlink" title="AnAction操作"></a>AnAction操作</h3><ol><li>创建Action集成<code>AnAction</code>并实现其<code>actionPerformed</code>方法. 在方法中可以获取到<code>AnActionEvent</code>对象. 代码如下:</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonFormatAction</span> <span class="keyword">extends</span> <span class="title">AnAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(AnActionEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前project对象</span></span><br><span class="line">        Project project = event.getData(PlatformDataKeys.PROJECT);</span><br><span class="line">        <span class="comment">// 获取当前编辑的文件, 可以进而获取 PsiClass, PsiField 对象</span></span><br><span class="line">        PsiFile psiFile = event.getData(CommonDataKeys.PSI_FILE);</span><br><span class="line">        Editor editor = event.getData(CommonDataKeys.EDITOR);</span><br><span class="line">        <span class="comment">// 获取Java类或者接口</span></span><br><span class="line">        PsiClass psiClass = getTargetClass(editor, psiFile);</span><br><span class="line">        <span class="comment">// 创建并调起 DialogWrapper</span></span><br><span class="line">        DialogWrapper dialog = <span class="keyword">new</span> JsonFormat(project, psiFile, editor, psiClass);</span><br><span class="line">        dialog.show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>其他方式</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取project. 内部调用 getData(CommonDataKeys.PROJECT) = getDataContext().getData(CommonDataKeys.PROJECT)</span></span><br><span class="line">Project project = e.getProject();</span><br><span class="line"><span class="comment">// 获取数据上下文</span></span><br><span class="line">DataContext dataContext = e.getDataContext();</span><br><span class="line"><span class="comment">// context可以也获取到其他信息, 入参为 PlatformDataKeys 定义的字段</span></span><br><span class="line">Project project1 = dataContext.getData(PlatformDataKeys.PROJECT);</span><br><span class="line">Editor editor = dataContext.getData(PlatformDataKeys.EDITOR);</span><br><span class="line">PsiFile psiFile = dataContext.getData(PlatformDataKeys.PSI_FILE);</span><br><span class="line">PsiElement psiElement = dataContext.getData(PlatformDataKeys.PSI_ELEMENT);</span><br><span class="line"><span class="comment">// 虚拟文件</span></span><br><span class="line">VirtualFile virtualFile = dataContext.getData(PlatformDataKeys.VIRTUAL_FILE);</span><br></pre></td></tr></table></figure><h3 id="获取PsiClass"><a href="#获取PsiClass" class="headerlink" title="获取PsiClass"></a>获取PsiClass</h3><p>PsiClass为java类或者接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> PsiClass <span class="title">getTargetClass</span><span class="params">(Editor editor, PsiFile file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> offset = editor.getCaretModel().getOffset();</span><br><span class="line">    PsiElement element = file.findElementAt(offset);</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PsiClass target = PsiTreeUtil.getParentOfType(element, PsiClass<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> target <span class="keyword">instanceof</span> SyntheticElement ? <span class="keyword">null</span> : target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Psixxx操作"><a href="#Psixxx操作" class="headerlink" title="Psixxx操作"></a>Psixxx操作</h3><h4 id="PsiClass操作API"><a href="#PsiClass操作API" class="headerlink" title="PsiClass操作API"></a>PsiClass操作API</h4><p>源码有注释且比较清楚, 此处仅记录我用到的一部分</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取全类名</span></span><br><span class="line">String qualifiedName = aClass.getQualifiedName();</span><br><span class="line"><span class="comment">// 获取所有字段</span></span><br><span class="line">PsiField[] fields = aClass.getFields();</span><br></pre></td></tr></table></figure><h4 id="PsiField操作"><a href="#PsiField操作" class="headerlink" title="PsiField操作"></a>PsiField操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取字段名</span></span><br><span class="line">String name = psiField.getName()</span><br></pre></td></tr></table></figure><h4 id="PsiElement操作"><a href="#PsiElement操作" class="headerlink" title="PsiElement操作"></a>PsiElement操作</h4><p>PsiClass和PsiField都实现了PsiElement</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line">element.delete()</span><br><span class="line"><span class="comment">// 添加元素, 向一个类中添加方法, 字段等, 也可以调用 addBefore, addAfter</span></span><br><span class="line">add(PsiElement element)</span><br></pre></td></tr></table></figure><h4 id="PsiType操作"><a href="#PsiType操作" class="headerlink" title="PsiType操作"></a>PsiType操作</h4><p>PsiType支持常用基本类型, 但是当创建对象时则不支持.需要自己创建</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PsiElementFactory psiElementFactory = JavaPsiFacade.getElementFactory(project);</span><br><span class="line"><span class="comment">// String 类型</span></span><br><span class="line">PsiType stringPsiType = psiElementFactory.createTypeFromText(<span class="string">"java.lang.String"</span>, <span class="keyword">null</span>)</span><br><span class="line"><span class="comment">// list</span></span><br><span class="line">PsiType listPsiType = psiElementFactory.createTypeFromText(<span class="string">"java.util.List&lt;String&gt;"</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 自定义list</span></span><br><span class="line">PsiType typeFromText = psiElementFactory.createTypeFromText(<span class="string">"java.util.List&lt;"</span> + className + <span class="string">"&gt;"</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前项目的所有元素 mapper, 分别填入类型, 作用域 GlobalSearchScope</span></span><br><span class="line">List&lt;DomFileElement&lt;Mapper&gt;&gt; fileElements = DomService.getInstance().getFileElements(Mapper<span class="class">.<span class="keyword">class</span>, <span class="title">project</span>, <span class="title">GlobalSearchScope</span>.<span class="title">allScope</span>(<span class="title">project</span>))</span>;</span><br></pre></td></tr></table></figure><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>需要调用<code>WriteCommandAction</code>进行异步写入.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WriteCommandAction.runWriteCommandAction(project, () -&gt; &#123;</span><br><span class="line">    doGenerate(psiClass, jsonObject);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>插件中有一些注释, 可以参考插件的内容. 具体可以参考我的插件Toolkit.</p><h4 id="我的插件"><a href="#我的插件" class="headerlink" title="我的插件"></a>我的插件</h4><ul><li>Toolkit: <a href="https://github.com/liuzhihangs/toolkit">https://github.com/liuzhihangs/toolkit</a></li><li>copy-as-json: <a href="https://github.com/liuzhihangs/copy-as-json">https://github.com/liuzhihangs/copy-as-json</a></li></ul><h4 id="感谢"><a href="#感谢" class="headerlink" title="感谢:"></a>感谢:</h4><ul><li><p>开源项目:</p><ul><li>MyBatis support: <a href="https://github.com/zhaoqin102/mybatis-support">https://github.com/zhaoqin102/mybatis-support</a></li><li>free-idea-mybatis: <a href="https://github.com/wuzhizhan/free-idea-mybatis">https://github.com/wuzhizhan/free-idea-mybatis</a></li><li>GsonFormat: <a href="https://github.com/zzz40500/GsonFormat">https://github.com/zzz40500/GsonFormat</a></li></ul></li><li><p>相关资料:</p><ul><li>搭建开发环境: <a href="https://blog.xiaohansong.com/idea-plugin-development.html">https://blog.xiaohansong.com/idea-plugin-development.html</a></li><li>常用API请参考: <a href="https://blog.csdn.net/ExcellentYuXiao/article/details/80273448">https://blog.csdn.net/ExcellentYuXiao/article/details/80273448</a></li><li>官方文档请参考: <a href="http://www.jetbrains.org/intellij/sdk/docs/welcome.html">http://www.jetbrains.org/intellij/sdk/docs/welcome.html</a></li><li>其他查询到的资料</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac创建data目录失败</title>
      <link href="/2020/01/05/mac-create-data-directory-failed.html"/>
      <url>/2020/01/05/mac-create-data-directory-failed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>部分项目log日志输出路径为 /data/log, 发现无法创建目录<br>错误信息: <code>mkdir: cannot create directory ‘data’: Read-only file system</code></p></blockquote><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><h5 id="关闭SPI"><a href="#关闭SPI" class="headerlink" title="关闭SPI"></a>关闭SPI</h5><ol><li>重启 按住CMD+R进入恢复模式</li><li>打开终端<br><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/feature/mac-spi.jpg" alt="spi关闭"></li><li>终端输入命令：csrutil disable</li></ol><h5 id="挂载data"><a href="#挂载data" class="headerlink" title="挂载data"></a>挂载data</h5><ol><li>在用户目录(可以自己找一个目录下创建data)</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~  % &gt; <span class="built_in">cd</span> ~</span><br><span class="line">~  % &gt; mkdir data</span><br></pre></td></tr></table></figure><ol start="2"><li>执行 <code>sudo mount -uw /</code> 重新挂载根目录</li><li>建立软链<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ln -s /Users/liuzhihang/data /data</span><br></pre></td></tr></table></figure></li><li>之后可以重启再打开spi了<br><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/feature/mac-spi2.png" alt="spi关闭"></li></ol>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中插入Bilibili视频</title>
      <link href="/2019/09/14/hexo-inserts-bilibili-video.html"/>
      <url>/2019/09/14/hexo-inserts-bilibili-video.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>修改matery主题首页显示视频为Bilibili视频</p><p>在Markdown插入Bilibili视频, 并设置大小.</p></blockquote><h3 id="首先找到分享嵌入代码"><a href="#首先找到分享嵌入代码" class="headerlink" title="首先找到分享嵌入代码"></a>首先找到分享嵌入代码</h3><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://i.loli.net/2019/10/10/di3Cxcr9VLvjqM6.png" alt="Bilibili分享截图"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=17963687&amp;cid=29326684&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在markdown中使用嵌入代码"><a href="#在markdown中使用嵌入代码" class="headerlink" title="在markdown中使用嵌入代码"></a>在markdown中使用嵌入代码</h3><iframe src="//player.bilibili.com/player.html?aid=17963687&cid=29326684&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="调整大小和居中等"><a href="#调整大小和居中等" class="headerlink" title="调整大小和居中等"></a>调整大小和居中等</h3><p><a href="https://www.w3school.com.cn/tags/tag_iframe.asp">iframe标签属性设置</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    调整大小: width="xxx" height="xxx"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=17963687&amp;cid=29326684&amp;page=1"</span>  <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>  <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe src="//player.bilibili.com/player.html?aid=17963687&cid=29326684&page=1" width="700" height="480"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="设置自适应"><a href="#设置自适应" class="headerlink" title="设置自适应"></a>设置自适应</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: relative; width: 100%; height: 0; padding-bottom: 75%;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=17963687&amp;cid=29326684&amp;page=1"</span>  <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"position: absolute; width: 100%; height: 100%; left: 0; top: 0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=17963687&cid=29326684&page=1"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><h3 id="matery-主题修改首页展示视频"><a href="#matery-主题修改首页展示视频" class="headerlink" title="matery 主题修改首页展示视频"></a>matery 主题修改首页展示视频</h3><p>找到 /themes/hexo-theme-matery/layout/_widget/video.ejs 将第十一行左右代码改成Bilibili视频即可, 引入的 script 可以删掉.</p><p>修改后如下.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"video-player"</span>&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (theme.video.showTitle) &#123; %&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"title center-align"</span>&gt;</span><br><span class="line">            &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fas fa-video-camera"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span>&amp;nbsp;&amp;nbsp;<span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.video.title</span> %&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col l8 offset-l2 m10 offset-m1 s12"</span>&gt;</span><br><span class="line">            &lt;div id=<span class="string">"dplayer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"dplayer-video"</span>&gt;</span><br><span class="line">                &lt;div style=<span class="string">"position: relative; width: 100%; height: 0; padding-bottom: 75%;"</span>&gt;</span><br><span class="line">                    &lt;iframe src=<span class="string">"//player.bilibili.com/player.html?aid=16316393&amp;cid=26620787&amp;page=1"</span>  scrolling=<span class="string">"no"</span> border=<span class="string">"0"</span> frameborder=<span class="string">"no"</span> framespacing=<span class="string">"0"</span> allowfullscreen=<span class="string">"true"</span> style=<span class="string">"position: absolute; width: 100%; height: 100%; left: 0; top: 0;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis分布式锁的生产问题解决方案</title>
      <link href="/2019/08/18/redis-distributed-lock-production-problem-solution.html"/>
      <url>/2019/08/18/redis-distributed-lock-production-problem-solution.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://liuzhihang.com/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><pre><code>SET KEY VALUE TIME NXDEL KEY</code></pre><p>一般使用 NX, 只有在锁不存在的时候才加锁成功, 设置时间是为了锁永远得不到释放</p><h3 id="存在问题及解决方法"><a href="#存在问题及解决方法" class="headerlink" title="存在问题及解决方法"></a>存在问题及解决方法</h3><ol><li><p>A加锁, B释放</p><p> 方法: Redisson 在tryLock时</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> threadId = Thread.currentThread().getId();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getLockName</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id + <span class="string">":"</span> + threadId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// id 为 UUID</span></span><br></pre></td></tr></table></figure><p> 会将当前 uuId+线程id写入到锁信息中, unlock时会校验是否是当前线程</p></li><li><p>A lock锁住之后, 设置了时间, 但是在时间内未完成, 导致锁自动释放, 然后B获取锁同时进行操作</p><p> 方法: Redisson 在lock时会启动异步线程, 自动延期, 时间为 lockWatchdogTimeout(默认30s)</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Timeout task = commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">    省略...</span><br><span class="line">&#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure><p> 看源码是延时 1/3的时间后开始, 就是每次1/3时间的时候延期一次. 这样理解不知道对不对</p></li><li><p>主从下, A 加锁 Master 成功后未同步给Slave 便宕机, 导致 B发现未加锁<br> 方法: 可以修改源码, 同时加锁Master-Slave 才算加锁成功</p></li><li><p>集群状态下可以参考RedLock(红锁), 加锁多台机器, 多数成功才算成功(locks.size()/2 + 1)</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonRedLock</span> <span class="keyword">extends</span> <span class="title">RedissonMultiLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedissonRedLock</span><span class="params">(RLock... locks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(locks);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何落地最终一致性事务</title>
      <link href="/2019/08/17/how-to-land-the-final-consistency-transaction.html"/>
      <url>/2019/08/17/how-to-land-the-final-consistency-transaction.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://liuzhihang.com/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="作业：如果对自己的系统落地最终一致性事务，如何落地实现？"><a href="#作业：如果对自己的系统落地最终一致性事务，如何落地实现？" class="headerlink" title="作业：如果对自己的系统落地最终一致性事务，如何落地实现？"></a>作业：如果对自己的系统落地最终一致性事务，如何落地实现？</h3><ol><li>首先熟悉自己负责的业务, 熟悉系统间交互流程, 哪些可以异步, 哪些是必须同步</li><li>异步的时候要考虑是否需要一致性, 当前系统通知流程如图</li></ol><h3 id="如何落地最终一致性事务"><a href="#如何落地最终一致性事务" class="headerlink" title="如何落地最终一致性事务"></a>如何落地最终一致性事务</h3><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/feature/0812-task.png" alt="最终一致性事务方案"></p><h3 id="根据课程思考最终一致性事务修改"><a href="#根据课程思考最终一致性事务修改" class="headerlink" title="根据课程思考最终一致性事务修改:"></a>根据课程思考最终一致性事务修改:</h3><ol><li>在收到交易请求, 成功时可以 commit half message</li><li>同时 需要实现 check方法, 供RocketMQ回调, 检查本地事务状态</li><li>在交易成功或失败时再进行commit或rollback</li><li>rollback消息 RocketMQ会定期删除</li><li>通知系统收到消息存储到本地并通知商户</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>但是考虑到在这边系统完全没有必要增加事务, 因为发送消息到MQ是在交易结束后, 直接用一个字段判断状态, 然后用定时保证投递到MQ即可.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RocketMQ的两段提交 half message</span><br><span class="line">执行流程</span><br><span class="line">根据流程结果: commit&#x2F;rockback</span><br></pre></td></tr></table></figure><p>可以改成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行流程</span><br><span class="line">RocketMQ send(普通消息)</span><br></pre></td></tr></table></figure><p>在这边的使用场景中, 因为提交了 half message 也不会发送消息, 等到流程执行结束了, 然后使用send发送普通消息即可.</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交易系统架构图</title>
      <link href="/2019/08/10/trading-system-architecture.html"/>
      <url>/2019/08/10/trading-system-architecture.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://liuzhihang.com/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="交易系统架构"><a href="#交易系统架构" class="headerlink" title="交易系统架构"></a>交易系统架构</h3><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/feature/0806-task.png" alt="交易系统架构"></p><h3 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程:"></a>请求流程:</h3><ol><li>请求首先到SLB(阿里云)经过负载均衡后, 到Nginx</li><li>Nginx做简单负载均衡后发给交易API系统, 4C8G * 5 ECS(阿里云)</li><li>交易会根据请求参数, 路由到各个子系统, 使用dubbo</li><li>子系统收到请求, 请求风控系统校验风控</li><li>请求应用中心获取应用参数 (appId, appKey等)</li><li>拼装报文,请求渠道系统</li><li>返回信息</li></ol><h3 id="日志报送流程"><a href="#日志报送流程" class="headerlink" title="日志报送流程"></a>日志报送流程</h3><ol><li>交易成功报送清结算, 报送数据中心</li><li>filebeat拉取日志, 报送kafka, 因filebeat升级 同时存在5.x和6.x 需要加中间一层, 之前是直接报logstash</li><li>logstash对数据进行过滤然后根据type 分别保送到 elasticsearch和redis</li><li>监控系统监控redis队列数据, 满足规则, 报警(发消息到通知系统)</li><li>监控系统对es数据进行过滤, 放到mysql, 用来展示商户, 渠道的交易变化等信息</li><li>kibana(直接用的kibana)提供给技术支持查询日志. es数据会定期删除, 保留15-30天的数据, 仅仅技术支持用, 不需要效率很高, 所以机器配置相对较差.</li></ol><h3 id="扩容方案"><a href="#扩容方案" class="headerlink" title="扩容方案"></a>扩容方案</h3><p>公司体量较小, QPS高峰期也就500左右, TPS高峰期在100~200, 所以基本没有遇到问题.<br>之前有过一段时间公众号支付交易量较大, 主要做法是增加公众号机器, 同时增加API系统机器.<br>假如交易量提高, 一般应对就是增加机器, 和提高机器配置, 基本上都可以应对.</p><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>定时系统是仅仅通过dubbo发送调用请求, 没有业务逻辑. 所以单体基本没有遇到挂掉. 也在考虑分布式定时任务.</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud架构原理图</title>
      <link href="/2019/08/04/springcloud-architecture-schematic.html"/>
      <url>/2019/08/04/springcloud-architecture-schematic.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://liuzhihang.com/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="springcloud-通信原理"><a href="#springcloud-通信原理" class="headerlink" title="springcloud 通信原理"></a>springcloud 通信原理</h3><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/feature/0731-task.png" alt="通信原理"></p><h3 id="1-Eureka-集群"><a href="#1-Eureka-集群" class="headerlink" title="1. Eureka 集群"></a>1. Eureka 集群</h3><ol><li>Eureka启动后, 会向其他节点注册, 相互直接视为 peer, 并互相同步注册信息.</li></ol><h3 id="2-缓存机制"><a href="#2-缓存机制" class="headerlink" title="2. 缓存机制"></a>2. 缓存机制</h3><p>Eureka存在三个map: registry、readWriteCacheMap、readOnlyCacheMap</p><p>registry: CurrentHashMap 实时更新<br>readWriteCacheMap: Guava Cache/LoadingCache     也是实时更新<br>readOnlyCacheMap: CurrentHashMap 30秒同步 readWriteCacheMap一次</p><h3 id="3-服务注册"><a href="#3-服务注册" class="headerlink" title="3. 服务注册"></a>3. 服务注册</h3><p>服务注册后每30s发送一次心跳(renew)<br>客户端每30秒请注册中心获取一次配置, 并存到本地内存中</p><p>注册中心会定时检查心跳, 连续没有3个回踢掉服务</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo底层原理架构图</title>
      <link href="/2019/08/03/dubbo-bottom-structure-diagram.html"/>
      <url>/2019/08/03/dubbo-bottom-structure-diagram.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://liuzhihang.com/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h4 id="操作流程图"><a href="#操作流程图" class="headerlink" title="操作流程图"></a>操作流程图</h4><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/feature/0730-task.png" alt="操作流程"></p><h4 id="1-服务注册-故障及下线"><a href="#1-服务注册-故障及下线" class="headerlink" title="1. 服务注册, 故障及下线"></a>1. 服务注册, 故障及下线</h4><ol><li>注册: provider和consumer同时在zk上注册临时节点, 同时consumer订阅zk /dubbo/**/providers provider地址, providers发生变化, zk自动推送给consumer</li></ol><p>zk上结构如下</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls /dubbo/cn.xxx.xxxService</span><br><span class="line"></span><br><span class="line">[consumers, routers, providers, configurators]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[consumer:&#x2F;&#x2F;机器ip&#x2F;接口?application&#x3D;服务名&amp;category&#x3D;consumers&amp;check&#x3D;false&amp;default.check&#x3D;false&amp;default.group&#x3D;beta&amp;default.timeout&#x3D;5000&amp;default.version&#x3D;1.0.0&amp;dubbo&#x3D;2.6.2&amp;interface&#x3D;接口&amp;methods&#x3D;方法1,方法2&amp;pid&#x3D;7828&amp;revision&#x3D;0.0.1&amp;side&#x3D;consumer&amp;timestamp&#x3D;1556173624632]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[dubbo:&#x2F;&#x2F;机器1ip:端口&#x2F;接口?anyhost&#x3D;true&amp;application&#x3D;WalletOrderApplicationConsumer&amp;delay&#x3D;2000&amp;dubbo&#x3D;2.5.3&amp;group&#x3D;beta&amp;heartbeat&#x3D;10000&amp;interface&#x3D;接口&amp;methods&#x3D;方法1,方法2&amp;pid&#x3D;22419&amp;retries&#x3D;0&amp;revision&#x3D;1.0.0&amp;side&#x3D;provider&amp;timeout&#x3D;10000&amp;timestamp&#x3D;1564743170669&amp;version&#x3D;1.0.0,</span><br><span class="line">dubbo:&#x2F;&#x2F;机器2ip:端口&#x2F;接口?anyhost&#x3D;true&amp;application&#x3D;WalletOrderApplicationConsumer&amp;delay&#x3D;2000&amp;dubbo&#x3D;2.5.3&amp;group&#x3D;beta&amp;heartbeat&#x3D;10000&amp;interface&#x3D;cn.ipaynow.webank.wallet.order.api.provider.DataCenterTaskService&amp;methods&#x3D;syncRechargesRefund,syncTrans,syncTransCancel,syncTransRefunds,syncRecharges&amp;pid&#x3D;16801&amp;retries&#x3D;0&amp;revision&#x3D;0.0.1&amp;side&#x3D;provider&amp;timeout&#x3D;10000&amp;timestamp&#x3D;1563792977340&amp;version&#x3D;1.0.0]</span><br></pre></td></tr></table></figure><ol start="2"><li>故障: zk自动删除临时节点</li><li>下线: 取消注册, 主动删除节点</li></ol><h4 id="2-Proxy-动态代理"><a href="#2-Proxy-动态代理" class="headerlink" title="2. Proxy 动态代理"></a>2. Proxy 动态代理</h4><p>根据配置的接口, 生成动态代理对象, 使用 JDK + JAVAASSIST 方式</p><ol><li><p>在服务提供端，将服务的具体实现类转为Invoker</p></li><li><p>在消费端，通过 getProxy(Invoker<T> invoker)将invoker转为客户端需要的接口</p></li><li><p>Invoker封装了Provider地址及Service接口信息</p></li></ol><h4 id="3-Cluster-集群层"><a href="#3-Cluster-集群层" class="headerlink" title="3. Cluster 集群层"></a>3. Cluster 集群层</h4><p>获取到要调用的Invoker</p><ol><li>多个服务端会有多个 Invoker对象, 组合成Directory, Directory在zk推送Provider节点变更时, 会发生变化</li><li>Router, 按照路由规则选出本次可以调用的 Directory子集,  zk注册中心 routers节点下配置</li><li>LoadBalance 从子集中按照负载均衡选出本次调用<ol><li>Random LoadBalance 随机</li><li>RoundRobin LoadBalance 轮询</li><li>LeastActive LoadBalance 最少活跃</li><li>ConsistentHash LoadBalance 一致性哈希</li></ol></li><li>容错<ol><li>Failover Cluster 失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries=”2″ 来设置重试次数(不含第一次)。</li><li>Failfast Cluster：快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</li><li>Failsafe Cluster：失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</li><li>Failback Cluster：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</li><li>Forking Cluster：并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=”2″ 来设置最大并行数。</li></ol></li></ol><h4 id="4-Protocol-远程调用层"><a href="#4-Protocol-远程调用层" class="headerlink" title="4. Protocol 远程调用层"></a>4. Protocol 远程调用层</h4><p>包含两个接口, 分别是 暴露服务(export) 和 引用服务(refer) 分别对应provider 和 consumer<br>选择通信协议 dubbo, hessian, http等</p><h4 id="5-Exchange-数据交换层"><a href="#5-Exchange-数据交换层" class="headerlink" title="5. Exchange 数据交换层"></a>5. Exchange 数据交换层</h4><p>将请求信息封装为Request, 然后发送给 Transport层, 并将返回信息封装为Response</p><h4 id="6-Transport-网络传输层"><a href="#6-Transport-网络传输层" class="headerlink" title="6. Transport 网络传输层"></a>6. Transport 网络传输层</h4><p>使用netty或mina进行网络通信</p><h4 id="7-serialize-序列化层"><a href="#7-serialize-序列化层" class="headerlink" title="7. serialize 序列化层"></a>7. serialize 序列化层</h4><p>将请求报文和返回报文记性序列化和反序列化</p><h4 id="8-provider收到请求后先进行反序列化-然后在解析请求-通过动态代理调用相应方法"><a href="#8-provider收到请求后先进行反序列化-然后在解析请求-通过动态代理调用相应方法" class="headerlink" title="8. provider收到请求后先进行反序列化, 然后在解析请求, 通过动态代理调用相应方法"></a>8. provider收到请求后先进行反序列化, 然后在解析请求, 通过动态代理调用相应方法</h4>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目中使用SpringSecurity和JWT做权限认证</title>
      <link href="/2019/07/22/springsecurity-jwt-springboot-project.html"/>
      <url>/2019/07/22/springsecurity-jwt-springboot-project.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>前段时间做了一个项目, 因为涉及到权限认证, 所以分别调研了 SpringSecurity 和 Apache Shiro. 最后选择使用了 SpringSecurity + JWT做权限认证,  现在项目已经结束, 总相关笔记.<br>项目下载地址 <a href="https://github.com/liuzhihangs/jwt-demo">jwt-demo</a></p></blockquote><ol><li>使用JWT生成token</li><li>token存储在数据库中</li><li>使用 application/json 登录</li><li>使用手机号进行登录</li><li>URI动态拦截</li></ol><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ol><li>分别添加 SpringSecurity JWT 和 fastjson 依赖</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--json--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基础准备对象"><a href="#基础准备对象" class="headerlink" title="基础准备对象"></a>基础准备对象</h3><ul><li>主要是在<strong>用户登录成功handle</strong>时使用JWT生成Token返回给客户端.</li></ul><h4 id="基础使用dto"><a href="#基础使用dto" class="headerlink" title="基础使用dto"></a>基础使用dto</h4><p>请求返回基类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseReqDto</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRespDto</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String resultCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String resultMsg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String resultTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录请求返回对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginReqDto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginRespDto</span> <span class="keyword">extends</span> <span class="title">BaseRespDto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用于验证的用户"><a href="#用于验证的用户" class="headerlink" title="用于验证的用户"></a>用于验证的用户</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.demo.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息校验验证码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsImpl</span> <span class="keyword">implements</span> <span class="title">UserDetails</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;? extends GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthorities</span><span class="params">(Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户未登录handle"><a href="#用户未登录handle" class="headerlink" title="用户未登录handle"></a>用户未登录handle</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录认证, 未登录返回信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-04 13:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        LoginRespDto respDto = <span class="keyword">new</span> LoginRespDto();</span><br><span class="line">        respDto.setResultCode(<span class="string">"0001"</span>);</span><br><span class="line">        respDto.setResultMsg(<span class="string">"用户未登录"</span>);</span><br><span class="line">        respDto.setResultTime(LocalDateTime.now().format(FORMATTER));</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(respDto));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户登录验证失败handle"><a href="#用户登录验证失败handle" class="headerlink" title="用户登录验证失败handle"></a>用户登录验证失败handle</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录认证失败返回的信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-04 13:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationFailureHandlerImpl</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        LoginRespDto respDto = <span class="keyword">new</span> LoginRespDto();</span><br><span class="line">        respDto.setResultCode(<span class="string">"0001"</span>);</span><br><span class="line">        respDto.setResultMsg(<span class="string">"用户登录认证失败"</span>);</span><br><span class="line">        respDto.setResultTime(LocalDateTime.now().format(FORMATTER));</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(respDto));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户无权访问handle"><a href="#用户无权访问handle" class="headerlink" title="用户无权访问handle"></a>用户无权访问handle</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当用户访问无权限页面时, 返回信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-04 14:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        LoginRespDto respDto = <span class="keyword">new</span> LoginRespDto();</span><br><span class="line">        respDto.setResultCode(<span class="string">"0002"</span>);</span><br><span class="line">        respDto.setResultMsg(<span class="string">"用户无权访问"</span>);</span><br><span class="line">        respDto.setResultTime(LocalDateTime.now().format(FORMATTER));</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(respDto));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户登录成功handle"><a href="#用户登录成功handle" class="headerlink" title="用户登录成功handle"></a>用户登录成功handle</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录成功之后的返回信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-04 14:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationSuccessHandlerImpl</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Authentication authentication)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();</span><br><span class="line"></span><br><span class="line">        String jwtToken = jwtTokenUtil.generateToken(userDetails);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把生成的token更新到数据库中</span></span><br><span class="line">        <span class="comment">// 更新DB操作 ...</span></span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        LoginRespDto respDto = <span class="keyword">new</span> LoginRespDto();</span><br><span class="line">        respDto.setToken(jwtToken);</span><br><span class="line">        respDto.setResultCode(<span class="string">"0000"</span>);</span><br><span class="line">        respDto.setResultMsg(<span class="string">"登录成功"</span>);</span><br><span class="line">        respDto.setResultTime(LocalDateTime.now().format(FORMATTER));</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(respDto));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JwtTokenUtil"><a href="#JwtTokenUtil" class="headerlink" title="JwtTokenUtil"></a>JwtTokenUtil</h2><p>主要用来生成token和通过token解析对象等操作.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.demo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.liuzhihang.demo.bean.UserDetailsImpl;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 java-jwt jwt类库</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-05 09:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SignatureAlgorithm SIGN_TYPE = SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">"jwt-secret"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRED_TIME = <span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * claims 为自定义的私有声明, 要放在前面</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(UserDetails userDetails)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> instantNow = Instant.now().toEpochMilli();</span><br><span class="line"></span><br><span class="line">        Claims claims = Jwts.claims();</span><br><span class="line">        claims.put(Claims.SUBJECT, userDetails.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jwts.builder().setClaims(claims).setIssuedAt(<span class="keyword">new</span> Date(instantNow))</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(instantNow + EXPIRED_TIME))</span><br><span class="line">                .signWith(SIGN_TYPE, SECRET).compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * claims 为自定义的私有声明, 要放在前面</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> instantNow = Instant.now().toEpochMilli();</span><br><span class="line"></span><br><span class="line">        Claims claims = Jwts.claims();</span><br><span class="line">        claims.put(Claims.SUBJECT, userName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jwts.builder().setClaims(claims).setIssuedAt(<span class="keyword">new</span> Date(instantNow))</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(instantNow + EXPIRED_TIME))</span><br><span class="line">                .signWith(SIGN_TYPE, SECRET).compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将token解析, 映射为 UserDetails</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">getUserDetailsFromToken</span><span class="params">(String jwtToken)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Claims claimsFromToken = getClaimsFromToken(jwtToken);</span><br><span class="line"></span><br><span class="line">        String userName = claimsFromToken.get(Claims.SUBJECT, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        UserDetailsImpl userDetails = <span class="keyword">new</span> UserDetailsImpl();</span><br><span class="line">        userDetails.setUsername(userName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDetails;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">validateToken</span><span class="params">(String token, UserDetails userDetails)</span> </span>&#123;</span><br><span class="line">        UserDetailsImpl user = (UserDetailsImpl) userDetails;</span><br><span class="line">        String username = getPhoneNoFromToken(token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (username.equals(user.getUsername()) &amp;&amp; !isTokenExpired(token));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新令牌</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 原令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 新令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">refreshToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        String refreshedToken;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Claims claims = getClaimsFromToken(token);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> instantNow = Instant.now().toEpochMilli();</span><br><span class="line"></span><br><span class="line">            refreshedToken = Jwts.builder().setClaims(claims).setIssuedAt(<span class="keyword">new</span> Date(instantNow))</span><br><span class="line">                    .setExpiration(<span class="keyword">new</span> Date(instantNow + EXPIRED_TIME))</span><br><span class="line">                    .signWith(SIGN_TYPE, SECRET).compact();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            refreshedToken = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> refreshedToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token是否过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isTokenExpired</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Date expiration = getExpirationDateFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取username</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhoneNoFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClaimsFromToken(token).getSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token的过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getExpirationDateFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClaimsFromToken(token).getExpiration();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Claims <span class="title">getClaimsFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebSecurityConfig-核心配置"><a href="#WebSecurityConfig-核心配置" class="headerlink" title="WebSecurityConfig 核心配置"></a>WebSecurityConfig 核心配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.liuzhihang.demo.filter.CustomizeAuthenticationFilter;</span><br><span class="line"><span class="keyword">import</span> com.liuzhihang.demo.filter.JwtPerTokenFilter;</span><br><span class="line"><span class="keyword">import</span> com.liuzhihang.demo.service.UserDetailServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-03 14:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailServiceImpl userDetailServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtPerTokenFilter jwtPerTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"authenticationEntryPointImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"authenticationSuccessHandlerImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler authenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"authenticationFailureHandlerImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"accessDeniedHandlerImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建用于认证授权的用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureUserInfo</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放入自己的认证授权用户, 内部逻辑需要自己实现</span></span><br><span class="line">        <span class="comment">// UserDetailServiceImpl implements UserDetailsService</span></span><br><span class="line">        auth.userDetailsService(userDetailServiceImpl);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">// 使用JWT, 关闭session</span></span><br><span class="line">                .csrf().disable().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line"></span><br><span class="line">                .and().httpBasic().authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 登录的权限, 成功返回信息, 失败返回信息</span></span><br><span class="line">                .and().formLogin().permitAll()</span><br><span class="line"></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 配置url 权限 antMatchers: 匹配url 权限</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/login"</span>, <span class="string">"/getVersion"</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                <span class="comment">// 其他需要登录才能访问</span></span><br><span class="line">                .anyRequest().access(<span class="string">"@dynamicAuthorityService.hasPermission(request,authentication)"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 访问无权限 location 时</span></span><br><span class="line">                .and().exceptionHandling().accessDeniedHandler(accessDeniedHandler)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 自定义过滤</span></span><br><span class="line">                .and().addFilterAt(customAuthenticationFilter(), UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">addFilterBefore</span>(<span class="title">jwtPerTokenFilter</span>, <span class="title">UsernamePasswordAuthenticationFilter</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                .<span class="title">headers</span>().<span class="title">cacheControl</span>()</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * BCryptPasswordEncoder：相同的密码明文每次生成的密文都不同，安全性更高</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CustomizeAuthenticationFilter <span class="title">customAuthenticationFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CustomizeAuthenticationFilter filter = <span class="keyword">new</span> CustomizeAuthenticationFilter();</span><br><span class="line">        filter.setAuthenticationSuccessHandler(authenticationSuccessHandler);</span><br><span class="line">        filter.setAuthenticationFailureHandler(authenticationFailureHandler);</span><br><span class="line">        filter.setAuthenticationManager(authenticationManagerBean());</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登录校验过程"><a href="#登录校验过程" class="headerlink" title="登录校验过程"></a>登录校验过程</h2><pre class="mermaid">graph TD;    A(请求登录) --> B(CustomizeAuthenticationFilter#attemptAuthentication 解析请求的json);    B --> C(UserDetailServiceImpl#loadUserByUsername 验证用户名密码);    C --> D(AuthenticationSuccessHandlerImpl#onAuthenticationSuccess 构建返回参数 包括token);    D --> E(返回结果)</pre><h3 id="自定义拦截器解析-json-报文"><a href="#自定义拦截器解析-json-报文" class="headerlink" title="自定义拦截器解析 json 报文"></a>自定义拦截器解析 json 报文</h3><p>前端请求登录报文类型为 application/json 需要后端增加拦截器, 对登录请求报文进行解析</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.demo.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationServiceException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 自定义拦截器, 重写UsernamePasswordAuthenticationFilter 从而可以处理 application/json 中的json请求报文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-12 19:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizeAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// attempt Authentication when Content-Type is json</span></span><br><span class="line">        <span class="keyword">if</span> (request.getContentType().equalsIgnoreCase(MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line">            || request.getContentType().equalsIgnoreCase(MediaType.APPLICATION_JSON_VALUE)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BufferedReader br = request.getReader();</span><br><span class="line">                String str;</span><br><span class="line">                StringBuilder jsonStr = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    jsonStr.append(str);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                log.info(<span class="string">"本次登录请求参数:&#123;&#125;"</span>, jsonStr);</span><br><span class="line"></span><br><span class="line">                JSONObject jsonObject = JSON.parseObject(jsonStr.toString());</span><br><span class="line"></span><br><span class="line">                UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(</span><br><span class="line">                    jsonObject.getString(<span class="string">"username"</span>), jsonObject.getString(<span class="string">"password"</span>));</span><br><span class="line">                setDetails(request, authRequest);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.info(<span class="string">"用户登录, 请求参数 不正确"</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">"获取报文请求参数失败"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                log.info(<span class="string">"用户登录, 请求报文格式 不正确"</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">"请求报文, 转换Json失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">"用户登录, contentType 不正确"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(</span><br><span class="line">                <span class="string">"请求 contentType 不正确, 请使用 application/json;charset=UTF-8 或者 application/json;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户认证模块"><a href="#用户认证模块" class="headerlink" title="用户认证模块"></a>用户认证模块</h3><ul><li>根据获取到的username从数据库中查询到密码, 将用户名密码赋值给UserDetails对象, 返回其他的框架会进行校验</li><li>这边使用中是使用的手机号+验证码登录, 所以 上面json解析的也是 phoneNo+verificationCode</li><li>在这块 username仅仅代指登录名, 可以是手机号可以是别的.</li><li>这边使用中验证码是从redis中获取的. 获取不到返回失败, 获取到和传递的不一致也算失败.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.liuzhihang.demo.bean.UserDetailsImpl;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"userDetailServiceImpl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来验证登录名是否有权限进行登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 可以通过数据库进行校验 也可以通过redis 等等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        UserDetailsImpl userDetailsImpl = <span class="keyword">new</span> UserDetailsImpl();</span><br><span class="line">        userDetailsImpl.setUsername(<span class="string">"liuzhihang"</span>);</span><br><span class="line">        userDetailsImpl.setPassword(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123456789"</span>));</span><br><span class="line">        <span class="keyword">return</span> userDetailsImpl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求校验过程"><a href="#请求校验过程" class="headerlink" title="请求校验过程"></a>请求校验过程</h2><pre class="mermaid">graph TD;    A(请求接口) --> B(JwtPerTokenFilter#doFilterInternal 验证Header中的token);    B --> C(DynamicAuthorityService#hasPermission 验证有没有请求url权限);    C --> D(处理逻辑);    D --> E(返回结果)</pre><h3 id="JWTToken拦截器"><a href="#JWTToken拦截器" class="headerlink" title="JWTToken拦截器"></a>JWTToken拦截器</h3><p>主要是拦截请求, 验证Header中的token是否正确</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.demo.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.liuzhihang.demo.utils.JwtTokenUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.WebAuthenticationDetailsSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-05 09:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtPerTokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放Token的Header Key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_STRING = <span class="string">"token"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String token = request.getHeader(HEADER_STRING);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != token &amp;&amp; !jwtTokenUtil.isTokenExpired(token)) &#123;</span><br><span class="line">            UserDetails userDetails = jwtTokenUtil.getUserDetailsFromToken(token);</span><br><span class="line">            String username = userDetails.getUsername();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (username != <span class="keyword">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 通过 username 查询数据库 获取token 然后和库中token作比较</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (username.equals(<span class="string">"liuzhihang"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">                    UsernamePasswordAuthenticationToken authentication =</span><br><span class="line">                            <span class="keyword">new</span> UsernamePasswordAuthenticationToken(userDetails, <span class="keyword">null</span>, userDetails.getAuthorities());</span><br><span class="line">                    authentication.setDetails(<span class="keyword">new</span> WebAuthenticationDetailsSource().buildDetails(request));</span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URI动态校验"><a href="#URI动态校验" class="headerlink" title="URI动态校验"></a>URI动态校验</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态权限认证</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-25 15:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span>(value = <span class="string">"dynamicAuthorityService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicAuthorityService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(HttpServletRequest request, Authentication authentication)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object principal = authentication.getPrincipal();</span><br><span class="line">            <span class="keyword">if</span> (principal <span class="keyword">instanceof</span> UserDetails &amp;&amp; authentication <span class="keyword">instanceof</span> UsernamePasswordAuthenticationToken) &#123;</span><br><span class="line">                <span class="comment">// 本次请求的uri</span></span><br><span class="line">                String uri = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取当前用户</span></span><br><span class="line">                UserDetails userDetails = (UserDetails) principal;</span><br><span class="line"></span><br><span class="line">                String username = userDetails.getUsername();</span><br><span class="line">                log.info(<span class="string">"本次用户请求认证, username:&#123;&#125;, uri:&#123;&#125;"</span>, username, uri);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 从数据库取逻辑</span></span><br><span class="line">                <span class="keyword">if</span> (username.equals(<span class="string">"liuzhihang"</span>))&#123;</span><br><span class="line">                    Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                    set.add(<span class="string">"/homeInfo"</span>);</span><br><span class="line">                    set.add(<span class="string">"/getAllUser"</span>);</span><br><span class="line">                    set.add(<span class="string">"/editUserInfo"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (set.contains(uri)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"用户请求登录, uri:&#123;&#125; error"</span>, request.getRequestURI(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>脚本在 <a href="https://github.com/liuzhihangs/jwt-demo/blob/master/src/test/java/ReqTest.http">httpclient脚本</a></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST localhost:8080/login</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "username": "liuzhihang",</span><br><span class="line">  "password": "123456789"</span><br><span class="line">&#125;</span><br><span class="line">### 请求接口脚本</span><br><span class="line"></span><br><span class="line">POST localhost:8080/homeInfo</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">token</span>: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsaXV6aGloYW5nIiwiaWF0IjoxNTY5MDI1NjY4LCJleHAiOjE1Njk2MzA0Njh9.Kot_uLnwtcq-t5o4x3V-xBnpf-mKEi7OV2eAfgMCKLk</span><br><span class="line">###</span><br></pre></td></tr></table></figure><p>返回:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"resultCode"</span>: <span class="string">"0000"</span>,</span><br><span class="line">  <span class="attr">"resultMsg"</span>: <span class="string">"登录成功"</span>,</span><br><span class="line">  <span class="attr">"resultTime"</span>: <span class="string">"20190920191038"</span>,</span><br><span class="line">  <span class="attr">"token"</span>: <span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsaXV6aGloYW5nIiwiaWF0IjoxNTY4OTc3ODM4LCJleHAiOjE1Njk1ODI2Mzh9.MAS9VkFdCF3agkCgTtc0VzPMFjY42vFyIvAEzkSeAfs"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/larger5/article/details/81063438">前后端分离 SpringBoot + SpringSecurity + JWT + RBAC 实现用户无状态请求验证</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk使用MD5生成Id</title>
      <link href="/2019/07/20/gitalk-uses-md5-to-generate-an-id.html"/>
      <url>/2019/07/20/gitalk-uses-md5-to-generate-an-id.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Gitalk默认使用: location.pathname 作为 gitalk 的id, 但是location.path必须小于50位切换主题时, 每个主题使用的处理方式都不相同, 有可能会导致换了主题, 发现之前的评论不见了, 下面介绍使用MD5作为id, 同时在换主题时一定要修改这个id的规则.</p></blockquote><h3 id="Gitalk使用"><a href="#Gitalk使用" class="headerlink" title="Gitalk使用"></a>Gitalk使用</h3><p>使用<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">Gitalk</a>方法:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line">  clientID: <span class="string">'GitHub Application Client ID'</span>,</span><br><span class="line">  clientSecret: <span class="string">'GitHub Application Client Secret'</span>,</span><br><span class="line">  repo: <span class="string">'GitHub repo'</span>,</span><br><span class="line">  owner: <span class="string">'GitHub repo owner'</span>,</span><br><span class="line">  admin: [<span class="string">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span>],</span><br><span class="line">  id: location.pathname,      <span class="comment">// Ensure uniqueness and length less than 50</span></span><br><span class="line">  distractionFreeMode: <span class="literal">false</span>  <span class="comment">// Facebook-like distraction free mode</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gitalk.render(<span class="string">'gitalk-container'</span>)</span><br></pre></td></tr></table></figure><h3 id="使用MD5生成id"><a href="#使用MD5生成id" class="headerlink" title="使用MD5生成id"></a>使用MD5生成id</h3><ol><li>引入js</li></ol><p><a href="https://github.com/blueimp/JavaScript-MD5">MD5</a> js 下载地址</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"js/md5.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改js</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> gitalk_id = md5(location.pathname)</span><br><span class="line">    <span class="keyword">if</span> (<span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">page.comments_type</span> == <span class="string">'404'</span>   %&gt;</span>) &#123;</span></span><br><span class="line"><span class="xml">        gitalk_id = md5('https://liuzhihang.com/404')</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    let gitalk = new Gitalk(&#123;</span></span><br><span class="line"><span class="xml">        clientID: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.oauth.clientId</span> %&gt;</span>',</span></span><br><span class="line"><span class="xml">        clientSecret: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.oauth.clientSecret</span> %&gt;</span>',</span></span><br><span class="line"><span class="xml">        repo: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.repo</span> %&gt;</span>',</span></span><br><span class="line"><span class="xml">        owner: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.owner</span> %&gt;</span>',</span></span><br><span class="line"><span class="xml">        admin: <span class="tag">&lt;<span class="name">%-</span> <span class="attr">JSON.stringify</span>(<span class="attr">theme.gitalk.admin</span>) %&gt;</span>,</span></span><br><span class="line"><span class="xml">        id: gitalk_id,</span></span><br><span class="line"><span class="xml">        distractionFreeMode: false  // Facebook-like distraction free mode</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    gitalk.render('gitalk-container');</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA插件--Toolkit</title>
      <link href="/2019/05/11/idea-plugin-toolkit.html"/>
      <url>/2019/05/11/idea-plugin-toolkit.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Toolkit"><a href="#Toolkit" class="headerlink" title="Toolkit"></a>Toolkit</h1><div><a href="https://plugins.jetbrains.com/plugin/12384-toolkit"><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://img.shields.io/jetbrains/plugin/v/12384-toolkit.svg" alt="JetBrains Plugins"></a><a href="https://plugins.jetbrains.com/plugin/12384-toolkit/versions"><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="http://phpstorm.espend.de/badge/12384/version" alt="Version"></a><a href="https://plugins.jetbrains.com/plugin/12384-toolkit"><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://img.shields.io/jetbrains/plugin/d/12384-toolkit.svg" alt="Downloads"></a><a href="https://github.com/liuzhihangs/toolkit/blob/master/LICENSE"><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://img.shields.io/badge/license-MIT-red.svg" alt="License"></a></div><p>一个小工具包, 暂时还有很多功能需要扩展.</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul><li>Mybatis<ul><li>通过侧栏箭头在 MyBatis XML文件和 Mapper文件之间相互跳转</li><li>mapper文件id简单检查</li></ul></li><li>Json<ul><li>JavaBean复制为Json字符串</li><li>Json字符串格式化</li><li>Json字符串转换为JavaBean</li><li>Json压缩</li></ul></li><li>XML: Xml格式化</li></ul><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ul><li>文末演示</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p><strong>在线安装:</strong></p><ul><li><code>File</code> -&gt; <code>Setting</code> -&gt; <code>Plugins</code> -&gt; 搜索 <code>Toolkit</code></li></ul></li><li><p><strong>手动安装:</strong></p><ul><li><a href="https://github.com/liuzhihangs/toolkit/releases">下载插件</a> -&gt; <code>File</code> -&gt; <code>Setting</code> -&gt; <code>Plugins</code> -&gt; <code>Install Plugin from Disk...</code></li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>右键菜单选择 <code>Tookit</code></li></ul><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h2 id="v1-0-7-2020-02-27"><a href="#v1-0-7-2020-02-27" class="headerlink" title="v1.0.7 (2020-02-27)"></a><a href="https://github.com/liuzhihangs/toolkit/releases/tag/v1.0.7">v1.0.7</a> (2020-02-27)</h2><ul><li>修改使用包装类型</li></ul><p><a href="./doc/ChangeNotes.md">查看更多历史更新记录</a></p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><h5 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis:"></a>MyBatis:</h5><p>&emsp;mybatis support: <a href="https://github.com/zhaoqin102/mybatis-support">https://github.com/zhaoqin102/mybatis-support</a></p><p>&emsp;free-idea-mybatis: <a href="https://github.com/wuzhizhan/free-idea-mybatis">https://github.com/wuzhizhan/free-idea-mybatis</a></p><h5 id="Json"><a href="#Json" class="headerlink" title="Json:"></a>Json:</h5><p>&emsp;GsonFormat: <a href="https://github.com/zzz40500/GsonFormat">https://github.com/zzz40500/GsonFormat</a></p><h2 id="本工具使用-JetBrains-IDEA-进行开发"><a href="#本工具使用-JetBrains-IDEA-进行开发" class="headerlink" title="本工具使用 JetBrains IDEA 进行开发"></a>本工具使用 JetBrains IDEA 进行开发</h2><p><a href="https://www.jetbrains.com/?from=Toolkit"><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/toolkit/jetbrains-logo.png" width="20%" height="20%"></a><a href="https://www.jetbrains.com/?from=Toolkit"><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/toolkit/idea-logo.png" width="20%" height="20%"> </a></p><h2 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h2><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/toolkit/copy-as-json.png" alt="copy-as-json"><br><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="https://liuzhihang.com/oss/pic/toolkit/gif.gif" alt="gif"></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch cat API</title>
      <link href="/2019/03/14/elasticsearch-cat-api.html"/>
      <url>/2019/03/14/elasticsearch-cat-api.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="cat-API"><a href="#cat-API" class="headerlink" title="cat API"></a>cat API</h4><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html">官方地址</a></p><blockquote><p>GET /_cat/XXX?v<br>GET /_cat/XXX?v&amp;format=json</p></blockquote><p>v 是指带着列信息</p><p>支持指定返回内容的格式 默认为text</p><p>?format=text(json/smile/yaml/cbor)</p><a id="more"></a><h5 id="查看节点别名"><a href="#查看节点别名" class="headerlink" title="查看节点别名"></a>查看节点别名</h5><blockquote><p>GET /_cat/aliases?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/aliases?v”</p></blockquote><h5 id="每个节点分配了几个shard，对磁盘的占用空间大小，使用率"><a href="#每个节点分配了几个shard，对磁盘的占用空间大小，使用率" class="headerlink" title="每个节点分配了几个shard，对磁盘的占用空间大小，使用率"></a>每个节点分配了几个shard，对磁盘的占用空间大小，使用率</h5><blockquote><p>GET /_cat/allocation?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/allocation?v”</p></blockquote><h5 id="群集或单个索引的document计数"><a href="#群集或单个索引的document计数" class="headerlink" title="群集或单个索引的document计数"></a>群集或单个索引的document计数</h5><blockquote><p>GET /_cat/count?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/count?v</p><p>GET /_cat/count/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/count/index_name?v”</p></blockquote><h5 id="显示集群中每个数据节点上fielddata当前正在使用的堆内存量"><a href="#显示集群中每个数据节点上fielddata当前正在使用的堆内存量" class="headerlink" title="显示集群中每个数据节点上fielddata当前正在使用的堆内存量"></a>显示集群中每个数据节点上fielddata当前正在使用的堆内存量</h5><blockquote><p>GET /_cat/fielddata?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/fielddata?v”</p></blockquote><h5 id="查看集群健康情况"><a href="#查看集群健康情况" class="headerlink" title="查看集群健康情况"></a>查看集群健康情况</h5><blockquote><p>GET /_cat/health?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/health?v”</p></blockquote><h5 id="查看索引的信息"><a href="#查看索引的信息" class="headerlink" title="查看索引的信息"></a>查看索引的信息</h5><blockquote><p>GET _cat/indices?v<br>GET _cat/indices/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/indices/twi*?v&amp;s=index”</p></blockquote><h5 id="查看master信息"><a href="#查看master信息" class="headerlink" title="查看master信息"></a>查看master信息</h5><blockquote><p>GET /_cat/master?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/master?v”</p></blockquote><h5 id="查看node信息"><a href="#查看node信息" class="headerlink" title="查看node信息"></a>查看node信息</h5><blockquote><p>GET /_cat/nodes?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/nodes?v”</p></blockquote><h5 id="当前pending没执行完的task的具体情况，执行的是什么操作"><a href="#当前pending没执行完的task的具体情况，执行的是什么操作" class="headerlink" title="当前pending没执行完的task的具体情况，执行的是什么操作"></a>当前pending没执行完的task的具体情况，执行的是什么操作</h5><blockquote><p>创建索引，更新映射，分配或失败分片的列表<br>GET /_cat/pending_tasks?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/pending_tasks?v”</p></blockquote><h5 id="查看安装的插件"><a href="#查看安装的插件" class="headerlink" title="查看安装的插件"></a>查看安装的插件</h5><blockquote><p>GET /_cat/plugins?v&amp;s=component&amp;h=name,component,version,description<br>curl -X GET “192.168.xxx.xxx:9200/_cat/plugins?v&amp;s=component&amp;h=name,component,version,description”</p></blockquote><h5 id="shard-recovery恢复的过程情况"><a href="#shard-recovery恢复的过程情况" class="headerlink" title="shard recovery恢复的过程情况"></a>shard recovery恢复的过程情况</h5><blockquote><p>GET /_cat/recovery?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/recovery?v”</p></blockquote><h5 id="查看在群集中注册的快照存储库"><a href="#查看在群集中注册的快照存储库" class="headerlink" title="查看在群集中注册的快照存储库"></a>查看在群集中注册的快照存储库</h5><blockquote><p>GET /_cat/repositories?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/repositories?v</p></blockquote><h5 id="查看线程池使用"><a href="#查看线程池使用" class="headerlink" title="查看线程池使用"></a>查看线程池使用</h5><blockquote><p>GET /_cat/thread_pool<br>curl -X GET “192.168.xxx.xxx:9200/_cat/thread_pool”</p></blockquote><h5 id="查看shard情况"><a href="#查看shard情况" class="headerlink" title="查看shard情况"></a>查看shard情况</h5><blockquote><p>GET _cat/shards?v<br>GET _cat/shards/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/shards/index_name?v</p></blockquote><h5 id="索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索"><a href="#索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索" class="headerlink" title="索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索"></a>索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索</h5><blockquote><p>GET /_cat/segments?v<br>GET _cat/segments/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/segments/index_name?v</p></blockquote><h5 id="查看tempalte"><a href="#查看tempalte" class="headerlink" title="查看tempalte"></a>查看tempalte</h5><blockquote><p>GET /_cat/templates?v&amp;s=name<br>curl -X GET “192.168.xxx.xxx:9200/_cat/templates?v&amp;s=name”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么es集群至少需要三个节点</title>
      <link href="/2019/03/13/why-does-the-es-cluster-require-at-least-three-nodes.html"/>
      <url>/2019/03/13/why-does-the-es-cluster-require-at-least-three-nodes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="elasticsearch集群"><a href="#elasticsearch集群" class="headerlink" title="elasticsearch集群"></a>elasticsearch集群</h4><pre class="mermaid">graph LR;    A(Master Node) --- B(Data Node);    A --- C(Data Node);    B --- C;</pre><p>Master: 在Elasticsearch中Master仅仅负责维护集群的状态</p><blockquote><ol><li>创建或删除索引</li><li>跟踪哪些节点是集群的一部分</li><li>决定将哪些碎片分配给哪个节点</li><li>等集群范围的操作</li></ol></blockquote><p>上面的一些集群信息, 是由Master节点进行维护, 但是 Master也会把节点信息, 同步给其他节点, 但是只有master节点可以修改.</p><a id="more"></a><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html">点击查看Elasticsearch节点介绍</a></p><h4 id="为什么要至少三个节点"><a href="#为什么要至少三个节点" class="headerlink" title="为什么要至少三个节点"></a>为什么要至少三个节点</h4><p>首先查看 Elasticsearch 的配置文件, 如下:<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-zen.html">Zen Discovery 官方介绍</a></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 传递初始主机列表，以便在启动新节点时执行发现</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> <span class="string">["192.168.xxx.xxx:9300",</span> <span class="string">"192.168.xxx.xxx:9300"</span><span class="string">]</span></span><br><span class="line"><span class="comment"># 选举Maste时需要的节点数 (total number of master-eligible nodes / 2 + 1) 防止“防止脑裂”</span></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># 一个节点多久ping一次，默认1s</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_interval:</span> <span class="string">1s</span></span><br><span class="line"><span class="comment"># 等待ping返回时间，默认30s</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_timeout:</span> <span class="string">30s</span></span><br><span class="line"><span class="comment"># ping超时重试次数，默认3次</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>discovery.zen.minimum_master_nodes: 2</code></pre><p>其中 minimum_master_nodes 配置是为了防止脑裂</p><h5 id="假设-Elasticsearch-有两个节点"><a href="#假设-Elasticsearch-有两个节点" class="headerlink" title="假设 Elasticsearch 有两个节点"></a>假设 Elasticsearch 有两个节点</h5><pre class="mermaid">graph LR;    A(Master Node) --- B(Data Node);</pre><pre class="mermaid">graph LR;    A(Master Node) -.X.- B(Data Node);</pre><ol><li><p>discovery.zen.minimum_master_nodes: 1</p><blockquote><p>此时出现网络波动, 导致 A—B 之间短暂断开连接,  根据选举规则, B将自己选举为 Master, 当网络波动结束, 就会出现两个Master的情况.</p></blockquote> <pre class="mermaid">    graph LR;     A(Master Node 宕机) --- B(Data Node);</pre></li><li><p>discovery.zen.minimum_master_nodes: 2</p><blockquote><p>Master 出现故障, 则 B 将永远不可能将自己选择为 Master</p></blockquote></li></ol><h5 id="Elasticsearch-有三个节点"><a href="#Elasticsearch-有三个节点" class="headerlink" title="Elasticsearch 有三个节点"></a>Elasticsearch 有三个节点</h5><p>三节点配置: discovery.zen.minimum_master_nodes: 2</p><pre class="mermaid">graph LR;    A(Master Node) -.X.- B(Data Node);    A -.X.- C(Data Node);    B --- C;</pre><p>出现网络波动 A 节点 和 别的节点短暂断开连接</p><pre class="mermaid">graph LR;    A(Master Node -> Data Node) -.X.- B(Data Node -> Master Node);    A -.X.- C(Data Node);    B --- C;</pre><p>A节点降级, B和C 进行选举, 此处模拟选举B为 Master Node</p><pre class="mermaid">graph LR;    A(Data Node) --- B(Master Node);    A --- C(Data Node);    B --- C;</pre><p>网络恢复后的节点状况.</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上可以看出, 通过配置 minimum_master_nodes 来防止出现脑裂<br>同时在生产过程中, 为了尽量保持集群高可用, 至少需要三台机器搭建集群</p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 数据写入流程</title>
      <link href="/2019/03/12/elasticsearch-data-writing-process.html"/>
      <url>/2019/03/12/elasticsearch-data-writing-process.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h4><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="/resources/image/elk/elasticsearch-writing-process.png" alt="elasticsearch写入过程"></p><ol><li><p>客户端随机选择一个node发送数据, 此时该node为协调节点(coordinating node)<br> 1.1. coordinating node 通过 _id计算出该document在哪个shard上, 假设为shard0, 计算方式如下:</p><blockquote><p>hash(_id) % number_of_primary_shards</p></blockquote><p> 1.2. node 根据 cluster state 获取到 shard0 在 node1 上</p><a id="more"></a></li><li><p>将消息发送到 node1 的 P0 上</p></li><li><p>P0 收到数据后, 将数据同步到 自己的 replica shard R0上</p></li><li><p>P0 和 R0 都处理完毕, 才会返回客户端成功</p></li></ol><blockquote><p>Px 为 primary shard<br>Rx 为 replica shard<br>当客户端请求为查询时, 路由到任意 shard(primary shard 或者 replica shard) 查询到数据即可返回.</p></blockquote><h4 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h4><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="/resources/image/elk/elasticsearch-writing-detailed-process.png" alt="elasticsearch-writing-detailed-process"></p><ol><li>P0收到document, 同时将数据写入到 内存buffer和translog中</li><li>每隔1s或buffer满时, buffer中的数据会 refresh 到segment中, 而后进入os cache, 一旦segment进入到 cache中,其中的数据, 则可以被搜索到<blockquote><p>refresh 时间可以手动设置, 也可以手动触发 refresh</p></blockquote></li><li>清空buffer, translog不处理</li><li>重复1-3操作, translog不断增大, translog每隔30分钟,或大到一定量时, 会触发commit操作</li><li>将buffer中内容刷新到segment中, 并清空buffer</li><li>将一个commit point 写入到磁盘文件中, 标识此次commit 对应的 segment</li><li>执行 fsync 将 os cache 中的数据强制刷新到磁盘文件中</li><li>删除 translog 文件</li></ol><h5 id="删除和更新操作"><a href="#删除和更新操作" class="headerlink" title="删除和更新操作"></a>删除和更新操作</h5><blockquote><p>在commit时, 如果操作为删除, 生成一个 .del文件, 其中将该document标记位deleted, 并不是真正的物理删除, 此时如果有查询请求, 会先查询 .del文件中是否有该记录, 如果有, 则回复不存在.<br>在commit时, 如果为更新操作, 则是将原document标记位deleted, 同时写入一条新数据</p></blockquote><h5 id="服务宕机重启-translog-日志作用"><a href="#服务宕机重启-translog-日志作用" class="headerlink" title="服务宕机重启, translog 日志作用"></a>服务宕机重启, translog 日志作用</h5><blockquote><p>translog是先写入到 os cache中, 然后每隔5s写入到磁盘文件中, 假如服务宕掉, 可能会失去5s数据, 也可以修改写入磁盘的时机, 但是可能会影响性能<br>translog中记录的是数据操作信息, 在服务宕机重启时, 会读取translog磁盘文件, 然后将translog中的数据重新恢复到 segment中, 然后进行后续操作</p></blockquote><h5 id="segment-merge-过程"><a href="#segment-merge-过程" class="headerlink" title="segment merge 过程"></a>segment merge 过程</h5><blockquote><p>segment 持续生成, 会导致 segment不断变多, 占用<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E5%8F%A5%E6%9F%84">文件句柄</a>, cpu资源等等<br>es后台有一个专门的程序负责合并segment, 将小的 segment 合成大的segment, 同时写一个commit point, 标识 新的segment file.<br>打开新的segment供查询使用, 删除旧的 segment<br>segment 合并过程中, 被标记位 deleted 的document 不会被合并. 即: 在合并 segment时, 才将 document 真正物理删除<br>合并的segment 可以使磁盘上已经commit的索引 也可以是内存中还未commit的索引</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash input多个kafka异常</title>
      <link href="/2019/03/04/logstash-input-multiple-kafka-exceptions.html"/>
      <url>/2019/03/04/logstash-input-multiple-kafka-exceptions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><pre class="mermaid">graph LR;    filebeat --> logstash;    log4j --> logstash;    logstash --> es;</pre><p>filebeat 和 log4j appender 同时到 kafka, logstash在启动时报错, 错误如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javax.management.InstanceAlreadyExistsException: kafka.consumer:type&#x3D;app-info,id&#x3D;logstash-0</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="问题原因及解决"><a href="#问题原因及解决" class="headerlink" title="问题原因及解决"></a>问题原因及解决</h5><p>input 消费kafka时, 分别指定不同的 client_id.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kafka &#123;</span><br><span class="line">        bootstrap_servers &#x3D;&gt; [&quot;192.168.103.43:9092&quot;] # 注意这里配置的kafka的broker地址不是zk的地址</span><br><span class="line">        client_id &#x3D;&gt; &quot;kafka_client_1&quot;</span><br><span class="line">        group_id &#x3D;&gt; &quot;logstash&quot;</span><br><span class="line">        topics &#x3D;&gt; [&quot;ipaynow_log&quot;]  # kafka topic 名称</span><br><span class="line">        consumer_threads &#x3D;&gt; 5</span><br><span class="line">        decorate_events &#x3D;&gt; true</span><br><span class="line">        type &#x3D;&gt; &quot;string&quot;</span><br><span class="line">        codec &#x3D;&gt; &quot;json&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kafka &#123;</span><br><span class="line">        bootstrap_servers &#x3D;&gt; [&quot;192.168.103.43:9092&quot;] # 注意这里配置的kafka的broker地址不是zk的地址</span><br><span class="line">        client_id &#x3D;&gt; &quot;kafka_client_2&quot;</span><br><span class="line">        group_id &#x3D;&gt; &quot;logstash&quot;</span><br><span class="line">        topics &#x3D;&gt; [&quot;ipaynow-hunter&quot;]  # kafka topic 名称</span><br><span class="line">        consumer_threads &#x3D;&gt; 5</span><br><span class="line">        decorate_events &#x3D;&gt; true</span><br><span class="line">        type &#x3D;&gt; &quot;string&quot;</span><br><span class="line">        codec &#x3D;&gt; plain &#123; charset&#x3D;&gt;&quot;UTF-8&quot; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序无异常中断</title>
      <link href="/2019/02/15/no-abnormal-interruption-of-the-program.html"/>
      <url>/2019/02/15/no-abnormal-interruption-of-the-program.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><ol><li>程序执行到某一处之后停顿, 不能继续执行, 不抛出异常, 无返回值</li><li>本地测试正常</li><li>debug可以正常执行</li><li>操作为入库之前, 创建对象, 是一个很简单的set操作</li></ol><blockquote><p>payInfoExtra.setToAccType(agPayReqDto.getToAccType().getValue());</p><p>其中get操作获取的为一个枚举, 主要操作为从枚举中获取value set到另一个对象中</p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AccTypeEnum <span class="title">getToAccType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toAccType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题原因及解决"><a href="#问题原因及解决" class="headerlink" title="问题原因及解决"></a>问题原因及解决</h4><p>小伙伴在他们项目中复用本项目中的枚举类, 没有修改包名类名, 但是把枚举中value字段从 byte改成了String, 同时放在了依赖中, 提供给我们使用.<br>解决方案就很简单了, 让小伙伴修改包名类名就可以了.<br>原枚举类如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> AccTypeEnum &#123;</span><br><span class="line"></span><br><span class="line">    PRI((<span class="keyword">byte</span>) <span class="number">0</span>, <span class="string">"对私"</span>),</span><br><span class="line">    PUB((<span class="keyword">byte</span>) <span class="number">1</span>, <span class="string">"对公"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>skywalking5集群部署</title>
      <link href="/2018/12/27/skywalking5-cluster-deployment.html"/>
      <url>/2018/12/27/skywalking5-cluster-deployment.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><ol><li>skywalking-5.0.0-GA</li><li>zookeeper-3.4.10</li><li>elasticsearch-5.6.14</li></ol><p>下载地址如下:</p><pre><code>skywalking: http://skywalking.apache.org/downloads/zookeeper: http://mirrors.hust.edu.cn/apache/zookeeper/elasticsearch: https://www.elastic.co/downloads/past-releases</code></pre><a id="more"></a><h4 id="安装zk集群"><a href="#安装zk集群" class="headerlink" title="安装zk集群"></a>安装zk集群</h4><ol><li>下载并解压zk<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz</span><br><span class="line">tar -xvf zookeeper-3.4.10.tar.gz</span><br></pre></td></tr></table></figure></li><li>修改配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper-3.4.10/conf/</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vim zoo.cfg</span><br></pre></td></tr></table></figure></li><li>内容如下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/opt/<span class="built_in">export</span>/app/zookeeper-3.4.10/data</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=192.168.***.236:2888:3888</span><br><span class="line">server.2=192.168.***.237:2888:3888</span><br></pre></td></tr></table></figure></li><li>写入集群myid<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /opt/<span class="built_in">export</span>/app/zookeeper-3.4.10/data/myid</span><br><span class="line"><span class="comment"># 另一台机器则写入2</span></span><br></pre></td></tr></table></figure></li><li>zk基本命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在zk的bin目录下</span></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./zkServer.sh start</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">./zkServer.sh stop</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">./zkServer.sh status</span><br><span class="line"><span class="comment"># 查看zk的节点</span></span><br><span class="line">./zkCli.sh</span><br><span class="line"><span class="comment"># 连接后使用 ls / 命令查看</span></span><br><span class="line">ls /skywalking</span><br></pre></td></tr></table></figure></li></ol><h4 id="安装es集群"><a href="#安装es集群" class="headerlink" title="安装es集群"></a>安装es集群</h4><ol><li>下载并解压es<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.14.tar.gz</span><br><span class="line">tar -xvf elasticsearch-5.6.14.tar.gz</span><br></pre></td></tr></table></figure></li><li>修改配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> elasticsearch-5.6.14/config/</span><br><span class="line">vim elasticsearch.yml</span><br></pre></td></tr></table></figure></li><li>内容如下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster.name: CollectorDBCluster</span><br><span class="line">node.name: node-1</span><br><span class="line">path.data: /opt/<span class="built_in">export</span>/app/elasticsearch-5.6.14/data</span><br><span class="line">path.logs: /opt/<span class="built_in">export</span>/app/elasticsearch-5.6.14/logs</span><br><span class="line">network.host: 192.168.***.234</span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"192.168.***.234:9300"</span>, <span class="string">"192.168.***.235:9300"</span>]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line">bootstrap.memory_lock: <span class="literal">false</span></span><br><span class="line">bootstrap.system_call_filter: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 修改上报数据线程池大小</span></span><br><span class="line">thread_pool.bulk.queue_size: 1000</span><br></pre></td></tr></table></figure></li><li>常用命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line">bin/elasticsearch -d</span><br><span class="line"><span class="comment"># 删除所有索引</span></span><br><span class="line">curl -XDELETE 192.168.***.234:9200/*</span><br></pre></td></tr></table></figure></li></ol><h4 id="安装skywalking"><a href="#安装skywalking" class="headerlink" title="安装skywalking"></a>安装skywalking</h4><p>☞ <a href="https://github.com/apache/incubator-skywalking/blob/v5.0.0-GA/docs/cn/Deploy-backend-in-cluster-mode-CN.md">官方地址</a></p><ol><li>下载并解压<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.shu.edu.cn/apache/incubator/skywalking/5.0.0-GA/apache-skywalking-apm-incubating-5.0.0-GA.tar.gz</span><br><span class="line">tar -xvf apache-skywalking-apm-incubating-5.0.0-GA.tar.gz</span><br><span class="line">mv apache-skywalking-apm-incubating-5.0.0-GA skywalking-5.0.0-GA</span><br></pre></td></tr></table></figure></li><li>修改配置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> skywalking-5.0.0-GA/config/</span><br><span class="line">vim application.yml</span><br></pre></td></tr></table></figure></li><li>修改内容如下<ol><li>集群配置 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster:</span><br><span class="line">    zookeeper:</span><br><span class="line">        hostPort: 192.168.***.236:2181,192.168.***.237:2181</span><br><span class="line">        sessionTimeout: 100000</span><br></pre></td></tr></table></figure></li><li>es配置 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">storage:</span><br><span class="line">    elasticsearch:</span><br><span class="line">        clusterName: CollectorDBCluster</span><br><span class="line">        clusterTransportSniffer: <span class="literal">true</span></span><br><span class="line">        clusterNodes: 192.168.***.234:9300,192.168.***.235:9300</span><br><span class="line">        <span class="comment"># 其他配置</span></span><br></pre></td></tr></table></figure></li><li>其他配置 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># host配置修改</span></span><br><span class="line">host: 192.168.***.236</span><br></pre></td></tr></table></figure></li></ol></li><li>修改webapp配置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim webapp/webapp.yml</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">collector:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/graphql</span></span><br><span class="line">    <span class="attr">ribbon:</span></span><br><span class="line">        <span class="attr">ReadTimeout:</span> <span class="number">10000</span></span><br><span class="line">        <span class="attr">listOfServers:</span> <span class="number">192.168</span><span class="string">.**.236:10800,192.168.**.237:10800</span></span><br></pre></td></tr></table></figure></li><li>常用命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动collector+webUI</span></span><br><span class="line">bin/startup.sh</span><br><span class="line"><span class="comment"># 只启动collector或webUI</span></span><br><span class="line">bin/collectorService.sh</span><br><span class="line">bin/webappService.sh</span><br></pre></td></tr></table></figure></li><li>探针使用<br> ☞ <a href="https://github.com/apache/incubator-skywalking/blob/v5.0.0-GA/docs/cn/Deploy-skywalking-agent-CN.md">官方地址</a><pre><code>java -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -jar yourApp.jar</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> skywalking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> skywalking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash时间戳差8个小时</title>
      <link href="/2018/12/20/logstash-timestamp-difference-8-hours.html"/>
      <url>/2018/12/20/logstash-timestamp-difference-8-hours.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h4><p>原始配置:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">elasticsearch &#123;</span><br><span class="line">        # manage_template &#x3D;&gt; false</span><br><span class="line">        template_overwrite &#x3D;&gt; true</span><br><span class="line">        template &#x3D;&gt; &quot;&#x2F;opt&#x2F;export&#x2F;app&#x2F;logstash-6.4.2&#x2F;bin&#x2F;dynamic_templates.json&quot;</span><br><span class="line">        user &#x3D;&gt; xxxxxxx</span><br><span class="line">        password &#x3D;&gt; xxxxxxx</span><br><span class="line">        index &#x3D;&gt; &quot;%&#123;sys_name&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">        hosts &#x3D;&gt; [&quot;172.19.3.51:9200&quot;,&quot;172.19.3.52:9200&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用logstash输出内容要es中时, 指定index为系统名称+时间(年月日), 时间会自动匹配‘@timestamp’字段并格式化, 但是在实际使用过程中, 发现在上午八点之前的消息会被创建到昨天的索引里面.查阅相关资料, 有介绍在时间戳上面增加8个小时的方式, 也可以使用. 这里结合自己业务使用的其他方式.</p><a id="more"></a><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li><p>主要报送内容为filebeat的日志信息, 日志统一有时间戳, 格式如下:</p><pre><code>[trans-mediapay]-[2018-12-19 02:00:00:187]-[queryThreadPool-14]-[]-[WeBankServiceImpl.java:101]-[INFO ]-[测试2点的日志]</code></pre></li><li><p>解析时间戳的时间</p><ol><li>先匹配整体日志, 获取’log_time’字段</li><li>匹配’log_time’字段</li><li>生成元数据 ‘[@metadata][index_suffix]’<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">#  日志聚合使用全量配置</span></span><br><span class="line">grok &#123;</span><br><span class="line">match =&gt; &#123;</span><br><span class="line"><span class="string">"message"</span> =&gt; <span class="string">"\[%&#123;DATA:sys_name&#125;\]-\[%&#123;DATA:log_time&#125;\]-\[%&#123;DATA:thread_name&#125;\]-\[%&#123;DATA:trace_id&#125;\]-\[%&#123;DATA:class_name&#125;\]-\[%&#123;DATA:log_level&#125;\]-%&#123;GREEDYDATA:log_msg&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">grok&#123;</span><br><span class="line">        match =&gt; &#123; <span class="string">"log_time"</span> =&gt; [<span class="string">"%&#123;INT:index_year&#125;-%&#123;INT:index_mouth&#125;-%&#123;INT:index_day&#125;"</span>]&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">    <span class="comment"># 使用元数据 [@metadata][index_suffix]</span></span><br><span class="line">add_field =&gt; &#123; <span class="string">"[@metadata][index_suffix]"</span> =&gt; <span class="string">"%&#123;index_year&#125;.%&#123;index_mouth&#125;.%&#123;index_day&#125;"</span> &#125;</span><br><span class="line">        remove_field =&gt; [<span class="string">"host"</span>,<span class="string">"beat"</span>,<span class="string">"tags"</span>,<span class="string">"[beat][name]"</span>,<span class="string">"[beat][version]"</span>,<span class="string">"prospector"</span>,<span class="string">"@version"</span>,<span class="string">"offset"</span>,<span class="string">"input"</span>,<span class="string">"y_index"</span>,<span class="string">"M_index"</span>,<span class="string">"d_index"</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>输出时使用元数据, 该字段不会出现在es的字段中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elasticsearch &#123;</span><br><span class="line">        <span class="comment"># manage_template =&gt; false</span></span><br><span class="line">        template_overwrite =&gt; <span class="literal">true</span></span><br><span class="line">        template =&gt; <span class="string">"/opt/export/app/logstash-6.4.2/bin/dynamic_templates.json"</span></span><br><span class="line">        user =&gt; xxxxxxx</span><br><span class="line">        password =&gt; xxxxxxx</span><br><span class="line">        index =&gt; <span class="string">"%&#123;sys_name&#125;-%&#123;[@metadata][index_suffix]&#125;"</span></span><br><span class="line">        hosts =&gt; [<span class="string">"xxxx:9200"</span>,<span class="string">"xxxx:9200"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取IP和byte转long遇到的小问题</title>
      <link href="/2018/12/10/get-the-small-problem-encountered-by-ip-and-byte-to-long.html"/>
      <url>/2018/12/10/get-the-small-problem-encountered-by-ip-and-byte-to-long.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>因为业务需求新项目的流水号系统从 ‘数据库自增步长+分段式锁’ 换成使用 <a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/ipaynow/tool/snowflake/SnowFlake.java">雪花流水号</a>, 修改机器标识和数据中心字段为自动获取ip后三位, 人工保证ip后三位不相同</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/ipaynow/tool/snowflake/SnowFlakeSerial.java">雪花流水号 - 改造版</a></p><p>修改内容如下:<br>删除构造, 修改数据位数, 添加静态代码块</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MACHINE_BIT = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> DATA_CENTER_BIT = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InetAddress localHost = InetAddress.getLocalHost();</span><br><span class="line">        address = localHost.getAddress()[<span class="number">3</span>] &amp; <span class="number">0xff</span>;</span><br><span class="line">        System.out.println(<span class="string">"当前系统的 address 为: "</span> + address);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"DATA_CENTER_ID can't be greater than MAX_DATA_CENTER_NUM or less than 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><h5 id="服务器配置host"><a href="#服务器配置host" class="headerlink" title="服务器配置host"></a>服务器配置host</h5><p>服务器对应的 hostname 需要配置ip地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/hosts</span><br></pre></td></tr></table></figure><h5 id="byte-转换-long需要-amp-0xff"><a href="#byte-转换-long需要-amp-0xff" class="headerlink" title="byte 转换 long需要 &amp; 0xff"></a>byte 转换 long需要 &amp; 0xff</h5><p>当获取ip大于127时转换出来为负值, 所以需要 &amp; 0xff</p>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于LinkHashMap的LRU缓存淘汰</title>
      <link href="/2018/11/19/elimination-of-lru-cache-based-on-linkhashmap.html"/>
      <url>/2018/11/19/elimination-of-lru-cache-based-on-linkhashmap.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="LRU缓存淘汰"><a href="#LRU缓存淘汰" class="headerlink" title="LRU缓存淘汰"></a>LRU缓存淘汰</h5><p>LRU缓存淘汰是redis中的一种淘汰策略, 当内存大小不足以存放数据时, 此时存入新数据, 将删除较早存入的数据.<br>在dubbo中使用LRU来缓存 hostName.<br>在mysql中使用LRU来缓存 serverSideStatementCheckCache 和 serverSideStatementCache.</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ipaynow.tool.lru;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于LinkedHashMap LRU 缓存淘汰, 以下框架中都有使用</span></span><br><span class="line"><span class="comment"> * dubbo com.alibaba.dubbo.common.utils.LRUCache</span></span><br><span class="line"><span class="comment"> * com.mysql.jdbc.util.LRUCache</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/20 10:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRULinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> maxCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MAX_CAPACITY = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRULinkedHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxCapacity = DEFAULT_MAX_CAPACITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRULinkedHashMap</span><span class="params">(<span class="keyword">int</span> maxCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// accessOrder设置为true 按照时间排序</span></span><br><span class="line">        <span class="keyword">super</span>(maxCapacity, DEFAULT_LOAD_FACTOR, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.maxCapacity = maxCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当链表长度大于最大容量时 删除最旧的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; maxCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.containsKey(key);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.get(key);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.put(key, value);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.remove(key);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.size();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">super</span>.clear();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxCapacity</span><span class="params">(<span class="keyword">int</span> maxCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxCapacity = maxCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试代码及结果"><a href="#测试代码及结果" class="headerlink" title="测试代码及结果"></a>测试代码及结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ipaynow.tool.lru;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/20 10:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        LRULinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> LRULinkedHashMap&lt;&gt;(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            map.put(LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss SSS"</span>)), <span class="string">"value"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">            Map.Entry&lt;String, String&gt; entry = iterator.next();</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">"------------"</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2018-11-20 11:13:21 398------------value5</span><br><span class="line">2018-11-20 11:13:22 399------------value6</span><br><span class="line">2018-11-20 11:13:23 400------------value7</span><br><span class="line">2018-11-20 11:13:24 400------------value8</span><br><span class="line">2018-11-20 11:13:25 400------------value9</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK常用启动命令</title>
      <link href="/2018/10/29/elk-common-start-command.html"/>
      <url>/2018/10/29/elk-common-start-command.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="elasticsearch启动命令"><a href="#elasticsearch启动命令" class="headerlink" title="elasticsearch启动命令"></a>elasticsearch启动命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前台启动 关闭窗口连接后自动退出</span></span><br><span class="line">./bin/elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line">./bin/elasticsearch  -d</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="logstash启动命令"><a href="#logstash启动命令" class="headerlink" title="logstash启动命令"></a>logstash启动命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前台启动 -f 后面为配置文件</span></span><br><span class="line">./logstash -f logstash.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line">nohup ./logstash -f logstash.conf &amp;</span><br></pre></td></tr></table></figure><h4 id="kibana启动命令"><a href="#kibana启动命令" class="headerlink" title="kibana启动命令"></a>kibana启动命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前台启动</span></span><br><span class="line">./bin/kibana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line">./bin/kibana &amp;</span><br></pre></td></tr></table></figure><h5 id="kibana停止命令"><a href="#kibana停止命令" class="headerlink" title="kibana停止命令"></a>kibana停止命令</h5><p>当ps -ef | grep kibana 查不到时 可以<br>lsof -i:5601<br>kill -9 线程</p><h4 id="filebeat启动命令"><a href="#filebeat启动命令" class="headerlink" title="filebeat启动命令"></a>filebeat启动命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前台启动</span></span><br><span class="line">./filebeat -e -c filebeat.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动 不输出日志/输出日志</span></span><br><span class="line">nohup ./filebeat -e -c filebeat.yml &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">nohup ./filebeat -e -c filebeat.yml &gt; filebeat.log &amp;</span><br></pre></td></tr></table></figure><h5 id="jar包启动命令"><a href="#jar包启动命令" class="headerlink" title="jar包启动命令"></a>jar包启动命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前台启动</span></span><br><span class="line">java -jar server.ja</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line">nohup java -jar server.jar &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>search-guard-6 配置用户</title>
      <link href="/2018/10/24/searchguard6-configuration-user.html"/>
      <url>/2018/10/24/searchguard6-configuration-user.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="search-guard-配置用户"><a href="#search-guard-配置用户" class="headerlink" title="search-guard 配置用户"></a>search-guard 配置用户</h4><p>路径: /opt/export/app/elasticsearch-6.4.2/plugins/search-guard-6/sgconfig</p><h5 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h5><p>执行以下命令, 输入明文</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins/search-guard-6/tools/hasher.sh -p mycleartextpassword</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="1-配置用户及密码"><a href="#1-配置用户及密码" class="headerlink" title="1. 配置用户及密码"></a>1. 配置用户及密码</h5><p>文件: sg_internal_users.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zhangsan:</span></span><br><span class="line">  <span class="attr">hash:</span> <span class="string">$2y$12$yKXk785zSTtB3kE7g.XnbOPrc690g9JE50Znwum924i2M/xYGG4qq</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">trans_group</span></span><br></pre></td></tr></table></figure><p>格式:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">姓名:</span></span><br><span class="line">  <span class="string">密码:</span> <span class="string">XXXX(明文的hash,</span> <span class="string">使用search-guard的工具生成)</span></span><br><span class="line">  <span class="string">角色:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">角色名称</span></span><br></pre></td></tr></table></figure><h5 id="2-配置权限"><a href="#2-配置权限" class="headerlink" title="2. 配置权限"></a>2. 配置权限</h5><p>文件: sg_roles.xml</p><p>配置’?kibana’ 及’?kibana-6’ 权限是为了保证用户在kibana中能够正常使用kibana</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sg_trans_group:</span></span><br><span class="line">  <span class="attr">cluster:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cluster:monitor/nodes</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cluster:monitor/health</span></span><br><span class="line">  <span class="attr">indices:</span></span><br><span class="line">    <span class="attr">'log-system':</span></span><br><span class="line">      <span class="string">'*'</span><span class="string">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">indices:admin/mappings/fields/get</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">indices:admin/validate/query</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">indices:data/read/search</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">indices:data/read/msearch</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">indices:admin/get</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">indices:data/read/field_stats</span></span><br><span class="line">    <span class="string">'?kibana'</span><span class="string">:</span></span><br><span class="line">      <span class="string">'*'</span><span class="string">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">MANAGE</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">INDEX</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">READ</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">    <span class="string">'?kibana-6'</span><span class="string">:</span></span><br><span class="line">      <span class="string">'*'</span><span class="string">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">MANAGE</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">INDEX</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">READ</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DELETE</span></span><br></pre></td></tr></table></figure><p>格式:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">权限名称:</span></span><br><span class="line">  <span class="string">集群:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">集群名称:权限</span></span><br><span class="line">  <span class="string">索引:</span></span><br><span class="line">    <span class="string">'索引名称'</span><span class="string">:</span></span><br><span class="line">      <span class="string">'类型'</span><span class="string">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">权限</span></span><br></pre></td></tr></table></figure><h5 id="3-配置角色映射"><a href="#3-配置角色映射" class="headerlink" title="3. 配置角色映射"></a>3. 配置角色映射</h5><p>文件: sg_roles_mapping.yml</p><p>配置完用户的账户密码, 以及相应角色权限之后, 需要将用户和权限进行关联, 关联之后即可使用</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sg_trans_group:</span></span><br><span class="line">   <span class="attr">backendroles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">trans_group</span></span><br></pre></td></tr></table></figure><p>格式:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">映射名称:</span></span><br><span class="line">  <span class="string">角色:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">用户的角色</span></span><br></pre></td></tr></table></figure><p>也可以使用以下方式进行关联:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sg_trans_group:</span></span><br><span class="line">   <span class="attr">users:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line"><span class="comment"># 即</span></span><br><span class="line"><span class="string">映射名称:</span></span><br><span class="line">  <span class="string">用户名称:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">用户名</span></span><br></pre></td></tr></table></figure><h5 id="4-使配置生效"><a href="#4-使配置生效" class="headerlink" title="4. 使配置生效"></a>4. 使配置生效</h5><p>使用以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sgadmin.sh -cn 集群名称 -<span class="built_in">cd</span> ../sgconfig -ks ../../../config/sgadmin-keystore.jks -kspass changeit -ts ../../../config/truststore.jks -tspass changeit -nhnv</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>search-guard-6 安装</title>
      <link href="/2018/10/23/searchguard6-installation.html"/>
      <url>/2018/10/23/searchguard6-installation.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="ES-安装-search-guard-6"><a href="#ES-安装-search-guard-6" class="headerlink" title="ES 安装 search-guard-6"></a>ES 安装 search-guard-6</h4><h6 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h6><p>☞ <a href="https://docs.search-guard.com/latest/demo-installer">官方网站</a><br>在ES目录下执行命令</p><pre><code>bin/elasticsearch-plugin install -b com.floragunn:search-guard-6:6.4.2-23.1</code></pre><p>注: 安装版本需要和Elasticsearch版本相对应. <a href="https://docs.search-guard.com/latest/search-guard-versions">查看版本</a></p><p>这里不使用官方的快速构建方法</p><a id="more"></a><h6 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h6><ol><li><p>下载脚本<br> <code>git clone https://github.com/floragunncom/search-guard-ssl.git</code></p></li><li><p>证书配置<br> 路径<br> <code>**/elasticsearch-6.4.2/search-guard-ssl/example-pki-scripts</code></p><p> 目录内容 etc下可对证书进行配置<br> <img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="/resources/image/elk/configuration.png" alt="证书配置"></p></li><li><p>修改<a href="search-guard-ssl/example-pki-scripts/example.sh">example.sh</a></p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">OPENSSL_VER=<span class="string">"<span class="variable">$(openssl version)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$OPENSSL_VER</span> == *<span class="string">"0.9"</span>* ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Your OpenSSL version is too old: <span class="variable">$OPENSSL_VER</span>"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Please install version 1.0.1 or later"</span></span><br><span class="line">        <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Your OpenSSL version is: <span class="variable">$OPENSSL_VER</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line">./clean.sh</span><br><span class="line"><span class="comment"># 第一个参数为CA根证书密码，第二个参数为TS密码(truststore，信任证书密码)</span></span><br><span class="line">./gen_root_ca.sh capass changeit</span><br><span class="line"><span class="comment"># 生成节点证书： 第一个参数为节点编号，第二个参数为keystore文件密码，第三个参数为CA根证书密码。</span></span><br><span class="line"><span class="comment"># 此处我们只生成两个节点证书</span></span><br><span class="line">./gen_node_cert.sh 0 changeit capass &amp;&amp; ./gen_node_cert.sh 1 changeit capass</span><br><span class="line"><span class="comment"># 生成客户端证书： 第一个参数为客户端名称, 第二个参数为keystore文件名称，第三个参数为CA根证书名称。</span></span><br><span class="line">./gen_client_node_cert.sh spock changeit capass</span><br><span class="line">./gen_client_node_cert.sh kirk changeit capass</span><br><span class="line">./gen_client_node_cert.sh logstash changeit capass</span><br><span class="line">./gen_client_node_cert.sh filebeat changeit capass</span><br><span class="line">./gen_client_node_cert.sh kibana changeit capass</span><br><span class="line"><span class="comment"># 生成一个sgadmin客户端证书，用于配置管理</span></span><br><span class="line">./gen_client_node_cert.sh sgadmin changeit capass</span><br><span class="line"><span class="comment"># 生成一个javaapi访问的客户端证书</span></span><br><span class="line">./gen_client_node_cert.sh javaapi changeit capass</span><br><span class="line">rm -f ./*tmp*</span><br></pre></td></tr></table></figure><ol start="4"><li>生成证书移动到elasticsearch config 在ES目录下</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./example.sh</span><br><span class="line">cp node-0-keystore.jks sgadmin-keystore.jks truststore.jks /opt/<span class="built_in">export</span>/app/elasticsearch-6.4.2/config/</span><br></pre></td></tr></table></figure><ol start="5"><li>配置elasticsearch.yml, 增加以下配置</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置节点间通信证书，节点间通信使用TLS是强制的</span></span><br><span class="line"><span class="attr">searchguard.ssl.transport.keystore_filepath:</span> <span class="string">node-0-keystore.jks</span></span><br><span class="line"><span class="attr">searchguard.ssl.transport.keystore_password:</span> <span class="string">changeit</span></span><br><span class="line"><span class="attr">searchguard.ssl.transport.truststore_filepath:</span> <span class="string">truststore.jks</span></span><br><span class="line"><span class="attr">searchguard.ssl.transport.truststore_password:</span> <span class="string">changeit</span></span><br><span class="line"><span class="comment"># 设置不校验hostname</span></span><br><span class="line"><span class="attr">searchguard.ssl.transport.enforce_hostname_verification:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">searchguard.ssl.transport.resolve_hostname:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 配置管理员证书DN</span></span><br><span class="line"><span class="attr">searchguard.authcz.admin_dn:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">CN=sgadmin,OU=client,O=client,L=Test,</span> <span class="string">C=DE</span></span><br><span class="line"></span><br><span class="line"><span class="attr">bootstrap.memory_lock:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">bootstrap.system_call_filter:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ol start="6"><li>启动访问需要权限</li></ol><h6 id="添加脚本权限并初始化用户"><a href="#添加脚本权限并初始化用户" class="headerlink" title="添加脚本权限并初始化用户"></a>添加脚本权限并初始化用户</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/<span class="built_in">export</span>/app/elasticsearch-6.4.2/plugins/search-guard-6/tools</span><br><span class="line">chmod +x *.sh</span><br><span class="line">./sgadmin.sh -cn cluster-es -<span class="built_in">cd</span> ../sgconfig -ks ../../../config/sgadmin-keystore.jks -kspass changeit -ts ../../../config/truststore.jks -tspass changeit -nhnv</span><br></pre></td></tr></table></figure><p>每次更新用户权限或者新增修改用户, 只需要重新执行第三条命令, 更新用户信息即可</p><h4 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h4><p>参照官方网站安装配置即可. <a href="https://docs.search-guard.com/latest/demo-installer">官方网站</a>, 或者按照以下步骤.</p><ol><li>在kibana安装目录下执行一下吗命令</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/kibana-plugin install https://search.maven.org/remotecontent?filepath=com/floragunn/search-guard-kibana-plugin/6.4.2-15/search-guard-kibana-plugin-6.4.2-15.zip</span><br></pre></td></tr></table></figure><ol start="2"><li>修改kibana.yml</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use HTTPS instead of HTTP</span></span><br><span class="line"><span class="comment"># elasticsearch.url: "https://localhost:9200"</span></span><br><span class="line"><span class="attr">elasticsearch.url:</span> <span class="string">"http://localhost:9200"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure the Kibana internal server user</span></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">"kibanaserver"</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">"kibanaserver"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable SSL verification because we use self-signed demo certificates</span></span><br><span class="line"><span class="attr">elasticsearch.ssl.verificationMode:</span> <span class="string">none</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Whitelist the Search Guard Multi Tenancy Header</span></span><br><span class="line"><span class="attr">elasticsearch.requestHeadersWhitelist:</span> <span class="string">[</span> <span class="string">"Authorization"</span><span class="string">,</span> <span class="string">"sgtenant"</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>打开对应域名登录<br><code>http://localhost:5601/</code></li></ol><h4 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h4><p>以上内容为参考自<a href="https://www.jianshu.com/u/d58afc984a4f">M醉逍遥</a>, 并搭建成功后总结记录, 以作备忘. 链接如下:<br><a href="https://www.jianshu.com/p/319913a944af">https://www.jianshu.com/p/319913a944af</a></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2018/10/08/hexo-build-blog.html"/>
      <url>/2018/10/08/hexo-build-blog.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>下载地址: <a href="https://nodejs.org/en/">https://nodejs.org</a></p><p>查看当前版本: node -v</p><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="/resources/hexo/node-v.png" alt="node-v"></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><pre><code>npm install</code></pre><p>也可以使用<a href="https://npm.taobao.org/">淘宝镜像</a></p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm install hexo</code></pre><a id="more"></a><h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><pre><code>hexo init</code></pre><h5 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h5><pre><code>hexo clean</code></pre><h5 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h5><pre><code>hexo ghexo generate</code></pre><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><pre><code>hexo shexo server</code></pre><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><pre><code>hexo dhexo deploy</code></pre><h5 id="生成并部署"><a href="#生成并部署" class="headerlink" title="生成并部署"></a>生成并部署</h5><pre><code>hexo g -d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器cpu占用率高</title>
      <link href="/2018/09/25/server-cpu-occupancy-rate-is-high.html"/>
      <url>/2018/09/25/server-cpu-occupancy-rate-is-high.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-top-命令找到占用cpu最高的进程"><a href="#1-top-命令找到占用cpu最高的进程" class="headerlink" title="1. top 命令找到占用cpu最高的进程"></a>1. top 命令找到占用cpu最高的进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top - 14:37:14 up 34 days, 13:27,  2 users,  load average: 0.21, 0.29, 0.29</span><br><span class="line">Tasks: 151 total,   1 running, 150 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s):  4.4%us,  2.7%sy,  0.0%ni, 90.9%id,  0.5%wa,  0.0%hi,  0.2%si,  1.3%st</span><br><span class="line">Mem:  16334064k total, 16171240k used,   162824k free,    16716k buffers</span><br><span class="line">Swap: 16383996k total,  4470816k used, 11913180k free,   539788k cached</span><br><span class="line"></span><br><span class="line">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line">1818 tomcat    20   0 3643m 983m 7548 S  0.7 24.8 190:40.13 java</span><br></pre></td></tr></table></figure><a id="more"></a><p>字段解释:<br>top - 时间 运行时间 用户 系统负载<br>Tasks: 进程相关信息<br>Cpu(s): cpu相关信息<br>Mem: 内存相关<br>Swap: 交换区相关信息</p><p>进程相关信息<br>PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</p><h3 id="2-使用top-H-p-查看该进程内所有线程"><a href="#2-使用top-H-p-查看该进程内所有线程" class="headerlink" title="2. 使用top -H -p  查看该进程内所有线程"></a>2. 使用top -H -p <pid> 查看该进程内所有线程</h3><p>top -H -p 1818</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line">6656 tomcat    20   0 4193m 608m  11m R 21.0  3.8   1419:44 java</span><br></pre></td></tr></table></figure><h3 id="3-printf-“-x-n”-将10进制线程号转换为16进制结果"><a href="#3-printf-“-x-n”-将10进制线程号转换为16进制结果" class="headerlink" title="3. printf “%x\n”  将10进制线程号转换为16进制结果"></a>3. printf “%x\n” <pid> 将10进制线程号转换为16进制结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[liuzhihang@test08 ~]$ <span class="built_in">printf</span> <span class="string">"%x\n"</span> 1876</span><br><span class="line">754</span><br><span class="line">[liuzhihang@test08 ~]$</span><br></pre></td></tr></table></figure><h3 id="4-jstack-grep"><a href="#4-jstack-grep" class="headerlink" title="4. jstack  |grep "></a>4. jstack <pid> |grep <tid></h3><p>jstack 1818 | grep 754 -A 30</p><p>pid 为第一次执行top命令时的 pid<br>tid 为将第二次的pid进行十六进制转换后的结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"catalina-8180-89"</span> <span class="comment">#1842 daemon prio=5 os_prio=0 tid=0x00007f4ec4096000 nid=0x5d96 waiting on condition [0x00007f4e87545000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">- parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x00000000f418f898&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread<span class="variable">$WrappingRunnable</span>.run(TaskThread.java:61)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line"><span class="string">"catalina-8180-88"</span> <span class="comment">#1841 daemon prio=5 os_prio=0 tid=0x00007f4eb848e800 nid=0x5d94 waiting on condition [0x00007f4e8bd8b000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">at sun.misc.Unsafe.park(Native Method)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final finally finalize区别</title>
      <link href="/2018/09/06/final-finally-finalize-difference.html"/>
      <url>/2018/09/06/final-finally-finalize-difference.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final为java关键字, 可以作用于成员变量、方法、类上<br>1.作用于成员变量上, 基本类型则值不可修改, 如果成员变量为对象, 则该对象的引用不可修改.<br>2.作用于方法, 该方法不可被重写<br>3.作用于类, 该类不可继承</p><a id="more"></a><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>异常处理的关键字, 无论异常是否发生, finally内逻辑总会执行.</p><h4 id="finally-和-return-的执行顺序"><a href="#finally-和-return-的执行顺序" class="headerlink" title="finally 和 return 的执行顺序"></a>finally 和 return 的执行顺序</h4><p>1.一般使用逻辑, return在try-catch-finally之后, 证明, 无论是否异常, finally都会执行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(finallyTest());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">finallyTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"处理逻辑"</span>);</span><br><span class="line">            <span class="comment">// int i = 1 / 0;</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"异常逻辑"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"finally执行了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"最终return返回"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在try/catch内添加return<br>try/catch内的return执行完后会继续执行finally, 但是从打印结果来开, finally的语句先打印, 原因是因为 return的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(finallyTest());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">finallyTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"处理逻辑"</span>);</span><br><span class="line">            <span class="comment">// int i = 1 / 0;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"try - return返回"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"异常逻辑"</span>);</span><br><span class="line">            <span class="comment">// return "catch - return返回";</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"finally执行了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"最终return返回"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">处理逻辑</span><br><span class="line">finally执行了</span><br><span class="line">try - <span class="built_in">return</span>返回</span><br></pre></td></tr></table></figure><p>3.finally里面添加return语句<br>finally里面return执行完后会直接返回, 不会再执行try块中的return语句</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(finallyTest());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">finallyTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"处理逻辑"</span>);</span><br><span class="line">            <span class="comment">// int i = 1 / 0;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"try - return返回"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"异常逻辑"</span>);</span><br><span class="line">            <span class="comment">// return "catch - return返回";</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"finally执行了"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"finally - return返回"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// return "最终return返回";</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">处理逻辑</span><br><span class="line">finally执行了</span><br><span class="line">finally - <span class="built_in">return</span>返回</span><br></pre></td></tr></table></figure><p>4.finally内添加逻辑改变变量值<br>1).try中的return值只是暂时放在栈中, 所以最终返回的还是 10, finally中并没有改变其值<br>2).try中的return值如果是对象, 栈中存放的是对象的引用, 对象属性值还是可以通过finally修改</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(finallyTest());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">finallyTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"处理逻辑"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"try - return返回: "</span> + temp;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"异常逻辑"</span>);</span><br><span class="line">            <span class="comment">// return "catch - return返回";</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            temp = <span class="number">100</span>;</span><br><span class="line">            System.out.println(<span class="string">"finally执行了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"最终return返回: "</span> + temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">处理逻辑</span><br><span class="line">finally执行了</span><br><span class="line">try - <span class="built_in">return</span>返回: 10</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Temp temp = <span class="keyword">new</span> Temp();</span><br><span class="line">        temp.temp = <span class="number">1</span>;</span><br><span class="line">        System.out.println(finallyTest(temp).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Temp <span class="title">finallyTest</span><span class="params">(Temp temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"处理逻辑"</span>);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"异常逻辑"</span>);</span><br><span class="line">            <span class="comment">// return "catch - return返回";</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            temp.temp = <span class="number">100</span>;</span><br><span class="line">            System.out.println(<span class="string">"finally执行了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Temp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Temp&#123;"</span> +</span><br><span class="line">                <span class="string">"temp="</span> + temp +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">处理逻辑</span><br><span class="line">finally执行了</span><br><span class="line">Temp&#123;temp=100&#125;</span><br></pre></td></tr></table></figure><h3 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h3><p>Object类的方法, 子类可重写, 主要是垃圾回收时使用.</p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池原理及源码解析</title>
      <link href="/2018/09/05/thread-pool-principle-and-source-code-analysis.html"/>
      <url>/2018/09/05/thread-pool-principle-and-source-code-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="线程池处理流程"><a href="#线程池处理流程" class="headerlink" title="线程池处理流程"></a>线程池处理流程</h3><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="/resources/concurrent/thread-pool.png" alt="线程池处理流程"></p><ol><li>判断核心线程池是否已满, 不满则创建新线程执行任务</li><li>等待队列如果有界, 判断等待队列是否已满, 不满, 则添加任务到等待队列</li><li>判断最大线程数是否已满, 不满则创建新线程执行任务</li><li>最大线程数已满, 按照既定策略处理新任务<a id="more"></a><h3 id="全参构造及各参数含义"><a href="#全参构造及各参数含义" class="headerlink" title="全参构造及各参数含义"></a>全参构造及各参数含义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, // 核心线程数</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize, // 最大线程数</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime, // 核心线程外线程的存活时间</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit, // 存活时间的单位</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue, // 保存等待执行的线程的阻塞队列</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory, // 线程工厂</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123; <span class="comment">// 线程拒绝策略</span></span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">                <span class="keyword">null</span> :</span><br><span class="line">                AccessController.getContext();</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略 . . .</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>workQueue阻塞队列<br>ArrayBlockingQueue: 是一个基于数组结构的有界阻塞队列, 此队列按 FIFO(先进先出) 原则对元素进行排序.<br>LinkedBlockingQueue: 一个基于链表结构的阻塞队列,此队列按 FIFO(先进先出) 排序元素, 吞吐量通常要高于ArrayBlockingQueue. 静态工厂方法Executors.newFixedThreadPool()使用了这个队列<br>SynchronousQueue: 一个不存储元素的阻塞队列. 每个插入操作必须等到另一个线程调用移除操作, 否则插入操作一直处于阻塞状态, 吞吐量通常要高于LinkedBlockingQueue, 静态工厂方法Executors.newCachedThreadPool使用了这个队列.<br>PriorityBlockingQueue: 一个具有优先级的无限阻塞队列.</li></ol><p>2.threadFactory线程工厂<br>可以使用默认的工厂也可以自定义工厂, 或者使用 google guava 提供的工厂, 可以为线程命名和设置是否为守护线程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 默认工厂</span><br><span class="line">ThreadFactory threadFactory = Executors.defaultThreadFactory();</span><br><span class="line">// google guava工具提供</span><br><span class="line">ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat(<span class="string">"demo-pool-%d"</span>).build();</span><br></pre></td></tr></table></figure><p>3.handler线程拒绝策略<br>当线程池达到最大线程数, 并且队列满了, 新的线程要采取的处理策略.<br>1.AbortPolicy 拒绝新任务并抛出RejectedExecutionException异常<br>2.CallerRunsPolicy 直接在调用程序的线程中运行<br>3.DiscardOldestPolicy 放弃最早的任务, 即队列最前面的任务<br>4.DiscardPolicy 丢弃, 不处理</p><h3 id="Executors初始化线程池的四种方式"><a href="#Executors初始化线程池的四种方式" class="headerlink" title="Executors初始化线程池的四种方式"></a>Executors初始化线程池的四种方式</h3><p>这四种初始化线程池的方式, 前三种都是调用 ThreadPoolExecutor 类的构造创建的线程池, 只不过使用的阻塞队列方式不同.</p><ol><li>newFixedThreadPool()</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executors</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 固定线程池</span></span><br><span class="line"><span class="comment">     * 核心线程数 = 最大线程数</span></span><br><span class="line"><span class="comment">     * 超时时间为0</span></span><br><span class="line"><span class="comment">     * LinkedBlockingQueue无界队列, 会持续等待</span></span><br><span class="line"><span class="comment">     * 使用默认拒绝策略 AbortPolicy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>newCachedThreadPool()</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executors</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无界线程池</span></span><br><span class="line"><span class="comment">     * 核心线程数0 最大线程数 (2³¹ -1)</span></span><br><span class="line"><span class="comment">     * 超时时间 60秒</span></span><br><span class="line"><span class="comment">     * SynchronousQueue不存储元素的阻塞队列</span></span><br><span class="line"><span class="comment">     * 线程空闲时间超过60秒, 会自动释放资源, 提交任务如果没有空闲线程, 则会创建新线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                         <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                         <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.newSingleThreadExecutor()</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executors</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建只有 1个线程的线程池</span></span><br><span class="line"><span class="comment">     * 如果线程异常, 则创建一个新的线程继续执行任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.newSingleThreadExecutor()</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executors</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ScheduledThreadPoolExecutor 继承 ThreadPoolExecutor 类</span></span><br><span class="line"><span class="comment">     * 可以在指定时间周期内执行任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * ctx 为原子类型的变量, 有两个概念</span></span><br><span class="line"><span class="comment">    * workerCount, 表示有效的线程数</span></span><br><span class="line"><span class="comment">    * runState, 表示线程状态, 是否正在运行, 关闭等</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// 29</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 容量 2²⁹-1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// runState is stored in the high-order bits 线程池的五中状态</span></span><br><span class="line">    <span class="comment">// 即高3位为111, 接受新任务并处理排队任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="comment">// 即高3位为000, 不接受新任务, 但处理排队任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="comment">// 即高3位为001, 不接受新任务, 不处理排队任务, 并中断正在进行的任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="comment">// 即高3位为010, 所有任务都已终止, 工作线程为0, 线程转换到状态TIDYING, 将运行terminate()钩子方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="comment">// 即高3位为011, 标识terminate（）已经完成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="comment">// Packing and unpacking ctl 用来计算线程的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="execute方法"><a href="#execute方法" class="headerlink" title="execute方法"></a>execute方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 空则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">// 获取当前线程池的状态</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="comment">// 计算工作线程数 并判断是否小于核心线程数</span></span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="comment">// addWorker提交任务, 提交成功则结束</span></span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">// 提交失败再次获取当前状态</span></span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断线程状态, 并插入队列, 失败则移除</span></span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="comment">// 再次获取状态</span></span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="comment">// 如果状态不是RUNNING, 并移除失败</span></span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                <span class="comment">// 调用拒绝策略</span></span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="comment">// 如果工作线程为0 则调用 addWorker</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 提交任务失败 走拒绝策略</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="addWorker方法"><a href="#addWorker方法" class="headerlink" title="addWorker方法"></a>addWorker方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查任务是否可以提交</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">        retry:</span><br><span class="line">        <span class="comment">// 外层循环</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 获取当前状态</span></span><br><span class="line">            <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">            <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if queue empty only if necessary. 检查线程池是否关闭</span></span><br><span class="line">            <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">                ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">                   firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                   ! workQueue.isEmpty()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// 内层循环</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">                <span class="comment">// 工作线程大于容量 或者大于 核心或最大线程数</span></span><br><span class="line">                <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                    wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// CAS 线程数增加, 成功则调到外层循环</span></span><br><span class="line">                <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                    <span class="keyword">break</span> retry;</span><br><span class="line">                <span class="comment">// 失败则再次获取线程状态</span></span><br><span class="line">                c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">                <span class="comment">// 不相等则重新走外层循环</span></span><br><span class="line">                <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                    <span class="keyword">continue</span> retry;</span><br><span class="line">                <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建新worker 开始新线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">        Worker w = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">            <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">                <span class="comment">// 加锁</span></span><br><span class="line">                mainLock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                    <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                    <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                    <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                        <span class="comment">// 判断线程是否存活, 已存活抛出非法异常</span></span><br><span class="line">                        <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                        <span class="comment">//  设置包含池中的所有工作线程。仅在持有mainLock时访问 workers是 HashSet 集合</span></span><br><span class="line">                        <span class="comment">//  private final HashSet&lt;Worker&gt; workers = new HashSet&lt;Worker&gt;();</span></span><br><span class="line">                        workers.add(w);</span><br><span class="line">                        <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                        <span class="comment">// 设置池最大大小, 并将 workerAdded设置为 true</span></span><br><span class="line">                        <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                            largestPoolSize = s;</span><br><span class="line">                        workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 解锁</span></span><br><span class="line">                    mainLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 添加成功 开始启动线程 并将 workerStarted 设置为 true</span></span><br><span class="line">                <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                    t.start();</span><br><span class="line">                    workerStarted = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 启动线程失败</span></span><br><span class="line">            <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">                addWorkerFailed(w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workerStarted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动线程失败, 加锁</span></span><br><span class="line"><span class="comment">     * 移除线程, 并减少线程总数</span></span><br><span class="line"><span class="comment">     * 转换状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addWorkerFailed</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (w != <span class="keyword">null</span>)</span><br><span class="line">                workers.remove(w);</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            tryTerminate();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程相关</title>
      <link href="/2018/09/04/multithreaded-correlation.html"/>
      <url>/2018/09/04/multithreaded-correlation.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>多个线程同时或交替运行, 单核CPU为顺序执行(交替执行), 多核情况下, 每个CPU有自己的运算器, 所以在多个CPU中可以同时运行.</p><a id="more"></a><h3 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h3><p>1.继承Thread</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"执行完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.setName(<span class="string">"测试"</span>);</span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"执行完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始线程, 可以看出main线程和测试线程是两个独立的线程<br>调用myThread.run();方法相当于直接在主线程运行run方法, 而不是开启一个新的线程去执行</p><p>2.实现Runnable接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"执行完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyRunable runable = <span class="keyword">new</span> MyRunable();</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runable);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"执行完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.使用线程池<br>3.1 可以在spring中配置相关线程池, 使用时从容器取出即可, 也可以自己声明线程池</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"threadPool"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 核心线程数，默认为1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"corePoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最大线程数，默认为Integer.MAX_VALUE --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 队列最大长度，一般需要设置值&gt;=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE</span></span><br><span class="line"><span class="comment">    &lt;property name="queueCapacity" value="1000" /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 线程池维护线程所允许的空闲时间，默认为60s --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keepAliveSeconds"</span> <span class="attr">value</span>=<span class="string">"300"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 队列最大长度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueCapacity"</span> <span class="attr">value</span>=<span class="string">"2000"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rejectedExecutionHandler"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- AbortPolicy:直接抛出java.utils.concurrent.RejectedExecutionException异常 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.2 Executors 创建线程池</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService threadPool = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threadPool.execute(<span class="keyword">new</span> MyRunable());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当手动创建线程池时, 如果IDEA安装阿里 P3C 插件后会报错提示以下内容, 建议</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</span><br><span class="line">说明： Executors 返回的线程池对象的弊端如下：</span><br><span class="line">1） FixedThreadPool 和 SingleThreadPool:</span><br><span class="line">允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</span><br><span class="line">2） CachedThreadPool 和 ScheduledThreadPool:</span><br><span class="line">允许的创建线程数量为 Integer.MAX_VALUE， 可能会创建大量的线程，从而导致 OOM。</span><br></pre></td></tr></table></figure><p>建议使用如下方式:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定时任务 建议为线程起名</span></span><br><span class="line">        ScheduledExecutorService executorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">3</span>,</span><br><span class="line">                <span class="keyword">new</span> BasicThreadFactory.Builder().namingPattern(<span class="string">"example-schedule-pool-%d"</span>).build());</span><br><span class="line">            executorService.scheduleAtFixedRate(<span class="keyword">new</span> MyRunable(), <span class="number">0</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程工厂</span></span><br><span class="line">        ThreadFactory namedThreadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">                .setNameFormat(<span class="string">"demo-pool-%d"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Common Thread Pool</span></span><br><span class="line">        ExecutorService pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">20</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">1024</span>), namedThreadFactory, <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">        pool.execute(()-&gt; System.out.println(Thread.currentThread().getName()));</span><br><span class="line">        pool.shutdown();<span class="comment">//gracefully shutdown</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>1.myThread.setPriority(1);设置优先级<br>2.优先级从低到高为 1-10, Thread类提供 Thread.MIN_PRIORITY=1, Thread.NORM_PRIORITY=5, Thread.MAX_PRIORITY=10<br>3.默认优先级为 5 即 NORM_PRIORITY<br>4.优先级高的仅代表获取进入运行机会的几率大, 并不代表一定会比优先级低的先执行</p><h3 id="sleep-和wait"><a href="#sleep-和wait" class="headerlink" title="sleep()和wait()"></a>sleep()和wait()</h3><p>1.sleep()线程未释放锁, 时间结束后线程继续执行<br>2.wait线程释放锁, 需要使用notify或notifyAll<br>3.wait常用于线程之间的交互</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.tool.alternate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交替打印奇偶数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/4 18:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlternateNum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Num num = <span class="keyword">new</span> Num();</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Odd(num));</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Even(num));</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> anInt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Odd</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Num num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Odd</span><span class="params">(Num num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (num.anInt &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用同一把锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (num) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num.flag) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"奇数 -&gt; "</span> + num.anInt);</span><br><span class="line">                    num.anInt++;</span><br><span class="line">                    num.flag = <span class="keyword">false</span>;</span><br><span class="line">                    num.notify();</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        num.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Even</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Num num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Even</span><span class="params">(Num num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (num.anInt &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用同一把锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (num) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!num.flag) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"偶数 -&gt; "</span> + num.anInt);</span><br><span class="line">                    num.anInt++;</span><br><span class="line">                    num.flag = <span class="keyword">true</span>;</span><br><span class="line">                    num.notify();</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        num.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射和序列化破解单例</title>
      <link href="/2018/08/27/reflection-and-serialization-cracking-singleton.html"/>
      <url>/2018/08/27/reflection-and-serialization-cracking-singleton.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>主要介绍通过反射的方式获取单例对象, 验证<a href="https://liuzhihangs.github.io/2018/02/21/lazy-singleton-mode-thread-safe.html">单例模式</a>的安全性.<br>主要从以下几个角度来介绍反射下的单例<br>饿汉式<br>双重锁检查<br><a href="https://liuzhihangs.github.io/2018/08/17/use-enumeration-to-implement-a-singleton.html">枚举单例</a></p><a id="more"></a><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p><a href="https://github.com/liuzhihangs/demo_design_pattern/blob/master/src/main/java/com/liuzhihang/demo/singleton/HungerPattern.java">饿汉式</a>直接使用反射即可破解单例模式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HungerPattern hungerPattern = HungerPattern.getHungerPattern();</span><br><span class="line"></span><br><span class="line">            Class&lt;HungerPattern&gt; hungerPatternClass = HungerPattern<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">            Constructor&lt;HungerPattern&gt; conA = hungerPatternClass.getDeclaredConstructor();</span><br><span class="line">            Constructor&lt;HungerPattern&gt; conB = hungerPatternClass.getDeclaredConstructor();</span><br><span class="line"></span><br><span class="line">            conA.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            conB.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            HungerPattern instanceA = conA.newInstance();</span><br><span class="line">            HungerPattern instanceB = conB.newInstance();</span><br><span class="line">            <span class="comment">// instanceA 和 instanceB 不是同一对象</span></span><br><span class="line">            System.out.println(hungerPattern.hashCode());</span><br><span class="line">            System.out.println(instanceA.hashCode());</span><br><span class="line">            System.out.println(instanceB.hashCode());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\jdk1.8\bin\java.exe . . .</span><br><span class="line">713338599</span><br><span class="line">168423058</span><br><span class="line">821270929</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h3 id="双重锁检查"><a href="#双重锁检查" class="headerlink" title="双重锁检查"></a>双重锁检查</h3><p><a href="https://github.com/liuzhihangs/demo_design_pattern/blob/master/src/main/java/com/liuzhihang/demo/singleton/DoubleCheckLockLazyPattern.java">双重锁检查</a>同样存在相同的情况</p><ol><li>直接使用<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DoubleCheckLockLazyPattern pattern = DoubleCheckLockLazyPattern.getDoubleCheckLockLazyPattern();</span><br><span class="line"></span><br><span class="line">            Class&lt;DoubleCheckLockLazyPattern&gt; patternClass = DoubleCheckLockLazyPattern<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">            Constructor&lt;DoubleCheckLockLazyPattern&gt; conA = patternClass.getDeclaredConstructor();</span><br><span class="line">            Constructor&lt;DoubleCheckLockLazyPattern&gt; conB = patternClass.getDeclaredConstructor();</span><br><span class="line"></span><br><span class="line">            conA.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            conB.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            DoubleCheckLockLazyPattern patternA = conA.newInstance();</span><br><span class="line">            DoubleCheckLockLazyPattern patternB = conA.newInstance();</span><br><span class="line"></span><br><span class="line">            System.out.println(pattern.hashCode());</span><br><span class="line">            System.out.println(patternA.hashCode());</span><br><span class="line">            System.out.println(patternB.hashCode());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\jdk1.8\bin\java.exe . . .</span><br><span class="line">713338599</span><br><span class="line">168423058</span><br><span class="line">821270929</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><ol start="2"><li>在双重锁检查私有构造内加入异常</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class DoubleCheckLockLazyPattern &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="function"><span class="title">DoubleCheckLockLazyPattern</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        // 加入异常判断, 防止反射</span><br><span class="line">        <span class="keyword">if</span> (doubleCheckLockLazyPattern != null) &#123;</span><br><span class="line">            throw new RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static volatile DoubleCheckLockLazyPattern doubleCheckLockLazyPattern = null;</span><br><span class="line"></span><br><span class="line">    public static DoubleCheckLockLazyPattern <span class="function"><span class="title">getDoubleCheckLockLazyPattern</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="keyword">if</span> (doubleCheckLockLazyPattern == null) &#123;</span><br><span class="line">                // 一系列操作</span><br><span class="line">                Thread.sleep(100);</span><br><span class="line">                synchronized (DoubleCheckLockLazyPattern.class) &#123;</span><br><span class="line">                    // 二次检查</span><br><span class="line">                    <span class="keyword">if</span> (doubleCheckLockLazyPattern == null) &#123;</span><br><span class="line">                        doubleCheckLockLazyPattern = new DoubleCheckLockLazyPattern();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> doubleCheckLockLazyPattern;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\jdk1.8\bin\java.exe . . .</span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">at com.liuzhihang.demo.singleton.ReflectTest.main(ReflectTest.java:24)</span><br><span class="line">Caused by: java.lang.RuntimeException</span><br><span class="line">at com.liuzhihang.demo.singleton.DoubleCheckLockLazyPattern.&lt;init&gt;(DoubleCheckLockLazyPattern.java:15)</span><br><span class="line">... 5 more</span><br></pre></td></tr></table></figure><ol start="3"><li>通过序列化反序列化获取对象</li></ol><p>DoubleCheckLockLazyPattern 实现序列化</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public class ReflectTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            DoubleCheckLockLazyPattern pattern = DoubleCheckLockLazyPattern.getDoubleCheckLockLazyPattern();</span><br><span class="line"></span><br><span class="line">            FileOutputStream fos= new FileOutputStream(<span class="string">"C:/Users/liuzhihang/desktop/pattern.txt"</span>);</span><br><span class="line">            ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class="line">            oos.writeObject(pattern);</span><br><span class="line">            oos.close();</span><br><span class="line">            fos.close();</span><br><span class="line">            ObjectInputStream oisA = new ObjectInputStream(new FileInputStream(<span class="string">"C:/Users/liuzhihang/desktop/pattern.txt"</span>));</span><br><span class="line">            DoubleCheckLockLazyPattern patternA= (DoubleCheckLockLazyPattern) oisA.readObject();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream oisB = new ObjectInputStream(new FileInputStream(<span class="string">"C:/Users/liuzhihang/desktop/pattern.txt"</span>));</span><br><span class="line">            DoubleCheckLockLazyPattern patternB= (DoubleCheckLockLazyPattern) oisB.readObject();</span><br><span class="line"></span><br><span class="line">            System.out.println(pattern.hashCode());</span><br><span class="line">            System.out.println(patternA.hashCode());</span><br><span class="line">            System.out.println(patternB.hashCode());</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\jdk1.8\bin\java.exe . . .</span><br><span class="line">258952499</span><br><span class="line">1702297201</span><br><span class="line">1996181658</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><ol start="4"><li>修改反序列化方法, 可以防止反序列化</li></ol><p>添加以下方法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">private Object <span class="function"><span class="title">readResolve</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> doubleCheckLockLazyPattern;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\jdk1.8\bin\java.exe . . .</span><br><span class="line">258952499</span><br><span class="line">258952499</span><br><span class="line">258952499</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Resource resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    SingletonEnum() &#123;</span><br><span class="line">        <span class="keyword">this</span>.resource = <span class="keyword">new</span> Resource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resource <span class="title">getResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举单例分析"><a href="#枚举单例分析" class="headerlink" title="枚举单例分析"></a>枚举单例分析</h4><p>在枚举反射获取对象时抛出异常, 通过 Constructor类 源码可以看出, 在反射创建对象时会判断是否是枚举修饰, 是则抛出异常</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@CallerSensitive</span><br><span class="line">  public T newInstance(Object ... initargs)</span><br><span class="line">      throws InstantiationException, IllegalAccessException,</span><br><span class="line">             IllegalArgumentException, InvocationTargetException</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">              Class&lt;?&gt; <span class="built_in">caller</span> = Reflection.getCallerClass();</span><br><span class="line">              checkAccess(<span class="built_in">caller</span>, clazz, null, modifiers);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != 0)</span><br><span class="line">          throw new IllegalArgumentException(<span class="string">"Cannot reflectively create enum objects"</span>);</span><br><span class="line">      ConstructorAccessor ca = constructorAccessor;   // <span class="built_in">read</span> volatile</span><br><span class="line">      <span class="keyword">if</span> (ca == null) &#123;</span><br><span class="line">          ca = acquireConstructorAccessor();</span><br><span class="line">      &#125;</span><br><span class="line">      @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">      T inst = (T) ca.newInstance(initargs);</span><br><span class="line">      <span class="built_in">return</span> inst;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>同时在父类 Enum类 中重写了 readObject方法, 所以枚举也可以避免反序列化</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * prevent default deserialization</span><br><span class="line"> */</span><br><span class="line">private void readObject(ObjectInputStream <span class="keyword">in</span>) throws IOException,</span><br><span class="line">    ClassNotFoundException &#123;</span><br><span class="line">    throw new InvalidObjectException(<span class="string">"can't deserialize enum"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2018/08/24/reflection.html"/>
      <url>/2018/08/24/reflection.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>java反射可以在运行时获取对象的成员和属性, 并且可以动态的创建对象并调用对象的属性.<br>反射一般编程中很少使用,但是在很多框架中都使用了反射, 比如配置Spring的Xml配置文件中, 就使用全类名配置方式, 其实就是反射的一种使用方式.</p><p>同时反射对单例模式有一定的影响, 可以参考<a href="https://liuzhihang.com/2018/08/27/reflection-and-serialization-cracking-singleton.html">反射获取单例对象</a></p><a id="more"></a><h3 id="获取反射对象"><a href="#获取反射对象" class="headerlink" title="获取反射对象"></a>获取反射对象</h3><p>获取反射Class对象一共三种方式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 1. 使用实例获取</span><br><span class="line">User user = new User();</span><br><span class="line">Class&lt;? extends User&gt; aClass = user.getClass();</span><br><span class="line">// 2. 使用类获取</span><br><span class="line">Class&lt;User&gt; userClass = User.class;</span><br><span class="line">// 3. 全类名获取, 可能会抛出 ClassNotFoundException 异常</span><br><span class="line">Class&lt;?&gt; aClass1 = Class.forName(<span class="string">"com.liuzhihang.tool.reflect.User"</span>);</span><br></pre></td></tr></table></figure><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><ol><li>获取字段<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 获取所有公有字段 (public)</span><br><span class="line">Field[] fields = aClass.getFields();</span><br><span class="line">// 获取所有字段 (public 缺省, protected, private)</span><br><span class="line">Field[] fields = aClass.getDeclaredFields()</span><br><span class="line">// 获取指定公共字段</span><br><span class="line">Field age = aClass.getField(<span class="string">"age"</span>);</span><br><span class="line">// 获取指定字段 (public 缺省, protected, private)</span><br><span class="line">Field userName = aClass.getDeclaredField(<span class="string">"userName"</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="获取构造"><a href="#获取构造" class="headerlink" title="获取构造"></a>获取构造</h3><ol><li>获取构造<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 获取所有构造 不能获取私有</span><br><span class="line">Constructor&lt;?&gt;[] constructors = aClass.getConstructors();</span><br><span class="line"></span><br><span class="line">// 获取指定参数类型的构造 不能获取私有 空则获取空参构造 getConstructor(Class&lt;?&gt;... parameterTypes)</span><br><span class="line">Constructor&lt;User&gt; constructor = aClass.getConstructor(String.class);</span><br><span class="line"></span><br><span class="line">// 获取所有构造 包含私有</span><br><span class="line">Constructor&lt;?&gt;[] declaredConstructors = aClass.getDeclaredConstructors();</span><br><span class="line"></span><br><span class="line">// 获取指定参数类型的构造 可以获取私有 空则获取空参构造 getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</span><br><span class="line">Constructor&lt;User&gt; declaredConstructor = aClass.getDeclaredConstructor(String.class);</span><br></pre></td></tr></table></figure></li><li>使用构造创建对象</li></ol><p>可以通过 constructor.setAccessible(true); 暴力破解忽略访问修饰符, 来使用私有构造参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Constructor&lt;User&gt; constructor = aClass.getDeclaredConstructor(String.class);</span><br><span class="line">// 暴力破解</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">User <span class="built_in">test</span> = constructor.newInstance(<span class="string">"test"</span>);</span><br></pre></td></tr></table></figure><h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><ol><li>获取方法<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 获取所有公共方法(包含父类)</span><br><span class="line">Method[] methods = aClass.getMethods();</span><br><span class="line">// 获取所有方法</span><br><span class="line">Method[] methods = aClass.getDeclaredMethods();</span><br><span class="line">// 获取私有方法 第一个参数填方法名称</span><br><span class="line">Method address = aClass.getDeclaredMethod(<span class="string">"setAddress"</span>, String.class);</span><br><span class="line">// 获取公共方法</span><br><span class="line">Method address = aClass.getMethod(<span class="string">"setAddress"</span>, String.class);</span><br></pre></td></tr></table></figure></li><li>使用方法<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">"com.liuzhihang.tool.reflect.User"</span>)</span><br><span class="line"></span><br><span class="line">Method address = aClass.getDeclaredMethod(<span class="string">"setAddress"</span>, String.class);</span><br><span class="line"></span><br><span class="line">User user = aClass.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(user.toString());</span><br><span class="line">// 解除私有限制</span><br><span class="line">address.setAccessible(<span class="literal">true</span>);</span><br><span class="line">// 使用invoke来调用方法</span><br><span class="line">address.invoke(user, <span class="string">"北京"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user.toString());</span><br></pre></td></tr></table></figure></li></ol><h3 id="获取其他属性"><a href="#获取其他属性" class="headerlink" title="获取其他属性"></a>获取其他属性</h3><p>还可以获取类实现的接口, 父类, 注解, 以及判断类的类型等多种使用方式.</p>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkList相关学习</title>
      <link href="/2018/08/23/linklist-related-learning.html"/>
      <url>/2018/08/23/linklist-related-learning.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>LinkList也是工作中常见的集合, 底层使用双向链表结构<br>比较适合新增和删除, 查询和修改需要遍历相对<a href="https://liuzhihang.com/2018/08/23/arraylist-related-learning.html">ArrayList</a>比较消耗性能</p></blockquote><a id="more"></a><h3 id="内部类-Node"><a href="#内部类-Node" class="headerlink" title="内部类 Node"></a>内部类 Node</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素值</span></span><br><span class="line">    E item;</span><br><span class="line">    <span class="comment">// 下一个节点</span></span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    <span class="comment">// 上一个几点</span></span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line">    <span class="comment">// 构造一个新节点 指向上一个节点和下一个节点</span></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="add-新增"><a href="#add-新增" class="headerlink" title="add 新增"></a>add 新增</h3><p>通过代码可以看出, 在新增元素时只需要创建一个新节点 Node, 并将原始链表最后一个Node的next指向新Node</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * Links e as last element.</span><br><span class="line"> */</span><br><span class="line">void linkLast(E e) &#123;</span><br><span class="line">    // 声明 l 为最后一个节点</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    // 创建新节点, 指向上一个节点, 下一个节点为空</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class="line">    // 最后一个节点为新创建的节点</span><br><span class="line">    last = newNode;</span><br><span class="line">    // 判断是否为第一个元素, 否则将 新创建的 Node加入链表</span><br><span class="line">    <span class="keyword">if</span> (l == null)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove-删除"><a href="#remove-删除" class="headerlink" title="remove 删除"></a>remove 删除</h3><p>1.删除操作需要遍历链表找到相应元素, 然后移动指针即可<br>2.删除首尾元素直接移动指针即可 removeFirst()/removeLast() 方法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == null) &#123;</span><br><span class="line">        // 遍历链表</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == null) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 删除元素</span><br><span class="line"> */</span><br><span class="line">E unlink(Node&lt;E&gt; x) &#123;</span><br><span class="line">    // assert x != null;</span><br><span class="line">    final E element = x.item;</span><br><span class="line">    final Node&lt;E&gt; next = x.next;</span><br><span class="line">    final Node&lt;E&gt; prev = x.prev;</span><br><span class="line">    // 判断上一个Node是否为空</span><br><span class="line">    <span class="keyword">if</span> (prev == null) &#123;</span><br><span class="line">        // 空, 该节点为链表头, 将下一个节点设置为链表头</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 不为空, 将上一个节点的next 指向当前节点的 next, 并将当前节点的 prev置为空</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = null;</span><br><span class="line">    &#125;</span><br><span class="line">    // 判断下一个Node是否为空</span><br><span class="line">    <span class="keyword">if</span> (next == null) &#123;</span><br><span class="line">        // 空, 该节点为链表尾, 将链表尾设置为当前节点的上一个节点</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 不为空, 将下一个节点的prev, 设置为上一个节点, 并将当前节点的 next置为空</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = null;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="built_in">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-set"><a href="#get-set" class="headerlink" title="get/set"></a>get/set</h3><p>get/set时都需要获取指定索引的元素, 使用二分法查找, 然后进行遍历查找, 所以此处相较于<a href="https://liuzhihang.com/2018/08/23/arraylist-related-learning.html">ArrayList</a>多了遍历查询, 虽然使用了二分法进行优化, 但是get/set操作相比ArrayList来说性能还是相对较差</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public E get(int index) &#123;</span><br><span class="line">    // 校验索引</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    // 二分法遍历查找节点</span><br><span class="line">    <span class="built_in">return</span> node(index).item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public E <span class="built_in">set</span>(int index, E element) &#123;</span><br><span class="line">    // 校验索引</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    // 二分法遍历查找节点</span><br><span class="line">    Node&lt;E&gt; x = node(index);</span><br><span class="line">    // 修改Node节点的 item值</span><br><span class="line">    E oldVal = x.item;</span><br><span class="line">    x.item = element;</span><br><span class="line">    <span class="built_in">return</span> oldVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 返回指定索引处非null节点.</span><br><span class="line"> */</span><br><span class="line">Node&lt;E&gt; node(int index) &#123;</span><br><span class="line">    // assert isElementIndex(index);</span><br><span class="line"></span><br><span class="line">    // 判断索引是否小于长度的一半 (二分法) 然后遍历查找</span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="built_in">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (int i = size - 1; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="built_in">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
            <tag> LinkList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList相关学习</title>
      <link href="/2018/08/23/arraylist-related-learning.html"/>
      <url>/2018/08/23/arraylist-related-learning.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>ArrayList是工作中常用的集合, 基于数组实现, 可以插入空数据, 也支持随机访问.<br>ArrayList比较适合 get/set操作, 因为 add/remove需要移动数据, 相对来说比较消耗性能.</p></blockquote><h3 id="默认初始长度"><a href="#默认初始长度" class="headerlink" title="默认初始长度"></a>默认初始长度</h3><p>1.默认初始长度为 10<br>2.底层结构为Object[] 数组</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">private static final int DEFAULT_CAPACITY = 10;</span><br><span class="line"></span><br><span class="line">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 构造一个初始容量为10的空列表</span><br><span class="line"> */</span><br><span class="line">public <span class="function"><span class="title">ArrayList</span></span>() &#123;</span><br><span class="line">    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加方法-add"><a href="#添加方法-add" class="headerlink" title="添加方法 add()"></a>添加方法 add()</h3><ol><li>向数组中添加元素, 流程如下</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将指定的元素追加到此列表的末尾.</span><br><span class="line"> */</span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    // 扩容</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    // 添加元素</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.扩容过程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">transient Object[] elementData;</span><br><span class="line"></span><br><span class="line">// 扩容</span><br><span class="line">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line">// 计算容量, elementData为空 则使用默认容量 10, 指定容量</span><br><span class="line">private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="built_in">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line">// 修改次数自增, 并且如果 新的长度-原长度&gt;0 则使用 grow(minCapacity)方法进行扩容</span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; 0)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加元素赋值<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elementData[size++] = e;</span><br></pre></td></tr></table></figure></li></ol><h3 id="扩容流程-grow-minCapacity"><a href="#扩容流程-grow-minCapacity" class="headerlink" title="扩容流程 grow(minCapacity)"></a>扩容流程 grow(minCapacity)</h3><p>通过扩容流程可以看出扩容过程中, 是将创建一个原数组1.5倍大小的新数组, 同时将数组元素复制到新数组, 所以一般使用中, 尽量指定数组大小, 从而避免数组的复制.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增加容量确保能容纳 minCapacity 数量的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">// 获取当前 elementData 的长度</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">// 获取新的长度 为当前长度的 1.5倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 比较并交换</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">// 防止超出最大长度</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    <span class="comment">// 数组复制</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-remove-方法"><a href="#删除-remove-方法" class="headerlink" title="删除 remove 方法"></a>删除 remove 方法</h3><p>删除过程中使用 System.arraycopy 本地方法, 对数组进行复制, 所以 ArrayList的 新增和删除方法性能不如, <a href="https://liuzhihang.com/2018/08/23/linklist-related-learning.html">LinkList</a>, 但是 get和set方法, 则直接根据索引修改数据, 比较适合对数据进行修改的操作.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除指定位置的元素, 后面的元素将前移</span><br><span class="line"> */</span><br><span class="line">public E remove(int index) &#123;</span><br><span class="line"></span><br><span class="line">    // 检查索引 否则抛出 IndexOutOfBoundsException(outOfBoundsMsg(index))</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    // 修改次数自增</span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    int numMoved = size - index - 1;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; 0)</span><br><span class="line">        // 数组复制</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = null; // clear to <span class="built_in">let</span> GC <span class="keyword">do</span> its work</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 删除指定元素</span><br><span class="line"> */</span><br><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == null) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int index = 0; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == null) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (int index = 0; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * System.arraycopy 方法拷贝 删除</span><br><span class="line"> */</span><br><span class="line">private void fastRemove(int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    int numMoved = size - index - 1;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = null; // clear to <span class="built_in">let</span> GC <span class="keyword">do</span> its work</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@Value注入属性的小bug</title>
      <link href="/2018/08/21/value-injects-a-small-bug-in-the-property.html"/>
      <url>/2018/08/21/value-injects-a-small-bug-in-the-property.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Value注入属性"><a href="#Value注入属性" class="headerlink" title="@Value注入属性"></a>@Value注入属性</h4><p>工作中一些公共属性, 一般通过@Value注入的对象的属性中, 使用方式如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 微信支付参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;wx.appId&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> String WX_APP_ID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过@Value注解, 将配置文件中的值注入到对象属性中, 在使用时只需要注入WeChatConfig对象然后调用即可, 而实际工作中, 往往用静态属性, 方便使用, 于是可以写成如下方式</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 微信支付参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;wx.appId&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String WX_APP_ID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用此方式不会报错, 但是却取不到属性值, 并且不会报错. 变通方式可以如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 微信支付参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;wx.appId&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String WX_APP_ID;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;wx.app.id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setWxAppId</span><span class="params">(String wxAppId)</span> </span>&#123;</span><br><span class="line">        WX_APP_ID = wxAppId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: 此处的 set方法不可以设置为静态, 否则同样不能注入属性</p>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用枚举实现单例</title>
      <link href="/2018/08/17/use-enumeration-to-implement-a-singleton.html"/>
      <url>/2018/08/17/use-enumeration-to-implement-a-singleton.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>介绍使用枚举的方式创建单例, 其他方式可以参考<a href="https://liuzhihang.com/2018/02/21/singleton-pattern.html">单例模式</a></p><a id="more"></a><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用枚举单例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/17 17:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonPattern <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span>   SingleEnum.INSTANCE.getSingletonPattern();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> SingleEnum &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 单例</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        INSTANCE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SingletonPattern singletonPattern;</span><br><span class="line"></span><br><span class="line">        SingleEnum() &#123;</span><br><span class="line">            <span class="keyword">this</span>.singletonPattern = <span class="keyword">new</span> SingletonPattern();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SingletonPattern <span class="title">getSingletonPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singletonPattern;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.比双重锁检查相对简洁<br>2.线程安全<br>3.自动处理序列化<br>4.防止反射</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch基本语句</title>
      <link href="/2018/06/26/elasticsearch-basic-statement.html"/>
      <url>/2018/06/26/elasticsearch-basic-statement.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="查看集群"><a href="#查看集群" class="headerlink" title="查看集群"></a>查看集群</h3><h4 id="1-查看集群健康"><a href="#1-查看集群健康" class="headerlink" title="1. 查看集群健康"></a>1. 查看集群健康</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/_cat/health?v"</span></span><br></pre></td></tr></table></figure><h4 id="2-查看集群节点"><a href="#2-查看集群节点" class="headerlink" title="2. 查看集群节点"></a>2. 查看集群节点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/_cat/nodes?v"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="3-查看集群所有索引"><a href="#3-查看集群所有索引" class="headerlink" title="3. 查看集群所有索引"></a>3. 查看集群所有索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/_cat/indices?v"</span></span><br></pre></td></tr></table></figure><h3 id="get-获取指定数据"><a href="#get-获取指定数据" class="headerlink" title="get 获取指定数据"></a>get 获取指定数据</h3><h4 id="1-直接获取数据"><a href="#1-直接获取数据" class="headerlink" title="1. 直接获取数据"></a>1. 直接获取数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty"</span></span><br></pre></td></tr></table></figure><p>格式为 /{index}/{type}/{id}</p><table><thead><tr><th align="left">字段</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">monitor_log_mch_order_out</td><td align="left">索引 (_index)</td></tr><tr><td align="left">logs</td><td align="left">索引的类型 (_type), 不知道类型可以用 _all 匹配</td></tr><tr><td align="left">AWSudIFgTuj3oZBEhyxK</td><td align="left">id (_id)</td></tr><tr><td align="left">pretty</td><td align="left">json格式显示数据, 可省略</td></tr><tr><td align="left">#### 2. 屏蔽或只查看 _source</td><td align="left"></td></tr><tr><td align="left"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty&amp;_source=false"</span></span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td align="left">添加 _source=false 即可</td><td align="left"></td></tr><tr><td align="left"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK/_source?pretty"</span></span><br></pre></td></tr></table></figure></td><td align="left"></td></tr></tbody></table><h4 id="3-过滤字段"><a href="#3-过滤字段" class="headerlink" title="3. 过滤字段"></a>3. 过滤字段</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty&amp;_source_include=log*&amp;_source_exclude=logType"</span></span><br></pre></td></tr></table></figure><p>获取包含 log* 且不为 logType 的字段</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty&amp;_source=logType,logLevel"</span></span><br></pre></td></tr></table></figure><p>只查询指定字段的简易写法</p><h3 id="mget-多条件匹配查询"><a href="#mget-多条件匹配查询" class="headerlink" title="mget 多条件匹配查询"></a>mget 多条件匹配查询</h3><ol><li><p>匹配多个索引, 同时查询多个id的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/_mget?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "docs" : [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "_index" : "monitor_log_mch_order_out",</span></span><br><span class="line"><span class="string">            "_type" : "logs",</span></span><br><span class="line"><span class="string">            "_id" : "AWSudIFgTuj3oZBEhyxK"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "_index" : "monitor_log_mch_order_out",</span></span><br><span class="line"><span class="string">            "_type" : "logs",</span></span><br><span class="line"><span class="string">            "_id" : "AWSuXewETuj3oZBEhywS"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure></li><li><p>可以将索引写在host后面, 代表查询的都为同一索引下的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/_mget?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "docs" : [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "_type" : "logs",</span></span><br><span class="line"><span class="string">            "_id" : "AWSudIFgTuj3oZBEhyxK"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "_type" : "logs",</span></span><br><span class="line"><span class="string">            "_id" : "AWSuXewETuj3oZBEhywS"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure></li><li><p>合并index和type, 代表查询的都为同一索引下type也相同的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/logs/_mget?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "docs" : [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "_id" : "AWSudIFgTuj3oZBEhyxK"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "_id" : "AWSuXewETuj3oZBEhywS"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p>简化后如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/logs/_mget?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"ids" : ["AWSudIFgTuj3oZBEhyxK", "AWSuXewETuj3oZBEhywS"]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure></li></ol><p>注: 当多个条件的 _type 相同时 可以使用 _all 或者省略</p><ol start="4"><li>过滤字段, 每个Id分别对 _source进行过滤<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/_mget?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "docs" : [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "_id" : "AWSudIFgTuj3oZBEhyxK",</span></span><br><span class="line"><span class="string">            "_source" : false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "_id" : "AWSuXewETuj3oZBEhywS",</span></span><br><span class="line"><span class="string">            "_source" : ["bizId", "method"]</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "_id" : "AWSuLAYqTuj3oZBEhysH",</span></span><br><span class="line"><span class="string">            "_source" : &#123;</span></span><br><span class="line"><span class="string">                "include": ["log*"],</span></span><br><span class="line"><span class="string">                "exclude": ["logLevel"]</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="search-搜索"><a href="#search-搜索" class="headerlink" title="_search 搜索"></a>_search 搜索</h3><h4 id="1-匹配bizId-查询"><a href="#1-匹配bizId-查询" class="headerlink" title="1. 匹配bizId 查询"></a>1. 匹配bizId 查询</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/_search?pretty&amp;q=bizId:2009011201807190133430748068"</span></span><br></pre></td></tr></table></figure><h4 id="2-同时指定类型"><a href="#2-同时指定类型" class="headerlink" title="2. 同时指定类型"></a>2. 同时指定类型</h4><p>同时指定类型, 多个类型用 ‘,’ 隔开, 也支持多个索引勇士搜索, 多个索引用 ‘,’ 隔开, 或者模糊搜索</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/logs/_search?pretty&amp;q=bizId:2009011201807190133430748068"</span></span><br></pre></td></tr></table></figure><h4 id="3-占位符-all-匹配所有索引"><a href="#3-占位符-all-匹配所有索引" class="headerlink" title="3. 占位符 _all 匹配所有索引"></a>3. 占位符 _all 匹配所有索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/_all/logs/_search?pretty&amp;q=bizId:2009011201807190133430748068"</span></span><br></pre></td></tr></table></figure><h4 id="4-匹配所有索引所有类型"><a href="#4-匹配所有索引所有类型" class="headerlink" title="4. 匹配所有索引所有类型"></a>4. 匹配所有索引所有类型</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/_search?pretty&amp;q=bizId:2009011201807190133430748068"</span></span><br></pre></td></tr></table></figure><p>注: q 代表映射query_string</p><h4 id="5-请求体的方式"><a href="#5-请求体的方式" class="headerlink" title="5. 请求体的方式"></a>5. 请求体的方式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/logs/_search?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query" : &#123;</span></span><br><span class="line"><span class="string">        "term" : &#123; "bizId" : "2009011201807190133430748068" &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><h4 id="6-分页查询-from-size"><a href="#6-分页查询-from-size" class="headerlink" title="6. 分页查询 from/size"></a>6. 分页查询 from/size</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/logs/_search?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"from" : 0, "size" : 1,</span></span><br><span class="line"><span class="string">    "query" : &#123;</span></span><br><span class="line"><span class="string">        "term" : &#123; "bizId" : "2009011201807190133430748068" &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><h4 id="7-查询并过滤字段"><a href="#7-查询并过滤字段" class="headerlink" title="7. 查询并过滤字段"></a>7. 查询并过滤字段</h4><p>根据字段查询并筛选掉指定字段</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/_search?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "_source": &#123;</span></span><br><span class="line"><span class="string">        "includes": [ "costTime", "bizId" ],</span></span><br><span class="line"><span class="string">        "excludes": [ "logLevel" ]</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "query" : &#123;</span></span><br><span class="line"><span class="string">        "term" : &#123; "bizId" : "2009011201807190133430748068" &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><h4 id="1-按照时间范围查询"><a href="#1-按照时间范围查询" class="headerlink" title="1. 按照时间范围查询"></a>1. 按照时间范围查询</h4><p>可以省略索引查询全部</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/monitor_log_mch_order_out/_search?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "range" : &#123;</span></span><br><span class="line"><span class="string">            "time" : &#123;</span></span><br><span class="line"><span class="string">                "gte": "2018-07-19 00:14:25:000",</span></span><br><span class="line"><span class="string">                "lte": "2018-07-19 00:14:30:000",</span></span><br><span class="line"><span class="string">                "format": "yyyy-MM-dd HH:mm:ss:SSS"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash配置</title>
      <link href="/2018/06/20/logstash-configuration.html"/>
      <url>/2018/06/20/logstash-configuration.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">beats</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">port</span> <span class="string">=&gt;</span> <span class="string">"5043"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>配置日志输入方式为 filebeat, 并配置端口</p><a id="more"></a><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">filter</span> <span class="string">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">grok</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"\[<span class="template-variable">%&#123;DATA:time&#125;</span>\]-\[<span class="template-variable">%&#123;DATA:method&#125;</span>\] - \[<span class="template-variable">%&#123;DATA:catalina&#125;</span>\] -\[<span class="template-variable">%&#123;DATA:logLevel&#125;</span>\] - \[<span class="template-variable">%&#123;DATA:index_prefix&#125;</span>\|<span class="template-variable">%&#123;WORD:logType&#125;</span>\|<span class="template-variable">%&#123;WORD:sysNo&#125;</span>\|<span class="template-variable">%&#123;WORD:objType&#125;</span>\|<span class="template-variable">%&#123;DATA:funcode&#125;</span>\|<span class="template-variable">%&#123;WORD:monitorObjNo&#125;</span>\|<span class="template-variable">%&#123;WORD:bizId&#125;</span>\|<span class="template-variable">%&#123;WORD:respCode&#125;</span>\|<span class="template-variable">%&#123;DATA:respMsg&#125;</span>\|<span class="template-variable">%&#123;WORD:costTime&#125;</span>|<span class="template-variable">%&#123;DATA:exField&#125;</span>\]"</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">grok&#123;</span></span><br><span class="line">         <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">&#123;</span> <span class="string">"time"</span> <span class="string">=&gt;</span> <span class="string">["%&#123;INT:y_index&#125;-%&#123;INT:M_index&#125;-%&#123;INT:d_index&#125;"]&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">mutate</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">add_field</span> <span class="string">=&gt;</span> <span class="string">&#123;</span> <span class="string">"[@metadata][index_suffix]"</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;y_index&#125;</span><span class="template-variable">%&#123;M_index&#125;</span><span class="template-variable">%&#123;d_index&#125;</span>"</span> <span class="string">&#125;</span></span><br><span class="line">        <span class="string">remove_field</span> <span class="string">=&gt;</span> <span class="string">["beat","host","thread","class","source","tags","type","y_index","M_index","d_index"]</span></span><br><span class="line">        <span class="string">lowercase</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"index_prefix"</span> <span class="string">]</span></span><br><span class="line">        <span class="string">lowercase</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"funcode"</span> <span class="string">]</span></span><br><span class="line">        <span class="string">lowercase</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"objType"</span> <span class="string">]</span></span><br><span class="line">        <span class="string">lowercase</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"monitorObjNo"</span> <span class="string">]</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>使用gork过滤器对日志进行筛选, 并对部分字段赋值.</li><li>使用mutate插件对字段进行转换, add_field 为添加字段 [@metadata][index_suffix] 意思是添加临时字段, 该字段不会输出到es中</li></ol><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">if</span>  <span class="string">[logType]</span> <span class="string">==</span> <span class="string">"info"</span>  <span class="string">&#123;</span></span><br><span class="line">                 <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">                        <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"xxx.xxx.xxx.xxx:9200"</span> <span class="string">]</span></span><br><span class="line">                        <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;index_prefix&#125;</span>_<span class="template-variable">%&#123;objType&#125;</span>_<span class="template-variable">%&#123;funcode&#125;</span>_<span class="template-variable">%&#123;[@metadata][index_suffix]&#125;</span>"</span></span><br><span class="line">                        <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">elastic</span></span><br><span class="line">                        <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">xxx</span></span><br><span class="line">                 <span class="string">&#125;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">if</span> <span class="string">[logType]</span> <span class="string">==</span> <span class="string">"error"</span> <span class="string">&#123;</span></span><br><span class="line">                <span class="string">redis</span> <span class="string">&#123;</span></span><br><span class="line">                        <span class="string">data_type</span> <span class="string">=&gt;</span> <span class="string">"list"</span></span><br><span class="line">                        <span class="string">db</span> <span class="string">=&gt;</span> <span class="number">0</span></span><br><span class="line">                        <span class="comment">#key =&gt; "%&#123;index_prefix&#125;_%&#123;sysNo&#125;_%&#123;objType&#125;_%&#123;funcode&#125;_%&#123;[@metadata][index_suffix]&#125;"</span></span><br><span class="line">                        <span class="string">key</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;index_prefix&#125;</span>_<span class="template-variable">%&#123;sysNo&#125;</span>_<span class="template-variable">%&#123;objType&#125;</span>_<span class="template-variable">%&#123;monitorObjNo&#125;</span>"</span></span><br><span class="line">                        <span class="string">host</span> <span class="string">=&gt;</span> <span class="string">"xxx.xxx.xxx.xxx"</span></span><br><span class="line">                        <span class="string">port</span> <span class="string">=&gt;</span> <span class="string">"6379"</span></span><br><span class="line">                        <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">"xxx"</span></span><br><span class="line">                <span class="string">&#125;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>将过滤后的字段按照类型输出到Es或者redis队列中</p><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><pre><code>./bin/logstash -f first-pipelines.ymlnohup ./logstash -f ../first-pipelines.yml &gt;/dev/null 2&gt;&amp;1 &amp;</code></pre><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出到控制台</span></span><br><span class="line"><span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>filebeat配置</title>
      <link href="/2018/06/20/filebeat-configuration.html"/>
      <url>/2018/06/20/filebeat-configuration.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="filebeat配置"><a href="#filebeat配置" class="headerlink" title="filebeat配置"></a>filebeat配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.prospectors:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">input_type:</span> <span class="string">log</span></span><br><span class="line"><span class="comment">#读取日志的路径</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/opt/export/log/info-xxx.log</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">log_type:</span> <span class="string">"monitor_log"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">fields_under_root:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#过滤部分日志</span></span><br><span class="line">  <span class="attr">include_lines:</span> <span class="string">['Monitor_log']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------- Logstash output --------------------------------</span></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">  <span class="comment"># The Logstash hosts</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">["xxx.xxx.xxx.xxx:5043","xxx.xxx.xxx.xxx:5043"]</span></span><br><span class="line">  <span class="attr">loadbalance:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================ Logging =====================================</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging.level:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">logging.to_files:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging.to_syslog:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">logging.files:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/opt/export/app/filebeat/logs</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mybeat.log</span></span><br><span class="line">  <span class="attr">keepfiles:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>过滤不包含指定字段的日志, 并仅仅输出到logstash, 也可以直接输出到Elasticsearch</p><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><ol><li>前台启动：关闭窗口连接后自动退出</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./filebeat -e -c filebeat.yml</span><br></pre></td></tr></table></figure><ol start="2"><li>后台启动:</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup ./filebeat -e -c filebeat.yml &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ol start="3"><li>关闭:</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 xxxx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控系统架构</title>
      <link href="/2018/06/20/monitoring-system-architecture.html"/>
      <url>/2018/06/20/monitoring-system-architecture.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="监控系统基本框架"><a href="#监控系统基本框架" class="headerlink" title="监控系统基本框架"></a>监控系统基本框架</h3><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="/resources/image/elk/elk.png" alt="监控系统基本架构"></p><a id="more"></a><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li>各业务系统按照指定格式打印日志</li><li>filebeat自动读取日志信息, 并进行过滤, 输出到logstash</li><li>logstash进行二次处理, 将日志内容格式化, 并将 info日志和error日志分别存放到Elasticsearch和redis队列中</li><li>监控系统定时从Es和redis中获取数据, 存放到mysql并进行报警分析</li><li>使用EChart图形化展示信息<br>…</li></ol>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程的生命周期</title>
      <link href="/2018/06/15/thread-life-cycle.html"/>
      <url>/2018/06/15/thread-life-cycle.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="/resources/concurrent/thread-life.png" alt="java内存模型"></p><a id="more"></a><h3 id="图解析"><a href="#图解析" class="headerlink" title="图解析"></a>图解析</h3><p>1.一般情况下线程主要经历: 准备, 就绪, 运行, 死亡四种状态.<br>2.准备:即创建线程, 包括集成Thread, 线程池, spring方式等等<br>3.就绪:线程创建并调用start()方法并不代表线程将立即获得资源, 而是进入到就绪状态进行资源分配<br>4.运行:抢占到资源的线程将执行, 执行过程可能会含有一些别的操作<br>&emsp;1).线程等待, 直到调用 notify()或notifyAll()方法被唤醒, 这里唤醒后不会立即继续执行线程, 而是进入就绪状态重新抢占资源<br>&emsp;2).线程休眠, 直到休眠时间结束, 同样结束后不会立即继续执行线程, 而是进入就绪状态重新抢占资源<br>&emsp;3).线程阻塞, IO资源阻塞, 锁等方式使线程进入阻塞队列, 释放锁将继续执行<br>5.死亡: 调用<del>stop()</del>方法, 线程中断, 或线程执行完毕则线程死亡</p>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized锁的介绍</title>
      <link href="/2018/06/13/introduction-of-synchronized-lock.html"/>
      <url>/2018/06/13/introduction-of-synchronized-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="synchronized锁的使用"><a href="#synchronized锁的使用" class="headerlink" title="synchronized锁的使用"></a>synchronized锁的使用</h3><p>synchronized可以使用在方法和代码块中, 使用的方式不同锁代表的含义不同, 下面将从几个方面进行介绍.</p><ul><li>普通方法</li><li>静态方法</li><li>代码块synchronized(this)</li><li>代码块synchronized(*.class)</li></ul><a id="more"></a><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>在使用synchronized关键字中锁主要分为两类, 一种是对象锁, 另一种类锁</li><li>普通加锁方法和synchronized(this)都是对象锁, 静态加锁方法和synchronized(*.class)都是类锁</li><li>对象锁: 同一对象持有锁, 相同对象等待, 其他对象不受影响; 不同对象持有锁, 互不影响.</li><li>类锁: 类锁时, 只要该类的对象持有锁, 无论是否为同一对象访问静态同步方法时都等待, 访问非静态同步方法不受影响.</li><li>对象锁和类锁互相不影响</li></ul><h3 id="测试代码及过程"><a href="#测试代码及过程" class="headerlink" title="测试代码及过程"></a>测试代码及过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.tool.sync;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/11 16:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncMainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SyncTest syncTest1 = <span class="keyword">new</span> SyncTest();</span><br><span class="line">        <span class="comment">// SyncTest syncTest2 = new SyncTest();</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; syncTest1.methodA(), <span class="string">"线程 01 "</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; syncTest1.methodB(), <span class="string">"线程 02 "</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"start"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"sleep"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"start"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"sleep"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为一个简单的测试代码, 指使用两个线程分别调用两个方法, 通过打印结果可以看出顺序是乱序的, 其中线程的 start() 顺序并不代表线程的执行顺序, 在下面测试中假设是 “线程01” 先执行.</p><h4 id="1-A-B-方法分别添加synchronized关键字-同一对象"><a href="#1-A-B-方法分别添加synchronized关键字-同一对象" class="headerlink" title="1.A B 方法分别添加synchronized关键字 + 同一对象"></a>1.A B 方法分别添加synchronized关键字 + 同一对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论: 方法 A 阻塞, 方法 B 等待 A 执行完毕后才继续执行.</p><h4 id="2-A-B-方法分别添加synchronized关键字-不同对象"><a href="#2-A-B-方法分别添加synchronized关键字-不同对象" class="headerlink" title="2.A B 方法分别添加synchronized关键字 + 不同对象"></a>2.A B 方法分别添加synchronized关键字 + 不同对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncMainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SyncTest syncTest1 = <span class="keyword">new</span> SyncTest();</span><br><span class="line">        SyncTest syncTest2 = <span class="keyword">new</span> SyncTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; syncTest1.methodA(), <span class="string">"线程 01 "</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; syncTest2.methodB(), <span class="string">"线程 02 "</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论: 方法 A 阻塞, 方法 B 不受影响.</p><h4 id="3-A-方法分别添加synchronized关键字-B方法不添加"><a href="#3-A-方法分别添加synchronized关键字-B方法不添加" class="headerlink" title="3.A 方法分别添加synchronized关键字 B方法不添加"></a>3.A 方法分别添加synchronized关键字 B方法不添加</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论: 方法 A 阻塞, 方法 B 不受影响.</p><h4 id="4-A-B-方法分别添加-static-synchronized-不同对象"><a href="#4-A-B-方法分别添加-static-synchronized-不同对象" class="headerlink" title="4.A B 方法分别添加 static synchronized  + 不同对象"></a>4.A B 方法分别添加 static synchronized  + 不同对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncMainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SyncTest syncTest1 = <span class="keyword">new</span> SyncTest();</span><br><span class="line">        SyncTest syncTest2 = <span class="keyword">new</span> SyncTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; syncTest1.methodA(), <span class="string">"线程 01 "</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; syncTest2.methodB(), <span class="string">"线程 02 "</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论: 方法 A 阻塞, 方法 B 等待 A结束后继续执行.</p><h4 id="5-A-方法添加-static-synchronized-B-方法添加-synchronized-不同对象"><a href="#5-A-方法添加-static-synchronized-B-方法添加-synchronized-不同对象" class="headerlink" title="5.A 方法添加 static synchronized, B 方法添加 synchronized  + 不同对象"></a>5.A 方法添加 static synchronized, B 方法添加 synchronized  + 不同对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncMainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SyncTest syncTest1 = <span class="keyword">new</span> SyncTest();</span><br><span class="line">        SyncTest syncTest2 = <span class="keyword">new</span> SyncTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; syncTest1.methodA(), <span class="string">"线程 01 "</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; syncTest2.methodB(), <span class="string">"线程 02 "</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论: 方法 A 阻塞, 方法 B 不受影响.</p><h4 id="6-A-B-方法内添加-synchronized-this"><a href="#6-A-B-方法内添加-synchronized-this" class="headerlink" title="6.A B 方法内添加 synchronized(this)"></a>6.A B 方法内添加 synchronized(this)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论: 同一对象 A 阻塞 B等待, 不同对象 A阻塞 B不受影响</p><h4 id="7-A-B-方法内添加-synchronized-SyncTest-class"><a href="#7-A-B-方法内添加-synchronized-SyncTest-class" class="headerlink" title="7.A B 方法内添加 synchronized(SyncTest.class)"></a>7.A B 方法内添加 synchronized(SyncTest.class)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SyncTest<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SyncTest<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论: 同一/不同对象 A 阻塞 B等待</p><h4 id="8-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-this"><a href="#8-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-this" class="headerlink" title="8.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(this)"></a>8.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(this)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SyncTest<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论: 同一/不同对象 A 阻塞 B不受影响</p><h4 id="9-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-OtherObj"><a href="#9-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-OtherObj" class="headerlink" title="9.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(OtherObj)"></a>9.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(OtherObj)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String string = <span class="string">"lock"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SyncTest<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (string) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论: 同一/不同对象 A 阻塞 B不受影响</p>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized同步锁原理</title>
      <link href="/2018/06/11/synchronized-synchronous-lock-principle.html"/>
      <url>/2018/06/11/synchronized-synchronous-lock-principle.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>在多线程操作中volatile关键字可以保证共享变量的内存可见性, 但是并不能保证操作的原子性, 这时候就需要用到锁, synchronized同步锁是java关键字, 是内置的语言实现.</li><li>synchronized加锁和线程结束或异常锁的释放过程由JVM进行控制</li><li>synchronized关键字可以使用在方法和同步代码块中, 不同的使用方式, 锁的结果是不同的</li><li>重量级锁 + 可重入</li></ul><a id="more"></a><h3 id="synchronized底层原理"><a href="#synchronized底层原理" class="headerlink" title="synchronized底层原理"></a>synchronized底层原理</h3><p>1.代码示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.tool.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/06/11 16:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncTest1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncTest2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用 javap -v SynchronizedTest.class 查看代码的对应字节码如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ javap -v SynchronizedTest.class</span><br><span class="line">Classfile &#x2F;C:&#x2F;Users&#x2F;liuzhihang&#x2F;Desktop&#x2F;SynchronizedTest.class</span><br><span class="line">  Last modified 2018-7-10; size 518 bytes</span><br><span class="line">  MD5 checksum ba48def77b226e7b9ac28121ec423c16</span><br><span class="line">  Compiled from &quot;SynchronizedTest.java&quot;</span><br><span class="line">public class com.liuzhihang.tool.java.SynchronizedTest</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">&#x2F;&#x2F; 常量池省略</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 构造方法省略</span><br><span class="line"></span><br><span class="line">  public void syncTest1();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;3, locals&#x3D;3, args_size&#x3D;1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: dup</span><br><span class="line">         2: astore_1</span><br><span class="line">         3: monitorenter</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: dup</span><br><span class="line">         6: getfield      #2                    &#x2F;&#x2F; Field i:I</span><br><span class="line">         9: iconst_1</span><br><span class="line">        10: iadd</span><br><span class="line">        11: putfield      #2                    &#x2F;&#x2F; Field i:I</span><br><span class="line">        14: aload_1</span><br><span class="line">        15: monitorexit</span><br><span class="line">        16: goto          24</span><br><span class="line">        19: astore_2</span><br><span class="line">        20: aload_1</span><br><span class="line">        21: monitorexit</span><br><span class="line">        22: aload_2</span><br><span class="line">        23: athrow</span><br><span class="line">        24: return</span><br><span class="line">      Exception table:</span><br><span class="line">  &#x2F;&#x2F; 省略代码</span><br><span class="line"></span><br><span class="line">  public synchronized void syncTest2();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;3, locals&#x3D;1, args_size&#x3D;1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: dup</span><br><span class="line">         2: getfield      #3                  &#x2F;&#x2F; Field j:I</span><br><span class="line">         5: iconst_1</span><br><span class="line">         6: iadd</span><br><span class="line">         7: putfield      #3                  &#x2F;&#x2F; Field j:I</span><br><span class="line">        10: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 22: 0</span><br><span class="line">        line 23: 10</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;SynchronizedTest.java&quot;</span><br></pre></td></tr></table></figure><p>3.结论</p><ul><li>同步语句块的实现使用的是 monitorenter 和 monitorexit 指令, 其中有两个 monitorexit 因为不能确保是正常结束还是异常结束, 所以另一个是用来确保异常结束时释放 monitor指令.</li><li>同步方法时使用的是 flags中的 ACC_SYNCHRONIZED 来标识该方法为同步方法, JVM在调用该方法时便会执行相应的同步调用.</li><li>每个线程都维护自己的监视器(monitor), 只要是同步调用进行相关操作时要先获得 monitor, 否则将被阻塞</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volatile关键字</title>
      <link href="/2018/06/09/volatile-keyword.html"/>
      <url>/2018/06/09/volatile-keyword.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在多线程操作共享变量时, 会使用volatile修饰共享变量, 比如单例模式的双重锁检查中, 并且在concurrent包下也大量使用了volatile关键字;<br>volatile可以对类属性进行修饰, 从而确保线程每次都是从主存中获取属性, 操作完毕后写回主存.</p><a id="more"></a><h3 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h3><img src="https://liuzhihang.com/oss/pic/loading.gif" class="lazyload" data-src="/resources/image/loading.gif"  data-original="/resources/concurrent/volatile.png" width="800" hegiht="800" align=center /><p> 在多线程同时对共享变量进行操作过程中, 每个线程会拷贝一份共享变量到自己的工作内存中进行相关操作, 操作完毕后会将结果写入到主存中.<br> 而volatile关键字可以保证操作的可见性和有序性, 但是却不能保证原子性.</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>指一个操作或者多个操作要么全部执行要么全部都不执行, 操作过程整体是一个原子, 不被分割打断.</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>当多个线程访问同一个变量时, 一个线程修改了这个变量的值, 其他线程能够立即看得到修改的值.</p><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>即程序执行的顺序按照代码的先后顺序执行<br>主要原因是因为处理器在处理程序时会进行指令重排, 对代码进行优化, 指令重排在单线程中得到的结果是一致的, 但是在多线程中就会造成各种错误.</p><h3 id="volatile关键字作用"><a href="#volatile关键字作用" class="headerlink" title="volatile关键字作用"></a>volatile关键字作用</h3><p>1.使用volatile关键字修饰的变量,会强制将修改的值写入到主存中<br>2.volatile不保证原子性, 在多线程操作下仅能保证操作别的线程可见, 在多线程情况下同时操作共享变量依然会有数据不正确的情况.<br>3.volatile会防止指令重排</p>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAop代理的选择</title>
      <link href="/2018/05/21/springaop-agent-selection.html"/>
      <url>/2018/05/21/springaop-agent-selection.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Spring动态创建bean过程, 是如何进行选择使用 jdk还是cglib进行代理的, 可以通过源码进行解析</p><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>通过断点进行跟踪主要执行过程在 DefaultAopProxyFactory, 通过判断条件是使用Cglib还是Jdk</p><a id="more"></a><h3 id="相关源码解析"><a href="#相关源码解析" class="headerlink" title="相关源码解析"></a>相关源码解析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAopProxyFactory</span> <span class="keyword">implements</span> <span class="title">AopProxyFactory</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line">    <span class="comment">//判断条件 是否优化, 返回是否直接代理目标类以及任何接口或者没有用户提供的代理接口</span></span><br><span class="line"><span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line"><span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</span><br><span class="line"><span class="string">"Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否是接口, 和已经使用jdk代理</span></span><br><span class="line"><span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine whether the supplied &#123;<span class="doctag">@link</span> AdvisedSupport&#125; has only the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.aop.SpringProxy&#125; interface specified</span></span><br><span class="line"><span class="comment"> * (or no proxy interfaces specified at all).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasNoUserSuppliedProxyInterfaces</span><span class="params">(AdvisedSupport config)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt;[] ifcs = config.getProxiedInterfaces();</span><br><span class="line">return (ifcs.length == 0 || (ifcs.length == 1 &amp;&amp; SpringProxy.class.isAssignableFrom(ifcs[0])));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cglib动态代理</title>
      <link href="/2018/05/18/cglib-dynamic-proxy.html"/>
      <url>/2018/05/18/cglib-dynamic-proxy.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Spring动态代理可以选择使用jdk动态代理, 或者cglib动态代理,  cglib动态代理位于 net.sf.cglib.proxy 包下.</p><p>使用时涉及<br>接口: net.sf.cglib.proxy.MethodInterceptor<br>用来生成动态子类的类类: net.sf.cglib.proxy.Enhancer</p><p>注意: cglib 动态代理是基于类的代理, 是通过对指定的业务类生成一个子类, 并覆盖其中业务方法实现代理. 因为使用继承, 所以被代理类不能使 final 修饰</p><a id="more"></a><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>1.创建MethodInterceptor接口的实现类, 并编写intercept方法的实现<br>2.通过methodProxy.invokeSuper(o, objects);调用父类的方法<br>3.创建Enhancer, 通过 setSuperclass(Class superclass)方法指定父类(被代理类), 通过 setCallback(final Callback callback)方法指定代理<br>4.enhancer.create() 生成代理, 调用被代理类的方法</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>按照步骤编写简易逻辑代码.</p><h4 id="创建MethodInterceptor接口的实现类"><a href="#创建MethodInterceptor接口的实现类" class="headerlink" title="创建MethodInterceptor接口的实现类"></a>创建MethodInterceptor接口的实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于类的代理 即使类没有实现接口也可以被代理</span></span><br><span class="line"><span class="comment"> * 主要是基于类生成一个继承的子类 所以 类和方法不要声明为 final</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/18 10:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"cglib动态代理 before . . ."</span>);</span><br><span class="line"></span><br><span class="line">        Object invoke = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            invoke = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            System.err.println(<span class="string">"cglib动态代理 error: "</span> + throwable.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"cglib动态代理 after . . ."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建Enhancer"><a href="#创建Enhancer" class="headerlink" title="创建Enhancer"></a>创建Enhancer</h4><p>创建Enhancer, 通过 setSuperclass(Class superclass)方法指定父类(被代理类), 通过 setCallback(final Callback callback)方法指定代理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibMainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(SubjectCglib<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MyMethodInterceptor());</span><br><span class="line"></span><br><span class="line">        SubjectCglib subjectCglib = (SubjectCglib) enhancer.create();</span><br><span class="line"></span><br><span class="line">        System.err.println(subjectCglib.getAge(<span class="string">"liuzhihang"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可以将二者合并到MyInterceptor中"><a href="#可以将二者合并到MyInterceptor中" class="headerlink" title="可以将二者合并到MyInterceptor中"></a>可以将二者合并到MyInterceptor中</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于类的代理 即使类没有实现接口也可以被代理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/18 10:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglibInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(object.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"cglib动态代理 before . . ."</span>);</span><br><span class="line"></span><br><span class="line">        Object invoke = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            invoke = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            System.err.println(<span class="string">"cglib动态代理 error: "</span> + throwable.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"cglib动态代理 after . . ."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk动态代理及源码解析</title>
      <link href="/2018/05/17/jdk-dynamic-proxy-and-source-code-analysis.html"/>
      <url>/2018/05/17/jdk-dynamic-proxy-and-source-code-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Spring动态代理可以选择使用jdk动态代理, 或者cglib动态代理,  jdk动态代理位于 java.lang.reflect 包下.</p><p>使用时涉及<br>接口: java.lang.reflect.InvocationHandler<br>动态代理类: java.lang.reflect.Proxy</p><p>注意: JDK 动态代理是基于接口的代理, 只能对实现接口的类生成代理, 不能对类进行代理</p><a id="more"></a><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>1.创建InvocationHandler接口的实现类, 并编写invoke方法的实现<br>2.创建被代理类的接口及实现类<br>3.使用动态代理类Proxy的静态方法生成代理类实例<br>4.使用实例调用方法</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>按照步骤编写简易逻辑代码.</p><h4 id="创建InvocationHandler接口的实现类"><a href="#创建InvocationHandler接口的实现类" class="headerlink" title="创建InvocationHandler接口的实现类"></a>创建InvocationHandler接口的实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK 动态代理</span></span><br><span class="line"><span class="comment"> * 基于接口的代理, 只能对实现接口的类生成代理, 不能对类进行代理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/17 10:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"jdk 动态代理 before . . . "</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"当前代理方法为:"</span> + method);</span><br><span class="line">        Object invoke = method.invoke(target, args);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"jdk 动态代理 after . . . "</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建被代理类的接口及实现类"><a href="#创建被代理类的接口及实现类" class="headerlink" title="创建被代理类的接口及实现类"></a>创建被代理类的接口及实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被代理类的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/17 10:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取年龄</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getAge</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被代理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/17 10:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectImpl</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SubjectImpl的获取名字方法 . . ."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"liuzhihang"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(name + <span class="string">"开始获取年龄 . . ."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"25"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用动态代理类Proxy的静态方法生成代理类实例"><a href="#使用动态代理类Proxy的静态方法生成代理类实例" class="headerlink" title="使用动态代理类Proxy的静态方法生成代理类实例"></a>使用动态代理类Proxy的静态方法生成代理类实例</h4><p>获取代理类实例有以下两种方式, 一种是通过Proxy.newProxyInstance(..)获取,  一种是通过 Proxy.getProxyClass(..) 方式获取<br>1.Proxy.newProxyInstance(..)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当代理类实例调用方法时, 会自动跳转到代理类关联的 handler 对象, 通过 method.invoke(target, args) 进行调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/17 10:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyMainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Subject subject = <span class="keyword">new</span> SubjectImpl();</span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader = subject.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = subject.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler(subject);</span><br><span class="line">        <span class="comment">// 生成代理类实例</span></span><br><span class="line">        Subject proxyInstance = (Subject) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line"></span><br><span class="line">        String name = proxyInstance.getName();</span><br><span class="line">        String instanceAge = proxyInstance.getAge(<span class="string">"liuzhihang"</span>);</span><br><span class="line">        System.err.println(name + <span class="string">" "</span> + instanceAge);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.Proxy.getProxyClass(..)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当代理类实例调用方法时, 会自动跳转到代理类关联的 handler 对象, 通过 method.invoke(target, args) 进行调用</span></span><br><span class="line"><span class="comment"> * 此方式有异常抛出</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/17 10:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyMainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        Subject subject = <span class="keyword">new</span> SubjectImpl();</span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader = subject.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = subject.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler(subject);</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; proxyClass = Proxy.getProxyClass(classLoader, interfaces);</span><br><span class="line">            Constructor&lt;?&gt; constructor = proxyClass.getConstructor(InvocationHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            Subject subject1 = (Subject) constructor.newInstance(handler);</span><br><span class="line">            String name1 = subject1.getName();</span><br><span class="line">            String instanceAge1 = subject1.getAge(<span class="string">"liuzhihang"</span>);</span><br><span class="line">            System.err.println(name1 + <span class="string">" "</span> + instanceAge1);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\jdk1.8\bin\java.exe . . .</span><br><span class="line">liuzhihang 25</span><br><span class="line">jdk 动态代理 before . . .</span><br><span class="line">当前代理方法为:public abstract java.lang.String com.liuzhihang.tool.proxy.jdk.Subject.getName()</span><br><span class="line">SubjectImpl的获取名字方法 . . .</span><br><span class="line">jdk 动态代理 after . . .</span><br><span class="line">jdk 动态代理 before . . .</span><br><span class="line">当前代理方法为:public abstract java.lang.String com.liuzhihang.tool.proxy.jdk.Subject.getAge(java.lang.String)</span><br><span class="line">liuzhihang开始获取年龄 . . .</span><br><span class="line">jdk 动态代理 after . . .</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>结论: 代理实例在每次调用方法是都会通过代理类进行调用</p><h3 id="相关源码解析"><a href="#相关源码解析" class="headerlink" title="相关源码解析"></a>相关源码解析</h3><p>完整注释可自己查看相关源码, 源码过程应当DeBug多走走.<br>1.调用 Proxy.newProxyInstance 方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;**</span><br><span class="line"> * 返回指定接口的代理类实例，该接口将方法调用分派给指定的调用处理程序</span><br><span class="line"> *&#x2F;</span><br><span class="line">@CallerSensitive</span><br><span class="line">public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 非空校验</span><br><span class="line">    Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">    final Class&lt;?&gt;[] intfs &#x3D; interfaces.clone();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取系统安全接口</span><br><span class="line">    final SecurityManager sm &#x3D; System.getSecurityManager();</span><br><span class="line">    if (sm !&#x3D; null) &#123;</span><br><span class="line">        &#x2F;&#x2F; 校验权限</span><br><span class="line">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">     * 从缓存中获取代理类 或者 生成新的代理类</span><br><span class="line">     *&#x2F;</span><br><span class="line">    Class&lt;?&gt; cl &#x3D; getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">     * 通过反射获取构造函数对象并生成代理类实例</span><br><span class="line">     *&#x2F;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (sm !&#x3D; null) &#123;</span><br><span class="line">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 获取构造</span><br><span class="line">        final Constructor&lt;?&gt; cons &#x3D; cl.getConstructor(constructorParams);</span><br><span class="line">        final InvocationHandler ih &#x3D; h;</span><br><span class="line">        &#x2F;&#x2F; 验证代理类的修饰符</span><br><span class="line">        if (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">            &#x2F;&#x2F; 修改访问权限</span><br><span class="line">            AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                public Void run() &#123;</span><br><span class="line">                    &#x2F;&#x2F; 将此对象的可访问标志设置为指定的布尔值, true表示反射对象在使用时应禁止Java语言访问检查, false表示反射对象应强制执行Java语言访问检查</span><br><span class="line">                    cons.setAccessible(true);</span><br><span class="line">                    return null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;生成实例, 并将参数传入构造</span><br><span class="line">        return cons.newInstance(new Object[]&#123;h&#125;);</span><br><span class="line">    &#125; catch (IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">        throw new InternalError(e.toString(), e);</span><br><span class="line">    &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">        Throwable t &#x3D; e.getCause();</span><br><span class="line">        if (t instanceof RuntimeException) &#123;</span><br><span class="line">            throw (RuntimeException) t;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new InternalError(t.toString(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">        throw new InternalError(e.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出获取代理类是在 Class&lt;?&gt; cl = getProxyClass0(loader, intfs); 处, 继续相关逻辑<br>2.获取代理类相关逻辑</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 生成代理类, 之前必须进行权限检查</span><br><span class="line"> *&#x2F;</span><br><span class="line">private static Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class="line">                                       Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">    if (interfaces.length &gt; 65535) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;interface limit exceeded&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;如果由实现给定接口的给定加载器定义的代理类存在，则它将简单地返回缓存副本; 否则，它将通过Proxy Class Factory创建代理类</span><br><span class="line">    return proxyClassCache.get(loader, interfaces);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.proxyClassCache.get(loader, interfaces);<br>java.lang.reflect.WeakCache#get(..) 介绍</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;**</span><br><span class="line"> * 通过缓存查找值, 如果缓存中没有给定的（key，sub Key）对的条目或条目已被清除，则它总是评估&#123;Key sub Key Factory&#125;函数并可选择评估&#123;Factory value&#125;函数</span><br><span class="line"> *&#x2F;</span><br><span class="line">public V get(K key, P parameter) &#123;</span><br><span class="line">    &#x2F;&#x2F; 非空校验</span><br><span class="line">    Objects.requireNonNull(parameter);</span><br><span class="line">    &#x2F;&#x2F; 判断移除队列</span><br><span class="line">    expungeStaleEntries();</span><br><span class="line">    &#x2F;&#x2F; 缓存key</span><br><span class="line">    Object cacheKey &#x3D; CacheKey.valueOf(key, refQueue);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 延迟加载使用二级map</span><br><span class="line">    ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap &#x3D; map.get(cacheKey);</span><br><span class="line">    if (valuesMap &#x3D;&#x3D; null) &#123;</span><br><span class="line">        ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; oldValuesMap</span><br><span class="line">                &#x3D; map.putIfAbsent(cacheKey,</span><br><span class="line">                valuesMap &#x3D; new ConcurrentHashMap&lt;&gt;());</span><br><span class="line">        if (oldValuesMap !&#x3D; null) &#123;</span><br><span class="line">            valuesMap &#x3D; oldValuesMap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建子key 并根据key 检索supplier</span><br><span class="line">    Object subKey &#x3D; Objects.requireNonNull(subKeyFactory.apply(key, parameter));</span><br><span class="line">    &#x2F;&#x2F; 根据key获取supplier</span><br><span class="line">    Supplier&lt;V&gt; supplier &#x3D; valuesMap.get(subKey);</span><br><span class="line">    Factory factory &#x3D; null;</span><br><span class="line"></span><br><span class="line">    while (true) &#123;</span><br><span class="line">        if (supplier !&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F; supplier 可能为 Factory 或者 CacheValue&lt;V&gt; 的实例, 从缓存中获取到则直接返回</span><br><span class="line">            V value &#x3D; supplier.get();</span><br><span class="line">            if (value !&#x3D; null) &#123;</span><br><span class="line">                return value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; factory不存在则创建</span><br><span class="line">        if (factory &#x3D;&#x3D; null) &#123;</span><br><span class="line">            factory &#x3D; new Factory(key, parameter, subKey, valuesMap);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; supplier 为null</span><br><span class="line">        if (supplier &#x3D;&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F; 从valuesMap获取supplier</span><br><span class="line">            supplier &#x3D; valuesMap.putIfAbsent(subKey, factory);</span><br><span class="line">            if (supplier &#x3D;&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F; successfully installed Factory</span><br><span class="line">                supplier &#x3D; factory;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; else retry with winning supplier</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (valuesMap.replace(subKey, supplier, factory)) &#123;</span><br><span class="line">                &#x2F;&#x2F; successfully replaced</span><br><span class="line">                &#x2F;&#x2F; cleared CacheEntry &#x2F; unsuccessful Factory</span><br><span class="line">                &#x2F;&#x2F; with our Factory</span><br><span class="line">                supplier &#x3D; factory;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F; retry with current supplier</span><br><span class="line">                supplier &#x3D; valuesMap.get(subKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现重点在 Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter)); 获取 subKey 的过程中.<br>4.subKeyFactory.apply(key, parameter)<br>Debug发现在此处调用的是 java.lang.reflect.Proxy.ProxyClassFactory 静态内部类,<br>此处根据接口的数量生成二级缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个工厂函数, 用于生成, 定义并返回给定ClassLoader和接口数组的代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClassFactory</span></span></span><br><span class="line">        implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 所有代理类的前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">"$Proxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// next number to use for generation of unique proxy class names</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在IdentityHashMap中, 当且仅当两个key严格相等（key1==key2）时，IdentityHashMap才认为两个key相等</span></span><br><span class="line">        Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">        <span class="comment">// 循环接口数组</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 验证类加载器是否将此接口的名称解析为同一个Class对象</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获取接口的 class</span></span><br><span class="line">                interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        intf + <span class="string">" is not visible from class loader"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 验证interfaceClass是否为接口</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        interfaceClass.getName() + <span class="string">" is not an interface"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 验证接口是否重复</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"repeated interface: "</span> + interfaceClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></span><br><span class="line">        <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 验证所有非公开代理接口是否在同一个包中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">                accessFlags = Modifier.FINAL;</span><br><span class="line">                String name = intf.getName();</span><br><span class="line">                <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">                String pkg = ((n == -<span class="number">1</span>) ? <span class="string">""</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    proxyPkg = pkg;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"non-public interfaces from different packages"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有非公开的代理接口，使用 com.sun.proxy package</span></span><br><span class="line">            proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">"."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 为要生成的代理类选择一个名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">        String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 生成代理类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                    proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * A ClassFormatError here means that (barring bugs in the</span></span><br><span class="line"><span class="comment">             * proxy class generation code) there was some other</span></span><br><span class="line"><span class="comment">             * invalid aspect of the arguments supplied to the proxy</span></span><br><span class="line"><span class="comment">             * class creation (such as virtual machine limitations</span></span><br><span class="line"><span class="comment">             * exceeded).</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.生辰给代理类<br>byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);<br>可以在测试类中添加以下内容打印出代理类:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.setProperty(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</span><br></pre></td></tr></table></figure><p>代理类内容如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.liuzhihang.tool.proxy.jdk.Subject;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getAge</span><span class="params">(String var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m3 = Class.forName(<span class="string">"com.liuzhihang.tool.proxy.jdk.Subject"</span>).getMethod(<span class="string">"getName"</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m4 = Class.forName(<span class="string">"com.liuzhihang.tool.proxy.jdk.Subject"</span>).getMethod(<span class="string">"getAge"</span>, Class.forName(<span class="string">"java.lang.String"</span>));</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出生成的$Proxy0类继承Proxy动态代理类并实现了Subject被代理接口, 实现所有方法<br>通过 super.h.invoke(this, m1, new Object[]{var1}) 内部调用了 InvocationHandler.invoke(…)方法, 通过反射调用代理实例的方法</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒汉单例模式线程安全</title>
      <link href="/2018/02/21/lazy-singleton-mode-thread-safe.html"/>
      <url>/2018/02/21/lazy-singleton-mode-thread-safe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>一个类中只有一个实例, 且能够自行实例化提供这个实例, 同时提供全局访问的方法.</p></blockquote><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>1.构造私有化: 确保外部不能使用new直接创建对象<br>2.内部静态属性创建实例<br>3.对外公共静态获取对象方法</p><a id="more"></a><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式</span></span><br><span class="line"><span class="comment"> * 1. 构造私有化: 确保外部不能使用new直接创建对象</span></span><br><span class="line"><span class="comment"> * 2. 内部静态属性创建实例</span></span><br><span class="line"><span class="comment"> * 3. 对外公共静态获取对象方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/3/27 17:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonPattern singletonPattern = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonPattern <span class="title">getSingletonPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (singletonPattern == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singletonPattern = <span class="keyword">new</span> SingletonPattern();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> singletonPattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>1.懒汉式: 懒汉模式, 项目启动时不生成对象, 而是在首次创建该对象的时候生成唯一实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式, 项目启动时不生成对象, 而是在首次创建该对象的时候生成唯一实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/2 16:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyPattern lazyPattern = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyPattern <span class="title">getLazyPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lazyPattern == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 模拟一系列耗时操作</span></span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                lazyPattern = <span class="keyword">new</span> LazyPattern();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lazyPattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.饿汉式: 项目启动时, 进行加载, 会导致项目启动较慢, 并且无论后面是否用到都会进行加载</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 饿汉式单例模式</span></span><br><span class="line"><span class="comment"> * 项目启动时, 进行加载, 会导致项目启动较慢, 并且无论后面是否用到都会进行加载</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/2 18:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungerPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungerPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungerPattern hungerPattern = <span class="keyword">new</span> HungerPattern();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungerPattern <span class="title">getHungerPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hungerPattern;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>在多线程情况下对单例模式进行测试:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/3/27 19:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadTest[] threadTests = <span class="keyword">new</span> ThreadTest[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadTests.length; i++) &#123;</span><br><span class="line">            threadTests[i] = <span class="keyword">new</span> ThreadTest();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadTests.length; i++) &#123;</span><br><span class="line">            threadTests[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 懒汉模式</span></span><br><span class="line">        System.out.println(LazyPattern.getLazyPattern().hashCode());</span><br><span class="line">        <span class="comment">// 饿汉模式</span></span><br><span class="line">        <span class="comment">// System.out.println(HungerPattern.getHungerPattern().hashCode());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p>1.饿汉模式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\jdk1.8\bin\java.exe . . .</span><br><span class="line">1294123621</span><br><span class="line">1294123621</span><br><span class="line">1294123621</span><br><span class="line">1294123621</span><br><span class="line">1294123621</span><br><span class="line">1294123621</span><br><span class="line">1294123621</span><br><span class="line">1294123621</span><br><span class="line">1294123621</span><br><span class="line">1294123621</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>2.懒汉模式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\jdk1.8\bin\java.exe . . .</span><br><span class="line">140919816</span><br><span class="line">1359128134</span><br><span class="line">1385166630</span><br><span class="line">924507082</span><br><span class="line">67641385</span><br><span class="line">508832262</span><br><span class="line">574926395</span><br><span class="line">140919816</span><br><span class="line">1442414714</span><br><span class="line">896298396</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>结论: 在懒汉单例模式下不能保证线程的安全性</p><h3 id="懒汉模式的线程安全优化"><a href="#懒汉模式的线程安全优化" class="headerlink" title="懒汉模式的线程安全优化"></a>懒汉模式的线程安全优化</h3><p>饿汉模式会造成资源浪费, 启动慢等结果, 下面对懒汉模式进行线程安全优化.</p><h4 id="synchronized-锁住静态方法"><a href="#synchronized-锁住静态方法" class="headerlink" title="synchronized 锁住静态方法"></a>synchronized 锁住静态方法</h4><p>锁住静态方法 类级锁 影响范围较大, 导致效率相对较低</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式</span></span><br><span class="line"><span class="comment"> * 在方法上添加 synchronized 关键字 锁类</span></span><br><span class="line"><span class="comment"> * 同步方法的方式, 导致效率相对较低</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/3 14:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncLazyPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SyncLazyPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SyncLazyPattern syncLazyPattern = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SyncLazyPattern <span class="title">getSyncLazyPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (syncLazyPattern == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                syncLazyPattern = <span class="keyword">new</span> SyncLazyPattern();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> syncLazyPattern;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="synchronized-锁住代码块"><a href="#synchronized-锁住代码块" class="headerlink" title="synchronized 锁住代码块"></a>synchronized 锁住代码块</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.demo.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 锁代码块的方式虽然可以保证结果一致性</span></span><br><span class="line"><span class="comment"> * 但锁住很多操作, 同样会导致效率低下</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/3 15:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncCodeBlockLazyPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SyncCodeBlockLazyPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SyncCodeBlockLazyPattern syncCodeBlockLazyPattern = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SyncCodeBlockLazyPattern <span class="title">getSyncCodeBlockLazyPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 锁住具体执行业务逻辑的代码</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SyncCodeBlockLazyPattern<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (syncCodeBlockLazyPattern == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    syncCodeBlockLazyPattern = <span class="keyword">new</span> SyncCodeBlockLazyPattern();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> syncCodeBlockLazyPattern;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双重检查锁机制-推荐"><a href="#双重检查锁机制-推荐" class="headerlink" title="双重检查锁机制(推荐)"></a>双重检查锁机制(推荐)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.demo.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重锁检查机制, 仅锁住创建对象的部分代码</span></span><br><span class="line"><span class="comment"> * 注意: 在对象前 添加 volatile 关键字 确保可见性, 即 每次获取值从主内存中获取, 同时防止指令重排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/3 15:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboCheckLockLazyPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DubboCheckLockLazyPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DubboCheckLockLazyPattern dubboCheckLockLazyPattern = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DubboCheckLockLazyPattern <span class="title">getDubboCheckLockLazyPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dubboCheckLockLazyPattern == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 一系列操作</span></span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (DubboCheckLockLazyPattern<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// 二次检查</span></span><br><span class="line">                    <span class="keyword">if</span> (dubboCheckLockLazyPattern == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        dubboCheckLockLazyPattern = <span class="keyword">new</span> DubboCheckLockLazyPattern();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dubboCheckLockLazyPattern;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poi读写Excel简单介绍</title>
      <link href="/2018/02/15/poi-read-and-write-excel-brief-introduction.html"/>
      <url>/2018/02/15/poi-read-and-write-excel-brief-introduction.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Apache POI 可以对Microsoft Office 进行操作, 下面是工作中使用的对Excel进行读写操作的常用方式.</p></blockquote><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- excel poi --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>主要介绍读写时, 分别常用到的一些对象及其含义, 方便自己编写util.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.tool.excel.poi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/20 16:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// readerTest();</span></span><br><span class="line">        writerTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writerTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"c:Users/liuzhihang/Desktop/test.xlsx"</span>);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"读取的文件存在!"</span>);</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">        <span class="comment">// 操作 .xls 的 workbook</span></span><br><span class="line">        Workbook hssfWorkbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        <span class="comment">// 操作 .xlsx 的 workbook</span></span><br><span class="line">        XSSFWorkbook xssfWorkbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 sheet 页</span></span><br><span class="line">        XSSFSheet sheet = xssfWorkbook.createSheet();</span><br><span class="line">        <span class="comment">// 创建 0 行 操作对象</span></span><br><span class="line">        Row row0 = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 创建单元格并赋值</span></span><br><span class="line">        row0.createCell(<span class="number">0</span>).setCellValue(<span class="string">"序号"</span>);</span><br><span class="line"></span><br><span class="line">        OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        <span class="comment">// 写入文件</span></span><br><span class="line">        xssfWorkbook.write(outputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readerTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"c:Users/liuzhihang/Desktop/parkingLotTempLate.xlsx"</span>);</span><br><span class="line"></span><br><span class="line">        Workbook workBook = ExcelUtil.getWorkBook(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 excel 页</span></span><br><span class="line">        <span class="comment">// Sheet sheetByIndex = workBook.getSheetAt(0);</span></span><br><span class="line">        <span class="comment">// Sheet sheetByName = workBook.getSheet("Sheet0");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 操作 sheet</span></span><br><span class="line">        Sheet sheet = workBook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 获取最后一行行数 从 0 开始</span></span><br><span class="line">        <span class="keyword">int</span> lastRowNum = sheet.getLastRowNum();</span><br><span class="line">        <span class="comment">// 获取总行数</span></span><br><span class="line">        <span class="keyword">int</span> physicalNumberOfRows = sheet.getPhysicalNumberOfRows();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 操作行 获取第0行</span></span><br><span class="line">        Row row = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">        String value = row.getCell(<span class="number">0</span>).getStringCellValue();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ExcelUtil-简单工具"><a href="#ExcelUtil-简单工具" class="headerlink" title="ExcelUtil 简单工具"></a>ExcelUtil 简单工具</h3><p>poi读写 excel 的简单工具 <a href="https://github.com/liuzhihangs/my_project/blob/master/my_project_tool/src/main/java/com/liuzhihang/tool/excel/poi/ExcelUtil.java">ExcelUtil</a>, 实际工作中可结合javaBean使用并重新编写util.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.tool.excel.poi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/20 12:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取两列excel 返回第二列的集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workbook</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">readExcelForTwoColumns</span><span class="params">(Workbook workbook)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (workbook == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"获取 workbook 为null"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//获取总行数</span></span><br><span class="line">            <span class="keyword">int</span> rowNum = sheet.getLastRowNum();</span><br><span class="line">            <span class="comment">//正文内容应该从第二行开始，第一行为文件的标头的标题</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowNum; i++) &#123;</span><br><span class="line">                Row row = sheet.getRow(i + <span class="number">1</span>);</span><br><span class="line">                String value = getCellValue(row.getCell(<span class="number">1</span>)).toString();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</span><br><span class="line">                    list.add(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写 excel</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writerExcelForTwoColumns</span><span class="params">(File excelFile, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputStream = <span class="keyword">new</span> FileOutputStream(excelFile);</span><br><span class="line"></span><br><span class="line">            Workbook workBook = <span class="keyword">null</span>;</span><br><span class="line">            String fileName = excelFile.getName();</span><br><span class="line">            <span class="keyword">if</span> (fileName.endsWith(<span class="string">".xls"</span>)) &#123;</span><br><span class="line">                workBook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileName.endsWith(<span class="string">".xlsx"</span>)) &#123;</span><br><span class="line">                workBook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">"文件格式不正确!, 当前文件名:&#123;&#125;"</span>, fileName);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件格式不正确"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建第 0 页</span></span><br><span class="line">            Sheet sheet = workBook.createSheet();</span><br><span class="line">            Row row1 = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            row1.createCell(<span class="number">0</span>).setCellValue(<span class="string">"序号"</span>);</span><br><span class="line">            row1.createCell(<span class="number">1</span>).setCellValue(<span class="string">"编号"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                Row row = sheet.createRow(i + <span class="number">1</span>);</span><br><span class="line">                row.createCell(<span class="number">0</span>).setCellValue(i + <span class="number">1</span>);</span><br><span class="line">                row.createCell(<span class="number">1</span>).setCellValue(list.get(i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            workBook.write(outputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"写excel失败"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取工作表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Workbook <span class="title">getWorkBook</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String fileName = file.getName();</span><br><span class="line">        Workbook workbook = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            <span class="keyword">if</span> (fileName.endsWith(<span class="string">".xls"</span>)) &#123;</span><br><span class="line">                workbook = <span class="keyword">new</span> HSSFWorkbook(inputStream);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileName.endsWith(<span class="string">".xlsx"</span>)) &#123;</span><br><span class="line">                workbook = <span class="keyword">new</span> XSSFWorkbook(inputStream);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">"文件格式不正确!, 当前文件名:&#123;&#125;"</span>, fileName);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件格式不正确"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workbook;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单元格的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getCellValue</span><span class="params">(Cell cell)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cell != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (cell.getCellTypeEnum()) &#123;</span><br><span class="line">                <span class="comment">// 数字</span></span><br><span class="line">                <span class="keyword">case</span> NUMERIC:</span><br><span class="line">                    <span class="keyword">return</span> cell.getNumericCellValue();</span><br><span class="line">                <span class="comment">// 字符串</span></span><br><span class="line">                <span class="keyword">case</span> STRING:</span><br><span class="line">                    <span class="keyword">return</span> cell.getStringCellValue();</span><br><span class="line">                <span class="comment">// 公式</span></span><br><span class="line">                <span class="keyword">case</span> FORMULA:</span><br><span class="line">                    <span class="keyword">return</span> cell.getCellFormula();</span><br><span class="line">                <span class="comment">// 布尔</span></span><br><span class="line">                <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                    <span class="keyword">return</span> cell.getBooleanCellValue();</span><br><span class="line">                <span class="keyword">case</span> ERROR:</span><br><span class="line">                    <span class="keyword">return</span> cell.getErrorCellValue();</span><br><span class="line">                <span class="comment">// 空</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poi </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>protostuff序列化工具</title>
      <link href="/2018/02/05/protostuff-serialization-tool.html"/>
      <url>/2018/02/05/protostuff-serialization-tool.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在很多地方都需要用到序列化, 比如在使用redis缓存对象时, 一般情况是实现java Serializable接口. 简单介绍下在慕课网学习到的一个新的序列化工具 —- protostuff.</p><p>在学习中介绍使用该工具可以大大减少对象序列化后字节所占空间, 并提高序列化时间等.</p><p>1.<a href="https://www.imooc.com/video/11823">慕课网课程地址</a><br>2.<a href="https://github.com/eishay/jvm-serializers/wiki">序列化相关工具比较</a></p><a id="more"></a><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- protostuff 序列化工具 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protostuff-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protostuff-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相关使用"><a href="#相关使用" class="headerlink" title="相关使用"></a>相关使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.dyuproject.protostuff.LinkedBuffer;</span><br><span class="line"><span class="keyword">import</span> com.dyuproject.protostuff.ProtostuffIOUtil;</span><br><span class="line"><span class="keyword">import</span> com.dyuproject.protostuff.runtime.RuntimeSchema;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/18 15:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtostuffUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">byte</span>[] serialize(T t, Class&lt;T&gt; cls) &#123;</span><br><span class="line"></span><br><span class="line">        RuntimeSchema&lt;T&gt; schema = RuntimeSchema.createFrom(cls);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ProtostuffIOUtil.toByteArray(t, schema, LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">unSerialize</span><span class="params">(<span class="keyword">byte</span>[] bytes, Class&lt;T&gt; cls)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RuntimeSchema&lt;T&gt; schema = RuntimeSchema.createFrom(cls);</span><br><span class="line">        T message = schema.newMessage();</span><br><span class="line">        ProtostuffIOUtil.mergeFrom(bytes, message, schema);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/17 19:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/17 19:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtostuffTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="string">"test0001"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"测试用户0001"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(JSON.toJSONString(user));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] serialize = ProtostuffUtil.serialize(user, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        User unSerialize = ProtostuffUtil.unSerialize(serialize, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        System.err.println(JSON.toJSONString(unSerialize));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"test0001"</span>,<span class="string">"userName"</span>:<span class="string">"测试用户0001"</span>&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"test0001"</span>,<span class="string">"userName"</span>:<span class="string">"测试用户0001"</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> serialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transactional声明式事务</title>
      <link href="/2018/01/27/transactional-declarative-transaction.html"/>
      <url>/2018/01/27/transactional-declarative-transaction.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>1.声明式事务管理建立在AOP之上的. 其本质是对方法前后进行拦截, 然后在目标方法开始之前创建或者加入一个事务, 在执行完目标方法之后根据执行情况提交或者回滚事务.<br>2.声明式事务最大的优点就是不需要通过编程的方式管理事务, 这样就不需要在业务逻辑代码中掺杂事务管理的代码, 只需在配置文件中做相关的事务规则声明(或通过基于@Transactional注解的方式), 便可以将事务规则应用到业务逻辑中.<br>3.声明式事务不足的地方在于, 与编程式事务相比, 只能作用到方法级别, 无法像编程式事务那样可以作用到代码块级别.</p><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><p>1.添加命名空间</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>  <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">.</span> <span class="attr">.</span> <span class="attr">.</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        . . .</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.添加相关事务支持</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指向数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"masterDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启事务的Annotation支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Transactional注解-使用"><a href="#Transactional注解-使用" class="headerlink" title="@Transactional注解 使用"></a>@Transactional注解 使用</h3><p>@Transactional 可以作用于接口,接口方法,类以及类方法上. 只需要在相应接口,类或方法上加上@Transactional注解即可.</p><h3 id="Transactional-注解介绍"><a href="#Transactional-注解介绍" class="headerlink" title="@Transactional 注解介绍"></a>@Transactional 注解介绍</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;) : 可用于接口, 类, 枚举, 注解, 方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Retention</span>(RetentionPolicy.RUNTIME) : 注解会在class字节码文件中存在，在运行时可以通过反射获取到</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Inherited</span> :　子类可以继承父类中的注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Documented</span> : 注解将被包含在javadoc中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Transactional &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务管理器的别名</span></span><br><span class="line"><span class="comment">     * 系统指定多个事务管理器时可通过别名进行区分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可通过在 transactionManager 中设置 &lt;qualifier value="managerOne"/&gt; 属性类指定名称</span></span><br><span class="line"><span class="comment">     * 可用于确定目标事务管理器，匹配特定的限定符值（或bean名称）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    <span class="function">String <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务的传播机制</span></span><br><span class="line"><span class="comment">     * 默认 Propagation.REQUIRED</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Propagation <span class="title">propagation</span><span class="params">()</span> <span class="keyword">default</span> Propagation.REQUIRED</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务的隔离级别</span></span><br><span class="line"><span class="comment">     * 默认 Isolation.DEFAULT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Isolation <span class="title">isolation</span><span class="params">()</span> <span class="keyword">default</span> Isolation.DEFAULT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务超时时间</span></span><br><span class="line"><span class="comment">     * 默认 TransactionDefinition.TIMEOUT_DEFAULT 即 -1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">timeout</span><span class="params">()</span> <span class="keyword">default</span> TransactionDefinition.TIMEOUT_DEFAULT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置事务只读</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">readOnly</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚</span></span><br><span class="line"><span class="comment">     * rollbackFor = Exception.class 或 rollbackFor = &#123;RuntimeException.class, Exception.class&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? extends Throwable&gt;[] rollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时, 事务进行回滚</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] rollbackForClassName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则不进行事务回滚</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? extends Throwable&gt;[] noRollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时, 事务不进行回滚</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] noRollbackForClassName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传播行为介绍"><a href="#传播行为介绍" class="headerlink" title="传播行为介绍"></a>传播行为介绍</h3><p>事务的传播行为, 一共 7 种<br>1.枚举介绍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Propagation &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持当前事务, 如果不存在, 则创建一个新事务</span></span><br><span class="line"><span class="comment">     * 事务的默认设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持当前事务, 如果不存在, 则以非事务方式执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持当前事务, 如果不存在则抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始一个新的事务, 并暂停当前事务(如果存在)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以非事务方式执行, 暂停当前事务(如果存在)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以非事务方式执行, 如果存在则抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NEVER(TransactionDefinition.PROPAGATION_NEVER),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果当前事务存在, 则在嵌套事务中执行.</span></span><br><span class="line"><span class="comment">     * 如果事务不存在, 则等同于 PROPAGATION_REQUIRED</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NESTED(TransactionDefinition.PROPAGATION_NESTED);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    Propagation(<span class="keyword">int</span> value) &#123; <span class="keyword">this</span>.value = value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.value; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.列表</p><table><thead><tr><th>Propagation</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED</td><td>支持当前事务, 如果不存在, 则创建一个新事务</td></tr><tr><td>SUPPORTS</td><td>支持当前事务, 如果不存在, 则以非事务方式执行</td></tr><tr><td>MANDATORY</td><td>支持当前事务, 如果不存在则抛出异常</td></tr><tr><td>REQUIRES_NEW</td><td>开始一个新的事务, 并暂停当前事务(如果存在)</td></tr><tr><td>NOT_SUPPORTED</td><td>以非事务方式执行, 暂停当前事务(如果存在)</td></tr><tr><td>NEVER</td><td>以非事务方式执行, 如果存在则抛出异常</td></tr><tr><td>NESTED</td><td>如果当前事务存在, 则在嵌套事务中执行. 如果事务不存在, 则等同于 PROPAGATION_REQUIRED</td></tr></tbody></table><h3 id="隔离级别介绍"><a href="#隔离级别介绍" class="headerlink" title="隔离级别介绍"></a>隔离级别介绍</h3><p>1.枚举介绍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Isolation &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用底层数据存储默认的隔离级别</span></span><br><span class="line"><span class="comment">     * 一般存储底层默认为: READ_COMMITTED</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读未提交</span></span><br><span class="line"><span class="comment">     * 会出现脏读和不可重复读, 一般不使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读已提交</span></span><br><span class="line"><span class="comment">     * 该级别仅禁止事务读取其中未提交更改的行</span></span><br><span class="line"><span class="comment">     * 可能会出现不可重复读取和幻像读取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可重复读</span></span><br><span class="line"><span class="comment">     * 禁止事务读取其中有未提交更改的行, 并且还禁止一个事务读取一行, 第二个事务更改该行. 并且第一个事务重新读取该行, 第二次获取不同值的情况</span></span><br><span class="line"><span class="comment">     * 即 禁止 读未提交, 不可重复读</span></span><br><span class="line"><span class="comment">     * 会出现幻读</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 串行</span></span><br><span class="line"><span class="comment">     * 所有事物依次执行, 不会影响别的事务, 所以会防止 不可重复读 脏读 幻读</span></span><br><span class="line"><span class="comment">     * 会影响性能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    Isolation(<span class="keyword">int</span> value) &#123; <span class="keyword">this</span>.value = value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.value; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.列表</p><table><thead><tr><th>Isolation</th><th>含义</th></tr></thead><tbody><tr><td>DEFAULT</td><td>使用底层数据存储默认的隔离级别, 一般存储底层默认为: READ_COMMITTED</td></tr><tr><td>READ_UNCOMMITTED</td><td>读未提交, 会出现脏读和不可重复读, 一般不使用</td></tr><tr><td>READ_COMMITTED</td><td>该级别仅禁止事务读取其中未提交更改的行. 可能会出现不可重复读取和幻像读取</td></tr><tr><td>REPEATABLE_READ</td><td>可重复读, 禁止事务读取其中有未提交更改的行, 并且还禁止一个事务读取一行, 第二个事务更改该行. 并且第一个事务重新读取该行, 第二次获取不同值的情况. 即 禁止 读未提交, 不可重复读. 会出现幻读</td></tr><tr><td>SERIALIZABLE</td><td>串行, 所有事物依次执行, 不会影响别的事务, 所以会防止 不可重复读 脏读 幻读. 会影响性能</td></tr></tbody></table><p>3.脏读 幻读 不可重复读</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>脏读</td><td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</td></tr><tr><td>幻读</td><td>事务读取时不存在该数据, 读取后发现该数据存在. 中间因为别的事务在进行插入操作</td></tr><tr><td>不可重复读</td><td>一个事务在读取该数据时另一个事务在修改该数据, 导致多次读取数据内容不一致</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> transactional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数包装类型的缓存</title>
      <link href="/2018/01/15/integer-wrapper-type-cache.html"/>
      <url>/2018/01/15/integer-wrapper-type-cache.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>部分包装类型存在缓存机制, 会在JVM启动时, 缓存一定数量的对象, 有助于节省内存, 提高性能.</p></blockquote><h3 id="缓存区间"><a href="#缓存区间" class="headerlink" title="缓存区间"></a>缓存区间</h3><table><thead><tr><th>类型</th><th>范围</th><th>是否修改</th></tr></thead><tbody><tr><td>Integer</td><td>-128 到 127</td><td>true : -XX:AutoBoxCacheMax=size 修改</td></tr><tr><td>ByteCache</td><td>-128 到 127</td><td>false</td></tr><tr><td>ShortCache</td><td>-128 到 127</td><td>false</td></tr><tr><td>LongCache</td><td>-128 到 127</td><td>false</td></tr><tr><td>CharacterCache</td><td>0 到 127</td><td>false</td></tr></tbody></table><a id="more"></a><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer a = <span class="number">100</span>;</span><br><span class="line">Integer b = <span class="number">100</span>;</span><br><span class="line">Integer c = <span class="number">1000</span>;</span><br><span class="line">Integer d = <span class="number">1000</span>;</span><br><span class="line">Integer e = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">Integer f = Integer.valueOf(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(a == b); <span class="comment">// true</span></span><br><span class="line">System.out.println(c == d); <span class="comment">// false</span></span><br><span class="line">System.out.println(a == e); <span class="comment">// false</span></span><br><span class="line">System.out.println(f == e); <span class="comment">// false</span></span><br><span class="line">System.out.println(a == f); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>== 在比较对象时, 判断是否指向同一地址</p><p>a b f 都是从缓存中取出数据, 所以地址是相同的</p><p>c d 不在缓存范围内, 所以是新的对象</p><p>e 是新对象</p><h3 id="IntegerCache"><a href="#IntegerCache" class="headerlink" title="IntegerCache"></a>IntegerCache</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">            String integerCacheHighPropValue =</span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以通过设置 java.lang.Integer.IntegerCache.high 来修改缓存的值. 方法为修改 JVM 的启动参数 -XX:AutoBoxCacheMax=size</p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interceptor拦截器</title>
      <link href="/2018/01/10/interceptor.html"/>
      <url>/2018/01/10/interceptor.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Interceptor: 拦截器，作用类似 Filter, 主要作用是拦截用户请求, 在 Action 执行的前后各执行一段代码, 进行相应的业务处理.</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>权限认证<br>统一逻辑处理<br>日志监控等</p><a id="more"></a><h3 id="使用方式及方法介绍"><a href="#使用方式及方法介绍" class="headerlink" title="使用方式及方法介绍"></a>使用方式及方法介绍</h3><p>使用方式分为两种, 一种为: 实现HandlerInterceptor接口或者是继承实现了HandlerInterceptor接口的类, 另一种为: 实现Spring的WebRequestInterceptor接口, 或者是继承实现了WebRequestInterceptor的类.<br>1.HandlerInterceptor 介绍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求处理之前调用 链式 会按照声明顺序依次执行</span></span><br><span class="line"><span class="comment">     * 返回 true 则继续执行下一个 Interceptor 无则执行 Controller</span></span><br><span class="line"><span class="comment">     * 返回 false 请求结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在请求处理之后，DispatcherServlet进行视图返回渲染之前进行调用，可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作。</span></span><br><span class="line"><span class="comment">     * 调度程序Servlet在执行链中处理一个处理程序，由任意数量的拦截器组成，处理器本身在最后。 使用这种方法，每个拦截器可以后处理一个执行，并按照执行链的相反顺序进行应用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求处理完成后的回调，即渲染视图后的回调。 将被调用处理程序执行的任何结果，从而允许适当的资源清理。</span></span><br><span class="line"><span class="comment">     * 注意：只有当这个拦截器的预处理方法已经成功完成并返回时才会被调用</span></span><br><span class="line"><span class="comment">     * 与postHandle方法一样，该方法将以相反的顺序在链中的每个拦截器上调用，因此第一个拦截器将成为最后被调用的拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.WebRequestInterceptor 介绍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.context.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebRequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在调用之前拦截请求处理程序的执行。 允许准备上下文资源（如Hibernate Session）并将它们公开为请求属性或线程本地对象.</span></span><br><span class="line"><span class="comment">     * 即 准备一些需要的资源, 例如, 将请求属性放置到 WebRequest 中</span></span><br><span class="line"><span class="comment">     * 无返回对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preHandle</span><span class="params">(WebRequest request)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在视图呈现前（如果有的话）在成功调用之后拦截请求处理程序的执行。</span></span><br><span class="line"><span class="comment">     * 允许在成功处理程序执行后修改上下文资源（例如，刷新休眠会话）</span></span><br><span class="line"><span class="comment">     * 可以通过修改 ModelMap 的属性来改变你返回的试图模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(WebRequest request, ModelMap model)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求处理完成后的回调，即渲染视图后的回调。 将被调用处理程序执行的任何结果，从而允许适当的资源清理。</span></span><br><span class="line"><span class="comment">     * 注意：只有在拦截器的预处理方法成功完成时才会调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(WebRequest request, Exception ex)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xml-配置"><a href="#xml-配置" class="headerlink" title="xml 配置"></a>xml 配置</h3><p>1.在 *-servlet.xml 中添加 MVC schema</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:mvc="http://www.springframework.org/schema/mvc"</span><br><span class="line">xsi:schemaLocation=" http://www.springframework.org/schema/mvc</span><br><span class="line">http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span><br></pre></td></tr></table></figure><p>2.配置 mvc:interceptors 标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拦截路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定拦截器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.liuzhihang.myprojext.controller.interceptor.RequestInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.myprojext.controller.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> interceptor </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>utils工具--ValidationUtil 参数校验</title>
      <link href="/2017/12/30/utils-tool-validationutil-parameter-check.html"/>
      <url>/2017/12/30/utils-tool-validationutil-parameter-check.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在工作中不可避免的要面对很多参数校验, 比如写新接口时需要对传入VO的必要字段进行校验, String 是否为空, Integer 最小值, 对象是否为null, 等等.<br>而使用 hibernate的validator工具对参数进行校验, 可以极大的简化流程, 当然不可避免的就是需要在被校验字段上加上注解信息.</p><h6 id="1-相关依赖"><a href="#1-相关依赖" class="headerlink" title="1. 相关依赖"></a>1. 相关依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 参数校验工具 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.web<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>el-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="2-ValidationUtil"><a href="#2-ValidationUtil" class="headerlink" title="2. ValidationUtil"></a>2. ValidationUtil</h6><p>对加上相关注解字段进行校验, 使用到 <a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/xml/JaxbUtil.java">ValidationUtil.java</a>和<a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/validate/ValidationResult.java">ValidationResult.java</a>两个文件, 也可在工具中直接抛出异常.</p><p>ValidationUtil 内容如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.tool.validate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validator;</span><br><span class="line"><span class="keyword">import</span> java.beans.IntrospectionException;</span><br><span class="line"><span class="keyword">import</span> java.beans.Introspector;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对添加 hibernate.validator 注解的字段进行校验</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用前 需要引入 hibernate-validator 依赖</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/22 11:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Validator validator = Validation.buildDefaultValidatorFactory().getValidator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会 验证 所有字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回所有不符合的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ValidationResult <span class="title">validateAllField</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">        ValidationResult result = <span class="keyword">new</span> ValidationResult(<span class="keyword">true</span>);</span><br><span class="line">        StringBuilder errorMsg = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.setHasPass(<span class="keyword">false</span>);</span><br><span class="line">            result.setErrorMsg(<span class="string">"The class is null!"</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;ConstraintViolation&lt;T&gt;&gt; violationSet = validator.validate(obj);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(violationSet)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ConstraintViolation&lt;T&gt; violation : violationSet) &#123;</span><br><span class="line">                errorMsg.append(violation.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            result.setHasPass(<span class="keyword">false</span>);</span><br><span class="line">            result.setErrorMsg(errorMsg.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证指定字段 是否符合信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fieldName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ValidationResult <span class="title">validateOneField</span><span class="params">(T obj, String fieldName)</span> </span>&#123;</span><br><span class="line">        ValidationResult result = <span class="keyword">new</span> ValidationResult(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.setHasPass(<span class="keyword">false</span>);</span><br><span class="line">            result.setErrorMsg(<span class="string">"The class is null!"</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;T&gt;&gt; violationSet = validator.validateProperty(obj, fieldName);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(violationSet)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ConstraintViolation&lt;T&gt; violation : violationSet) &#123;</span><br><span class="line">                result.setHasPass(<span class="keyword">false</span>);</span><br><span class="line">                result.setErrorMsg(violation.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证 所有字段, 当第一个不符合时 则直接返回信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ValidationResult <span class="title">validateAllFieldForOneBack</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">        ValidationResult result = <span class="keyword">new</span> ValidationResult(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.setHasPass(<span class="keyword">false</span>);</span><br><span class="line">            result.setErrorMsg(<span class="string">"The class is null!"</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PropertyDescriptor[] propertyDescriptors = Introspector.getBeanInfo(obj.getClass()).getPropertyDescriptors();</span><br><span class="line">            <span class="keyword">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) &#123;</span><br><span class="line">                result = validateOneField(obj, propertyDescriptor.getName());</span><br><span class="line">                <span class="keyword">if</span> (result.getHasPass()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IntrospectionException e) &#123;</span><br><span class="line">            result.setHasPass(<span class="keyword">false</span>);</span><br><span class="line">            result.setErrorMsg(<span class="string">"This validate has error : "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ValidationResult 内容如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.tool.validate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/1/6 17:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean hasPass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String errorMsg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidationResult</span><span class="params">(Boolean hasPass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hasPass = hasPass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getHasPass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasPass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHasPass</span><span class="params">(Boolean hasPass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hasPass = hasPass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorMsg</span><span class="params">(String errorMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorMsg = errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ValidationResult&#123;"</span> +</span><br><span class="line">                <span class="string">"hasPass="</span> + hasPass +</span><br><span class="line">                <span class="string">", errorMsg='"</span> + errorMsg + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-常用注解"><a href="#3-常用注解" class="headerlink" title="3. 常用注解"></a>3. 常用注解</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Bean Validation 中内置的 constraint</span><br><span class="line">@Null   被注释的元素必须为 null</span><br><span class="line">@NotNull    被注释的元素必须不为 null</span><br><span class="line">@AssertTrue     被注释的元素必须为 true</span><br><span class="line">@AssertFalse    被注释的元素必须为 false</span><br><span class="line">@Min(value)     被注释的元素必须是一个数字，其值必须大于等于指定的最小值</span><br><span class="line">@Max(value)     被注释的元素必须是一个数字，其值必须小于等于指定的最大值</span><br><span class="line">@DecimalMin(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值</span><br><span class="line">@DecimalMax(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值</span><br><span class="line">@Size(max&#x3D;, min&#x3D;)   被注释的元素的大小必须在指定的范围内</span><br><span class="line">@Digits (integer, fraction)     被注释的元素必须是一个数字，其值必须在可接受的范围内</span><br><span class="line">@Past   被注释的元素必须是一个过去的日期</span><br><span class="line">@Future     被注释的元素必须是一个将来的日期</span><br><span class="line">@Pattern(regex&#x3D;,flag&#x3D;)  被注释的元素必须符合指定的正则表达式</span><br><span class="line"></span><br><span class="line">Hibernate Validator 附加的 constraint</span><br><span class="line">@NotBlank(message &#x3D;)   验证字符串非null，且长度必须大于0</span><br><span class="line">@Email  被注释的元素必须是电子邮箱地址</span><br><span class="line">@Length(min&#x3D;,max&#x3D;)  被注释的字符串的大小必须在指定的范围内</span><br><span class="line">@NotEmpty   被注释的字符串的必须非空</span><br><span class="line">@Range(min&#x3D;,max&#x3D;,message&#x3D;)  被注释的元素必须在合适的范围内</span><br></pre></td></tr></table></figure><h6 id="4-测试示例"><a href="#4-测试示例" class="headerlink" title="4 测试示例"></a>4 测试示例</h6><p><a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/validate/ValidationVo.java">代码</a>:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.tool.validate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/22 18:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"The name must notEmpty!"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"The age must notNull!"</span>)</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">1</span>, message = <span class="string">"The age must greater than 0!"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ValidationVo validationVo = <span class="keyword">new</span> ValidationVo();</span><br><span class="line">        System.out.println(ValidationUtil.validateAllField(validationVo).toString());</span><br><span class="line">        validationVo.setAge(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ValidationUtil.validateAllField(validationVo).toString());</span><br><span class="line">        validationVo.setName(<span class="string">"二蛋"</span>);</span><br><span class="line">        System.out.println(ValidationUtil.validateAllField(validationVo).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ValidationResult&#123;hasPass&#x3D;false, errorMsg&#x3D;&#39;The name must notEmpty!The age must notNull!&#39;&#125;</span><br><span class="line">ValidationResult&#123;hasPass&#x3D;false, errorMsg&#x3D;&#39;The name must notEmpty!&#39;&#125;</span><br><span class="line">ValidationResult&#123;hasPass&#x3D;true, errorMsg&#x3D;&#39;null&#39;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> validation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml解析--dom4j</title>
      <link href="/2017/12/30/xml-parsing-dom4j.html"/>
      <url>/2017/12/30/xml-parsing-dom4j.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在工作中有时候会用到dom4j对xml文件或者字符串进行解析, 以下内容为随手笔记, 防止以后遗忘.</p><h5 id="1-相关依赖"><a href="#1-相关依赖" class="headerlink" title="1. 相关依赖"></a>1. 相关依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dom4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="2-获取dom对象"><a href="#2-获取dom对象" class="headerlink" title="2. 获取dom对象"></a>2. 获取dom对象</h5><p>获取dom对象方式主要以下几种:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取 xml 文件 方式</span></span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">Document doc1 = reader.read(<span class="keyword">new</span> File(<span class="string">"src/main/java/com/liuzhihang/tool/xml/alipay.xml"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 xml 文本 方式</span></span><br><span class="line">String aliPayStr = XmlTest.getAliPayStr();</span><br><span class="line">Document doc2 = DocumentHelper.parseText(aliPayStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主动创建</span></span><br><span class="line">Document doc3 = DocumentHelper.createDocument();</span><br><span class="line">Element element = doc3.addElement(<span class="string">"Test"</span>);</span><br></pre></td></tr></table></figure><h6 id="3-操作dom对象"><a href="#3-操作dom对象" class="headerlink" title="3. 操作dom对象"></a>3. 操作dom对象</h6><p>当获取到dom对象后便可以通过以下方式对dom进行操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取根节点</span></span><br><span class="line">Element rootElement = dom.getRootElement();</span><br><span class="line"><span class="comment">// System.out.println(rootElement.getName());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子节点</span></span><br><span class="line">Element element = rootElement.element(<span class="string">"response"</span>).element(<span class="string">"alipay"</span>);</span><br><span class="line"><span class="comment">// System.out.println(element.asXML());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取节点的文字</span></span><br><span class="line">String text = element.element(<span class="string">"alipay_buyer_login_id"</span>).getText();</span><br><span class="line"><span class="comment">// System.out.println(text);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取节点下的所有节点 快捷键 iter / itco</span></span><br><span class="line">List elements = element.elements();</span><br><span class="line"><span class="comment">// for (Object o : elements) &#123;</span></span><br><span class="line"><span class="comment">//     Element tempElement = (Element) o;</span></span><br><span class="line"><span class="comment">//     System.out.println(tempElement.getName() + "\t" + tempElement.getText());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// for (Iterator iterator = elements.iterator(); iterator.hasNext(); ) &#123;</span></span><br><span class="line"><span class="comment">//     Element next =  (Element)iterator.next();</span></span><br><span class="line"><span class="comment">//     System.out.println(next.getName() + "\t" + next.getText());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取节点下所有节点 Iterator对象 快捷键 itit</span></span><br><span class="line">Iterator iterator = element.elementIterator();</span><br><span class="line"><span class="comment">// while (iterator.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">//     Element next =  (Element)iterator.next();</span></span><br><span class="line"><span class="comment">//     System.out.println(next.getName() + "\t" + next.getText());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加节点</span></span><br><span class="line">Element testElement = element.addElement(<span class="string">"testElement"</span>);</span><br><span class="line"><span class="comment">// 指定添加文字</span></span><br><span class="line">testElement.setText(<span class="string">"测试添加文字"</span>);</span><br><span class="line">System.out.println(element.asXML());</span><br><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line"><span class="keyword">boolean</span> remove = element.remove(testElement);</span><br><span class="line">System.out.println(remove + <span class="string">"\n"</span> + element.asXML());</span><br></pre></td></tr></table></figure><h6 id="4-详细代码"><a href="#4-详细代码" class="headerlink" title="4. 详细代码"></a>4. 详细代码</h6><p><a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/xml/Dom4jTest.java">Dom4jTest.java</a></p>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml解析--JaxbUtil</title>
      <link href="/2017/12/17/xml-parsing-jaxbutil.html"/>
      <url>/2017/12/17/xml-parsing-jaxbutil.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要介绍使用jaxb对xml进行解析, 互转.</p><p>jaxb 是相对较多的xml工具, 只需要在javaBean的属性上添加相应注解, 就可以使用工具进行解析. 具体使用过程如下:</p><h5 id="1-编写javaBean并添加注解"><a href="#1-编写javaBean并添加注解" class="headerlink" title="1. 编写javaBean并添加注解"></a>1. 编写javaBean并添加注解</h5><p>使用过程中一般常用@XmlRootElement, @XmlAccessorType, @XmlElement, @XmlAttribute四个注解, 其余使用方式可以再自行深入研究.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement</span>: 根元素</span><br><span class="line"><span class="meta">@XmlAccessorType</span>: java对象生成xml文件时对java对象属性的访问方式</span><br><span class="line">    属性为XmlAccessType.FIELD 指java所有成员变量</span><br><span class="line"><span class="meta">@XmlElement</span>: 子节点, name 可指定节点名</span><br><span class="line"><span class="meta">@XmlAttribute</span>: 映射为xml文件的属性, name 可指定属性名</span><br></pre></td></tr></table></figure><a id="more"></a><p>javaBean:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@XmlRootElement</span>(name = <span class="string">"alipay"</span>)</span><br><span class="line"><span class="meta">@XmlAccessorType</span>(XmlAccessType.FIELD)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPayXml</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlElement</span>(name = <span class="string">"alipay_buyer_login_id"</span> )</span><br><span class="line">    <span class="keyword">private</span> String buyerLoginId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlElement</span>(name = <span class="string">"alipay_buyer_user_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> String buyerUserId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-使用-JaxbUtil"><a href="#2-使用-JaxbUtil" class="headerlink" title="2. 使用 JaxbUtil"></a>2. 使用 JaxbUtil</h5><p><a href="https://github.com/liuzhihangs/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/xml/JaxbUtil.java">JaxbUtil</a>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuzhihang.tool.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.JAXBContext;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.JAXBException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.Marshaller;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.Unmarshaller;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jaxb 工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/28 19:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JaxbUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHARTSET = <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bean2Xml</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> JAXBException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bean2Xml(obj, CHARTSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bean2Xml</span><span class="params">(Object obj, String chartset)</span> <span class="keyword">throws</span> JAXBException </span>&#123;</span><br><span class="line">        JAXBContext jaxbContext = JAXBContext.newInstance(obj.getClass());</span><br><span class="line">        Marshaller marshaller = jaxbContext.createMarshaller();</span><br><span class="line">        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, <span class="keyword">true</span>);</span><br><span class="line">        marshaller.setProperty(Marshaller.JAXB_ENCODING, chartset);</span><br><span class="line">        StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        marshaller.marshal(obj, writer);</span><br><span class="line">        <span class="keyword">return</span> writer.getBuffer().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">xml2Bean</span><span class="params">(String xmlString, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> JAXBException </span>&#123;</span><br><span class="line">        JAXBContext jaxbContext = JAXBContext.newInstance(clazz);</span><br><span class="line">        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();</span><br><span class="line">        T t = (T) unmarshaller.unmarshal(<span class="keyword">new</span> StringReader(xmlString));</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-测试代码"><a href="#3-测试代码" class="headerlink" title="3. 测试代码"></a>3. 测试代码</h5><p>待测试字符串: xmlStr</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alipay</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alipay_buyer_login_id</span>&gt;</span>176****3035<span class="tag">&lt;/<span class="name">alipay_buyer_login_id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alipay_buyer_user_id</span>&gt;</span>2088912868994947<span class="tag">&lt;/<span class="name">alipay_buyer_user_id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alipay</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: liuzhihang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2017/12/17 23:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JaxbTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JAXBException </span>&#123;</span><br><span class="line">        String aliPayXmlStr = <span class="string">"&lt;alipay&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;alipay_buyer_login_id&gt;176****3035&lt;/alipay_buyer_login_id&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;alipay_buyer_user_id&gt;2088912868994947&lt;/alipay_buyer_user_id&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/alipay&gt;"</span>;</span><br><span class="line"></span><br><span class="line">        AliPayXml aliPayXml = JaxbUtil.xml2Bean(aliPayXmlStr, AliPayXml<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(JSON.toJSONString(aliPayXml));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果:</p><p>打印的为json格式结果, 可debugger查看. 同样也可以将javaBean转换为xmlStr</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;buyerLoginId&quot;:&quot;176****3035&quot;,&quot;buyerUserId&quot;:&quot;2088912868994947&quot;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
