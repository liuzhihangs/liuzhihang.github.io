<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Toolkit 大更新：UI 更美观，用起来更方便！</title>
      <link href="2021/04/17/idea-plugin-toolkit-0417.html"/>
      <url>2021/04/17/idea-plugin-toolkit-0417.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前段时间有小伙伴在群里聊天，说到 <code>Toolkit</code> 下载量到 4.9k 了。就突然想起来，很久没有更新这个插件。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/VrU468-rYoqP5.png"></p><blockquote><p>PS：我是用它申请了 License，一般时候使用 Json 格式化功能。</p></blockquote><p>趁着周末，更新了下版本，下面介绍直接介绍更新后的版本。</p><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="UI-界面"><a href="#UI-界面" class="headerlink" title="UI 界面"></a>UI 界面</h4><p>这次修改最大的就是 UI 界面，基本参考 <code>Doc View</code> 的 UI，全面进行改造，同时对代码也进行的一定程度上的重构。</p><p>同时增加快捷键 <code>Control + Shift + T</code> 直接唤起操作面板的功能。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/kpvNXe-m0Kk4q.png"></p><p>UI 界面调整，以标签页的形式直接展示功能，方便使用。</p><h4 id="Json-Format"><a href="#Json-Format" class="headerlink" title="Json Format"></a>Json Format</h4><p>保留原有功能：</p><ol><li>代码格式化；</li><li>压缩为一行；</li><li>移除文本中的转移符（<code>\</code>）；</li><li>快捷生成实体类字段。</li></ol><p>新增功能：</p><ol><li>快捷复制；</li><li>原生查找。</li></ol><p>动图演示：</p><ul><li>快捷键打开</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/open-VBcGlL.gif" alt="快捷打开"></p><ul><li>Json 格式化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/json-format-OQe9gp.gif" alt="Json 格式化"></p><ul><li>压缩 Json 字符串为一行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/json-compress-V4fllY.gif" alt="Json 压缩"></p><ul><li>查找字段</li></ul><p>因为直接使用的原生 Editor 当做面板，所以是支持 <code>⌘ + F</code> 直接局内搜索的。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/json-search-juQZNn.gif" alt="局内搜索"></p><ul><li>生成字段</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/json-generate-cSwjqG.gif" alt="生成字段"></p><p>到这里关于 Json 工具的介绍基本就结束了，这也是我在开发过成功经常用到的几个功能。当然<code>快捷复制</code>、<code>移除转移符</code>这些功能就需要小伙伴自己研究了。</p><h4 id="Copy-As-Json"><a href="#Copy-As-Json" class="headerlink" title="Copy As Json"></a>Copy As Json</h4><p>当在 Java 类中的时候，可以在右键菜单找到 <code>Copy As Json</code> 这个选项，顾名思义，就是将当前实体类转为 Json 字符串。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/copy-as-json-h2wTGo.gif" alt="Copy As Json"></p><blockquote><p>如果小伙伴仅仅想使用 Copy As Json 功能，可以在插件商城搜索，有一个插件仅支持将实体复制为 Json。</p></blockquote><p>也有一个注意的地方， 如果 <code>Control + Shift + T</code> 唤起 Toolkit 面板的地方是 Java 实体，这时候 Toolkit 面包会多一个标签页—— <code>Entity Json</code>，可以直接查看当前实体对应的 Json 字符串。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/OOwSN3-ktDpn9.png" alt="Entity Json"></p><p>如果焦点不在 Java 实体中，是没有这个标签页的！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/PlWy6F-33LRk1.png" alt="全局唤起"></p><h4 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h4><ul><li>Base64</li><li>Url Encode/Decode</li></ul><h4 id="移除功能"><a href="#移除功能" class="headerlink" title="移除功能"></a>移除功能</h4><ul><li>移除 XML 格式化：</li></ul><p>XML 格式化使用场景越来越少，毕竟现在基本上不会有使用 XML 作为请求返回报文的了吧！</p><ul><li>移除 MyBatis Jump</li></ul><p>现在 Toolkit 没有 Mapper 接口和 Mapper XML 之间进行互相跳转，以及检测 Mapper XML 内接口是否重复的功能了。不过可以在插件商城单独下载 <code>MyBatis Jump</code>。</p><blockquote><p>MyBatis Jump 仅有跳转和检测功能，如果小伙伴们已经使用了带跳转功能的其他 MyBatis 插件，就没必要额外安装这个了。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是这次的更新，主要是还是更方便工作开发。</p><p>比如经常性的对请求入参出参的 Json 字符串进行格式化</p><p>比如直接根据文档的 Json 串生成实体，省去一个一个定义字段的痛苦。</p><p>比如数据库表扩展字段存放的是Json 格式，需要压缩为一行。（IDEA 的 <code>Control + Shift + J</code> 也可以压缩一行）。</p><p>等等。</p><p>后续的话可能会有 SQL 格式化、Json 字符串对比（对比参数字段是不是少了）。</p><p>最后：</p><p>代码已经重构，相对比之前结构还是很清晰的。</p><p>有其他需要添加的功能可以提交 PR，也可以留言或者提 Issue。</p><h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p>项目地址：<a href="https://github.com/liuzhihang/toolkit">https://github.com/liuzhihang/toolkit</a></p><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/12384-toolkit">https://plugins.jetbrains.com/plugin/12384-toolkit</a></p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/75h_j5McIRQ3Z0fB72MZuA">小伙伴想写个 IDEA 插件么？这些 API 了解一下！</a></li><li><a href="https://mp.weixin.qq.com/s/Bm8sLyWWiNSlP3l7gz6h_g">IDEA 插件找不到？看这里！那就自己敲一个！</a></li><li><a href="https://mp.weixin.qq.com/s/MzWzxIM7yhYumitpF3v3Kg">IDEA 文档插件 DocView：支持编辑文档注释</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中的设计模式 ——  建造者模式</title>
      <link href="2021/04/15/design-patterns-builder.html"/>
      <url>2021/04/15/design-patterns-builder.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>建造者模式是一种创建型设计模式，使你能够分步骤创建复杂对象。该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p><p>一个 Builder 类会一步一步构造最终对象。这个 Builder 类是独立于其他对象的。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在阅读源码过程中经常看到建造者模式，主要是为了简化复杂对象的创建。</p><blockquote><p>具体那些房子啥的举例子就不扯了，以实际工作中的应用为主。</p></blockquote><h4 id="Builder-注解"><a href="#Builder-注解" class="headerlink" title="@Builder 注解"></a>@Builder 注解</h4><p>如果小伙伴使用 lombok 这个框架的话，那一定对 <code>@Builder</code> 这个注解不会陌生。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRespVo</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户名字</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户 id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userId;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        UserRespVo respVo = UserRespVo.builder()<br>                .userId(<span class="hljs-string">&quot;liuzhihang&quot;</span>)<br>                .userName(<span class="hljs-string">&quot;程序员小航&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下编译后的 .class 文件。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRespVo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String userId;<br><br>    UserRespVo(<span class="hljs-keyword">final</span> String userName, <span class="hljs-keyword">final</span> String userId) &#123;<br>        <span class="hljs-keyword">this</span>.userName = userName;<br>        <span class="hljs-keyword">this</span>.userId = userId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserRespVo.<span class="hljs-function">UserRespVoBuilder <span class="hljs-title">builder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserRespVo.UserRespVoBuilder();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRespVoBuilder</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> String userName;<br>        <span class="hljs-keyword">private</span> String userId;<br><br>        UserRespVoBuilder() &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> UserRespVo.<span class="hljs-function">UserRespVoBuilder <span class="hljs-title">userName</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String userName)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.userName = userName;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> UserRespVo.<span class="hljs-function">UserRespVoBuilder <span class="hljs-title">userId</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String userId)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.userId = userId;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> UserRespVo <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserRespVo(<span class="hljs-keyword">this</span>.userName, <span class="hljs-keyword">this</span>.userId);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实就是在内部创建了一个 Builder 的静态内部类，以及一个 builder() 方法。这样就可以进行<code>链式调用</code>了。</p><p>如果对于复杂对象的创建，小伙伴也可以采用 lombok 的这种方式，先创建 builder 对象，然后一步一步构建对象。</p><h4 id="在源码和工作中"><a href="#在源码和工作中" class="headerlink" title="在源码和工作中"></a>在源码和工作中</h4><p>在阅读源码，或者是使用开源软件的时候，经常会遇到建造者模式，比如 <code>OkHttp3Utils</code></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> OkHttpClient client = <span class="hljs-keyword">new</span> OkHttpClient<br>            .Builder()<br>            .readTimeout(<span class="hljs-number">60</span>, TimeUnit.SECONDS)<br>            .connectTimeout(<span class="hljs-number">60</span>, TimeUnit.SECONDS)<br>            .writeTimeout(<span class="hljs-number">120</span>, TimeUnit.SECONDS)<br>            .build();<br></code></pre></td></tr></table></figure><p>比如 <code>Eureka</code> 源码中 <code>InstanceInfo</code> 的构建。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/2SIt1R-kcBSH6.png" alt="InstanceInfo.Builder"></p><p>比如使用 <code>Elasticsearch</code> 创建 client 的代码 </p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">RestClient restClient = RestClient.builder(<br>    <span class="hljs-keyword">new</span> HttpHost(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9200</span>, <span class="hljs-string">&quot;http&quot;</span>),<br>    <span class="hljs-keyword">new</span> HttpHost(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9201</span>, <span class="hljs-string">&quot;http&quot;</span>))<br>    .build();<br></code></pre></td></tr></table></figure><p>还比如 Mybatis Plus，等等等…… </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了在工作中使用建造者模式，因为这是在工作中经常见到的一种设计模式。只不过很多人容易忽略，然后看各种资料，又是房子又是窗户的，云里雾里，一大堆代码。</p><p>淡定，淡定，没必要的。其实很多设计模式在不知不觉中已经使用了，只不过没有归纳总结而已。</p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ol><li>《深入设计模式》：<a href="https://refactoringguru.cn/design-patterns">https://refactoringguru.cn/design-patterns</a></li><li>封面图：<a href="https://refactoringguru.cn/design-patterns/builder">https://refactoringguru.cn/design-patterns/builder</a></li></ol><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/otF145cpGuNA655BRD5ceQ">工作中的设计模式 —— 原型模式</a></li><li><a href="https://mp.weixin.qq.com/s/UalG6xIveNJ4XtqirVX6ww">工作中的设计模式 —— 策略模式</a></li><li><a href="https://mp.weixin.qq.com/s/Hn3C5a_hNPcscB93XlFO8Q">Spring 自调用事务失效，你是怎么解决的？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中的设计模式 —— 策略模式</title>
      <link href="2021/04/07/design-patterns-strategy.html"/>
      <url>2021/04/07/design-patterns-strategy.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>策略模式是一种行为设计模式，它能让你定义一系列算法，并将每种算法分别放入独立的类中，以使算法的对象能够相互替换。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>策略模式在工作中使用的相对是比较多的，像支付场景，计费场景，优惠场景，活动奖励、用户等级等等。</p><p>当然也有很多直白的说法，就是替换一大堆的 if else。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (x == aaa) &#123;<br>    <span class="hljs-comment">// 200 行代码</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == bbb) &#123;<br>    <span class="hljs-comment">// 200 行代码</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == ccc) &#123;<br>    <span class="hljs-comment">// 200 行代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>按照上面的 if else 逻辑，其中 aaa、bbb、ccc 就是不同的策略。而使用策略模式的目的，就是当又增加了 ddd、eee 等等的时候，更方便的扩展。</p><p>这里以工作中遇到的场景举例：</p><blockquote><p>这里选择使用理财储蓄场景中的计费策略举例：<br>在理财储蓄场景中，需要每日给用户发放利息，同时用户分为普通用户、持卡用户，他们有分别的利率以及计息方式。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/tikn5j-MwpKTQ.png"></p><p>很明显，在计费时要使用策略模式，按照以下模式进行开发。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><h4 id="定义计算接口"><a href="#定义计算接口" class="headerlink" title="定义计算接口"></a>定义计算接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RevenueCalculator</span> </span>&#123;<br><br>    <span class="hljs-function">RevenueDTO <span class="hljs-title">calculate</span><span class="hljs-params">(BigDecimal asset)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="定义不同的计算实现"><a href="#定义不同的计算实现" class="headerlink" title="定义不同的计算实现"></a>定义不同的计算实现</h4><p>对外暴露的是一个接口，而具体的实现，则需要自己去扩展。下面展示了三个实现。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultRevenueCalculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RevenueCalculator</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RevenueDTO <span class="hljs-title">calculate</span><span class="hljs-params">(BigDecimal asset)</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StepRateGeneralRevenueCalculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RevenueCalculator</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RevenueDTO <span class="hljs-title">calculate</span><span class="hljs-params">(BigDecimal asset)</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StepRateHoldCardRevenueCalculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RevenueCalculator</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RevenueDTO <span class="hljs-title">calculate</span><span class="hljs-params">(BigDecimal asset)</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/6tQZxO-pUxRYN.png"></p><p>当然这里 StepRateHoldCardRevenueCalculator 和 StepRateGeneralRevenueCalculator 有抽象相同的业务逻辑，也可以抽出来一层工厂方法。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/L1HqZy-wGoxKa.png"></p><p>这些在这里都不是重点。</p><p>通过实现接口的方式，在后面有新的计费策略时，就写一个新的实现类就可以了。</p><p>现在的问题是，我如何确定哪个用户走那一套策略呢？</p><h4 id="策略类"><a href="#策略类" class="headerlink" title="策略类"></a>策略类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">UserTypeEnum</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BaseEnum</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * OWealth 原始计息方式</span><br><span class="hljs-comment">     */</span><br>    DEFAULT_USER(-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;原计息方式&quot;</span>, <span class="hljs-string">&quot;defaultRevenueCalculator&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通用户</span><br><span class="hljs-comment">     */</span><br>    GENERAL_USER(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;默认用户&quot;</span>, <span class="hljs-string">&quot;stepRateGeneralRevenueCalculator&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 持卡用户</span><br><span class="hljs-comment">     */</span><br>    HOLD_CARD_USER(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;持卡用户&quot;</span>, <span class="hljs-string">&quot;stepRateHoldCardRevenueCalculator&quot;</span>),<br>    ;<br>    <span class="hljs-comment">// 省略代码</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RevenueCalculatorFactory</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RevenueCalculator <span class="hljs-title">getCalculator</span><span class="hljs-params">(UserTypeEnum userType)</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> SpringContextHolder.getBean(userType.getServiceName());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里只是介绍了使用枚举维护用户类型和策略实现的关系，也可以在这里面写 if else 判断策略，或者维护在数据库中。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了在工作中使用策略模式，总结一下经常使用到的场景：</p><ol><li>支付方式的选择：微信、支付宝、银联等等</li><li>计费策略不同：不同的用户计费方式不同（收费/运费等）</li><li>活动规则选择：不同的活动走不同计算的逻辑</li><li>计息方式不同：不同的用户（产品）计算利息的方式不同<br>…</li></ol><p>更多的就需要小伙伴去发现和总结了。</p><blockquote><p>渔、就在这里，能不能打到鱼，那就靠耐心了。<br>加油</p></blockquote><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ol><li>《深入设计模式》：<a href="https://refactoringguru.cn/design-patterns">https://refactoringguru.cn/design-patterns</a></li><li>封面图：<a href="https://refactoringguru.cn/design-patterns/strategy">https://refactoringguru.cn/design-patterns/strategy</a></li></ol><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/otF145cpGuNA655BRD5ceQ">工作中的设计模式 —— 原型模式</a></li><li><a href="https://mp.weixin.qq.com/s/UlUQ95gVt8I8wmVOEjn1aw">Spring 是如何解决循环依赖的？</a></li><li><a href="https://mp.weixin.qq.com/s/Hn3C5a_hNPcscB93XlFO8Q">Spring 自调用事务失效，你是怎么解决的？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具册】- IDEA 文档插件 DocView 版本更新：支持编辑文档注释</title>
      <link href="2021/04/02/doc-view-editor.html"/>
      <url>2021/04/02/doc-view-editor.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>IDEA 文档插件 Doc View 又更新了新版本，本次更新版本如下：</p><ol><li>支持在方法右键菜单选择 Doc Editor 直接编辑文档<ol><li>编辑接口文档名称</li><li>编辑接口描述</li><li>编辑字段是否必填</li><li>编辑字段注释说明</li><li>点击确定, 会回写到源文件的注释中</li></ol></li><li>支持在 Entity 中通过邮件菜单选择Doc Editor 编辑字段信息<ol><li>编辑字段是否必填</li><li>编辑字段注释说明</li><li>点击确定, 会回写到源文件的注释中</li><li>支持将 Entity 复制为 Json 字符串</li><li>复制 Json 字符串时, 支持 Entity 中包含对象的转换</li></ol></li><li>从 Doc View 预览界面直接跳转到编辑界面</li></ol><p>是不是看着挺多的，下面，咱们就了解下具体都是什么吧！</p><h3 id="Doc-Editor"><a href="#Doc-Editor" class="headerlink" title="Doc Editor"></a>Doc Editor</h3><h4 id="在方法右键菜单"><a href="#在方法右键菜单" class="headerlink" title="在方法右键菜单"></a>在方法右键菜单</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/l3sIe0-7D3bOv.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/HoTgCq-XO0gau.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/OCNAp3-lO5ujJ.png"></p><p>弹起操作面板，可编辑参数如下：</p><ol><li>接口名称：默认取方法名，当有注释且注释 tag 为 @docName 时，会取 @docName 对应的名称；</li><li>接口描述：取注释的描述内容；</li><li>请求/返回参数：请求返回参数的是否必填、描述。</li></ol><p>下面使用动图演示：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/doceditor-1-0ILFLN.gif"></p><h4 id="在实体类右键菜单"><a href="#在实体类右键菜单" class="headerlink" title="在实体类右键菜单"></a>在实体类右键菜单</h4><p>在实体类中右键菜单，其实相当于方法中的请求/返回参数那一部分。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/LC0bRs-ZOdH6L.png"></p><p>操作面板操作如下：</p><ol><li>是否必填：将使用注释 tag @required 作为是否必填的标识。当然也支持 <code>javax.validation.constraints</code> 的部分注解；</li><li>描述信息：描述内容为注释内容，修改后会回写到注释中；</li><li>复制为 Json 字符串，支持多级嵌套。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/docview-2-MeKcA8.gif"></p><p>如果上述内容点击 <code>Copy as Json</code> 会将实体转换为 Json 字符串复制到剪贴板。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/doceditor-3-3SonEN.gif"></p><h4 id="直接从预览界面跳转"><a href="#直接从预览界面跳转" class="headerlink" title="直接从预览界面跳转"></a>直接从预览界面跳转</h4><p>当打开 Doc View 文档界面时，左下角可以通过编辑按钮跳转到 Doc Editor 界面。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/sULj8S-O9MBRf.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Doc View 本次更新介绍就到这里就结束了，有兴趣的小伙伴，可以自己安装体验。</p><p>欢迎小伙伴们提出 Issue 和 PR。</p><p>项目地址：<a href="https://github.com/liuzhihang/doc-view">https://github.com/liuzhihang/doc-view</a><br>插件地址：<a href="https://plugins.jetbrains.com/plugin/15305-doc-view">https://plugins.jetbrains.com/plugin/15305-doc-view</a></p><p>【广告】</p><p>为了方便沟通交流，我创建了一个<strong>技术交流群</strong>，在群里可以交流技术，聊天提问，有兴趣的小伙伴可以通过公众号加我好友，发送进群，我会拉你进群。<br>PS：事先说好哦，不准发广告。</p>]]></content>
      
      
      <categories>
          
          <category> 工具册 </category>
          
          <category> Doc View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具册 </tag>
            
            <tag> Doc View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中的设计模式 —— 原型模式</title>
      <link href="2021/03/10/design-patterns-prototype.html"/>
      <url>2021/03/10/design-patterns-prototype.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>原型模式是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类。</p><p>通俗说法，就是将一个类作为原型，然后复制出来另一个类。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>这么一说，是不是发现我们经常使用？</p><p>比如咱们项目中有 BO、DTO、VO，但是在开发过程中，需要各种转换，get/set，一般情况下大家都会使用 <code>BeanUtils</code>，将一个类的属性值 set 到另一个类的属性值中，然后返回。</p><blockquote><p>当然，也有一个实体直接从头捅到尾的。</p></blockquote><p>关于 BeanUtils 的 copy 方法，各个框架都提供了相关工具，不过 <code>Java 开发手册</code> 有指出 <code>Apache BeanUtils 性能较差</code>、也推荐了其他框架。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/yfjv8s-XuDRVl.png" alt="Java 开发手册"></p><p>这里介绍的是使用 Cglib BeanCopier。</p><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><p>查看文档，先封装一个工具类：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanCopierUtils</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">BeanCopierUtils</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将source对象的属性拷贝到target对象中去</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> source source对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target target对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyProperties</span><span class="hljs-params">(Object source, Object target)</span> </span>&#123;<br><br>        BeanCopier beanCopier = BeanCopier.create(source.getClass(), target.getClass(), <span class="hljs-keyword">false</span>);<br><br>        beanCopier.copy(source, target, <span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看到这里是不是感觉，如果我使用 <code>BeanCopier</code> 比较频繁，然后每次都 create 创建对象，是不是很麻烦？</p><p>所以就想到需要用缓存！</p><p>将 BeanCopier 作为一个<code>元</code>，在各个线程使用的时候，共享。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanCopierUtils</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">BeanCopierUtils</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * BeanCopier缓存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, BeanCopier&gt; CACHE = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将source对象的属性拷贝到target对象中去</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> source source对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target target对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyProperties</span><span class="hljs-params">(Object source, Object target)</span> </span>&#123;<br>        String cacheKey = source.getClass().getName() + target.getClass().getName();<br><br>        BeanCopier beanCopier;<br><br>        <span class="hljs-keyword">if</span> (!CACHE.containsKey(cacheKey)) &#123;<br>            <span class="hljs-comment">// 进入到这里会创建一个BeanCopier实例并且放在缓存map中</span><br>            beanCopier = BeanCopier.create(source.getClass(), target.getClass(), <span class="hljs-keyword">false</span>);<br>            CACHE.put(cacheKey, beanCopier);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            beanCopier = CACHE.get(cacheKey);<br>        &#125;<br><br>        beanCopier.copy(source, target, <span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再代码中就可以欢快的使用啦！</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">BeanCopierUtils.copyProperties(dto, vo);<br></code></pre></td></tr></table></figure><p>到这里，大家发现，好像就封装了一个工具类，和原型模式并没有什么关系啊。</p><h3 id="对象的-clone"><a href="#对象的-clone" class="headerlink" title="对象的 clone"></a>对象的 clone</h3><p>到此其实在代码中都可以使用了，不过还是要在 DTO、VO 中声明 clone 方法，这样之后使用才会更方便~</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将当前对象转化为目标对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">clone</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    T target = clazz.newInstance();<br>    BeanCopierUtils.copyProperties(<span class="hljs-keyword">this</span>, target);<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在使用的时候就可以</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">AccountVO accountVO = accountDTO.clone(AccountVO.class);<br></code></pre></td></tr></table></figure><p>不过也是有弊端的，比如这里使用的是泛型，我明明是 UserVO 要 Clone ， 你非得传一个 AddressDTO，那我也没得办法了。</p><p>至于进一步演化，可以将 clone 抽象到公共方法中，比如给所有 DTO 创建一个 BaseDTO。</p><p>还有深拷贝这块，也需要注意。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实工作中有很多设计模式，只不过用到了，大家没有发现。</p><p>当然工作中使用的时候，都是一切为了敏捷，可能并没有定义什么 Prototype 接口之类的，但是还是要多总结。</p><p>最后，小伙伴们工作中，有使用什么设计模式，以及实际中的应用场景，欢迎留言分享。</p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ol><li>《深入设计模式》：<a href="https://refactoringguru.cn/design-patterns">https://refactoringguru.cn/design-patterns</a></li><li>封面图：<a href="https://refactoringguru.cn/design-patterns/prototype">https://refactoringguru.cn/design-patterns/prototype</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 敏捷开发技巧——实时模版</title>
      <link href="2021/02/15/idea-live-templates.html"/>
      <url>2021/02/15/idea-live-templates.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文通过自定义模版，在 IDEA 中，通过简单的几个字符，快捷生成既定的代码。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/3-G7xXaS.gif" alt="fori"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/4-HeyMbU.gif" alt="iter"></p><h3 id="自定义模版"><a href="#自定义模版" class="headerlink" title="自定义模版"></a>自定义模版</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/1-gm9BXy.gif" alt="comment"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/2-r0vlvT.gif" alt="slf"></p><h4 id="如何自定义模版"><a href="#如何自定义模版" class="headerlink" title="如何自定义模版"></a>如何自定义模版</h4><blockquote><p>Windows and Linux</p><p><code>File</code> -&gt; <code>Settings</code> -&gt; <code>Editor</code> -&gt; <code>Live Templates</code>  </p></blockquote><blockquote><p>macOS</p><p><code>IntelliJ IDEA</code> -&gt; <code>Preferences</code> -&gt; <code>Editor</code> -&gt; <code>Live Templates</code> </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/mZdGqO-DwKxrE.png" alt="Live Templates 设置"></p><ul><li><strong>先添加一个 group，表示这里都是自己自定义的。</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/jGlxti-FyRLyk.png" alt="添加 Group"></p><p>这个名字就自己随便取了，只要知道是自己的就可以。比如我的叫 <code>My Template</code>。</p><ul><li><strong>添加 Template 到自己创建的 group 里面</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/3ewYTY-hjtzbg.png" alt="添加 Template"></p><p>下面分别介绍里面的变量：</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Abbreviation</td><td align="left">缩写，需要用什么缩写唤起模版。</td></tr><tr><td align="left">Description</td><td align="left">描述，写不写都行。</td></tr><tr><td align="left">Template Text</td><td align="left">模版内容，这是关键！前后使用 <code>$</code> 包裹的内容即变量 —— <code>$变量$ </code>。</td></tr><tr><td align="left">Applicable in</td><td align="left">就是在哪一块生效，配置了这个就可以使用 <code>⌘+J</code> 快捷唤起所有的在该处生效的模版。</td></tr><tr><td align="left">Edit Variables</td><td align="left">编辑变量，为变量赋予对应的属性。</td></tr><tr><td align="left">Options</td><td align="left">一些选项 <br> 1. Expand with： 展开按键 <br> 2. Reformat according to style：重新格式化  <br> 3. Use static import if possible：使用静态导入 <br> 4. Shorten FQ names：缩短全类名，自动添加 import</td></tr></tbody></table><ul><li><strong>编辑 Template Text</strong></li></ul><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">/**<br> * $END$<br> *<br> * @author liuzhihang<br> * @date $date$ $time$<br> */<br></code></pre></td></tr></table></figure><p>其中 <code>$END$</code> 是系统变量，意思是最后光标停留在哪。</p><ul><li><strong>编辑变量 Edit Variables</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/wtQ4Dq-l1S3aA.png"></p><p>然后点击确定就可以生成模版了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>也有一些其他的内置变量，可以参考地址：</p><p><a href="https://www.jetbrains.com/help/idea/edit-template-variables-dialog.html#predefined_functions">https://www.jetbrains.com/help/idea/edit-template-variables-dialog.html#predefined_functions</a></p><p>如果小伙伴有其他的小技巧，小工具，也可以留言分享。</p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/3FRquSf9kiO_R9G3ZLyHUQ">IDEA 敏捷开发技巧——后缀完成</a></li><li><a href="https://mp.weixin.qq.com/s/ngpTOx4XO0SDeqxH-0Yjgg">给大家介绍下，这是我的流程图软件 —— draw.io</a></li><li><a href="https://mp.weixin.qq.com/s/GBgpiWS6B66XVvX5nLUq8g">头大！写文档太麻烦了！快来试试这款 IDEA 插件啊！爽到飞起~</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具册 </category>
          
          <category> Doc View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具册 </tag>
            
            <tag> Doc View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 敏捷开发技巧——后缀完成</title>
      <link href="2021/02/10/idea-postfix-completion.html"/>
      <url>2021/02/10/idea-postfix-completion.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>“工欲善其事，必先利其器。”</p><p>所以说今天来看一看如何压榨 IDEA ，让你的 IDEA 使用的更顺手！</p><p>今日技巧：</p><ul><li>后缀完成</li><li>自定义后缀完成模版</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/sout-ShVzVM.gif" alt=".sout 示例"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/if-EkdoN9.gif" alt=".if 示例"></p><p>上面动图使用了 <code>.sout</code> <code>.if</code> 来举例，相信有些小伙伴在工作中经常使用。如果没有使用过，也可以🦑尝试一下。</p><h3 id="自定义后缀模版"><a href="#自定义后缀模版" class="headerlink" title="自定义后缀模版"></a>自定义后缀模版</h3><p>因为打印日志的时候，为了方便日志的查看，一般会将实体打印成 Json <del>（性能问题先忽略）</del>。</p><p>然后就可以使用这个方式来自定义后缀完成的模版。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/jsons-lb1HBJ.gif" alt=".jsons 模版"></p><p>是不是瞬间感觉方便很多了。</p><h4 id="如何自定义后缀模版"><a href="#如何自定义后缀模版" class="headerlink" title="如何自定义后缀模版"></a>如何自定义后缀模版</h4><blockquote><p>Windows and Linux</p><p><code>File</code> -&gt; <code>Settings</code> -&gt; <code>Editor</code> -&gt; <code>General</code> -&gt; <code>Postfix Completion</code>  </p></blockquote><blockquote><p>macOS</p><p><code>IntelliJ IDEA</code> -&gt; <code>Preferences</code> -&gt; <code>Editor</code> -&gt; <code>General</code> -&gt; <code>Postfix Completion</code>  </p></blockquote><p>总之，就是设置页面，找到 <code>Postfix Completion</code>， 不是（Live Templates）。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Wfwdxc-FKpNrV.png" alt="Postfix Completion 设置"></p><p>左下角有个  <img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/icons.general.add-EI0r5S.svg" alt="Add button"> 可以创建新的模版。</p><p>当然也可以使用 <img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/icons.general.remove-Pl6t37.svg" alt="Remove button">、 <img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/icons.actions.edit-qVT4eX.svg" alt="Edit button">、 <img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/icons.actions.copy-es8UYd.svg" alt="Duplicate button"> 进行删除、编辑、复制。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/BH34d4-xaQdaP.png" alt="配置 .jsons"></p><p>注意：</p><ol><li>用全类名，在生成的时候会自动 <code>import</code>，并且把包名省略掉，</li><li><code>Apply to the topmost expression</code> 没有打勾。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>小伙伴们，快点配置下试试吧。</p><p>后续也会分享其他的小技巧，提高大家的开（mo）发（🐟）效率。</p><p>如果小伙伴有其他的小技巧，小工具，也可以留言分享。</p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/ngpTOx4XO0SDeqxH-0Yjgg">给大家介绍下，这是我的流程图软件 —— draw.io</a></li><li><a href="https://mp.weixin.qq.com/s/GBgpiWS6B66XVvX5nLUq8g">头大！写文档太麻烦了！快来试试这款 IDEA 插件啊！爽到飞起~</a></li><li><a href="https://mp.weixin.qq.com/s/75h_j5McIRQ3Z0fB72MZuA">小伙伴想写个 IDEA 插件么？这些 API 了解一下！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具册 </category>
          
          <category> Doc View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具册 </tag>
            
            <tag> Doc View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 事务、异步和循环依赖有什么关系？</title>
      <link href="2021/02/01/spring-sync-translational.html"/>
      <url>2021/02/01/spring-sync-translational.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在循环依赖中有一种循环依赖，就是自注入：自己依赖自己。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/fW0NNi-8qZU54.png"></p><h3 id="事务的自注入"><a href="#事务的自注入" class="headerlink" title="事务的自注入"></a>事务的自注入</h3><p>在 <a href="https://mp.weixin.qq.com/s/Hn3C5a_hNPcscB93XlFO8Q">Spring 自调用事务失效，你是怎么解决的？</a> 有小伙伴提出可以自己注入自己来解决事务失效。</p><p>具体使用方式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderBizServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderBizService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 注入自己</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderBizService orderBizService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">callBack</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 一系列的逻辑</span><br><br>        <span class="hljs-comment">// 需要事务操作更新订单和用户金额</span><br>        orderBizService.updateOrderStatusAndUserBalance();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateOrderStatusAndUserBalance</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 内部是事务逻辑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>是不是发现很神奇的事情，事务生效了。</p><p>其实这里注入自己，其实是注入的一个代理对象，调事务，也是调的代理对象的事务，所以事务生效。</p><blockquote><p>Spring 事务失效原因：</p><p>事务只能应用到 public 方法上才会有效；<br>事务需要从外部调用，Spring 自调用会失效；<br>建议事务注解 @Transactional 一般添加在实现类上。</p></blockquote><h3 id="异步的自注入"><a href="#异步的自注入" class="headerlink" title="异步的自注入"></a>异步的自注入</h3><p>发现 @Transactional 注解可以自注入解决事务失效的问题，在某次开发中，自然而然想到 @Async 异步是不是也可以自注入解决循环依赖的问题。</p><p>NO， NO， NO……</p><p>事实告诉我们是不可以的！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/8eItMS-VUNWGY.png"></p><p>从错误开始着手：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/d8qJGr-iDX7TR.png" alt="抛出异常部分 doCreateBean"></p><p>开始往上面反推 <strong>exposedObject == bean</strong> 是这一块出了问题。</p><p>也就是说异步的时候，再次从二级缓存中获取的和初始的不相同。</p><p>Object earlySingletonReference = getSingleton(beanName, false);</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/yz6iH3-PG6zMy.png" alt="从二级缓存再次获取 Bean"></p><p>这一次获取的时候发现不同所以报错。</p><p>那就开始 Debug， 按照循环依赖的逻辑，执行到 <code>populateBean</code> 时，属性赋值，发现有依赖自己，此时会创建自己。</p><p>执行 singleton.getObject 方法</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/J8MiKx-5rZGsk.png" alt="getEarlyBeanReference"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/GRsoxq-zDv3Y0.png" alt="getBeanPostProcessors()"></p><p>而此时执行 getEarlyBeanReference 先判断 <code>InfrastructureAdvisorAutoProxyCreator</code> true 调用 wrapIfNecessary 判断是否生成一个代理对象，这里并没有生成代理对象。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/aOuJH2-8heoG2.png"></p><p>然后开始执行异步的 <code>AsyncAnnotationBeanPostProcessor</code> 判断为 false。所以没有执行异步的生成代理对象逻辑。</p><p>那就继续往下看</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/JOkfqE-FB4fGj.png" alt="到这一步还是正常的"></p><p>进入到 initializeBean 的逻辑，有一部分叫做 <strong>applyBeanPostProcessorsAfterInitialization</strong></p><blockquote><p>方面小伙伴搜索，所以贴出来代码关键字。IDEA 使用 <code>⌘ + Shift + F</code> 搜索。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/zt90fX-92rqmZ.png" alt="applyBeanPostProcessorsAfterInitialization"></p><p>循环执行后置处理器：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/oardNw-MNrM5t.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/y7jblu-f9c8ra.png"></p><p>发现执行完 <strong>AsyncAnnotationBeanPostProcessor</strong> 这个 PostProcessor 后，对象被改变了。从而导致二级缓存和当前的 Bean 不同。</p><p>以上也就是为什么 @Async 自调用不可以，因为在后面初始化阶段被代理修改了对象。</p><h4 id="Transactional-为什么可以呢？"><a href="#Transactional-为什么可以呢？" class="headerlink" title="@Transactional 为什么可以呢？"></a>@Transactional 为什么可以呢？</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/h9qjzJ-PtrEyJ.png" alt="getEarlyBeanReference"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/umX1vi-m1rUT7.png" alt="getBeanPostProcessors()"></p><p>先判断 <strong>InfrastructureAdvisorAutoProxyCreator</strong> true 生成一个代理对象。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/xhyHmk-R2XONP.png" alt="生成代理对象"></p><p>事务的处理器 <strong>PersistenceExceptionTranslationPostProcessor</strong> 也没有执行。</p><p>继续 Debug 关注 <strong>applyBeanPostProcessorsAfterInitialization</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/DXReoS-4TOcfo.png"></p><p>执行结束，发现 Bean 没有发生改变。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>@Transactional：</strong> 是在循环依赖从二级缓存升到三级缓存的时候已经生成了代理对象。</li><li><strong>@Async：</strong> 是在初始化阶段（initializeBean）去生成代理对象。然后 @Async 导致后面判断 <code>exposedObject == bean</code> 为 false ，从而抛出异常。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/QUx5E6-LTVWfh.png" alt="自注入"></p><p>可以看出图中有两处会执行 BeanPostProcessor ：</p><ol><li>在 singletonFactory.getObject 时，如果是 <strong>SmartInstantiationAwareBeanPostProcessor</strong> 的子类会执行 getEarlyBeanReference 方法。</li><li>在 initializeBean 的 applyBeanPostProcessorsAfterInitialization 时会执行所有 BeanPostProcessor 的 postProcessAfterInitialization 的方法。</li></ol><blockquote><p>也有其他的地方在执行后置处理器，比如 applyBeanPostProcessorsBeforeInitialization ，只不过这里关注这俩处。</p></blockquote><p>而这两处都有可能生成代理对象， @Transactional 是在 getEarlyBeanReference 处生成的代理对象，所以后面判断 Bean 是否被改变时为 true，而 @Async 是在后面异步生成了代理对象，所以判断不通过。</p><p>至此，分析完毕，错误之处，欢迎指正。</p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/sscl6CtQWCap381bj9Fe2A">Spring 动态代理时是如何解决循环依赖的？为什么要使用三级缓存？</a></li><li><a href="https://mp.weixin.qq.com/s/UlUQ95gVt8I8wmVOEjn1aw">Spring 是如何解决循环依赖的？</a></li><li><a href="https://mp.weixin.qq.com/s/Hn3C5a_hNPcscB93XlFO8Q">Spring 自调用事务失效，你是怎么解决的？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 动态代理时是如何解决循环依赖的？为什么要使用三级缓存？</title>
      <link href="2021/01/30/source-spring-circular-dependence-2.html"/>
      <url>2021/01/30/source-spring-circular-dependence-2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在研究 <a href="https://mp.weixin.qq.com/s/UlUQ95gVt8I8wmVOEjn1aw">『 Spring 是如何解决循环依赖的 』</a> 的时候，了解到 Spring 是借助<em>三级缓存</em>来解决循环依赖的。</p><p>同样在上一节留下了疑问：</p><ol><li>循环依赖为什么要使用三级缓存？而不是使用二级缓存？</li><li>AOP 动态代理对循环依赖的有没有什么影响？</li></ol><p>本篇文章也是围绕上面的内容进行展开。</p><blockquote><p>笔记也在不断整理，之前可能会有点杂乱。</p></blockquote><h3 id="循序渐进，看一看什么是循环依赖？"><a href="#循序渐进，看一看什么是循环依赖？" class="headerlink" title="循序渐进，看一看什么是循环依赖？"></a>循序渐进，看一看什么是循环依赖？</h3><p>开始先简单回顾一下 Bean 的创建过程，当然小伙伴也可以直接阅读<a href="https://mp.weixin.qq.com/s/qZ4xXlqpNzsdHkvFm02Yuw">『 单例 Bean 的创建 』</a>这篇文章。</p><p>不过考虑到阅读本文前再阅读上一篇文章、Debug 等等，会比较耗时，所以本篇文章前面一小部分会先对之前的文章内容做简要概括，也相当于对我自己学习的知识进行一个总结。</p><p>先来回顾一下三级缓存的概念。</p><blockquote><p><strong>singletonObjects：</strong> 一级缓存，存储单例对象，Bean 已经实例化，初始化完成。</p><p><strong>earlySingletonObjects：</strong> 二级缓存，存储 singletonObject，这个 Bean 实例化了，还没有初始化。</p><p><strong>singletonFactories：</strong> 三级缓存，存储 singletonFactory。</p></blockquote><h4 id="Bean-的创建过程"><a href="#Bean-的创建过程" class="headerlink" title="Bean 的创建过程"></a>Bean 的创建过程</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularServiceA</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String fieldA = <span class="hljs-string">&quot;字段 A&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Py9LKD-MrHkh6.png" alt="单例 Bean 的创建过程"></p><p>通过上面的流程，可以看出 Spring 在创建 Bean 的过程中重点是在 AbstractAutowireCapableBeanFactory 中的以下三个步骤：</p><ol><li><strong>实例化 createBeanInstance：</strong> 其中实例化 Bean 并对 Bean 进行赋值，像例子中的 <code>fieldA</code> 字段在这里就会赋值。</li><li><strong>属性注入 populateBean：</strong> 可以理解为对 Bean 里面的属性进行赋值。(会依赖其他 Bean)</li><li><strong>初始化 initializeBean：</strong> 执行初始化和 Bean 的后置处理器。</li></ol><blockquote><p>实例化赋值源码可以阅读：</p><p>BeanUtils.instantiateClass(constructorToUse) </p></blockquote><h4 id="如果要依赖其他-Bean-呢？"><a href="#如果要依赖其他-Bean-呢？" class="headerlink" title="如果要依赖其他 Bean 呢？"></a>如果要依赖其他 Bean 呢？</h4><p>那如果 CircularServiceA 依赖了其他 Bean 呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularServiceA</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String fieldA = <span class="hljs-string">&quot;字段 A&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CircularServiceB circularServiceB;<br><br>&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularServiceB</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/41pskM-PPjKdq.png" alt="A 依赖了 B"></p><p>当 A 依赖了 B 的时候，在 <code>createBeanInstance</code> 这一步，并不会对 B 进行属性赋值。</p><p>而是在 <code>populatedBean</code> 这里查找依赖项，并创建 B。</p><h4 id="循环依赖下的创建过程"><a href="#循环依赖下的创建过程" class="headerlink" title="循环依赖下的创建过程"></a>循环依赖下的创建过程</h4><p>循环依赖的场景，在上一篇文章已经有所讲解，这里仅仅画图说明一下。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularServiceA</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String fieldA = <span class="hljs-string">&quot;字段 A&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CircularServiceB circularServiceB;<br><br>&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularServiceB</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CircularServiceA circularServiceA;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/giuIlH-DkGpSm.png" alt="A B 循环依赖"></p><p>在 A 和 B 循环依赖的场景中：</p><p>B <code>populatedBean</code> 查找依赖项 A 的时候，从一级缓存中虽然未获取到 A，但是发现 A 在创建中。</p><p>此时，从三级缓存中获取 A 的 <code>singletonFactory</code> 调用工厂方法，创建 <code>getEarlyBeanReference</code> A 的早期引用并返回。</p><p>B 引用到 A ，B 就可以初始化完毕，然后 A 同样也可以初始化完毕了。</p><h3 id="二级缓存能否解决循环依赖"><a href="#二级缓存能否解决循环依赖" class="headerlink" title="二级缓存能否解决循环依赖"></a>二级缓存能否解决循环依赖</h3><p>通过上面的图，仔细分析一下，其实把二级缓存拿掉，在 B 尝试获取 A 的时候直接返回 A 的实例，是不是也是可以的？</p><p>答案是：可以的！</p><p>但是为什么还是用三级缓存呢？ </p><p>网上的很多资料说是和动态代理有关系，那就从动态代理的方面继续往下分析分析。</p><h3 id="动态代理的场景"><a href="#动态代理的场景" class="headerlink" title="动态代理的场景"></a>动态代理的场景</h3><p>在 JavaConfig（配置类） 上添加 <code>@EnableAspectJAutoProxy</code> 注解，开启 AOP ，通过 Debug 循序渐进看一看动态代理对循环依赖的影响。</p><h4 id="动态代理下，Bean-的创建过程"><a href="#动态代理下，Bean-的创建过程" class="headerlink" title="动态代理下，Bean 的创建过程"></a>动态代理下，Bean 的创建过程</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularServiceA</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String fieldA = <span class="hljs-string">&quot;字段 A&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;方法 A 执行&quot;</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AspectA</span> </span>&#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(public void com.liuzhihang.circular.CircularServiceA.methodA())&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeA</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;beforeA 执行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只有 A 的情况下，给 A 添加切面，开始 Debug。</p><p>前面的流程都相同，在 initializeBean 开始出现差异。</p><p>这一步需要初始化 Bean 并执行 Bean 的后置处理器。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/kbDvax-3FjpZe.png" alt="执行后置处理器"></p><p>其中有一个处理器为： <code>AnnotationAwareAspectJAutoProxyCreator</code> 其实就是加的注解切面，会跳转到 <code>AbstractAutoProxyCreator 类的 postProcessAfterInitialization 方法</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/oCPVZ3-a5XbM4.png" alt="postProcessAfterInitialization"></p><p>如图所示：wrapIfNecessary 方法会判断是否满足代理条件，是的话返回一个代理对象，否则返回当前 Bean。</p><p>后续调用 <code>getProxy</code> <code>、createAopProxy</code> 等等，最终执行到下面一部分。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/igrrym-36KWWI.png"></p><p>最终会执行到这里，AOP 代理相关的就不细看了。</p><p>一路放行，直到 initializeBean 执行结束。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/bcpJAn-uJAqpn.png" alt="A 被替换为了代理对象"></p><p>此时发现：A 被替换为了代理对象。</p><p>所以 doCreateBean 返回，以及后面放到一级缓存中的都是代理对象。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/LfRIEB-Do8LUy.png" alt="红框部分为差异"></p><h4 id="有循环依赖的动态代理"><a href="#有循环依赖的动态代理" class="headerlink" title="有循环依赖的动态代理"></a>有循环依赖的动态代理</h4><p>这一次把循环依赖打开：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularServiceA</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String fieldA = <span class="hljs-string">&quot;字段 A&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CircularServiceB circularServiceB;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;方法 A 执行&quot;</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AspectA</span> </span>&#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(public void com.liuzhihang.circular.CircularServiceA.methodA())&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeA</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;beforeA 执行&quot;</span>);<br><br>    &#125;<br><br>&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularServiceB</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CircularServiceA circularServiceA;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AspectB</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Before(&quot;execution(public void com.liuzhihang.circular.CircularServiceB.methodB())&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeB</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;beforeB 执行&quot;</span>);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>开始 Debug，前面的一些列流程，都和正常的没有什么区别。而唯一的区别在于，创建 B 的时候，需要从三级缓存获取 A。</p><p>此时在 <code>getSingleton</code> 方法中会调用：<code>singletonObject = singletonFactory.getObject();</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/GPjbsP-tKWmpm.png" alt="B 属性赋值时，从三级缓存获取 A"></p><p>有时会比较疑惑 <code>singletonFactory.getObject()</code> 调用的是哪里？</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/J3DYgB-O3XP0I.png" alt="三级缓存获取对象"></p><p>所以这一块调用的是 <code>getEarlyBeanReference</code>，开始遍历执行 <code>BeanPostProcessor</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/UBxYMT-FMcSHX.png" alt="getEarlyBeanReference"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/3oXKgp-5uCoST.png" alt="getEarlyBeanReference"></p><p>看到 <code>wrapIfNecessary</code> 就明白了吧！这块会获取一个<code>代理对象</code>。 </p><p><strong>也就是说此时返回，并放到二级缓存的是一个 A 的代理对象。</strong></p><p>这样 B 就创建完毕了！</p><p>到 A 开始初始化并执行后置处理器了！因为 A 也有代理，所以 A 也会执行到 <code>postProcessAfterInitialization</code> 这一部分！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/STKWOC-FGcZvJ.png" alt="判断二级缓存"></p><p>但是在执行 <code>wrapIfNecessary</code> 之前，会先判断代理对象缓存是否有 A 了。</p><p><code>this.earlyProxyReferences.remove(cacheKey) != bean</code></p><p>但是这块获取到的是 A 的代理对象。肯定是 false 。 所以不会再生成一次 A 的代理对象。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/iqIHlA-MYz92A.png" alt="代理 - 循环依赖"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以看到，循环依赖下，有没有代理情况下的区别就在：</p><p><code>singletonObject = singletonFactory.getObject();</code></p><p>在循环依赖发生的情况下 B 中的 A 赋值时：</p><ol><li>无代理：getObject 直接返回原来的 Bean</li><li>有代理：getObject 返回的是代理对象</li></ol><p>然后都放到<strong>二级缓存</strong>。</p><h4 id="为什么要三级缓存"><a href="#为什么要三级缓存" class="headerlink" title="为什么要三级缓存?"></a>为什么要三级缓存?</h4><ol><li>假设去掉三级缓存</li></ol><p>去掉三级缓存之后，Bean 直接创建 <code>earlySingletonObjects</code>， 看着好像也可以。</p><p>如果有代理的时候，在 <code>earlySingletonObjects</code> 直接放代理对象就行了。</p><p>但是会导致一个问题：<strong>在实例化阶段就得执行后置处理器，判断有 AnnotationAwareAspectJAutoProxyCreator 并创建代理对象</strong>。</p><p>这么一想，是不是会对 Bean 的生命周期有影响。</p><p>同样，先创建 <code>singletonFactory</code> 的好处就是：<strong>在真正需要实例化的时候，再使用 singletonFactory.getObject() 获取 Bean 或者 Bean 的代理</strong>。相当于是延迟实例化。</p><ol start="2"><li>假设去掉二级缓存</li></ol><p>如果去掉了二级缓存，则需要直接在 <code>singletonFactory.getObject()</code> 阶段初始化完毕，并放到一级缓存中。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/AxHpdh-HXV06Z.png" alt="B 和 C 都依赖 A"></p><p>那有这么一种场景，B 和 C 都依赖了 A。</p><p>要知道在有代理的情况下 <code>singletonFactory.getObject()</code> 获取的是代理对象。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/BCNbfb-9D6nlz.png" alt="多次获取代理对象不同"></p><p>而多次调用 <code>singletonFactory.getObject()</code> 返回的代理对象是不同的，就会导致 B 和 C 依赖了不同的 A。</p><p>那如果获取 B 到之后直接放到一级缓存，然后 C 再获取呢？</p><p>😳 …… </p><p>一级缓存放的是已经初始化完毕的 Bean，要知道 A 依赖了 B 和 C ，A 这时候还没有初始化完毕。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>循环依赖的场景有很多，本文只是通过 Debug ，来了解到循环依赖和 AOP 之间的关系，以及了解到为什么要用三级缓存。</p><p>当然，Spring 设计之初是什么样子的？如何一步一步发展成现在这种的？</p><p>肯定是不能慢慢去研究了，所以只能以现在的版本，去揣测作者的意图。</p><p>不足之处，多多指正。</p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/UlUQ95gVt8I8wmVOEjn1aw">Spring 是如何解决循环依赖的？</a></li><li><a href="https://mp.weixin.qq.com/s/qZ4xXlqpNzsdHkvFm02Yuw">Spring 源码学习 16：单例 Bean 创建</a></li><li><a href="https://mp.weixin.qq.com/s/FhWdwroo7ipN1nzgvNpshA">Spring 源码学习 15：finishBeanFactoryInitialization（重点）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 是如何解决循环依赖的？</title>
      <link href="2021/01/23/source-spring-circular-dependence-1.html"/>
      <url>2021/01/23/source-spring-circular-dependence-1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>相信很多小伙伴在工作中都会遇到循环依赖，不过大多数它是这样显示的：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/F0EjJ0-cjS89L.png"></p><p>还会提示这么一句：</p><p><em>Requested bean is currently in creation: Is there an unresolvable circular reference?</em></p><p>老铁！这就是发生循环依赖了！</p><p>当然这里是一个异常情况。</p><p>在我的一篇文章中介绍如何避免 <a href="https://mp.weixin.qq.com/s/Hn3C5a_hNPcscB93XlFO8Q">Spring 自调用事务失效</a>，其中网友给建议，说可以在类中注入自身，然后调用，而注入自身的过程也是循环依赖的处理过程。</p><p>下面就一起看一看，什么是循环依赖，以及 Spring 是如何解决循环依赖的？</p><h3 id="什么是循环依赖"><a href="#什么是循环依赖" class="headerlink" title="什么是循环依赖"></a>什么是循环依赖</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/vinf1u-ALdO65.png" alt="Circular dependencies"></p><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-dependency-resolution" title="Spring 官方文档">Dependency Resolution Process</a></p><blockquote><p>Spring IoC 容器会在运行时检测到<strong>构造函数注入</strong>循环引用，并抛出 BeanCurrentlyInCreationException。</p><p>所以要避免构造函数注入，可以使用 setter 注入替代。</p></blockquote><p>根据官方文档说明，Spring 会自动解决基于 setter 注入的循环依赖。</p><p>当然在咱们工作中现在都使用 <code>@Autowired</code> 注解来注入属性。</p><blockquote><p>PS: @Autowired 是通过反射进行赋值。</p></blockquote><p>这里从我们最经常使用的场景切入，看 Spring 是如何解决循环依赖的？</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularServiceA</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CircularServiceB circularServiceB;<br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularServiceB</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CircularServiceC circularServiceC;<br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularServiceC</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CircularServiceA circularServiceA;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里有 A、B、C 三个类，可以看到发生了循环依赖：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/2G8CEa-rstD88.png" alt="循环依赖"></p><p>但是即使发生了循环依赖，我们依然可以启动 OK，使用并没有任何影响。</p><h3 id="Spring-是如何解决循环依赖的"><a href="#Spring-是如何解决循环依赖的" class="headerlink" title="Spring 是如何解决循环依赖的"></a>Spring 是如何解决循环依赖的</h3><p>在 <a href="https://mp.weixin.qq.com/s/qZ4xXlqpNzsdHkvFm02Yuw">Spring 单例 Bean 的创建</a> 中介绍介绍了使用三级缓存。</p><blockquote><p>singletonObjects： 一级缓存，存储单例对象，Bean 已经实例化，初始化完成。</p><p>earlySingletonObjects： 二级缓存，存储 singletonObject，这个 Bean 实例化了，还没有初始化。</p><p>singletonFactories： 三级缓存，存储 singletonFactory。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/KS60bs-aWqhoU.png"></p><p>当然，这里看着比较长，可以简化一下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/1QnEIw-1agsnx.png"></p><h3 id="通过-Debug-来说明生成过程"><a href="#通过-Debug-来说明生成过程" class="headerlink" title="通过 Debug 来说明生成过程"></a>通过 Debug 来说明生成过程</h3><p>从 preInstantiateSingletons 方法开始：</p><p>添加断点 <code>beanName.equals(&quot;circularServiceA&quot;)</code></p><p>启动Debug：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/SYoDdM-0pgCsu.png" alt="Start"></p><p>会从缓存中获取单例 Bean </p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/AeMsAm-KnFiZA.png"></p><p>这里很显然获取不到，继续执行，创建单例实例</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/JRFOxl-Tsbi9H.png"></p><p>发现是单例再次获取</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/YWcgWk-90K6tS.png"></p><p>这里还会从一级缓存获取一次 <code>circularServiceA</code> ， 没有获取到，将 <code>circularServiceA</code> 添加到在创建的池子里面 （singletonsCurrentlyInCreation 是一个 set 集合）。</p><p>然后会调用工厂方法 createBean(beanName, mbd, args) 创建对象。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/MnA2Db-juxIN7.png" alt="createBean 方法"></p><p>在 createBean 中去实例化 Bean 。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/kVo7G6-DAtYGM.png"></p><p>判断是否是循环引用，是的话需要添加到三级缓存中。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/iRDZbq-4fZA5S.png" alt="添加到三级缓存"></p><p><code>circularServiceA</code> 不在一级缓存中，则将 <code>circularServiceA</code> 的 singletonFactory 添加到 三级缓存 （singletonFactories） 中，同时从二级缓存中移除。</p><p>到这一步为止，circularServiceA 已经在三级缓存中了。</p><p>开始对 Bean 的属性进行赋值。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/oZ70es-2WsKdT.png" alt="属性赋值"></p><p>在 populateBean 方法中执行到</p><p><code>PropertyValues pvsToUse = bp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);</code> </p><p>就会对属性进行赋值</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ZjKmVC-J3xIl5.png" alt="属性赋值"></p><p>在 injet 方法中，回去解决相关依赖。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/EnkUit-T1uQvh.png" alt="解决依赖"></p><p>继续 Debug ，发现解决依赖，最后发现其实又调用回 <code>beanFactory.getBean(beanName);</code> </p><p>不过这次创建的是 <code>circularServiceB</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/WuKewa-ACO0Ae.png"></p><p>下面是调用链：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ykN9uD-2XrZUz.png" alt="调用链"></p><p><code>circularServiceB</code> 的过程和 <code>circularServiceA</code> 的一样，也是创建了三级缓存，然后去创建 <code>circularServiceC</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/VdfOIS-SUo0Fz.png" alt="singletionFactories"></p><p>这时候三级缓存里面有它们三个的 singletonFactory 。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/6px7bF-uBnMnF.png"></p><p><code>circularServiceC</code> 也调用到 doGetBean 方法去获取 <code>circularServiceA</code></p><p>不过这次 调用到 <code>Object sharedInstance = getSingleton(beanName);</code> 的时候, <code>circularServiceA</code> 已经存在了。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/EHvsaz-wEqbsG.png"></p><p>这次调用虽然没有从一级缓存 （singletonObjects） 中获取到 circularServiceA，但是 <code>circularServiceA</code> 在<strong>创建中</strong>，所以进入判断</p><p>在这里执行完之后， <code>circularServiceA</code> 从三级缓存升级到二级缓存</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/wXvq02-Ayomqs.png"></p><p>使用反射对 <code>circularServiceC</code> 中的 <code>circularServiceA</code> 进行赋值， 此时 <code>circularServiceA</code> 是在 二级缓存中。</p><p><strong>那就比较好奇了，这时候 circularServiceC 里面的 circularServiceA 已经通过反射赋值，这个赋值给的是什么值？</strong></p><p>查看代码：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/WdGk05-KZ94hA.png"></p><p>这块是从三级缓存（singletonFactories）中获取的 singletonObject，然后调用</p><p><code>singletonObject = singletonFactory.getObject();</code> </p><p>获取的一个对象</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ZlcQGZ-tKDGNM.png"></p><p>这里获取到的是 circularServiceA 的引用，注意 circularServiceA 这时候还没创建完成，只是引用。所以这里赋值的是 circularServiceA 的引用。</p><p>到这里 <code>circularServiceC</code> 就创建完了。</p><p>然后会将 C 添加到一级缓存和已注册列表中，同时从二级三级缓存中删除 C。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/fcNkmJ-fth6DQ.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/QwK4yN-dbrlQj.png"></p><p>继续执行 B 和 A 的属性赋值以及后续的初始化流程。</p><p>至此，循环依赖解决完毕。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Spring 使用三级缓存来解决循环依赖的问题，三级缓存分别是：</p><ul><li><p><strong>singletonObjects：</strong> 一级缓存，存储单例对象，Bean 已经实例化，初始化完成。</p></li><li><p><strong>earlySingletonObjects：</strong> 二级缓存，存储 singletonObject，这个 Bean 实例化了，还没有初始化。</p></li><li><p><strong>singletonFactories：</strong> 三级缓存，存储 singletonFactory。</p></li></ul><p>本文也通过 Debug 来验证了使用三级缓存解决依赖的过程。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/1QnEIw-1agsnx.png"></p><p>不过还有一些问题没有说明：</p><ol><li>循环依赖和代理之间的关系是什么？比如 @Transactional 和 @Async 注解会对循环依赖产生什么影响？</li><li>为什么要用三级缓存？二级缓存不可以么？</li></ol><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/qZ4xXlqpNzsdHkvFm02Yuw">Spring 源码学习 16：单例 Bean 创建</a></li><li><a href="https://mp.weixin.qq.com/s/MAlT1Y5MVmEclAZC6rgojQ">Spring 源码学习 15：finishBeanFactoryInitialization（重点）</a></li><li><a href="https://mp.weixin.qq.com/s/bKmqVFuLLLCquWf3tzH30g">Spring 源码学习 14：initApplicationEventMulticaster</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 16：单例 Bean 创建</title>
      <link href="2021/01/17/source-spring-16.html"/>
      <url>2021/01/17/source-spring-16.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 finishBeanFactoryInitialization 中介绍了创建 Bean 的流程大概流程，这里进入单例 Bean 的创建过程。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/U1LzL3-cy2ZtW.png"></p><p>这里主要分为三个部分创建单例 Bean</p><ol><li>getSingleton</li><li>createBean</li><li>getObjectForBeanInstance</li></ol><p>下面进入源码：</p><h3 id="getSingleton"><a href="#getSingleton" class="headerlink" title="getSingleton"></a>getSingleton</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getSingleton</span><span class="hljs-params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;<br>    Assert.notNull(beanName, <span class="hljs-string">&quot;Bean name must not be null&quot;</span>);<br>    <span class="hljs-comment">// 加锁</span><br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.singletonObjects) &#123;<br>        <span class="hljs-comment">// 检查 singletonObjects 缓存中是否有</span><br>        Object singletonObject = <span class="hljs-keyword">this</span>.singletonObjects.get(beanName);<br>        <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 检查是否在执行销毁</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.singletonsCurrentlyInDestruction) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationNotAllowedException(beanName,<br>                        <span class="hljs-string">&quot;Singleton bean creation not allowed while singletons of this factory are in destruction &quot;</span> +<br>                        <span class="hljs-string">&quot;(Do not request a bean from a BeanFactory in a destroy method implementation!)&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                logger.debug(<span class="hljs-string">&quot;Creating shared instance of singleton bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 将 Bean 添加到 singletonsCurrentlyInCreation 集合中, 表示正在创建</span><br>            beforeSingletonCreation(beanName);<br>            <span class="hljs-keyword">boolean</span> newSingleton = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">boolean</span> recordSuppressedExceptions = (<span class="hljs-keyword">this</span>.suppressedExceptions == <span class="hljs-keyword">null</span>);<br>            <span class="hljs-keyword">if</span> (recordSuppressedExceptions) &#123;<br>                <span class="hljs-keyword">this</span>.suppressedExceptions = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 调用工厂方法</span><br>                <span class="hljs-comment">// 也就是调用 createBean(beanName, mbd, args)</span><br>                singletonObject = singletonFactory.getObject();<br>                newSingleton = <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;<br>                <span class="hljs-comment">// Has the singleton object implicitly appeared in the meantime -&gt;</span><br>                <span class="hljs-comment">// if yes, proceed with it since the exception indicates that state.</span><br>                singletonObject = <span class="hljs-keyword">this</span>.singletonObjects.get(beanName);<br>                <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> ex;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (BeanCreationException ex) &#123;<br>                <span class="hljs-keyword">if</span> (recordSuppressedExceptions) &#123;<br>                    <span class="hljs-keyword">for</span> (Exception suppressedException : <span class="hljs-keyword">this</span>.suppressedExceptions) &#123;<br>                        ex.addRelatedCause(suppressedException);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">throw</span> ex;<br>            &#125;<br>            <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (recordSuppressedExceptions) &#123;<br>                    <span class="hljs-keyword">this</span>.suppressedExceptions = <span class="hljs-keyword">null</span>;<br>                &#125;<br>                <span class="hljs-comment">// 创建成功, 从 singletonsCurrentlyInCreation 移除</span><br>                afterSingletonCreation(beanName);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (newSingleton) &#123;<br>                <span class="hljs-comment">// 将给定的单例对象添加到该工厂的单例缓存中</span><br>                <span class="hljs-comment">// this.singletonObjects.put(beanName, singletonObject);</span><br>                <span class="hljs-comment">// this.singletonFactories.remove(beanName);</span><br>                <span class="hljs-comment">// this.earlySingletonObjects.remove(beanName);</span><br>                <span class="hljs-comment">// this.registeredSingletons.add(beanName);</span><br>                addSingleton(beanName, singletonObject);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singletonObject;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回以给定名称注册的（原始）单例对象，如果尚未注册，则创建并注册一个新对象。</p><p>这一块一共可以拆成三部分来理解：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/6KBL1X-ZvNhzi.png"></p><h4 id="1-从缓存中获取-singletonObjects"><a href="#1-从缓存中获取-singletonObjects" class="headerlink" title="1. 从缓存中获取 singletonObjects"></a>1. 从缓存中获取 singletonObjects</h4><p><code>singletonObject</code> 是什么？</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** Cache of singleton objects: bean name to bean instance. */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="hljs-number">256</span>);<br></code></pre></td></tr></table></figure><p><code>singletonObjects</code> 是一个 ConcurrentHashMap， 用来缓存单例对象的实例。</p><h4 id="2-创建-singletonObject"><a href="#2-创建-singletonObject" class="headerlink" title="2. 创建 singletonObject"></a>2. 创建 singletonObject</h4><p>在从缓存中没有获取到 <code>singletonObject</code> ，创建新的对象</p><p><code>singletonObject = singletonFactory.getObject();</code> </p><p>这一步其实就是调用外边的 <code>createBean(beanName, mbd, args)</code> 方法，这是一个工厂方法。 通过 <code>createBean</code> 方法，会创建一个新的 <code>singletonObject</code>。</p><h4 id="3-将创建的-singletonObject-添加到缓存中"><a href="#3-将创建的-singletonObject-添加到缓存中" class="headerlink" title="3. 将创建的 singletonObject 添加到缓存中"></a>3. 将创建的 singletonObject 添加到缓存中</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addSingleton</span><span class="hljs-params">(String beanName, Object singletonObject)</span> </span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.singletonObjects) &#123;<br>        <span class="hljs-keyword">this</span>.singletonObjects.put(beanName, singletonObject);<br>        <span class="hljs-keyword">this</span>.singletonFactories.remove(beanName);<br>        <span class="hljs-keyword">this</span>.earlySingletonObjects.remove(beanName);<br>        <span class="hljs-comment">// 已经成功创建的单例</span><br>        <span class="hljs-keyword">this</span>.registeredSingletons.add(beanName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一步涉及到三个缓存，以及一个成功创建的单例列表。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** Cache of singleton objects: bean name to bean instance. */</span><br><span class="hljs-comment">/** 缓存单例对象， K-V -&gt; BeanName - Bean 实例 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="hljs-number">256</span>);<br><br><span class="hljs-comment">/** Cache of singleton factories: bean name to ObjectFactory. */</span><br><span class="hljs-comment">/** 缓存 Bean 工厂 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(<span class="hljs-number">16</span>);<br><br><span class="hljs-comment">/** Cache of early singleton objects: bean name to bean instance. */</span><br><span class="hljs-comment">/** 缓存早期单例对象 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="hljs-number">16</span>);<br><br><span class="hljs-comment">/** Set of registered singletons, containing the bean names in registration order. */</span><br><span class="hljs-comment">/** 已注册的单例列表，按注册顺序保存 BeanName。 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; registeredSingletons = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(<span class="hljs-number">256</span>);<br></code></pre></td></tr></table></figure><p>将创建的单例对象，添加到<code>单例缓存</code>中，同时将<code>工厂缓存</code>以及<code>早期单例对象缓存</code>中的对应对象删除。</p><h3 id="createBean"><a href="#createBean" class="headerlink" title="createBean"></a>createBean</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">createBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span></span><br><span class="hljs-function"><span class="hljs-keyword">throws</span> BeanCreationException </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>        logger.trace(<span class="hljs-string">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    &#125;<br>    RootBeanDefinition mbdToUse = mbd;<br><br>    <span class="hljs-comment">// Make sure bean class is actually resolved at this point, and</span><br>    <span class="hljs-comment">// clone the bean definition in case of a dynamically resolved Class</span><br>    <span class="hljs-comment">// which cannot be stored in the shared merged bean definition.</span><br>    <span class="hljs-comment">// 获取真实的类型</span><br>    Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);<br>    <span class="hljs-keyword">if</span> (resolvedClass != <span class="hljs-keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 创建新的 mbd 防止 其他线程修改</span><br>        mbdToUse = <span class="hljs-keyword">new</span> RootBeanDefinition(mbd);<br>        mbdToUse.setBeanClass(resolvedClass);<br>    &#125;<br><br>    <span class="hljs-comment">// Prepare method overrides.</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 验证并准备为此bean定义的方法替代。 检查是否存在具有指定名称的方法。</span><br>        mbdToUse.prepareMethodOverrides();<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),<br>                beanName, <span class="hljs-string">&quot;Validation of method overrides failed&quot;</span>, ex);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span><br>        <span class="hljs-comment">// 应用实例化之前的后处理器，以解决指定的bean是否存在实例化快捷方式。</span><br>        <span class="hljs-comment">// InstantiationAwareBeanPostProcessor 后置处理器 </span><br>        <span class="hljs-comment">// postProcessBeforeInstantiation 方法可能会已经实例化 Bean</span><br>        Object bean = resolveBeforeInstantiation(beanName, mbdToUse);<br>        <span class="hljs-keyword">if</span> (bean != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> bean;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,<br>                <span class="hljs-string">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, ex);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 实例化 Bean</span><br>        Object beanInstance = doCreateBean(beanName, mbdToUse, args);<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> beanInstance;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;<br>        <span class="hljs-comment">// A previously detected exception with proper bean creation context already,</span><br>        <span class="hljs-comment">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span><br>        <span class="hljs-keyword">throw</span> ex;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(<br>                mbdToUse.getResourceDescription(), beanName, <span class="hljs-string">&quot;Unexpected exception during bean creation&quot;</span>, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法中涉及到：创建 Bean 实例 , 填充 Bean , 应用 PostProcessor。</p><p>其中实例化 Bean 是在 <code>doCreateBean</code> 中。现在重点看一下 <code>doCreateBean</code> 方法。</p><h4 id="doCreateBean"><a href="#doCreateBean" class="headerlink" title="doCreateBean"></a>doCreateBean</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">doCreateBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span></span><br><span class="hljs-function"><span class="hljs-keyword">throws</span> BeanCreationException </span>&#123;<br><br>    <span class="hljs-comment">// Instantiate the bean.</span><br>    <span class="hljs-comment">// Bean 的 对象包装</span><br>    BeanWrapper instanceWrapper = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>        <span class="hljs-comment">// 从缓存中获取</span><br>        instanceWrapper = <span class="hljs-keyword">this</span>.factoryBeanInstanceCache.remove(beanName);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (instanceWrapper == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 缓存中获取不到则直接创建, 这里创建的 BeanInstance !!!</span><br>        instanceWrapper = createBeanInstance(beanName, mbd, args);<br>    &#125;<br>    <span class="hljs-comment">// 获取 Bean 实例以及类型</span><br>    Object bean = instanceWrapper.getWrappedInstance();<br>    Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();<br>    <span class="hljs-keyword">if</span> (beanType != NullBean.class) &#123;<br>        mbd.resolvedTargetType = beanType;<br>    &#125;<br><br>    <span class="hljs-comment">// Allow post-processors to modify the merged bean definition.</span><br>    <span class="hljs-keyword">synchronized</span> (mbd.postProcessingLock) &#123;<br>        <span class="hljs-keyword">if</span> (!mbd.postProcessed) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 如果允许修改 mbd</span><br>                <span class="hljs-comment">// 调用 MergedBeanDefinitionPostProcessor 后置处理器的</span><br>                <span class="hljs-comment">// postProcessMergedBeanDefinition(mbd, beanType, beanName);</span><br>                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,<br>                        <span class="hljs-string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);<br>            &#125;<br>            mbd.postProcessed = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Eagerly cache singletons to be able to resolve circular references</span><br>    <span class="hljs-comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span><br>    <span class="hljs-comment">// mbd 是单例 且 允许循环引用, (默认 true) 且在创建</span><br>    <span class="hljs-keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="hljs-keyword">this</span>.allowCircularReferences &amp;&amp;<br>            isSingletonCurrentlyInCreation(beanName));<br>    <span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +<br>                    <span class="hljs-string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 先获取 之前的 Bean 的引用, 从 beanPostProcessorCache 中 获取 SmartInstantiationAwareBeanPostProcessor</span><br>        <span class="hljs-comment">// 然后从 SmartInstantiationAwareBeanPostProcessor#getEarlyBeanReference 获取之前的引用</span><br>        addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));<br>    &#125;<br><br>    <span class="hljs-comment">// Initialize the bean instance.</span><br>    Object exposedObject = bean;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 属性赋值</span><br>        populateBean(beanName, mbd, instanceWrapper);<br>        <span class="hljs-comment">// 执行 init 方法</span><br>        exposedObject = initializeBean(beanName, exposedObject, mbd);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;<br>            <span class="hljs-keyword">throw</span> (BeanCreationException) ex;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(<br>                    mbd.getResourceDescription(), beanName, <span class="hljs-string">&quot;Initialization of bean failed&quot;</span>, ex);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 这里允许循环依赖</span><br>    <span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;<br>        <span class="hljs-comment">// 获取早期的 Bean, 如果没有循环依赖 则获取不到</span><br>        Object earlySingletonReference = getSingleton(beanName, <span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-comment">// 有循环依赖</span><br>        <span class="hljs-keyword">if</span> (earlySingletonReference != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 创建的是不是同一个，可能会有代理对象</span><br>            <span class="hljs-keyword">if</span> (exposedObject == bean) &#123;<br>                exposedObject = earlySingletonReference;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;<br>                <span class="hljs-comment">// 获取依赖的 Bean 并 循环放入到 actualDependentBeans</span><br>                String[] dependentBeans = getDependentBeans(beanName);<br>                Set&lt;String&gt; actualDependentBeans = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);<br>                <span class="hljs-keyword">for</span> (String dependentBean : dependentBeans) &#123;<br>                    <span class="hljs-keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;<br>                        actualDependentBeans.add(dependentBean);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCurrentlyInCreationException(beanName,<br>                            <span class="hljs-string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; has been injected into other beans [&quot;</span> +<br>                            StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +<br>                            <span class="hljs-string">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span> +<br>                            <span class="hljs-string">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span> +<br>                            <span class="hljs-string">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span> +<br>                            <span class="hljs-string">&quot;&#x27;getBeanNamesForType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Register bean as disposable.</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 注册销毁方法</span><br>        registerDisposableBeanIfNecessary(beanName, bean, mbd);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(<br>                mbd.getResourceDescription(), beanName, <span class="hljs-string">&quot;Invalid destruction signature&quot;</span>, ex);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> exposedObject;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样是代码很长很长！</p><p>分步骤阅读：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/tx0C4e-zD6xG0.png"></p><p>如果这个 Bean 是单例 Bean 且允许循环引用且在创建中，则说明在有循环引用。则调用：</p><p><code>addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</code></p><p>这一行代码涉及到两个方法，分别是 <code>getEarlyBeanReference</code> 和 <code>addSingletonFactory</code></p><ul><li>getEarlyBeanReference</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/vWP5Jt-tsa92g.png"></p><ul><li>addSingletonFactory</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/uvUVh4-TWy5l0.png"></p><p>这一块可以看到将创建的一个单例对象的 <code>singletonFactory</code> 添加到了 <code>singletonFactories</code> 缓存中。</p><p>同时将 <code>earlySingletonObjects</code> 缓存中的单例对象移除。</p><p>那什么时候添加到 <code>earlySingletonObjects</code> 缓存中的呢？</p><p>这块可以参考 <a href="https://mp.weixin.qq.com/s/MAlT1Y5MVmEclAZC6rgojQ">Spring 源码学习 15：finishBeanFactoryInitialization</a> 在 <code>getSingleton</code> 方法中 put 进去的。</p><p>为了方便，我把这一小块代码也贴出来：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/QPVvXy-pJUe1N.png"></p><p>在这里将缓存从 <code>singletonFactories</code> 移到了 <code>earlySingletonObjects</code>。</p><p>Spring 的 Bean 实例化的时候用到的三级缓存其实是：</p><p><strong>singletonObjects：</strong> 一级缓存，存储单例对象，Bean 已经实例化，初始化完成。</p><p><strong>earlySingletonObjects：</strong> 二级缓存，存储 singletonObject，这个 Bean 实例化了，还没有初始化。 </p><p><strong>singletonFactories：</strong> 三级缓存，存储 singletonFactory</p><p><strong>下面会初始化 Bean</strong></p><p>这里关注重点关注下面一部分：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/hmZmhM-SI303W.png"></p><ul><li>populateBean</li></ul><p>对 Bean 的属性进行赋值。</p><p>这块需要注意的是，在对属性进行赋值时，发现依赖了其他 Bean，就会去先创建其他 Bean。</p><p>我这边使用的注解 @Autowired 就会执行下面一部分：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ZjKmVC-J3xIl5.png"></p><p>在这里解析属性的时候，就会去创建内部依赖的 Bean。</p><ul><li>initializeBean</li></ul><h3 id="getObjectForBeanInstance"><a href="#getObjectForBeanInstance" class="headerlink" title="getObjectForBeanInstance"></a>getObjectForBeanInstance</h3><p>获取给定bean实例的对象，如果是FactoryBean，则为bean实例本身或其创建的对象。</p><p>这一块逻辑相对比较简单，就是根据前面你创建的 beanInstance ， 判断其类型，从而创建 Bean 实例。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要介绍了一个 单例 Bean 的创建，当然都是大块大块的源码，需要耐心的啃。</p><p>阅读完源码，基本上对循环依赖能有个详细的了解，知道 Spring 在初始化 Bean 的时候是使用三级缓存来处理循环依赖的额，而后面则会单独准备一篇文章对循环依赖做介绍。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/fybVmp-2dcCmU.png"></p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/MAlT1Y5MVmEclAZC6rgojQ">Spring 源码学习 15：finishBeanFactoryInitialization（重点）</a></li><li><a href="https://mp.weixin.qq.com/s/bKmqVFuLLLCquWf3tzH30g">Spring 源码学习 14：initApplicationEventMulticaster</a></li><li><a href="https://mp.weixin.qq.com/s/99IdvVkTULwTcxrxhF84Ew">Spring 源码学习 13：initMessageSource</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 15：finishBeanFactoryInitialization（重点）</title>
      <link href="2021/01/12/source-spring-15.html"/>
      <url>2021/01/12/source-spring-15.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>可以说前面的都是准备工作，而接下来开始的才是重点，在这一步会完成 BeanFactory 的初始化，同时实例化单例 Bean。</p><p>具体怎么操作的，那就一起阅读源码吧！</p><p>不过在阅读源码之前，还是需要了解一些知识的。</p><ol><li>什么是 FactoryBean ？</li><li>FactoryBean 是如何使用的 ？ </li><li>Bean 是如何初始化的？</li><li>常说的循环依赖是怎么解决的？</li></ol><h3 id="什么是-FactoryBean-？"><a href="#什么是-FactoryBean-？" class="headerlink" title="什么是 FactoryBean ？"></a>什么是 FactoryBean ？</h3><p>在官网的这篇文章<a href="https://spring.io/blog/2011/08/09/what-s-a-factorybean" title="What&#39;s a FactoryBean?">《What’s a FactoryBean?》</a>中有相关解答，有兴趣的小伙伴可以看一下。</p><p>由内部使用的对象实现的接口，这些对象 BeanFactory 本身就是单个对象的工厂。如果 bean 实现此接口，则它将用作对象公开的工厂，而不是直接用作将自身公开的 bean 实例。</p><p>注意：实现此接口的 bean 不能用作普通 bean。 FactoryBean以 bean 样式定义，但是为 bean 引用（getObject()）公开的对象始终是它创建的对象。</p><p>FactoryBeans 可以支持单例和原型，并且可以按需延迟创建对象，也可以在启动时急于创建对象。</p><p>当生命一个 FactoryBean 时，会存在两个类型的 Bean，分别是 FactoryBean 本身，以及它需要创建的类型的 Bean。</p><p>下面是使用示例：</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1-PaidComponent"><a href="#1-PaidComponent" class="headerlink" title="1. PaidComponent"></a>1. PaidComponent</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaidComponent</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PaidComponent</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;PaidComponent 无参构造被调用&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-PaidComponentFactoryBean"><a href="#2-PaidComponentFactoryBean" class="headerlink" title="2. PaidComponentFactoryBean"></a>2. PaidComponentFactoryBean</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaidComponentFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">PaidComponent</span>&gt; </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PaidComponent <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;PaidComponentFactoryBean 的 getObject 方法被调用&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PaidComponent();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br><span class="hljs-keyword">return</span> PaidComponent.class;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-Test"><a href="#3-Test" class="headerlink" title="3 Test"></a>3 Test</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationConfigApplicationTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>AnnotationConfigApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br><br>context.register(JavaConfig.class);<br><br><br>context.refresh();<br><br><br>System.out.println(context.getBean(<span class="hljs-string">&quot;paidComponentFactoryBean&quot;</span>));<br>System.out.println(context.getBean(<span class="hljs-string">&quot;&amp;paidComponentFactoryBean&quot;</span>));<br>System.out.println(context.getBean(PaidComponent.class));<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/5Ho48G-UVQwo4.png"></p><p>可以看出注册了两个 Bean， 一个是 <code>paidComponentFactoryBean</code> ，另一个是 <code>&amp;paidComponentFactoryBean</code>。</p><p>而直接获取 <code>paidComponentFactoryBean</code> 获取到的其实是 FactoryBean 的 <code>getObject()</code> 方法返回的类型。</p><h3 id="finishBeanFactoryInitialization-源码"><a href="#finishBeanFactoryInitialization-源码" class="headerlink" title="finishBeanFactoryInitialization 源码"></a>finishBeanFactoryInitialization 源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finishBeanFactoryInitialization</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;<br>    <span class="hljs-comment">// Initialize conversion service for this context.</span><br>    <span class="hljs-comment">// 初始化类型转换器</span><br>    <span class="hljs-keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;<br>            beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;<br>        beanFactory.setConversionService(<br>                beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));<br>    &#125;<br><br>    <span class="hljs-comment">// Register a default embedded value resolver if no bean post-processor</span><br>    <span class="hljs-comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span><br>    <span class="hljs-comment">// at this point, primarily for resolution in annotation attribute values.</span><br>    <span class="hljs-comment">// 主要用于注释属性值的解析</span><br>    <span class="hljs-keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;<br>        beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));<br>    &#125;<br><br>    <span class="hljs-comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span><br>    <span class="hljs-comment">// 尽早初始化 LoadTimeWeaverAware Bean，以便尽早注册其转换器。</span><br>    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>);<br>    <span class="hljs-keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;<br>        getBean(weaverAwareName);<br>    &#125;<br><br>    <span class="hljs-comment">// Stop using the temporary ClassLoader for type matching.</span><br>    <span class="hljs-comment">// 停止使用临时的ClassLoader进行类型匹配。</span><br>    beanFactory.setTempClassLoader(<span class="hljs-keyword">null</span>);<br><br>    <span class="hljs-comment">// Allow for caching all bean definition metadata, not expecting further changes.</span><br>    <span class="hljs-comment">// 设置 beanDefinition 元数据 不可以再修改</span><br>    beanFactory.freezeConfiguration();<br><br>    <span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span><br>    <span class="hljs-comment">// 实例化单例 bean</span><br>    beanFactory.preInstantiateSingletons();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里重点关注最后一行</p><p><code>beanFactory.preInstantiateSingletons();</code></p><h4 id="preInstantiateSingletons"><a href="#preInstantiateSingletons" class="headerlink" title="preInstantiateSingletons"></a>preInstantiateSingletons</h4><p>这块进入的是类  <code>DefaultListableBeanFactory</code> 类的源码。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preInstantiateSingletons</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>        logger.trace(<span class="hljs-string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span><br>    <span class="hljs-comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span><br>    <span class="hljs-comment">// 将 beanDefinitionNames 放到集合中</span><br>    List&lt;String&gt; beanNames = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-keyword">this</span>.beanDefinitionNames);<br><br>    <span class="hljs-comment">// Trigger initialization of all non-lazy singleton beans...</span><br>    <span class="hljs-comment">// 遍历</span><br>    <span class="hljs-keyword">for</span> (String beanName : beanNames) &#123;<br>        <span class="hljs-comment">// 获取 bd 信息, 因为可能 定义了 parentBeanDefinition</span><br>        RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);<br>        <span class="hljs-comment">// 非抽象, 单例, 且不是懒加载</span><br>        <span class="hljs-keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;<br>            <span class="hljs-comment">// 判断是否为 FactoryBean</span><br>            <span class="hljs-keyword">if</span> (isFactoryBean(beanName)) &#123;<br>                <span class="hljs-comment">// FactoryBean 需要添加前缀 &amp; ,通过 getBean(&amp;beanName) 获取的是 FactoryBean 本身</span><br>                Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);<br>                <span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> FactoryBean) &#123;<br>                    FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;<br>                    <span class="hljs-comment">// 判断是否需要初始化</span><br>                    <span class="hljs-keyword">boolean</span> isEagerInit;<br>                    <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-keyword">null</span> &amp;&amp; factory <span class="hljs-keyword">instanceof</span> SmartFactoryBean) &#123;<br>                        isEagerInit = AccessController.doPrivileged(<br>                                (PrivilegedAction&lt;Boolean&gt;) ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,<br>                                getAccessControlContext());<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        isEagerInit = (factory <span class="hljs-keyword">instanceof</span> SmartFactoryBean &amp;&amp;<br>                                ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());<br>                    &#125;<br>                    <span class="hljs-comment">// 需要初始化</span><br>                    <span class="hljs-keyword">if</span> (isEagerInit) &#123;<br>                        getBean(beanName);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                getBean(beanName);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Trigger post-initialization callback for all applicable beans...</span><br>    <span class="hljs-comment">// 如果 Bean 实现了 SmartInitializingSingleton,</span><br>    <span class="hljs-comment">// 在这里会统一调用 afterSingletonsInstantiated 方法</span><br>    <span class="hljs-keyword">for</span> (String beanName : beanNames) &#123;<br>        Object singletonInstance = getSingleton(beanName);<br>        <span class="hljs-keyword">if</span> (singletonInstance <span class="hljs-keyword">instanceof</span> SmartInitializingSingleton) &#123;<br>            StartupStep smartInitialize = <span class="hljs-keyword">this</span>.getApplicationStartup().start(<span class="hljs-string">&quot;spring.beans.smart-initialize&quot;</span>)<br>                    .tag(<span class="hljs-string">&quot;beanName&quot;</span>, beanName);<br>            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;<br>            <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-keyword">null</span>) &#123;<br>                AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;<br>                    smartSingleton.afterSingletonsInstantiated();<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>                &#125;, getAccessControlContext());<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                smartSingleton.afterSingletonsInstantiated();<br>            &#125;<br>            smartInitialize.end();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面方法中通过循环 <code>beanNames</code> 进行初始化 Bean。</p><p>其中需要区别 BeanFactory 和 普通 Bean。 这也是我开始为什么先介绍了<code>什么是 BeanFactory ?</code></p><p>下面就需要重点关注 <code>getBean(beanName)</code> 方法。</p><h4 id="getBean"><a href="#getBean" class="headerlink" title="getBean"></a>getBean</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    <span class="hljs-keyword">return</span> doGetBean(name, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>getBean</code> 方法中调用的是 <code>doGetBean</code> 方法。</p><h4 id="doGetBean"><a href="#doGetBean" class="headerlink" title="doGetBean"></a>doGetBean</h4><p>doGetBean 方法作用是：<code>返回一个实例，该实例可以是指定bean的共享或独立的</code>。 </p><p>该方法接受四个参数：</p><blockquote><p>name – 要检索的 bean 的名称<br>requiredType – 要检索的 bean 的必需类型，这个可以为空<br>args –使用显式参数创建bean实例时要使用的参数（仅在创建新实例而不是检索现有实例时才应用）<br>typeCheckOnly –是否为类型检查而不是实际使用获取实例</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">doGetBean</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">        String name, <span class="hljs-meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="hljs-meta">@Nullable</span> Object[] args, <span class="hljs-keyword">boolean</span> typeCheckOnly)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br><br>    <span class="hljs-comment">// 去掉工厂引用的前缀, 同时转换别名</span><br>    String beanName = transformedBeanName(name);<br>    Object bean;<br><br>    <span class="hljs-comment">// Eagerly check singleton cache for manually registered singletons.</span><br>    <span class="hljs-comment">// 从缓存中检查单例是否已经存在</span><br>    Object sharedInstance = getSingleton(beanName);<br>    <span class="hljs-keyword">if</span> (sharedInstance != <span class="hljs-keyword">null</span> &amp;&amp; args == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            <span class="hljs-keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;<br>                logger.trace(<span class="hljs-string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +<br>                        <span class="hljs-string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                logger.trace(<span class="hljs-string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 从缓存中如果获取到了, 普通 Bean 直接返回, FactoryBean 则返回 FactoryBean 创建的 Bean</span><br>        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Fail if we&#x27;re already creating this bean instance:</span><br>        <span class="hljs-comment">// We&#x27;re assumably within a circular reference.</span><br>        <span class="hljs-comment">// 返回指定的 原型bean (prototype 类型的 Bean) 是否当前正在创建中（在当前线程内）。</span><br>        <span class="hljs-keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCurrentlyInCreationException(beanName);<br>        &#125;<br><br>        <span class="hljs-comment">// Check if bean definition exists in this factory.</span><br>        <span class="hljs-comment">// 检查 BeanFactory 是否存在这个 Bean 的 BeanDefinition</span><br>        BeanFactory parentBeanFactory = getParentBeanFactory();<br>        <span class="hljs-keyword">if</span> (parentBeanFactory != <span class="hljs-keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;<br>            <span class="hljs-comment">// Not found -&gt; check parent.</span><br>            <span class="hljs-comment">// 检查父容器中有没有定义</span><br>            String nameToLookup = originalBeanName(name);<br>            <span class="hljs-comment">// 返回从父容器中查询的结果</span><br>            <span class="hljs-keyword">if</span> (parentBeanFactory <span class="hljs-keyword">instanceof</span> AbstractBeanFactory) &#123;<br>                <span class="hljs-keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(<br>                        nameToLookup, requiredType, args, typeCheckOnly);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (args != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// Delegation to parent with explicit args.</span><br>                <span class="hljs-keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// No args -&gt; delegate to standard getBean method.</span><br>                <span class="hljs-keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!typeCheckOnly) &#123;<br>            <span class="hljs-comment">// 将当前 beanName 放入一个 alreadyCreated 的 Set 集合中。</span><br>            <span class="hljs-comment">// 标识本次调用方法，并非是要获取bean的类型，而是为了创建实例，将beanName存到alreadyCreated集合，代表该bean已经创建了，后面try。。catch有异常会清空该beanName</span><br>            markBeanAsCreated(beanName);<br>        &#125;<br><br>        StartupStep beanCreation = <span class="hljs-keyword">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.beans.instantiate&quot;</span>)<br>                .tag(<span class="hljs-string">&quot;beanName&quot;</span>, name);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-keyword">null</span>) &#123;<br>                beanCreation.tag(<span class="hljs-string">&quot;beanType&quot;</span>, requiredType::toString);<br>            &#125;<br>            <span class="hljs-comment">// 获取 Bean 的 BeanDefinition</span><br>            RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);<br>            checkMergedBeanDefinition(mbd, beanName, args);<br><br>            <span class="hljs-comment">// Guarantee initialization of beans that the current bean depends on.</span><br>            <span class="hljs-comment">// 确保依赖的 Bean 已经被初始化, 比如 @DependsOn 注解</span><br>            String[] dependsOn = mbd.getDependsOn();<br>            <span class="hljs-keyword">if</span> (dependsOn != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">for</span> (String dep : dependsOn) &#123;<br>                    <span class="hljs-keyword">if</span> (isDependent(beanName, dep)) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,<br>                                <span class="hljs-string">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                    &#125;<br>                    registerDependentBean(dep, beanName);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 创建依赖的 Bean</span><br>                        getBean(dep);<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,<br>                                <span class="hljs-string">&quot;&#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class="hljs-string">&quot;&#x27;&quot;</span>, ex);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// Create bean instance.</span><br>            <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>                <span class="hljs-comment">// 单例 bean</span><br>                sharedInstance = getSingleton(beanName, () -&gt; &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>                        <span class="hljs-comment">// Explicitly remove instance from singleton cache: It might have been put there</span><br>                        <span class="hljs-comment">// eagerly by the creation process, to allow for circular reference resolution.</span><br>                        <span class="hljs-comment">// Also remove any beans that received a temporary reference to the bean.</span><br>                        destroySingleton(beanName);<br>                        <span class="hljs-keyword">throw</span> ex;<br>                    &#125;<br>                &#125;);<br>                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);<br>            &#125;<br>            <span class="hljs-comment">// 创建原型Bean</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mbd.isPrototype()) &#123;<br>                <span class="hljs-comment">// It&#x27;s a prototype -&gt; create a new instance.</span><br>                Object prototypeInstance = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    beforePrototypeCreation(beanName);<br>                    prototypeInstance = createBean(beanName, mbd, args);<br>                &#125;<br>                <span class="hljs-keyword">finally</span> &#123;<br>                    afterPrototypeCreation(beanName);<br>                &#125;<br>                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);<br>            &#125;<br><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 委托给实现类处理</span><br>                String scopeName = mbd.getScope();<br>                <span class="hljs-keyword">if</span> (!StringUtils.hasLength(scopeName)) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;No scope name defined for bean ´&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                &#125;<br>                Scope scope = <span class="hljs-keyword">this</span>.scopes.get(scopeName);<br>                <span class="hljs-keyword">if</span> (scope == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;No Scope registered for scope name &#x27;&quot;</span> + scopeName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Object scopedInstance = scope.get(beanName, () -&gt; &#123;<br>                        beforePrototypeCreation(beanName);<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);<br>                        &#125;<br>                        <span class="hljs-keyword">finally</span> &#123;<br>                            afterPrototypeCreation(beanName);<br>                        &#125;<br>                    &#125;);<br>                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ScopeNotActiveException(beanName, scopeName, ex);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>            beanCreation.tag(<span class="hljs-string">&quot;exception&quot;</span>, ex.getClass().toString());<br>            beanCreation.tag(<span class="hljs-string">&quot;message&quot;</span>, String.valueOf(ex.getMessage()));<br>            cleanupAfterBeanCreationFailure(beanName);<br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            beanCreation.end();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Check if required type matches the type of the actual bean instance.</span><br>    <span class="hljs-comment">// 检查所需的类型是否与实际bean实例的类型匹配。</span><br>    <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);<br>            <span class="hljs-keyword">if</span> (convertedBean == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());<br>            &#125;<br>            <span class="hljs-keyword">return</span> convertedBean;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (TypeMismatchException ex) &#123;<br>            <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>                logger.trace(<span class="hljs-string">&quot;Failed to convert bean &#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27; to required type &#x27;&quot;</span> +<br>                        ClassUtils.getQualifiedName(requiredType) + <span class="hljs-string">&quot;&#x27;&quot;</span>, ex);<br>            &#125;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (T) bean;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码比较长，基本上步骤已经添加相应的注释，基本上可以分为三步：</p><ol><li>从缓存中获取到 Bean，创建对应的 Bean；</li><li>没有从缓存中获取到 Bean，创建对应的 Bean；</li><li>检查所需的类型是否与实际bean实例的类型匹配。</li></ol><p>下面从这三个步骤分别介绍：</p><ul><li>从缓存中获取到 Bean，创建对应的 Bean</li></ul><p><strong><code>Object sharedInstance = getSingleton(beanName);</code></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getSingleton</span><span class="hljs-params">(String beanName)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> getSingleton(beanName, <span class="hljs-keyword">true</span>);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回以给定名称注册的（原始）单例对象。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 检查已经实例化的单例，并允许早期引用当前创建的单例（解析循环引用）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">getSingleton</span><span class="hljs-params">(String beanName, <span class="hljs-keyword">boolean</span> allowEarlyReference)</span> </span>&#123;<br>    <span class="hljs-comment">// Quick check for existing instance without full singleton lock</span><br>    <span class="hljs-comment">// private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;&gt;(256);</span><br>    <span class="hljs-comment">// 缓存了 单例 Bean</span><br>    Object singletonObject = <span class="hljs-keyword">this</span>.singletonObjects.get(beanName);<br>    <span class="hljs-comment">// 如果没有获取到, 并且当前 Bean 正在被创建中</span><br>    <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;<br>        <span class="hljs-comment">// private final Map&lt;String, Object&gt; earlySingletonObjects = new ConcurrentHashMap&lt;&gt;(16);</span><br>        <span class="hljs-comment">// 早期的单例对象, 先从 earlySingletonObjects 中获取</span><br>        singletonObject = <span class="hljs-keyword">this</span>.earlySingletonObjects.get(beanName);<br>        <span class="hljs-comment">// 没有从 earlySingletonObjects 缓存中获取到</span><br>        <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-keyword">null</span> &amp;&amp; allowEarlyReference) &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.singletonObjects) &#123;<br>                <span class="hljs-comment">// Consistent creation of early reference within full singleton lock</span><br>                <span class="hljs-comment">// 再次获取并检查</span><br>                singletonObject = <span class="hljs-keyword">this</span>.singletonObjects.get(beanName);<br>                <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-keyword">null</span>) &#123;<br>                    singletonObject = <span class="hljs-keyword">this</span>.earlySingletonObjects.get(beanName);<br>                    <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-keyword">null</span>) &#123;<br>                        <span class="hljs-comment">// private final Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = new HashMap&lt;&gt;(16);</span><br>                        <span class="hljs-comment">// 从 singletonFactories 缓存中获取</span><br>                        ObjectFactory&lt;?&gt; singletonFactory = <span class="hljs-keyword">this</span>.singletonFactories.get(beanName);<br>                        <span class="hljs-keyword">if</span> (singletonFactory != <span class="hljs-keyword">null</span>) &#123;<br>                            singletonObject = singletonFactory.getObject();<br>                            <span class="hljs-comment">// 添加到 earlySingletonObjects 缓存中</span><br>                            <span class="hljs-keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);<br>                            <span class="hljs-comment">// 从 singletonFactories 缓存中删除</span><br>                            <span class="hljs-keyword">this</span>.singletonFactories.remove(beanName);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> singletonObject;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看出，获取一个 Bean ：</p><ol><li>先从 <code>singletonObjects</code> 中获取 Bean；</li><li>获取不到，从 <code>earlySingletonObjects</code> 中获取 Bean；</li><li>获取不到，从 <code>singletonFactories</code> 中获取 Bean。</li></ol><p>当然这一块涉及到循环引用，篇幅有限，后面会专门介绍循环引用。</p><ul><li>没有从缓存中获取到 Bean，创建对应的 Bean</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Create bean instance.</span><br><span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>    <span class="hljs-comment">// 单例 bean</span><br>    sharedInstance = getSingleton(beanName, () -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>            <span class="hljs-comment">// Explicitly remove instance from singleton cache: It might have been put there</span><br>            <span class="hljs-comment">// eagerly by the creation process, to allow for circular reference resolution.</span><br>            <span class="hljs-comment">// Also remove any beans that received a temporary reference to the bean.</span><br>            destroySingleton(beanName);<br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br>    &#125;);<br>    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mbd.isPrototype()) &#123;<br>    <span class="hljs-comment">// 创建原型Bean</span><br>    <br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 委托给实现类处理</span><br>    String scopeName = mbd.getScope();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>检查所需的类型是否与实际bean实例的类型匹配</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里主要介绍了 Bean 的创建过程，主要是对整个过程有个大概的了解和熟悉，针对过程画图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/II1QBD-L3tiN3.png"></p><p>其中 Bean 的实例化主要关注单例 Bean 的实例化，后面准备对其进行详细研究后，再进行说明。</p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/bKmqVFuLLLCquWf3tzH30g">Spring 源码学习 14：initApplicationEventMulticaster</a></li><li><a href="https://mp.weixin.qq.com/s/99IdvVkTULwTcxrxhF84Ew">Spring 源码学习 13：initMessageSource</a></li><li><a href="https://mp.weixin.qq.com/s/QrogJIm9OaUmeRk9tGiNeg">Spring 源码学习 12：registerBeanPostProcessors</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 14：initApplicationEventMulticaster 、onRefresh 和 registerListeners</title>
      <link href="2021/01/05/source-spring-14.html"/>
      <url>2021/01/05/source-spring-14.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇介绍了国际化的使用以及初始化消息源的源码，接下来接着往下阅读，将进入 initApplicationEventMulticaster 、onRefresh 和 registerListeners 的相关操作逻辑。</p><p>这一部分主要是初始化事件广播器以及注册监听器。而 onRefresh 部分则需要子类去实现。 所以本文主要介绍以下几个部分：</p><ol><li>什么是 Spring 事件？</li><li>监听器是如何使用的？</li></ol><h3 id="什么是-Spring-事件？"><a href="#什么是-Spring-事件？" class="headerlink" title="什么是 Spring 事件？"></a>什么是 Spring 事件？</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/7NqBIZ-8RXd1N.png"></p><p>这块的介绍在官网 <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#context-functionality-events" title="Spring 官方文档">1.15.2. Standard and Custom Events</a> 部分有介绍。</p><blockquote><p>Spring 通过 ApplicationEvent 类和 ApplicationListener 接口提供 ApplicationContext 中的事件处理。如果将实现 ApplicationListener 接口的 bean 部署到上下文中，则每次将 ApplicationEvent 发布到 ApplicationContext 时，都会通知该 bean。本质上，这是标准的观察者设计模式。</p></blockquote><p>归纳下来主要就是三个部分: 事件、事件发布者、事件监听器。</p><ol><li>事件：ApplicationEvent，要自定义事件，则需要创建一个类继承 ApplicationEvent。</li><li>事件发布者：ApplicationEventPublisher 和 ApplicationEventMulticaster，因为 ApplicationContext 实现了 ApplicationEventPublisher，所以事件发布可以直接使用 ApplicationContext。</li><li>事件监听器：ApplicationListener，通过创建一个实现了 ApplicationListener 并注册为 Spring bean 的类来接收消息。</li></ol><p>Spring 也提供了也有一些内置的监听器，可以在官网查看，这里就不做介绍了。</p><h3 id="使用监听器"><a href="#使用监听器" class="headerlink" title="使用监听器"></a>使用监听器</h3><p>简单来说主要分为以下几个部分：</p><ol><li>注册事件</li><li>注册监听器</li><li>发布事件</li></ol><p>在接口调用发布事件时，监听器就会做出相应的操作。</p><h4 id="1-注册事件"><a href="#1-注册事件" class="headerlink" title="1. 注册事件"></a>1. 注册事件</h4><p>创建 <code>MyApplicationEvent</code> 类并继承 <code>ApplicationEvent</code></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApplicationEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ApplicationEvent</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">5366526231219883438L</span>;<br><span class="hljs-keyword">private</span> String message;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Create a new &#123;<span class="hljs-doctag">@code</span> ApplicationEvent&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> source the object on which the event initially occurred or with</span><br><span class="hljs-comment"> *               which the event is associated (never &#123;<span class="hljs-doctag">@code</span> null&#125;)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyApplicationEvent</span><span class="hljs-params">(Object source, String message)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(source);<br><span class="hljs-keyword">this</span>.message = message;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> message;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-注册监听器"><a href="#2-注册监听器" class="headerlink" title="2. 注册监听器"></a>2. 注册监听器</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApplicationListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationListener</span>&lt;<span class="hljs-title">MyApplicationEvent</span>&gt; </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onApplicationEvent</span><span class="hljs-params">(MyApplicationEvent event)</span> </span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;MyApplicationListener 收到消息: &quot;</span> + event.getMessage());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然这里也可以使用注解 <code>@EventListener</code> 的方式来使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAnnotationApplicationListener</span> </span>&#123;<br><br><span class="hljs-meta">@EventListener(classes = MyApplicationEvent.class)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myApplicationEventListener</span><span class="hljs-params">(MyApplicationEvent event)</span> </span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;使用注解的方式, 收到事件: &quot;</span> + event.getMessage());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><p>因为 AnnotationConfigApplicationContext 实现了 ApplicationContext ， 而 ApplicationContext 实现了 ApplicationEventPublisher，所以这块传入当前 context 是没有问题的。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationConfigApplicationTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>AnnotationConfigApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br><br>context.register(JavaConfig.class);<br><br><br>context.refresh();<br><br>MyApplicationEvent myApplicationEvent = <span class="hljs-keyword">new</span> MyApplicationEvent(context, <span class="hljs-string">&quot;呼叫土豆,呼叫土豆!&quot;</span>);<br><br>context.publishEvent(myApplicationEvent);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>日志输出：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/6I8oSf-BcMLIj.png"></p><h3 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h3><h4 id="initApplicationEventMulticaster"><a href="#initApplicationEventMulticaster" class="headerlink" title="initApplicationEventMulticaster"></a>initApplicationEventMulticaster</h4><p>这块和上面初始化消息源类似，都是查找指定名称的 Bean ，如果找不到，则自己使用默认的。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initApplicationEventMulticaster</span><span class="hljs-params">()</span> </span>&#123;<br>    ConfigurableListableBeanFactory beanFactory = getBeanFactory();<br><br>    <span class="hljs-comment">// 是否包含 applicationEventMulticaster Bean</span><br>    <span class="hljs-keyword">if</span> (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;<br>        <span class="hljs-keyword">this</span>.applicationEventMulticaster =<br>                beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;Using ApplicationEventMulticaster [&quot;</span> + <span class="hljs-keyword">this</span>.applicationEventMulticaster + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 使用  SimpleApplicationEventMulticaster 创建一个 事件发布器</span><br>        SimpleApplicationEventMulticaster simpleApplicationEventMulticaster = <span class="hljs-keyword">new</span> SimpleApplicationEventMulticaster(beanFactory);<br>        simpleApplicationEventMulticaster.setApplicationStartup(getApplicationStartup());<br>        <span class="hljs-keyword">this</span>.applicationEventMulticaster = simpleApplicationEventMulticaster;<br>        beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, <span class="hljs-keyword">this</span>.applicationEventMulticaster);<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;No &#x27;&quot;</span> + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + <span class="hljs-string">&quot;&#x27; bean, using &quot;</span> +<br>                    <span class="hljs-string">&quot;[&quot;</span> + <span class="hljs-keyword">this</span>.applicationEventMulticaster.getClass().getSimpleName() + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh"></a>onRefresh</h4><p>这块需要子类去实现，我这里通过断电，暂时没有进去。所以就不介绍了。</p><h4 id="registerListeners"><a href="#registerListeners" class="headerlink" title="registerListeners"></a>registerListeners</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerListeners</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 添加实现ApplicationListener作为侦听器的bean。</span><br>    <span class="hljs-comment">// 不会影响其他侦听器，可以将它们添加为非bean。</span><br><br>    <span class="hljs-comment">// Register statically specified listeners first.</span><br>    <span class="hljs-comment">// 先注册静态指定的监听器</span><br>    <span class="hljs-keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;<br>        getApplicationEventMulticaster().addApplicationListener(listener);<br>    &#125;<br><br>    <span class="hljs-comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span><br>    <span class="hljs-comment">// uninitialized to let post-processors apply to them!</span><br>    <span class="hljs-comment">// 只是添加 并没有执行</span><br>    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>);<br>    <span class="hljs-keyword">for</span> (String listenerBeanName : listenerBeanNames) &#123;<br>        getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);<br>    &#125;<br><br>    <span class="hljs-comment">// Publish early application events now that we finally have a multicaster...</span><br>    <span class="hljs-comment">// 发布早期的时间,并且将 earlyApplicationEvents 设置为空</span><br>    Set&lt;ApplicationEvent&gt; earlyEventsToProcess = <span class="hljs-keyword">this</span>.earlyApplicationEvents;<br>    <span class="hljs-keyword">this</span>.earlyApplicationEvents = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(earlyEventsToProcess)) &#123;<br>        <span class="hljs-keyword">for</span> (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123;<br>            getApplicationEventMulticaster().multicastEvent(earlyEvent);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章主要内容是介绍 Spring 事件的使用，同时简单介绍了 initApplicationEventMulticaster 、onRefresh 和 registerListeners 部分的源码。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/KgCNdp-V1Ov1L.png"></p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/99IdvVkTULwTcxrxhF84Ew">Spring 源码学习 13：initMessageSource</a></li><li><a href="https://mp.weixin.qq.com/s/QrogJIm9OaUmeRk9tGiNeg">Spring 源码学习 12：registerBeanPostProcessors</a></li><li><a href="https://mp.weixin.qq.com/s/6VrVDg4m6yi7V4rZZB-6tA">Spring 源码学习 11：invokeBeanFactoryPostProcessors</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 13：initMessageSource</title>
      <link href="2021/01/02/source-spring-13.html"/>
      <url>2021/01/02/source-spring-13.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在阅读完 registerBeanPostProcessors 源码之后， 下一步就进入到 initMessageSource，这一步主要作用是初始化国际化文件。</p><p>依然如之前所示，先通过官网了解到国际化的用法，然后再对源码进行研究。</p><h3 id="MessageSource-国际化"><a href="#MessageSource-国际化" class="headerlink" title="MessageSource 国际化"></a>MessageSource 国际化</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/i7fXJs-MLV2A0.png"></p><p>如官网<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#context-functionality-messagesource" title="Spring 官方文档">1.15.1. Internationalization using MessageSource</a>所示，主要作用就是使用国际化，定制不同的消息。</p><p>需要注意的是 MessageSource 定义的 Bean 名字必须为 <code>messageSource</code>， 而如果找不到则会默认注册 <code>DelegatingMessageSource</code> 作为 messageSource  的  Bean。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1-创建国际化文件"><a href="#1-创建国际化文件" class="headerlink" title="1. 创建国际化文件"></a>1. 创建国际化文件</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/vbK7nm-tNoYJn.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/VKIW32-gHAVHQ.png"></p><h4 id="2-声明-MessageSource"><a href="#2-声明-MessageSource" class="headerlink" title="2. 声明 MessageSource"></a>2. 声明 MessageSource</h4><p>在 JavaConfig 中 声明 MessageSource ， 记得名字一定要叫做 <code>messageSource</code> ！</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.liuzhihang&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaConfig</span> </span>&#123;<br><br><span class="hljs-meta">@Bean(name = &quot;messageSource&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> MessageSource <span class="hljs-title">getMessageSource</span><span class="hljs-params">()</span> </span>&#123;<br><br>ResourceBundleMessageSource messageSource = <span class="hljs-keyword">new</span> ResourceBundleMessageSource();<br><br>messageSource.setDefaultEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>messageSource.addBasenames(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;message_en&quot;</span>);<br><br><span class="hljs-keyword">return</span> messageSource;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-测试结果"><a href="#3-测试结果" class="headerlink" title="3. 测试结果"></a>3. 测试结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationConfigApplicationTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>AnnotationConfigApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br><br>context.register(JavaConfig.class);<br><br>context.refresh();<br><br>MessageSource messageSource = context.getBean(MessageSource.class);<br><br>String zhMessage = messageSource.getMessage(<span class="hljs-string">&quot;user.name&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, Locale.CHINA);<br>String enMessage = messageSource.getMessage(<span class="hljs-string">&quot;user.name&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, Locale.ENGLISH);<br><br>System.out.println(<span class="hljs-string">&quot;zhMessage = &quot;</span> + zhMessage);<br><br>System.out.println(<span class="hljs-string">&quot;enMessage = &quot;</span> + enMessage);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上所示，执行之后输出结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/sqNm0Q-MyrhWD.png"></p><p>知道了国际化是如何使用的之后，再想一想这一步源码，就知道是什么作用了吧！</p><h3 id="initMessageSource-源码"><a href="#initMessageSource-源码" class="headerlink" title="initMessageSource 源码"></a>initMessageSource 源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initMessageSource</span><span class="hljs-params">()</span> </span>&#123;<br>    ConfigurableListableBeanFactory beanFactory = getBeanFactory();<br><br>    <span class="hljs-comment">// Bean 的名称必须要是 messageSource</span><br>    <span class="hljs-keyword">if</span> (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123;<br>        <span class="hljs-keyword">this</span>.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);<br>        <span class="hljs-comment">// Make MessageSource aware of parent MessageSource.</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.parent != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.messageSource <span class="hljs-keyword">instanceof</span> HierarchicalMessageSource) &#123;<br>            HierarchicalMessageSource hms = (HierarchicalMessageSource) <span class="hljs-keyword">this</span>.messageSource;<br>            <span class="hljs-keyword">if</span> (hms.getParentMessageSource() == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// Only set parent context as parent MessageSource if no parent MessageSource</span><br>                <span class="hljs-comment">// registered already.</span><br>                hms.setParentMessageSource(getInternalParentMessageSource());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;Using MessageSource [&quot;</span> + <span class="hljs-keyword">this</span>.messageSource + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Use empty MessageSource to be able to accept getMessage calls.</span><br>        <span class="hljs-comment">// 否则则使用默认的</span><br>        DelegatingMessageSource dms = <span class="hljs-keyword">new</span> DelegatingMessageSource();<br>        dms.setParentMessageSource(getInternalParentMessageSource());<br>        <span class="hljs-keyword">this</span>.messageSource = dms;<br>        beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, <span class="hljs-keyword">this</span>.messageSource);<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;No &#x27;&quot;</span> + MESSAGE_SOURCE_BEAN_NAME + <span class="hljs-string">&quot;&#x27; bean, using [&quot;</span> + <span class="hljs-keyword">this</span>.messageSource + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这块源码唯一值得关注的地方就是，Bean 的名称必须要是 messageSource 。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文通过官网，了解到什么是国际化，以及国际化的使用，并结合代码和源码，知其然，知其所以然。</p><p>当然本文需要注意的地方就是国际化 MessageSource 的 Bean 名称要必须为 messageSource。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Ic7vnq-uIcbjr.png"></p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/QrogJIm9OaUmeRk9tGiNeg">Spring 源码学习 12：registerBeanPostProcessors</a></li><li><a href="https://mp.weixin.qq.com/s/6VrVDg4m6yi7V4rZZB-6tA">Spring 源码学习 11：invokeBeanFactoryPostProcessors</a></li><li><a href="https://mp.weixin.qq.com/s/6vTqVFC4frjhqdMirGPCnQ">Spring 源码学习 10：prepareBeanFactory 和 postProcessBeanFactory</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 12：registerBeanPostProcessors</title>
      <link href="2021/01/01/source-spring-12.html"/>
      <url>2021/01/01/source-spring-12.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前面通过 invokeBeanFactoryPostProcessors 这一步了解到了什么是 BeanFactoryPostProcessor ，以及 BeanFactoryPostProcessor 的使用及作用，并通过 invokeBeanFactoryPostProcessors 这一步源码，对 BeanFactoryPostProcessor 的加载流程有了进一步了解。</p><p>现在就一起进入下一个环节：</p><p><code>registerBeanPostProcessors(beanFactory);</code></p><p>这一步主要的作用是加载 BeanPostProcessor，从名字也可以看出，只是加载，并没有执行。</p><p>不过，在进入源码之前，依然是结合官网，先了解以下几个问题：</p><ol><li>什么是 BeanPostProcessor？</li><li>BeanPostProcessor 是如何使用的？</li><li>BeanPostProcessor 有什么用？</li></ol><h3 id="什么是-BeanPostProcessor-？"><a href="#什么是-BeanPostProcessor-？" class="headerlink" title="什么是 BeanPostProcessor ？"></a>什么是 BeanPostProcessor ？</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/PqDpkg-Wujih5.png"></p><p>如截图所示，在官网 <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-extension-bpp" title="Spring 官方文档">1.8.1 Customizing Beans by Using a BeanPostProcessor</a> 中介绍， <code>BeanPostProcessor</code> 接口定义回调方法，可以实现这些方法，从而在 Bean 实例化期间修改 Bean 的属性。</p><h3 id="BeanPostProcessor-是如何使用的"><a href="#BeanPostProcessor-是如何使用的" class="headerlink" title="BeanPostProcessor 是如何使用的?"></a>BeanPostProcessor 是如何使用的?</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br><br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> UserComponent) &#123;<br><br>System.out.println(<span class="hljs-string">&quot;BeanPostProcessor 开始执行 初始化前...&quot;</span> + beanName);<br><br>UserComponent userComponent = (UserComponent) bean;<br>userComponent.setUserName(<span class="hljs-string">&quot;liuzhihang-postProcessBeforeInitialization&quot;</span>);<br><br><span class="hljs-keyword">return</span> userComponent;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br><br><br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> UserComponent) &#123;<br><br>System.out.println(<span class="hljs-string">&quot;BeanPostProcessor 开始执行 初始化后...&quot;</span> + beanName);<br><br>UserComponent userComponent = (UserComponent) bean;<br>userComponent.setUserName(<span class="hljs-string">&quot;liuzhihang-postProcessAfterInitialization&quot;</span>);<br><br><span class="hljs-keyword">return</span> userComponent;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> bean;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如代码所示，只需要声明一个自己的 MyBeanPostProcessor 来实现 <code>BeanPostProcessor</code> 并重写其方法：</p><p>postProcessBeforeInitialization ：在 Bean 实例后调用初始化方法之前进行处理。</p><p>postProcessAfterInitialization ：在 Bean 实例化后调用初始化方法之后进行处理。</p><p>并且在测试时可以发现，BeanPostProcessor 修改的属性会覆盖 BeanFactoryPostProcessor，至于原因可以阅读下 <a href="https://mp.weixin.qq.com/s/6VrVDg4m6yi7V4rZZB-6tA">Spring 源码学习 11：invokeBeanFactoryPostProcessors</a> 这篇文章，相信对 BeanFactoryPostProcessor 有了一定的了解之后，一定会有自己的答案。</p><p>当然我个人的理解就是 BeanFactoryPostProcessor 是在 Bean 实例化之前，是通过修改元数据从而修改的 Bean 的元素信息。</p><p>这块也可以通过代码进行验证。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/mHNyKC-SBWUcw.png"></p><p>可以看出，执行顺序是</p><p><code>BeanFactoryPostProcessor#postProcessBeanFactory</code><br>-&gt;<br><code>BeanPostProcessor#postProcessBeforeInitialization</code><br>-&gt;<br><code>BeanPostProcessor#postProcessAfterInitialization</code></p><p>所以，后面修改的属性，会覆盖之前修改的属性。</p><p>至于 <code>BeanPostProcessor</code> 是如何修改属性的，在这里先不做介绍，继续进入本节的主角 <code>registerBeanPostProcessors 源码分析</code> </p><h3 id="registerBeanPostProcessors-源码"><a href="#registerBeanPostProcessors-源码" class="headerlink" title="registerBeanPostProcessors 源码"></a>registerBeanPostProcessors 源码</h3><p>在 Spring refresh 方法中，执行 registerBeanPostProcessors 主要作用是将 BeanPostProcessor 注册到容器中，源码如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanPostProcessors</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;<br>    PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里调用了 <code>PostProcessorRegistrationDelegate</code> 类的静态方法，继续跟进：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanPostProcessors</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">        ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 查找 BeanPostProcessor 类型的 Bean 的名称集合, 就是获取所有继承了 BeanPostProcessor 的类</span><br>    String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>);<br><br>    <span class="hljs-comment">// Register BeanPostProcessorChecker that logs an info message when</span><br>    <span class="hljs-comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span><br>    <span class="hljs-comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span><br>    <span class="hljs-comment">//  注册一个 BeanPostProcessorChecker，用来记录 bean 在 BeanPostProcessor 实例化时的信息。</span><br>    <span class="hljs-keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="hljs-number">1</span> + postProcessorNames.length;<br>    beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));<br><br>    <span class="hljs-comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span><br>    <span class="hljs-comment">// Ordered, and the rest.</span><br>    <span class="hljs-comment">// 四个集合 区分实现不同接口的 BeanPostProcessors</span><br>    List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    List&lt;String&gt; orderedPostProcessorNames = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    List&lt;String&gt; nonOrderedPostProcessorNames = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (String ppName : postProcessorNames) &#123;<br>        <span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;<br>            BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);<br>            priorityOrderedPostProcessors.add(pp);<br>            <span class="hljs-keyword">if</span> (pp <span class="hljs-keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;<br>                internalPostProcessors.add(pp);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;<br>            orderedPostProcessorNames.add(ppName);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            nonOrderedPostProcessorNames.add(ppName);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span><br>    <span class="hljs-comment">// 排序后执行 实现 PriorityOrdered 的 BeanPostProcessors</span><br>    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);<br>    registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);<br><br>    <span class="hljs-comment">// Next, register the BeanPostProcessors that implement Ordered.</span><br>    List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(orderedPostProcessorNames.size());<br>    <span class="hljs-keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;<br>        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);<br>        orderedPostProcessors.add(pp);<br>        <span class="hljs-keyword">if</span> (pp <span class="hljs-keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;<br>            internalPostProcessors.add(pp);<br>        &#125;<br>    &#125;<br>    sortPostProcessors(orderedPostProcessors, beanFactory);<br>    registerBeanPostProcessors(beanFactory, orderedPostProcessors);<br><br>    <span class="hljs-comment">// Now, register all regular BeanPostProcessors.</span><br>    List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());<br>    <span class="hljs-keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;<br>        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);<br>        nonOrderedPostProcessors.add(pp);<br>        <span class="hljs-keyword">if</span> (pp <span class="hljs-keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;<br>            internalPostProcessors.add(pp);<br>        &#125;<br>    &#125;<br>    registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);<br><br>    <span class="hljs-comment">// Finally, re-register all internal BeanPostProcessors.</span><br>    sortPostProcessors(internalPostProcessors, beanFactory);<br>    registerBeanPostProcessors(beanFactory, internalPostProcessors);<br><br>    <span class="hljs-comment">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span><br>    <span class="hljs-comment">// moving it to the end of the processor chain (for picking up proxies etc).</span><br>    beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> ApplicationListenerDetector(applicationContext));<br>&#125;<br></code></pre></td></tr></table></figure><p>代码中添加了相应的注释，相信读过上一篇文章（invokeBeanFactoryPostProcessors 源码）的小伙伴，一定会感觉非常熟悉，这个方法的逻辑和上面基本一致，都是声明集合，排序，注册到 BeanFactory 中。</p><p>不过还是有区别的：</p><p><code>registerBeanPostProcessors 这一步仅仅将 BeanPostProcessor 注册到 BeanFactory 中，并没有执行！！！</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文源码部分相对比较简单，主要花费部分篇幅介绍什么是 BeanPostProcessor 以及 BeanPostProcessor 的使用方法。</p><p>一句话总结这一步就是：注册 BeanPostProcessor 到 BeanFactory 中，但是没有执行。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/dHDiOq-CxKXF8.png"></p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/6VrVDg4m6yi7V4rZZB-6tA">Spring 源码学习 11：invokeBeanFactoryPostProcessors</a></li><li><a href="https://mp.weixin.qq.com/s/6vTqVFC4frjhqdMirGPCnQ">Spring 源码学习 10：prepareBeanFactory 和 postProcessBeanFactory</a></li><li><a href="https://mp.weixin.qq.com/s/i6vdCmOO2ZMsYWfheSLc6g">Spring 源码学习 09：refresh 大概流程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 11：invokeBeanFactoryPostProcessors</title>
      <link href="2020/12/28/source-spring-11.html"/>
      <url>2020/12/28/source-spring-11.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>invokeBeanFactoryPostProcessors 会执行 BeanFactory 的后置处理器。看到这里会有疑问：</p><ol><li>什么是 BeanFactoryPostProcessor ？</li><li>BeanfactoryPostProcessor 该如何使用？</li></ol><p>知道了上面两个问题的答案，对 BeanFactoryPostProcessor 有了了解之后，然后再深入源码，继续阅读 invokeBeanFactoryPostProcessors 这个方法。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>资料还是在<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-extension-factory-postprocessors" title="Customizing Configuration Metadata with a BeanFactoryPostProcessor">官网</a>可以找到答案:</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ZCnfJ9-tR3MFK.png"></p><p>阅读了一下，大概意思是 <code>Spring IoC 容器允许 BeanFactoryPostProcessor 读取配置元数据，并有可能在容器实例化除 BeanFactoryPostProcessor 实例以外的任何 bean 之前更改它。</code></p><p>同样可以使用 Ordered 接口对 BeanFactoryPostProcessor 进行排序。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/XmG0jo-mewyfG.png"></p><p>BeanFactoryPostProcessor 操作的是 BeanDefinition ，即元数据。但是同样可以通过获取到 BeanFactory 进行实例化 Bean，但是官网很不建议这样使用。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="使用-BeanFactoryPostProcessor"><a href="#使用-BeanFactoryPostProcessor" class="headerlink" title="使用 BeanFactoryPostProcessor"></a>使用 BeanFactoryPostProcessor</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBeanFactoryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanFactoryPostProcessor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br><br>        <span class="hljs-comment">// 修改 BeanDefinition 信息</span><br>        BeanDefinition userComponentBeanDefinition = beanFactory.getBeanDefinition(<span class="hljs-string">&quot;userComponent&quot;</span>);<br>        userComponentBeanDefinition.setLazyInit(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">// 修改 Bean 的信息</span><br>        <span class="hljs-comment">// xxx 非常不推荐 beanFactory.getBean 过早的实例化 Bean</span><br>        UserComponent bean = beanFactory.getBean(UserComponent.class);<br>        bean.setUserName(<span class="hljs-string">&quot;liuzhihang-01&quot;</span>);<br>            <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建自己的 BeanFactoryPostProcessor 并实现 BeanFactoryPostProcessor 接口，添加注解即可。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/8dEPpR-aN53mU.png"></p><p>当然除了实现 BeanFactoryPostProcessor 接口，还有其他接口可以实现：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/llYeQ9-DTwOme.png"></p><h4 id="使用-BeanDefinitionRegistryPostProcessor"><a href="#使用-BeanDefinitionRegistryPostProcessor" class="headerlink" title="使用 BeanDefinitionRegistryPostProcessor"></a>使用 BeanDefinitionRegistryPostProcessor</h4><p>BeanDefinitionRegistryPostProcessor 继承了 BeanFactoryPostProcessor，同时扩展了增加了 <code>postProcessBeanDefinitionRegistry</code> 方法。可以支持在 BeanDefinition 注册之后 Bean 实例化之前对 BeanDefinition 进行操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBeanDefinitionRegistryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanDefinitionRegistryPostProcessor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        <span class="hljs-comment">// 修改 BeanDefinition 信息</span><br>        BeanDefinition userComponentBeanDefinition = beanFactory.getBeanDefinition(<span class="hljs-string">&quot;userComponent&quot;</span>);<br>        userComponentBeanDefinition.setLazyInit(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">// 修改 Bean 的信息</span><br>        <span class="hljs-comment">// xxx 非常不推荐 beanFactory.getBean 过早的实例化 Bean</span><br>        UserComponent bean = beanFactory.getBean(UserComponent.class);<br>        bean.setUserName(<span class="hljs-string">&quot;liuzhihang-01&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br><br>        <span class="hljs-comment">// 注册一个 BeanDefinition</span><br>        BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(OrderComponent.class);<br><br>        AbstractBeanDefinition orderComponentBeanDefinition = builder.getBeanDefinition();<br><br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;orderComponent&quot;</span>, orderComponentBeanDefinition);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是测试代码截图：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/OAsBSh-FPE9FY.png"></p><p>OrderComponent 类没有添加任何注解，然后注册为 BeanDefinition 之后，从容器中可以获取到 orderComponent。</p><h4 id="如何修改字段属性"><a href="#如何修改字段属性" class="headerlink" title="如何修改字段属性"></a>如何修改字段属性</h4><p>在 Spring 文档上说明，非常不建议在 BeanFactoryPostProcessor 中实例化 Bean，那这时候想修改 Bean 的信息，改如何操作？</p><p>其实可以通过获取到 <code>MutablePropertyValues</code> 后进行操作：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBeanFactoryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanFactoryPostProcessor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br><br>        <span class="hljs-comment">// 修改 BeanDefinition 信息</span><br>        BeanDefinition userComponentBeanDefinition = beanFactory.getBeanDefinition(<span class="hljs-string">&quot;userComponent&quot;</span>);<br>        userComponentBeanDefinition.setLazyInit(<span class="hljs-keyword">true</span>);<br><br>        MutablePropertyValues userComponentPropertyValues = userComponentBeanDefinition.getPropertyValues();<br><br>        userComponentPropertyValues.addPropertyValue(<span class="hljs-string">&quot;userName&quot;</span>, <span class="hljs-string">&quot;liuzhihang-02&quot;</span>);<br><br>        <span class="hljs-comment">// 修改 Bean 的信息</span><br>        <span class="hljs-comment">// xxx 非常不推荐 beanFactory.getBean 过早的实例化 Bean</span><br>        <span class="hljs-comment">// UserComponent bean = beanFactory.getBean(UserComponent.class);</span><br>        <span class="hljs-comment">// bean.setUserName(&quot;liuzhihang-01&quot;);</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="invokeBeanFactoryPostProcessors"><a href="#invokeBeanFactoryPostProcessors" class="headerlink" title="invokeBeanFactoryPostProcessors"></a>invokeBeanFactoryPostProcessors</h3><p>看完前面，我想已经知道了 BeanFactoryPostProcessor 是做什么用的了，而这一步的主要作用就是实例化所有的 BeanFactoryPostProcessor。</p><p>进入源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeBeanFactoryPostProcessors</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;<br>    PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());<br><br>    <span class="hljs-comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span><br>    <span class="hljs-comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span><br>    <span class="hljs-keyword">if</span> (!IN_NATIVE_IMAGE &amp;&amp; beanFactory.getTempClassLoader() == <span class="hljs-keyword">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;<br>        beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));<br>        beanFactory.setTempClassLoader(<span class="hljs-keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 getBeanFactoryPostProcessors 方法获取的是自己添加的 BeanFactoryPostProcessor。这句话是什么意思呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;BeanFactoryPostProcessor&gt; <span class="hljs-title">getBeanFactoryPostProcessors</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.beanFactoryPostProcessors;<br>&#125;<br></code></pre></td></tr></table></figure><p>看源码，就是直接从 beanFactoryPostProcessors 获取的，那如何向其中添加呢？</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/jWhWAu-MicUEW.png"></p><p>其实调用容器的 <code>addBeanFactoryPostProcessor</code> 方法即可。</p><p>继续阅读重点代码 <code>invokeBeanFactoryPostProcessors</code> ：</p><p>注意注意，这块代码非常长！</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeBeanFactoryPostProcessors</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">        ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> </span>&#123;<br><br>    <span class="hljs-comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span><br>    Set&lt;String&gt; processedBeans = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br><br>    <span class="hljs-comment">// 判断是否为 BeanDefinitionRegistry</span><br>    <span class="hljs-comment">// debug 发现 这里传入的是 DefaultListableBeanFactory</span><br>    <span class="hljs-comment">// DefaultListableBeanFactory 实现了 BeanDefinitionRegistry</span><br>    <span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> BeanDefinitionRegistry) &#123;<br>        BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;<br><br>        <span class="hljs-comment">// 创建了两个 List 集合, 用来存放处理器</span><br>        <span class="hljs-comment">// BeanDefinitionRegistryPostProcessor 是 BeanFactoryPostProcessor 的子接口</span><br>        <span class="hljs-comment">// BeanDefinitionRegistryPostProcessor 还可以额外处理 BeanDefinition, 添加 BeanDefinition</span><br>        <span class="hljs-comment">// 用法可以参考示例</span><br>        List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        List&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// 循环 beanFactoryPostProcessors</span><br>        <span class="hljs-comment">// beanFactoryPostProcessors 是使用 API context.addBeanFactoryPostProcessor 添加进来的</span><br>        <span class="hljs-keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;<br><br>            <span class="hljs-comment">// BeanDefinitionRegistryPostProcessor 要单独添加到 registryProcessors</span><br>            <span class="hljs-keyword">if</span> (postProcessor <span class="hljs-keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;<br>                BeanDefinitionRegistryPostProcessor registryProcessor =<br>                        (BeanDefinitionRegistryPostProcessor) postProcessor;<br><br>                <span class="hljs-comment">// 处理 Bean 的信息</span><br>                registryProcessor.postProcessBeanDefinitionRegistry(registry);<br>                registryProcessors.add(registryProcessor);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                regularPostProcessors.add(postProcessor);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span><br>        <span class="hljs-comment">// uninitialized to let the bean factory post-processors apply to them!</span><br>        <span class="hljs-comment">// Separate between BeanDefinitionRegistryPostProcessors that implement</span><br>        <span class="hljs-comment">// PriorityOrdered, Ordered, and the rest.</span><br>        <span class="hljs-comment">// 上面循环是执行的我们调用 API 添加的 BeanDefinitionRegistryPostProcessor</span><br>        <span class="hljs-comment">// 下面执行 Spring 自己的 BeanDefinitionRegistryPostProcessor 集合</span><br>        <span class="hljs-comment">// 先执行实现了 PriorityOrdered接口的，然后是 Ordered 接口的，最后执行剩下的</span><br>        List&lt;BeanDefinitionRegistryPostProcessor&gt; currentRegistryProcessors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span><br>        <span class="hljs-comment">// 第一步先调用 BeanDefinitionRegistryPostProcessors 它实现了PriorityOrdered</span><br>        <span class="hljs-comment">// 在初始化 reader 时 在注册了 ConfigurationClassPostProcessor 到容器里面</span><br>        <span class="hljs-comment">// BeanDefinitionRegistryPostProcessor 实现了 BeanDefinitionRegistryPostProcessor</span><br>        String[] postProcessorNames =<br>                beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">for</span> (String ppName : postProcessorNames) &#123;<br>            <span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;<br>                <span class="hljs-comment">// 添加 bean</span><br>                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));<br>                <span class="hljs-comment">// 这里只添加了名字 后面用来判断谁已经执行过了</span><br>                processedBeans.add(ppName);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 排序</span><br>        sortPostProcessors(currentRegistryProcessors, beanFactory);<br>        registryProcessors.addAll(currentRegistryProcessors);<br><br>        <span class="hljs-comment">// 循环执行 processors 的 postProcessBeanDefinitionRegistry 方法</span><br>        <span class="hljs-comment">// 这个得在仔细看</span><br>        <span class="hljs-comment">// debug 看到 执行完这一步我另一个加 @Component 注解的类 注册到 Registry 里面了</span><br>        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup());<br>        <span class="hljs-comment">// 清除</span><br>        currentRegistryProcessors.clear();<br><br>        <span class="hljs-comment">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span><br>        <span class="hljs-comment">// 处理实现 Ordered 的 processor</span><br>        postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">for</span> (String ppName : postProcessorNames) &#123;<br>            <span class="hljs-comment">// 只有不包含的才执行, 执行完之后会添加进 processedBeans</span><br>            <span class="hljs-keyword">if</span> (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;<br>                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));<br>                processedBeans.add(ppName);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 同上</span><br>        sortPostProcessors(currentRegistryProcessors, beanFactory);<br>        registryProcessors.addAll(currentRegistryProcessors);<br>        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup());<br>        currentRegistryProcessors.clear();<br><br>        <span class="hljs-comment">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span><br>        <span class="hljs-comment">// 最后执行其他</span><br>        <span class="hljs-keyword">boolean</span> reiterate = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">while</span> (reiterate) &#123;<br>            reiterate = <span class="hljs-keyword">false</span>;<br>            postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>);<br>            <span class="hljs-keyword">for</span> (String ppName : postProcessorNames) &#123;<br>                <span class="hljs-comment">// 只有不包含的才执行, 执行完之后会添加进 processedBeans</span><br>                <span class="hljs-keyword">if</span> (!processedBeans.contains(ppName)) &#123;<br>                    currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));<br>                    processedBeans.add(ppName);<br>                    reiterate = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>            sortPostProcessors(currentRegistryProcessors, beanFactory);<br>            registryProcessors.addAll(currentRegistryProcessors);<br>            invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup());<br>            currentRegistryProcessors.clear();<br>        &#125;<br><br>        <span class="hljs-comment">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span><br>        <span class="hljs-comment">// 上面处理的都是 postProcessBeanDefinitionRegistry 是在 -&gt; BeanDefinitionRegistryPostProcessor 中</span><br>        <span class="hljs-comment">// 下面开始处理 postProcessBeanFactory  -&gt; 是在 BeanFactoryPostProcessor 中</span><br>        invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);<br>        invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Invoke factory processors registered with the context instance.</span><br>        <span class="hljs-comment">// 不是 BeanDefinitionRegistry 则是普通 BeanFactory 直接执行 beanFactoryPostProcessors 即可</span><br>        invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);<br>    &#125;<br><br>    <span class="hljs-comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span><br>    <span class="hljs-comment">// uninitialized to let the bean factory post-processors apply to them!</span><br><br>    <span class="hljs-comment">// 第二部分</span><br>    <span class="hljs-comment">// 上面执行的是 BeanDefinitionRegistryPostProcessor</span><br>    <span class="hljs-comment">// 下面开始执行 BeanFactoryPostProcessor</span><br>    String[] postProcessorNames =<br>            beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>);<br><br>    <span class="hljs-comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span><br>    <span class="hljs-comment">// Ordered, and the rest.</span><br>    <span class="hljs-comment">// 按照顺序执行</span><br>    List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    List&lt;String&gt; orderedPostProcessorNames = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    List&lt;String&gt; nonOrderedPostProcessorNames = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (String ppName : postProcessorNames) &#123;<br>        <span class="hljs-keyword">if</span> (processedBeans.contains(ppName)) &#123;<br>            <span class="hljs-comment">// skip - already processed in first phase above</span><br>            <span class="hljs-comment">// 说明上面已经执行了, 下面忽略</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;<br>            priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;<br>            orderedPostProcessorNames.add(ppName);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            nonOrderedPostProcessorNames.add(ppName);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span><br>    <span class="hljs-comment">// 执行实现 PriorityOrdered 的</span><br>    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);<br>    invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);<br><br>    <span class="hljs-comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span><br>    List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(orderedPostProcessorNames.size());<br>    <span class="hljs-keyword">for</span> (String postProcessorName : orderedPostProcessorNames) &#123;<br>        orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));<br>    &#125;<br>    sortPostProcessors(orderedPostProcessors, beanFactory);<br>    invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);<br><br>    <span class="hljs-comment">// Finally, invoke all other BeanFactoryPostProcessors.</span><br>    List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());<br>    <span class="hljs-keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) &#123;<br>        nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));<br>    &#125;<br>    invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);<br><br>    <span class="hljs-comment">// Clear cached merged bean definitions since the post-processors might have</span><br>    <span class="hljs-comment">// modified the original metadata, e.g. replacing placeholders in values...</span><br>    <span class="hljs-comment">// 清空不必要的元数据信息</span><br>    beanFactory.clearMetadataCache();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面总体可以分为两部分：</p><ol><li>执行 BeanDefinitionRegistryPostProcessor 接口里面的两个方法：postProcessBeanDefinitionRegistry 和 postProcessBeanFactory。</li><li>执行 BeanFactoryPostProcessor 接口里面的 postProcessBeanFactory 方法。</li></ol><p>以第一部分为例：</p><ol><li>首先判断传入的 BeanFactory 是否为 BeanDefinitionRegistry<ol><li>声明两个 List 集合，regularPostProcessors 用来存储 BeanFactoryPostProcessor，registryProcessors 用来存储 BeanDefinitionRegistryPostProcessor<ol><li>循环 beanFactoryPostProcessors，这个就是我们使用 API 方式添加进来的 BeanFactoryPostProcessor。</li><li>在循环中 BeanDefinitionRegistryPostProcessor 的 postProcessBeanDefinitionRegistry 会被执行，也就是说我示例的那个添加 BeanDefinition 演示的方法会被执行。</li></ol></li><li>开始执行 Spring 自己的 BeanDefinitionRegistryPostProcessor， 处理顺序为 PriorityOrdered, Ordered, and the rest<ol><li>循环，将对应的 BeanDefinitionRegistryPostProcessor 添加到 currentRegistryProcessors 集合和processedBeans集合表示为已经处理。</li><li>排序后添加到第一步的 registryProcessors 中。</li><li>调用 invokeBeanDefinitionRegistryPostProcessors 执行所有的 Processor 里面的 postProcessBeanDefinitionRegistry 方法</li></ol></li><li>执行完 1 和 2 之后，所有的 postProcessBeanDefinitionRegistry 已经被执行完了，但是两个集合（registryProcessors、regularPostProcessors）里面的 postProcessBeanFactory 方法还没有被执行。最后会循环执行。</li></ol></li><li>如果不是 BeanDefinitionRegistry 类型，则直接执行传入的 beanFactoryPostProcessors 即可。</li></ol><p>下面是对应的代码截图</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/vc4xUC-rCOdvD.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/1A06zT-DDaqjY.png"></p><p>以上只是这个方法的前半部分，执行了 BeanDefinitionRegistryPostProcessor 里面的 postProcessBeanDefinitionRegistry 和 postProcessBeanFactory。</p><p>因为还有直接实现 BeanFactoryPostProcessor 的处理器，下面则开始处理 BeanFactoryPostProcessor 的处理器。过程和上面类似。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上的阅读，对 <code>invokeBeanFactoryPostProcessors(beanFactory);</code> 这一步方法进行总结。</p><h4 id="BeanFactoryPostProcessor-作用"><a href="#BeanFactoryPostProcessor-作用" class="headerlink" title="BeanFactoryPostProcessor 作用"></a>BeanFactoryPostProcessor 作用</h4><p>BeanFactoryPostProcessor 主要作用是在注册 BeanDefinition 之后，在 Bean 初始化之前，修改 BeanDefinition 的信息。</p><p>BeanFactoryPostProcessor 有个实现叫 BeanDefinitionRegistryPostProcessor，它可以额外的注册新的 BeanDefinition 到容器中。</p><h4 id="流程概述"><a href="#流程概述" class="headerlink" title="流程概述"></a>流程概述</h4><ol><li>这一步主要是处理 BeanFactoryPostProcessor，分为两步。</li><li>执行 BeanDefinitionRegistryPostProcessor 接口里面的两个方法：postProcessBeanDefinitionRegistry 和 postProcessBeanFactory。</li><li>执行 BeanFactoryPostProcessor 接口里面的 postProcessBeanFactory 方法。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/hoPCO0-yAfXNu.png"></p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/6vTqVFC4frjhqdMirGPCnQ">Spring 源码学习 10：prepareBeanFactory 和 postProcessBeanFactory</a></li><li><a href="https://mp.weixin.qq.com/s/i6vdCmOO2ZMsYWfheSLc6g">Spring 源码学习 09：refresh 大概流程</a></li><li><a href="https://mp.weixin.qq.com/s/XPljpjGBpD7t2cmPAofm7A">Spring 源码学习 08：register 注册配置类</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 10：prepareBeanFactory 和 postProcessBeanFactory</title>
      <link href="2020/12/27/source-spring-10.html"/>
      <url>2020/12/27/source-spring-10.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>根据 refresh 流程，当 <code>obtainFreshBeanFactory</code> 执行结束后，下一步会执行 <code>prepareBeanFactory</code> ，顾名思义，这个方法主要是<code>准备 BeanFactory</code>，下面一起看一看这部分逻辑。</p><h3 id="prepareBeanFactory"><a href="#prepareBeanFactory" class="headerlink" title="prepareBeanFactory"></a>prepareBeanFactory</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepareBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;<br><span class="hljs-comment">// Tell the internal bean factory to use the context&#x27;s class loader etc.</span><br><span class="hljs-comment">// 设置beanFactory的类加载器</span><br>beanFactory.setBeanClassLoader(getClassLoader());<br><span class="hljs-comment">// spring.spel.ignore 属性控制是否解析 SpEL 表达式</span><br><span class="hljs-keyword">if</span> (!shouldIgnoreSpel) &#123;<br>beanFactory.setBeanExpressionResolver(<span class="hljs-keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));<br>&#125;<br><span class="hljs-comment">// 设置属性解析器</span><br>beanFactory.addPropertyEditorRegistrar(<span class="hljs-keyword">new</span> ResourceEditorRegistrar(<span class="hljs-keyword">this</span>, getEnvironment()));<br><br><span class="hljs-comment">// Configure the bean factory with context callbacks.</span><br><span class="hljs-comment">// 添加到后置处理器列表, 新创建的 ApplicationContextAwareProcessor 入参为当前 ApplicationContext</span><br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> ApplicationContextAwareProcessor(<span class="hljs-keyword">this</span>));<br><br><span class="hljs-comment">// 忽略自动装配</span><br><span class="hljs-comment">// 默认情况下 只有BeanFactoryAware 被忽略 要忽略其他类型，需要单独设置</span><br>beanFactory.ignoreDependencyInterface(EnvironmentAware.class);<br>beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);<br>beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);<br>beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);<br>beanFactory.ignoreDependencyInterface(MessageSourceAware.class);<br>beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);<br>beanFactory.ignoreDependencyInterface(ApplicationStartup.class);<br><br><span class="hljs-comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span><br><span class="hljs-comment">// MessageSource registered (and found for autowiring) as a bean.</span><br><span class="hljs-comment">// 注册自动装配的类</span><br>beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);<br>beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="hljs-keyword">this</span>);<br>beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="hljs-keyword">this</span>);<br>beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="hljs-keyword">this</span>);<br><br><span class="hljs-comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span><br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> ApplicationListenerDetector(<span class="hljs-keyword">this</span>));<br><br><span class="hljs-comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span><br><span class="hljs-comment">// 是否需要类加载期间织入  增加Aspectj的支持</span><br><span class="hljs-keyword">if</span> (!IN_NATIVE_IMAGE &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;<br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));<br><span class="hljs-comment">// Set a temporary ClassLoader for type matching.</span><br>beanFactory.setTempClassLoader(<span class="hljs-keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));<br>&#125;<br><br><span class="hljs-comment">// Register default environment beans.</span><br><span class="hljs-comment">// 注册其他的 bean</span><br><span class="hljs-keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;<br>beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());<br>&#125;<br><span class="hljs-keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;<br>beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());<br>&#125;<br><span class="hljs-keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;<br>beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());<br>&#125;<br><span class="hljs-keyword">if</span> (!beanFactory.containsLocalBean(APPLICATION_STARTUP_BEAN_NAME)) &#123;<br>beanFactory.registerSingleton(APPLICATION_STARTUP_BEAN_NAME, getApplicationStartup());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这块代码比较长，但是逻辑比较简单，就直接贴代码了。</p><p>再对代码进行分析，主要经历以下几个阶段：</p><ol><li>addBeanPostProcessor 添加 BeanPostProcessor</li><li>registerResolvableDependency 注册依赖关系</li><li>registerSingleton 注册其他的单例 Bean</li></ol><p>下面可以 Debug 看一下。</p><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>方法调用前：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/NJwbIq-S5vLU0.png"></p><p>registerResolvableDependency 执行之后</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/aRpomY-pOoRdu.png"></p><p>这里发现调用 <code>registerResolvableDependency</code> 执行结束之后，<code>beanDefinitionNames</code> 中并没有多添加相关对象。</p><p>查看源码发现其实是添加到了 <code>resolvableDependencies</code> 这个 Map 中了。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/r83Zdu-IywxsL.png"></p><blockquote><p>回顾</p><p>在介绍 <code>DefaultListableBeanFactory</code> 时，说 BeanDefinition 是存储在 beanDefinitionMap 中的。<br>而这里的依赖关系是则是存储在 <code>resolvableDependencies</code> 中的。</p></blockquote><h3 id="postProcessBeanFactory"><a href="#postProcessBeanFactory" class="headerlink" title="postProcessBeanFactory"></a>postProcessBeanFactory</h3><p>在执行 prepareBeanFactory 之后，当看到 <code>postProcessBeanFactory(beanFactory);</code> 方法的时候就很疑惑， 因为这个是需要子类实现的，只是作为一个模板方法，子类实现之后，可以在里面添加自己的逻辑。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章相对比较简单，就是准备 BeanFactory 向其中添加系统的依赖以及 bean, 而 postProcessBeanFactory 则是一个模版方法用来供子类实现。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/nDmWFO-dHVLOp.png"></p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/i6vdCmOO2ZMsYWfheSLc6g">Spring 源码学习 09：refresh 大概流程</a></li><li><a href="https://mp.weixin.qq.com/s/XPljpjGBpD7t2cmPAofm7A">Spring 源码学习 08：register 注册配置类</a></li><li><a href="https://mp.weixin.qq.com/s/VnUugIxZkUcqDvt9Yv47iQ">Spring 源码学习 07：ClassPathBeanDefinitionScanner</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 09：refresh 大概流程</title>
      <link href="2020/12/16/source-spring-09.html"/>
      <url>2020/12/16/source-spring-09.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前面的准备工作结束之后，就是进入核心代码 refresh。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException </span>&#123;<br>    <span class="hljs-comment">// 加锁</span><br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.startupShutdownMonitor) &#123;<br>        StartupStep contextRefresh = <span class="hljs-keyword">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.refresh&quot;</span>);<br><br>        <span class="hljs-comment">// 准备一些上下文</span><br>        prepareRefresh();<br><br>        <span class="hljs-comment">// 获取准备后的 beanFactory  DefaultListableBeanFactory</span><br>        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();<br><br>        <span class="hljs-comment">// 准备 BeanFactory</span><br>        prepareBeanFactory(beanFactory);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 允许在上下文子类中对bean工厂进行后处理。</span><br>            postProcessBeanFactory(beanFactory);<br><br>            StartupStep beanPostProcess = <span class="hljs-keyword">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.beans.post-process&quot;</span>);<br><br>            <span class="hljs-comment">// 在上下文中调用注册为 beanFactory 后置处理器</span><br>            <span class="hljs-comment">// 就是实现了 BeanFactoryPostProcessor 的 bean</span><br>            invokeBeanFactoryPostProcessors(beanFactory);<br><br>            <span class="hljs-comment">// 注册后置处理的Bean到容器当中</span><br>            <span class="hljs-comment">// 就是扩展了 BeanPostProcessor 的 Bean</span><br>            registerBeanPostProcessors(beanFactory);<br>            beanPostProcess.end();<br><br>            <span class="hljs-comment">// 为此上下文初始化消息源。</span><br>            <span class="hljs-comment">// 初始化国际化工具 MessageSource</span><br>            initMessageSource();<br><br>            <span class="hljs-comment">// 为此上下文初始化事件广播器。</span><br>            initApplicationEventMulticaster();<br><br>            <span class="hljs-comment">// 在特定上下文子类中初始化其他特殊bean。子类可以自己实现</span><br>            onRefresh();<br><br>            <span class="hljs-comment">// 检查并注册监听器。</span><br>            registerListeners();<br><br>            <span class="hljs-comment">// 实例化所有剩余的（非延迟初始化）单例。</span><br>            finishBeanFactoryInitialization(beanFactory);<br><br>            <span class="hljs-comment">// 最后一步: 完成此上下文的刷新，调用 LifecycleProcessor 的 onRefresh（）方法并发布</span><br>            finishRefresh();<br>        &#125;<br><br>        <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>            <span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;<br>                logger.warn(<span class="hljs-string">&quot;Exception encountered during context initialization - &quot;</span> +<br>                        <span class="hljs-string">&quot;cancelling refresh attempt: &quot;</span> + ex);<br>            &#125;<br><br>            <span class="hljs-comment">// 销毁已创建的单例以避免资源悬挂。</span><br>            destroyBeans();<br><br>            <span class="hljs-comment">// 重置活动状态</span><br>            cancelRefresh(ex);<br><br>            <span class="hljs-comment">// Propagate exception to caller.</span><br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br><br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// Reset common introspection caches in Spring&#x27;s core, since we</span><br>            <span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span><br>            resetCommonCaches();<br>            contextRefresh.end();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>源码就是密密麻麻的一大堆，源码上有相应的注释。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/qaUQQJ-l1bAsm.png"></p><p>下面就根据流程，一步一步的深入源码，了解到每一步都是做什么了。</p><h3 id="容器刷新准备"><a href="#容器刷新准备" class="headerlink" title="容器刷新准备"></a>容器刷新准备</h3><p><code>prepareRefresh</code> 这一步主要是准备一些上下文信息。就不过多介绍了。</p><h3 id="obtainFreshBeanFactory"><a href="#obtainFreshBeanFactory" class="headerlink" title="obtainFreshBeanFactory"></a>obtainFreshBeanFactory</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/nD4PyL-DFi913.png"></p><p>下面关注初始化 BeanFactory 这一步：</p><p>进入源码：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/4RezAZ-ngEGKj.png"></p><p>通过 Debug 可以看出 <code>refreshBeanFactory()</code> 这一步调用的是 <code>org.springframework.context.support.GenericApplicationContext#refreshBeanFactory</code> 中实现的方法。</p><p>继续跟进</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/nhZCwD-I9EXrp.png"></p><p>发现这块判断了一个 <code>refreshed</code> 刷新状态。</p><p><code>refreshBeanFactory</code> 方法也有另一个实现是在 <code>AbstractRefreshableApplicationContext</code> 中， 只不过我的断点没有断进去，这块也一起看下。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refreshBeanFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    <span class="hljs-comment">// 如果存在 BeanFactory 则销毁 Bean 并关闭 BeanFactory</span><br>    <span class="hljs-keyword">if</span> (hasBeanFactory()) &#123;<br>        destroyBeans();<br>        closeBeanFactory();<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 创建一个默认的 BeanFactory</span><br>        DefaultListableBeanFactory beanFactory = createBeanFactory();<br>        beanFactory.setSerializationId(getId());<br>        <span class="hljs-comment">// 设置属性</span><br>        customizeBeanFactory(beanFactory);<br>        <span class="hljs-comment">// 加载 Bean 信息</span><br>        loadBeanDefinitions(beanFactory);<br><br>        <span class="hljs-keyword">this</span>.beanFactory = beanFactory;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApplicationContextException(<span class="hljs-string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中会创建 BeanFactory 并加载 BeanDefinition。只不过我暂时没有断到，所以等后面遇到之后再详细介绍。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/3JfDRw-4a5C5Y.png"></p><p>本文简单介绍了 refresh 的流程，并介绍了前两个部分：</p><ol><li>prepareRefresh 准备上下文信息</li><li>obtainFreshBeanFactory 初始化 BeanFactory</li></ol><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/XPljpjGBpD7t2cmPAofm7A">Spring 源码学习 08：register 注册配置类</a></li><li><a href="https://mp.weixin.qq.com/s/VnUugIxZkUcqDvt9Yv47iQ">Spring 源码学习 07：ClassPathBeanDefinitionScanner</a></li><li><a href="https://mp.weixin.qq.com/s/u40NdypoO2ow2wdV293eow">Spring 源码学习 06：AnnotatedBeanDefinitionReader</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 08：register 注册配置类</title>
      <link href="2020/12/06/source-spring-08.html"/>
      <url>2020/12/06/source-spring-08.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>看完无参构造的源码及流程之后，后面将会执行 <code>register</code> 方法。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/iURj3q-YF3Fqe.png"></p><p>register 方法，入参是我们的配置类 <code>JavaConfig.class</code> ，下面跟着源码继续往下走！</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/72gJH7-cF6JtX.png"></p><p><code>this.reader.register(componentClasses);</code></p><p>这里执行的是 reader 的方法，入参就是传入的 <code>JavaConfig.class</code>。</p><blockquote><p>reader 在之前初始化，就是注册一些 PostProcessor。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/OL9u7q-Y6NATv.png"></p><ol><li>循环，注册所有的配置类；</li><li>doRegisterBean 开始注册。</li></ol><p><code>doRegisterBean</code> 才是真正注册 Bean 的逻辑，从名字也可以有所猜测。下面开始进入 <code>doRegisterBean</code> 的源码阅读：</p><h4 id="doRegisterBean"><a href="#doRegisterBean" class="headerlink" title="doRegisterBean"></a>doRegisterBean</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/OXRMeM-cMgaGt.png"></p><p>此处代码较长，以截图代替。</p><p>通过源码可以看出，这块主要流程：</p><ol><li>校验传入的 <code>JavaConfig.class</code> 的注解（是否需要忽略）；</li><li>处理通用注解；</li><li>封装为 BeanDefinitionHolder 后，注册到容器中。</li></ol><h4 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/QfGRrs-tdXZRz.png"></p><p>通过 debug 可以看出，在执行完 <code>register</code> 之后，相当于将 JavaConfig 作为一个 Bean 注册到容器中。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/mcTElg-qWdJKu.png"></p><p>在我看来前面的部分主要涉及到准备工作，至于更深层次的研究，分析，暂时没有深入。</p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/VnUugIxZkUcqDvt9Yv47iQ">Spring 源码学习 07：ClassPathBeanDefinitionScanner</a></li><li><a href="https://mp.weixin.qq.com/s/u40NdypoO2ow2wdV293eow">Spring 源码学习 06：AnnotatedBeanDefinitionReader</a></li><li><a href="https://mp.weixin.qq.com/s/b7QhZguNTM_6C83b4IiMdg">Spring 源码学习 05：BeanDefinition 概念及其实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 07：ClassPathBeanDefinitionScanner</title>
      <link href="2020/12/05/source-spring-07.html"/>
      <url>2020/12/05/source-spring-07.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>AnnotationConfigApplicationContext 构造函数除了初始化一个 <code>reader</code> ，还有一个 <code>scanner</code>，下面来一起看看 <code>ClassPathBeanDefinitionScanner</code> 都有什么逻辑。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/aag0Mf-hC4vg6.png"></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p><code>this.scanner = new ClassPathBeanDefinitionScanner(this);</code> 代码如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/dIkTFJ-9bYFDo.png"></p><p>其中 <code>useDefaultFilters</code> 默认设置的 true。所以最终会执行下面三部分代码：</p><ol><li>registerDefaultFilters();</li><li>setEnvironment(environment);</li><li>setResourceLoader(resourceLoader);</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/7IpG0J-yzsRns.png"></p><p>再来看下 UML ：</p><p><code>ClassPathBeanDefinitionScanner</code> 继承了 <code>ClassPathScanningCandidateComponentProvider</code>，而上面说的这三个方法，其实都是父类 <code>ClassPathScanningCandidateComponentProvider</code> 的方法。</p><p>对应的这三个操作就是给它的参数赋值：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/P15SfZ-To57wW.png"></p><h4 id="registerDefaultFilters"><a href="#registerDefaultFilters" class="headerlink" title="registerDefaultFilters"></a>registerDefaultFilters</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/EjGINh-OGlb4j.png"></p><p>本步骤主要是添加过滤器，对 includeFilters 赋值。 注册过滤器 <code>@Component</code>，<code>@Controller</code> <code>@Service</code>、 <code>@Repository</code> 也会被添加进去。</p><p>也会注册添加 JSR-250 的 @ManagedBean 和 JSR-330 的 @Named 注解。</p><h4 id="setEnvironment"><a href="#setEnvironment" class="headerlink" title="setEnvironment"></a>setEnvironment</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/HLHo9N-l5MfXo.png"></p><h4 id="setResourceLoader"><a href="#setResourceLoader" class="headerlink" title="setResourceLoader"></a>setResourceLoader</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/NTEYuH-nYXQTF.png"></p><p><code>setEnvironment</code> 和 <code>setResourceLoader</code> 赋值操作，基本上如代码所示。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/cWzzC7-zOZGjH.png"></p><p>这一步主要是初始化类扫描器，在它初始化的时候，会初始化一些需要被扫描的注解，以及资源加载器。</p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/u40NdypoO2ow2wdV293eow">Spring 源码学习 06：AnnotatedBeanDefinitionReader</a></li><li><a href="https://mp.weixin.qq.com/s/b7QhZguNTM_6C83b4IiMdg">Spring 源码学习 05：BeanDefinition 概念及其实现</a></li><li><a href="https://mp.weixin.qq.com/s/JwRsKHqJ0ZcJ6Cgbp5BKiw">Spring 源码学习 04：初始化容器与 DefaultListableBeanFactory</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 06：AnnotatedBeanDefinitionReader</title>
      <link href="2020/12/04/source-spring-06.html"/>
      <url>2020/12/04/source-spring-06.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>BeanDefinition 的概念也了解了，也知道一个 Bean 在 Spring 中定义的信息有哪些之后，继续言归正传。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/erZhOh-c50rG0.png"></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>在初始化时会先生成一个 reader ，进入方法，其实是走的下面的逻辑：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/RPkIz4-hjaaG4.png"></p><p>其中 <code>getOrCreateEnvironment(registry)</code> 会返回一个 <code>Environment</code> 用来表示当前的运行环境之类的。</p><p><code>ConditionEvaluator</code> 是用来完成对 <code>@Conditional</code> 这个条件注解的判断。</p><p>这块可以参考官网：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-environment">Environment Abstraction 章节</a></p><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-java-conditional">Conditionally Include @Configuration Classes or @Bean Methods 章节</a></p><blockquote><p><strong>补充</strong></p><p>BeanDefinitionRegistry：就是对 BeanDefinition 进行注册、移除、获取等操作的一个接口。<br>比如：registerBeanDefinition、removeBeanDefinition、containsBeanDefinition 看名字也能猜个大概意思。</p></blockquote><h4 id="registerAnnotationConfigProcessors"><a href="#registerAnnotationConfigProcessors" class="headerlink" title="registerAnnotationConfigProcessors"></a>registerAnnotationConfigProcessors</h4><p>下面来看最后一行代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="hljs-keyword">this</span>.registry);<br></code></pre></td></tr></table></figure><p>这个代码相对较长，还是以截图代替。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/6wAV8a-8qbZoP.png"></p><p>对 beanFactory 添加依赖比较器 和 自动装配解析器 后开始添加各种处理器。</p><p>添加处理器时，下面收缩的代码和唯一展开的 <code>ConfigurationClassPostProcessor</code> 内部逻辑相同，都是调用 <code>registerPostProcessor</code> 方法，下面再介绍下这几个处理器的作用：</p><ul><li>ConfigurationClassPostProcessor 用于对 @Configuration 类进行引导处理。</li><li>AutowiredAnnotationBeanPostProcessor 处理 @Autowired @Value 和 JSR-330的@Inject 还有 @Lookup 注解</li><li>CommonAnnotationBeanPostProcessor 用来处理 @PostConstruct @PreDestroy @Resource。</li><li>PersistenceAnnotationBeanPostProcessor 当支持 JPA 时添加这个。</li><li>EventListenerMethodProcessor 支持 @EventListener。</li></ul><h4 id="registerPostProcessor"><a href="#registerPostProcessor" class="headerlink" title="registerPostProcessor"></a>registerPostProcessor</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/uaUJJU-bcIdE3.png"></p><p>registerPostProcessor 方法有两个逻辑：</p><ol><li>将这几个 Processor 注册到 beanFactory；</li><li>处理器封装为 BeanDefinitionHolder 对象。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/jdTJln-hqvIeJ.png" alt="BeanDefinitionHolder"></p><p>BeanDefinitionHolder 就是封装了下 BeanDefinition ，说明这个 BeanDefinition 的持有者 name 是谁。 </p><h4 id="大胆猜测"><a href="#大胆猜测" class="headerlink" title="大胆猜测"></a>大胆猜测</h4><p>执行完这一行之后，在 AnnotationConfigApplicationContext 里面有了 这几个 BeanDefinition。</p><h4 id="小心求证"><a href="#小心求证" class="headerlink" title="小心求证"></a>小心求证</h4><p>Debug 走起！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/wFyqjc-OROaV6.png"></p><p>额……  只有四个，假装是对的。还是一步一步看一看吧！原来是没有 JSR-250 和 JPA，那这个就正常了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/jMZmN5-GpjdYh.png"></p><p>其实简而言之，这一步就是注册了一些 Spring 自己的 PostProcessor。</p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/b7QhZguNTM_6C83b4IiMdg">Spring 源码学习 05：BeanDefinition 概念及其实现</a></li><li><a href="https://mp.weixin.qq.com/s/JwRsKHqJ0ZcJ6Cgbp5BKiw">Spring 源码学习 04：初始化容器与 DefaultListableBeanFactory</a></li><li><a href="https://mp.weixin.qq.com/s/V7SjmIFKAXyppBF_KHbxXQ">Spring 源码学习 03：创建 IoC 容器的几种方式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 05：BeanDefinition 概念及其实现</title>
      <link href="2020/12/03/source-spring-05.html"/>
      <url>2020/12/03/source-spring-05.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>BeanDefinition：顾名思义，就是 Bean 的定义，是用来描述一个 Bean 都有什么信息。前面说在初始化 <code>DefaultListableBeanFactory</code> 时，会初始化一个 <code>Map&lt;String, BeanDefinition&gt;</code>，这个 Map 的功能暂且不说，（PS：查资料说的是存储 bean），所以今天就结合官方文档以及源码，一起了解一下 <code>BeanDefinition</code>！</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/RQNh7C-qiNl5V.png"></p><p>在容器内部，使用 <code>BeanDefinition</code> 对象定义一个 Bean。而定义的信息包含 类名、作用域、是否懒加载、构造参数、初始化方法、销毁方式等等。</p><p>了解了概念之后，开始阅读源码，源码部分比较长。</p><h3 id="源码介绍"><a href="#源码介绍" class="headerlink" title="源码介绍"></a>源码介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/BeanDefinition-pzN9Uc.png" alt="BeanDefinition"></p><p>通过 UML 可以看出 BeanDefinition 接口继承了 AttributeAccessor 和 BeanMetadataElement 两个接口。</p><h4 id="AttributeAccessor"><a href="#AttributeAccessor" class="headerlink" title="AttributeAccessor"></a>AttributeAccessor</h4><p>AttributeAccessor：定义用于将元数据附加到任意对象或从任意对象访问元数据的通用协定的接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AttributeAccessor</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setAttribute</span><span class="hljs-params">(String name, <span class="hljs-meta">@Nullable</span> Object value)</span></span>;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function">Object <span class="hljs-title">getAttribute</span><span class="hljs-params">(String name)</span></span>;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function">Object <span class="hljs-title">removeAttribute</span><span class="hljs-params">(String name)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasAttribute</span><span class="hljs-params">(String name)</span></span>;<br><br>String[] attributeNames();<br>&#125;<br></code></pre></td></tr></table></figure><p>通过接口方法可以看出，AttributeAccessor 主要定义了对元数据<code>属性</code>的增删改查。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/uZKzQo-PU9mzG.png"></p><p><code>AttributeAccessorSupport</code> 是 AttributeAccessor 接口的一个实现，通过实现可以看出，其内部使用了 Map 保存名称和属性值。</p><h4 id="BeanMetadataElement"><a href="#BeanMetadataElement" class="headerlink" title="BeanMetadataElement"></a>BeanMetadataElement</h4><p>BeanMetadataElement：由包含配置源对象的 bean 元数据元素实现的接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BeanMetadataElement</span> </span>&#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">default</span> Object <span class="hljs-title">getSource</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口内部只有一个 <code>getSource()</code> 方法，其含义为：<strong>返回此元数据元素的配置源Object （可以为null ）。</strong></p><p>其实还是不知道啥意思……</p><p>在子类（<code>BeanMetadataAttributeAccessor</code>）中加上断点，debug</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/bR6lTo-GEmj33.png"></p><p>这里 source 里面存储了 Class 类文件在磁盘的真实路径。当然姑且可以这么认为，毕竟我这也是刚开始学习源码，当前的结论只是 debug 到的，也有可能在别的实现类中存储的是别的信息。</p><h4 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h4><p>BeanDefinition 方法较多，就不贴代码，或者截图了。详细可以通过 <a href="https://github.com/liuzhihang/spring-framework/blob/master/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java">我的 GitHub</a> 进行阅读，上面添加了相关注释。</p><p>不过还是简要介绍一下方法，大概有 Bean 的名字、作用范围、是否首选、以及 Bean 的初始化销毁方法等等。</p><p>BeanDefinition 只是一个接口，其实现又分为好几种。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/AbstractBeanDefinition-x4hCMm.png" alt="AbstractBeanDefinition"></p><h4 id="AbstractBeanDefinition"><a href="#AbstractBeanDefinition" class="headerlink" title="AbstractBeanDefinition"></a>AbstractBeanDefinition</h4><p>AbstractBeanDefinition 作为 BeanDefinition 的抽象实现类，内部定义了很多属性，以满足 BeanDefinition 定义的接口功能。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/avOyP7-LBkQNL.png"></p><p>这些属性的操作，就对应着 BeanDefinition 定义的接口方法。</p><h4 id="AbstractBeanDefinition-的三个实现类"><a href="#AbstractBeanDefinition-的三个实现类" class="headerlink" title="AbstractBeanDefinition 的三个实现类"></a>AbstractBeanDefinition 的三个实现类</h4><p>AbstractBeanDefinition 的实现又分为三个：分别是 <code>ChildBeanDefinition</code>、 <code>RootBeanDefinition</code>、 <code>GenericBeanDefinition</code>。</p><ol><li><p>ChildBeanDefinition：可以从 Parent Definition 里面继承一些公共定义（初始化方法、销毁方法、是否懒加载等等）不过</p></li><li><p>RootBeanDefinition：定义 Bean Definition 的公共属性，该定义在运行时支持Spring BeanFactory中的特定bean。 而 RootBeanDefinition 是不可以设置 parentName 指定 Parent Definition 的。</p></li><li><p>GenericBeanDefinition：是一个通用的 Bean Definition，是一站式服务，用于标准bean定义。 像任何bean定义一样，它允许指定一个类以及可选的构造函数参数值和属性值。 另外，可以通过 <code>parentName</code> 属性灵活地配置从父bean定义派生的内容。所以现在一般使用 GenericBeanDefinition。</p></li></ol><blockquote><p>从 Spring 2.5 开始，以编程方式注册 Bean Definition 的首选方法是 GenericBeanDefinition 类，该类允许通过 GenericBeanDefinition.setParentName 方法动态定义父依赖项。 </p></blockquote><p>GenericBeanDefinition 下面还有两个实现：<code>ScannedGenericBeanDefinition</code> 、<code>AnnotatedGenericBeanDefinition</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/mX91iq-VpxacB.png"></p><p>二者并无太大区别，只不过 <code>AnnotatedGenericBeanDefinition</code> 比 <code>ScannedGenericBeanDefinition</code> 多了一个 <code>factoryMethodMetadata</code> 的定义。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过阅读 BeanDefinition 的源码，并对其实现类的源码进行阅读之后，大致了解 BeanDefinition 的概念及其含义。大概作图总结如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/lrjeS3-Mn06Yj.png"></p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/JwRsKHqJ0ZcJ6Cgbp5BKiw">Spring 源码学习 04：初始化容器与 DefaultListableBeanFactory</a></li><li><a href="https://mp.weixin.qq.com/s/V7SjmIFKAXyppBF_KHbxXQ">Spring 源码学习 03：创建 IoC 容器的几种方式</a></li><li><a href="https://mp.weixin.qq.com/s/YPDPU7ePtii0vlrynexb_w">Spring 源码学习 02：关于 Spring IoC 和 Bean 的概念</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 04：初始化容器与 DefaultListableBeanFactory</title>
      <link href="2020/12/02/source-spring-04.html"/>
      <url>2020/12/02/source-spring-04.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Sf8fRH-D6nt5n.png"></p><p>在前一篇文章：<a href="https://mp.weixin.qq.com/s/V7SjmIFKAXyppBF_KHbxXQ">创建 IoC 容器的几种方式</a>中，介绍了四种方式，这里以 <code>AnnotationConfigApplicationContext</code> 为例，跟进代码，看看 IoC 的启动流程。</p><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>从 JavaConfig 中加载配置的 <code>AnnotationConfigApplicationContext</code> 启动方式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/NbaqT1-SIKlXs.png"></p><p>进去之后发现构造其实是调用的当前无参构造。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/dA7SqR-pnWaJ0.png"></p><p>所以在启动时也可以直接声明无参构造，改写为下面这种：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationConfigApplicationTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>AnnotationConfigApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br><br>context.register(JavaConfig.class);<br>context.refresh();<br><br>System.out.println(context.getBean(UserComponent.class));<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>今天就研究研究无参构造这一部分究竟做了什么逻辑！</p><h4 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/VfQDRi-qtFJay.png"></p><p>其中的 <code>StartupStep</code> 是 5.3 新增的类，看代码注释的意思是：表示用来记录启动过程中的一些指标信息等。暂时不做研究。</p><p>主要研究红框部分！注意，<strong>这一块并不代表只有红框部分</strong>！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/jHZiO9-lClEgy.png"></p><p>因为 <code>AnnotationConfigApplicationContext</code> 继承了 <code>GenericApplicationContext</code>，所以会先执行父类的构造方法。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/T9dF4r-BeA6nA.png"></p><p>所以这里会创建一个 <code>DefaultListableBeanFactory</code> 的容器。</p><h3 id="DefaultListableBeanFactory"><a href="#DefaultListableBeanFactory" class="headerlink" title="DefaultListableBeanFactory"></a>DefaultListableBeanFactory</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/DefaultListableBeanFactory-oBHX69.png" alt="DefaultListableBeanFactory UML"></p><p>虽然说 Spring 的 <code>BeanFactory</code> 定义了容器的基础概念、接口方法等，但是 <code>DefaultListableBeanFactory</code> 才是一个真正可以 new 出来的具体的容器，当然也可以暂且称之为 bean 工厂。</p><p>下面来看一下 <code>DefaultListableBeanFactory</code> 里面都有什么？</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/oUgw6b-dgE9ZX.png"></p><p>在 <code>DefaultListableBeanFactory</code> 里面会初始化很多参数，其中重点关注的是下面两个参数：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** Map of bean definition objects, keyed by bean name. */</span><br><span class="hljs-comment">// BeanDefinition 的存储 Map 其中 key 为 beanName</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="hljs-number">256</span>);<br><br><span class="hljs-comment">/** List of bean definition names, in registration order. */</span><br><span class="hljs-comment">// BeanName 的集合</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> List&lt;String&gt; beanDefinitionNames = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-number">256</span>);<br></code></pre></td></tr></table></figure><p>其中 <code>BeanDefinition</code> 描述了一个 bean 实例，该实例具有属性值，构造函数参数值以及具体实现所提供的更多信息。</p><p>对应的 <code>beanDefinitionMap</code> 就是存储的初始化的 beanName 和 BeanDefinition。</p><p>至于 BeanDefinition 具体内容，下一节再做介绍。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面的阅读，可以在初始化流程中增加一部分模块，即实例化 <code>DefaultListableBeanFactory</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/m4P5ZW-VrZwt7.png"></p><p>再回顾一下 <code>DefaultListableBeanFactory</code> 的概念。</p><blockquote><p><strong>DefaultListableBeanFactory：</strong></p><p>Spring 的 ConfigurableListableBeanFactory 和 BeanDefinitionRegistry 接口的默认实现：基于bean定义元数据的成熟bean工厂，可通过后处理器进行扩展。<br>重点需要把握的是 DefaultListableBeanFactory 内部定义了 BeanDefinition 的 Map。</p></blockquote><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>本文从入口开始，进入到构造，主要介绍了 <code>DefaultListableBeanFactory</code> 的创建，及创建时初始化了一堆参数。</p><p>考虑到文章篇幅问题，尽量避免大段大段的贴代码以及注释，有兴趣的小伙伴可以试着自己搭建源码构建环境，然后 Debug 走一走，这样也可以互相探讨，共同学习。</p><p>笔者也是刚开始阅读学习源码，不足之处，希望多多指正。</p><h4 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h4><ul><li><a href="https://mp.weixin.qq.com/s/V7SjmIFKAXyppBF_KHbxXQ">Spring 源码学习 03：创建 IoC 容器的几种方式</a></li><li><a href="https://mp.weixin.qq.com/s/YPDPU7ePtii0vlrynexb_w">Spring 源码学习 02：关于 Spring IoC 和 Bean 的概念</a></li><li><a href="https://mp.weixin.qq.com/s/gDhJMSPSX2vz68p5X3juow">Spring 源码学习 01：源码阅读环境的搭建</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 03：创建 IoC 容器的几种方式</title>
      <link href="2020/12/01/source-spring-03.html"/>
      <url>2020/12/01/source-spring-03.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/1cc7GX-1iJNvm.png" alt="创建容器"></p><p>在上一篇文章末尾画了一幅简图，现在从简图这入手，先来看看如何创建容器！</p><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/GenericGroovyApplicationContext-6dwIrF.png"></p><p>在搭建 <a href="https://mp.weixin.qq.com/s/gDhJMSPSX2vz68p5X3juow">Spring 源码阅读环境</a> 时，最后举了一个例子，其实就是创建容器，并从容器中获取 Bean ，来测试环境是否 OK。</p><p>根据元数据的不同，创建容器的方式也不同，下面参考官方文档，简单介绍下创建容器的几种方式：</p><h4 id="Java-配置获取元数据"><a href="#Java-配置获取元数据" class="headerlink" title="Java 配置获取元数据"></a>Java 配置获取元数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationConfigApplicationTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>AnnotationConfigApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br><br>context.register(JavaConfig.class);<br>context.refresh();<br><br>System.out.println(context.getBean(UserComponent.class));<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Xml-获取元数据"><a href="#Xml-获取元数据" class="headerlink" title="Xml 获取元数据"></a>Xml 获取元数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XmlConfigApplicationTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>ClassPathXmlApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;SpringConfig.xml&quot;</span>);<br><br>System.out.println(context.getBean(<span class="hljs-string">&quot;bookService&quot;</span>));<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Groovy-获取元数据"><a href="#Groovy-获取元数据" class="headerlink" title="Groovy 获取元数据"></a>Groovy 获取元数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GroovyConfigApplicationTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>GenericGroovyApplicationContext context = <span class="hljs-keyword">new</span> GenericGroovyApplicationContext(<span class="hljs-string">&quot;SpringConfig.groovy&quot;</span>);<br><br>System.out.println(context.getBean(NotesServiceImpl.class));<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="GenericApplicationContext"><a href="#GenericApplicationContext" class="headerlink" title="GenericApplicationContext"></a>GenericApplicationContext</h4><p>也可以直接创建 <code>GenericApplicationContext</code> 然后在加载元数据配置文件。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericApplicationTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>GenericApplicationContext context = <span class="hljs-keyword">new</span> GenericApplicationContext();<br><br><span class="hljs-keyword">new</span> XmlBeanDefinitionReader(context).loadBeanDefinitions(<span class="hljs-string">&quot;SpringConfig.xml&quot;</span>);<br><span class="hljs-keyword">new</span> GroovyBeanDefinitionReader(context).loadBeanDefinitions(<span class="hljs-string">&quot;SpringConfig.groovy&quot;</span>);<br><br>context.refresh();<br><br>System.out.println(context.getBean(<span class="hljs-string">&quot;bookService&quot;</span>));<br>System.out.println(context.getBean(NotesServiceImpl.class));<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/spring03-FyUebg.jpeg"></p><p>本文主要介绍了常用的几种容器的创建，配置文件部分就没有在文章中体现了，如果想了解这部分，可以参考官方文档。</p><h3 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h3><ul><li><a href="https://mp.weixin.qq.com/s/gDhJMSPSX2vz68p5X3juow">Spring 源码学习 01：源码阅读环境的搭建</a></li><li><a href="https://mp.weixin.qq.com/s/YPDPU7ePtii0vlrynexb_w">Spring 源码学习 02：关于 Spring IoC 和 Bean 的概念</a></li><li><a href="https://mp.weixin.qq.com/s/BORxKatt9qs4rDgmAHbv_A">Spring 自调用事务失效，你是怎么解决的？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 02：关于 Spring IoC 和 Bean 的概念</title>
      <link href="2020/11/30/source-spring-02.html"/>
      <url>2020/11/30/source-spring-02.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在前一篇文章中介绍了如何构建源码阅读环境，既然构建好了源码环境，本地也可以正常运行，那就开始阅读源码吧！</p><p>在阅读源码时，会参考<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core">官方文档</a>，很多概念在官网都可以得到答案，有兴趣的小伙伴们可以继续阅读，当做复习，写的不足之处，希望多多指导。</p><h3 id="IoC-和-DI"><a href="#IoC-和-DI" class="headerlink" title="IoC 和 DI"></a>IoC 和 DI</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Cp1dfI-Yg6zuJ.png" alt="IoC 概念"></p><h4 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h4><p>IoC（Inversion of Control），即控制反转。</p><p>之前是在对象内部 new 创建其他对象，然后使用。</p><p>而现在 Spring 中有一个容器可以在创建管理这些对象，并且将对象依赖的其他对象注入到这个对象中，这些对象的创建、销毁都由 Spring 进行管理。</p><p>相比以前来说，不再由自己控制其他对象的生命周期，这个过程就叫做控制反转。而负责统一管理这些类的容器就叫做 IoC 容器。</p><h4 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h4><p><code>IoC is also known as dependency injection (DI).</code> </p><p>是不是感觉奇奇怪怪的，为什么说：<code>IoC 也称为 DI</code>。</p><p>其实 IoC 和 DI 是同一个概念的不同角度描述。</p><p>依赖注入是指组件之间的依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。</p><p>通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>Spring 是通过 DI 实现 IoC 的。</p><h3 id="容器和-Bean"><a href="#容器和-Bean" class="headerlink" title="容器和 Bean"></a>容器和 Bean</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/4xZKqx-3YpFD2.png" alt="Spring IoC container and Bean"></p><p><code>Bean 是一个由 Spring IoC 容器实例化，组装和管理的对象。</code></p><p>相信大家都写过或者见过下面的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从容器中获取对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/6 19:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomBeanFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationContextAware</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext ctx;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setApplicationContext</span><span class="hljs-params">(ApplicationContext ac)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br><br>        ctx = ac;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getBean</span><span class="hljs-params">(String beanName)</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> ctx.getBean(beanName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码逻辑很简单，就是从容器中获取到指定名称的 <code>Bean</code>，而其中 <code>ApplicationContext</code> 接口其实就是 Spring IoC 容器。</p><p>当然 <code>ApplicationContext</code> 是一个接口，它有很多实现，而它也继承了 <code>BeanFactory</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/4PQoiE-WQT8uR.png" alt="BeanFactory or ApplicationContext"></p><p>虽然 <code>BeanFactory</code> 是 IoC 容器的最基本的形式，但是 <code>ApplicationContext</code> 对其进行了很多扩展，并具有 <code>BeanFactory</code> 的所有功能，通常建议优先使用 <code>ApplicationContext</code>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在通过<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core">Spring 官网</a> 了解了 IoC 、DI 、容器和 Bean 的概念后，再结合平常的使用基本上可以有个大概流程。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/0hWvfR-K15LRP.png" alt="流程猜想"></p><p>当然，这只是一个很粗略的猜想，是否正确，还有待后面继续阅读源码，然后去验证。</p><h3 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h3><ul><li><a href="https://mp.weixin.qq.com/s/gDhJMSPSX2vz68p5X3juow">Spring 源码学习 01：源码阅读环境的搭建</a></li><li><a href="https://mp.weixin.qq.com/s/BORxKatt9qs4rDgmAHbv_A">Spring 自调用事务失效，你是怎么解决的？</a></li><li><a href="https://mp.weixin.qq.com/s/ZJB-2WWeJFG7RQxaksNBuA">APP 莫名崩溃，开始以为是 Header 中 name 大小写的锅，最后发现原来是容器的错</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 源码学习 01：源码阅读环境的搭建</title>
      <link href="2020/11/26/source-spring-build.html"/>
      <url>2020/11/26/source-spring-build.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><p>本文记录了 Spring 源码环境的搭建方式，以及踩过的那些坑！​ 当前版本：5.3.2-SNAPSHOT。</p></blockquote><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li>Git</li><li>JDK<ol><li>master 分支需要 JDK 11</li><li>5.2.x 分支， JDK8 即可</li></ol></li><li>Gradle 6.5.1</li><li>IDEA 最新 （2020.2.3）</li></ol><p>Spring 源码仓库地址：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><ol><li>clone 源码</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span>  https://github.com/spring-projects/spring-framework.git<br></code></pre></td></tr></table></figure><ol start="2"><li><p>使用 IDEA 打开</p><ol><li><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/nN2jwC-B9crax.png"></li><li><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/SmFKEX-Rikm9z.png"></li><li>等待 IDEA 加载完成即可。</li></ol></li></ol><p>注： 也可以指定 clone 的分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> -b 5.2.x  https://github.com/spring-projects/spring-framework.git<br></code></pre></td></tr></table></figure><p>或者先 fork 到自己的仓库，然后再 clone。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/larIO8-qFY4Fo.png"></p><p>这里我是 fork 到我的仓库，然后再 clone 的。</p><p>当前 master 分支代表的版本为 5.3.2-SNAPSHOT。</p><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><ul><li>在项目右键创建 <code>module</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/qkYNup-hSgF5s.png"></p><ul><li>选择 <code>Gradle</code> <code>Java</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/v9YDiM-0D64W2.png"></p><ul><li>创建 module</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/iYepMg-WRomfs.png"></p><ul><li>在 build.gradle 中添加配置</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">compile(project(&quot;:spring-context&quot;))<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/SUhEs6-2JKywY.png"></p><ul><li>创建测试类并测试</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/O55vLL-XSueLY.png"></p><p>其中 <code>UserComponent</code> 添加了 <code>@Component</code> 注解， 程序正常执行则一切 OK。可以开始愉快的调试代码了。</p><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><h4 id="编译失败"><a href="#编译失败" class="headerlink" title="编译失败"></a>编译失败</h4><p>有小伙伴直接下载 zip 包，可能遇到以下问题：(非常不建议直接下载 zip 包构建，想知道原因可以继续看，最后我也没有构建成功，而是直接通过 clone 构建的。)</p><ol><li>报错如下：</li></ol><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">fatal: not a git repository (or any of the parent directories): .git<br><br>BUILD SUCCESSFUL in 14s<br>Build scan background action failed.<br>org.gradle.process.internal.ExecException: Process &#x27;command &#x27;git&#x27;&#x27; finished with non-zero exit value 128<br>    ... 其他省略<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/4mqrY9-o9NJO6.png"></p><p>看意思是没有 git 配置，那就添加上吧！</p><ol start="2"><li>这时候想着添加 git</li></ol><p><code>VCS</code> -&gt; <code>Enable Version Control Integration...</code> -&gt; 右上角 <code>Reload All Gradle Projects</code></p><p>依然报错</p><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">fatal: Needed a single revision<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/zLWbqb-rkJFw4.png"></p><ol start="3"><li>查询问题</li></ol><p>issues 地址：<a href="https://github.com/spring-projects/spring-framework/issues/24467">https://github.com/spring-projects/spring-framework/issues/24467</a></p><p>建议使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git@github.com:spring-projects/spring-framework.git<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/siVXre-hle4kw.png"></p><p>意思就是 zip 发行版主要是用来共享源代码，但不一定用于构建它。</p><ol start="4"><li>最后我选择了使用 clone 的方式，直接 clone 下来，然后 build 通过。</li></ol><h4 id="缺少-cglib-和-objenesis-包"><a href="#缺少-cglib-和-objenesis-包" class="headerlink" title="缺少 cglib 和 objenesis 包"></a>缺少 cglib 和 objenesis 包</h4><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">Kotlin: warnings found and -Weeror specified<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Xnip-2020-11-24-06-DhRwoS.png"></p><p>没有 <code>spring-cglib-repack</code> 和 <code>spring-objenesis-repack</code> 包</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/2fNVjI-71xWmS.png"></p><p>执行这两个即可。</p><h4 id="找不到包-jdk-jfr"><a href="#找不到包-jdk-jfr" class="headerlink" title="找不到包 jdk.jfr"></a>找不到包 jdk.jfr</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jdk.jfr.Category;<br><span class="hljs-keyword">import</span> jdk.jfr.Description;<br><span class="hljs-keyword">import</span> jdk.jfr.Event;<br><span class="hljs-keyword">import</span> jdk.jfr.Label;<br></code></pre></td></tr></table></figure><p>JDK 升级为 11。因为我本地使用的是 JDK8，发现报错，jfr 包需要升级 JDK 11 才有。</p><p>如果不生效，可以通过：</p><p>IDEA -&gt; <code>File</code> -&gt; <code>Project Structure</code> -&gt; <code>Project</code> 检查下是否修改为 JDK 11</p><p>快捷键：<code>⌘ + ;</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ost9dI-pTohuz.png"></p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ol><li>Spring 仓库：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></li><li>Spring 构建文档：<a href="https://github.com/spring-projects/spring-framework/wiki/Build-from-Source">https://github.com/spring-projects/spring-framework/wiki/Build-from-Source</a></li></ol><h4 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h4><ul><li><a href="https://mp.weixin.qq.com/s/_z4KaFip3qz2fynviMYiRQ">ReentrantLock 源码、画图一起看一看！</a></li><li><a href="https://mp.weixin.qq.com/s/yIzAe3kb0HCphzm1Evv-Tw">ReentrantReadWriteLock 的原理！</a></li><li><a href="https://mp.weixin.qq.com/s/BORxKatt9qs4rDgmAHbv_A">Spring 自调用事务失效，你是怎么解决的？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具册】- DocView 现在支持自定义 Markdown 模版了！</title>
      <link href="2020/11/23/doc-view-template.html"/>
      <url>2020/11/23/doc-view-template.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><p>有小伙伴反馈说希望可以自定义 Markdown 模版，这样就可以导出自己想要的样式了！这个功能可以有，毕竟大家不可能都生成一模一样的文档。现在来一起看看如何实现自定义模版吧！</p></blockquote><h4 id="设置模版"><a href="#设置模版" class="headerlink" title="设置模版"></a>设置模版</h4><p><code>Settings</code> -&gt; <code>Other Settings</code> -&gt; <code>Doc View</code> -&gt; <code>Markdown Template</code></p><p>打开之后内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Xnip-2020-11-23-59-asNWSp.png" alt="Xnip-2020-11-23-59-asNWSp"></p><p>模版这里分两个 <code>Tab</code> 分别是 <code>Spring</code> 、 <code>Dubbo</code> 。</p><p>这两个模版内容就稍微有些区别，如果自定义模版，直接修改保存即可。</p><h4 id="模版变量"><a href="#模版变量" class="headerlink" title="模版变量"></a>模版变量</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/d3VlSJ-Hxz8Tj.png"></p><p>关于模版变量，这里使用的是 <code>velocity</code> 将变量替换为文本，如果有其他方式，或者说是 <code>IDEA</code> 用的那种方式，希望可以告诉我。最好可以提供源码。 </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>非常感谢 <a href="https://github.com/lvgocc">lvgo</a> 小伙伴的参与。</p><p>如果小伙伴们在使用过程中发现一些 bug 或者有好的意见建议，可以在 GitHub 提交 Issues 留言指出来。</p><p>Doc View GitHub：<a href="https://github.com/liuzhihang/doc-view">https://github.com/liuzhihang/doc-view</a></p><p>最后，记得要 <code>一键三连</code>， 来个 <code>【分享、点赞、在看】</code>！</p><h4 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h4><ul><li><a href="https://mp.weixin.qq.com/s/rOTm9Kv02xLZZVFzQXf7IA">Dubbo 生成文档，导出 Markdown，这些功能 DocView 现在都有了！</a></li><li><a href="https://mp.weixin.qq.com/s/VgOHLQ_f4E8UlV9sQhyFpQ">头大！写文档太麻烦了！快来试试这款 IDEA 插件啊！爽到飞起~</a></li><li><a href="https://mp.weixin.qq.com/s/G8h5lg-d8SHZ2_ILBE04sQ">小伙伴想写个 IDEA 插件么？这些 API 了解一下！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具册 </category>
          
          <category> Doc View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具册 </tag>
            
            <tag> Doc View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具册】- Dubbo 接口，导出 Markdown ，这些功能 DocView 现在都有了！</title>
      <link href="2020/11/19/doc-view-dubbo.html"/>
      <url>2020/11/19/doc-view-dubbo.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>自从 DocView 发布了简陋的第一版之后，就不断地有小伙伴提建议意见等等，希望扩展各种功能。这不，时隔两周，DocView 又发布了新版本，本次的更新主要涉及到支持 Dubbo，以及支持导出单个文档为 Markdown 文件。来一起看看新功能吧！</p></blockquote><h4 id="支持导出-Markdown-文件"><a href="#支持导出-Markdown-文件" class="headerlink" title="支持导出 Markdown 文件"></a>支持导出 Markdown 文件</h4><p>DocView 原版本已经支持复制到剪贴板的功能。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/uRAtpo-AJ2kyV.png" alt="原版本"></p><p>而在新版本中增加了 <code>Export</code> 按钮，可以将单个文档导出为 Markdown 文件。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/KLmzHE-Sxlxc6.png" alt="新版本"></p><p>来一张动图，大家看看效果：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/1111-l7NaTW.gif" alt="1111-l7NaTW"></p><p>导出的 Markdown 文本内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/DJCp6X-saP6nE.png" alt="DJCp6X-saP6nE"></p><h4 id="支持-Dubbo-接口"><a href="#支持-Dubbo-接口" class="headerlink" title="支持 Dubbo 接口"></a>支持 Dubbo 接口</h4><p>之前的版本是不支持 Dubbo 接口的，而现在的版本可以在 Dubbo 接口里面使用。</p><p>当然这里并没有校验接口是否为 Dubbo 接口，只是校验了下是否为接口。所以说即使其他接口也是可以生成的。</p><p><strong>这块还是需要完善的!</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/S8M4fB-3ecWbP.png" alt="S8M4fB-3ecWbP"></p><h4 id="DocView-文档地址"><a href="#DocView-文档地址" class="headerlink" title="DocView 文档地址"></a>DocView 文档地址</h4><p>在面板左下角的 <code>help</code> 按钮修改了跳转地址为：<a href="http://docview.liuzhihang.com/">http://docview.liuzhihang.com/</a></p><p>只是粗略搭建了一个 DocView 的说明文档网站，小伙伴们可以发现这个网站连 logo 都没有。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/IQNatL-uWWCqO.png" alt="IQNatL-uWWCqO"></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>当然也有一些其他的小改动，比如设置页面（依然不支持自定义设置）。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/MJjOX4-pRQhfK.png" alt="MJjOX4-pRQhfK"></p><p>DocView 虽然支持了一部分功能，但是距离小伙伴们期望中的文档插件还有很多很多需要迭代的功能。</p><p>比如：</p><ul><li>批量生成（当前仅支持单个类或者方法）</li><li>批量导出</li><li>面板支持查看 Markdown 源文本</li><li>支持从 Swagger 注解获取字段相关信息</li><li>支持 Setting 设置</li><li>支持自定义模版</li><li>支持上传的 YApi</li><li>支持导出其他类型</li><li>…</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/cx5PxU-gVxBmM.jpg" alt="cx5PxU-gVxBmM"></p><p>嗯~ 可能大概也许应该会需要迭代很久……</p><p>也确实是个人能力和精力有限，如果小伙伴们有兴趣，可以提交 PR。</p><p>当然如果小伙伴们发现一些 bug 或者有好的意见建议，也可以留言指出来。</p><p>留言推荐大家在 GitHub 提 Issues。</p><p>最后如果小伙伴们觉得插件不错，可以推荐给周围的朋友同事，也记得 <code>一键三连</code>， 来个 <code>【分享、点赞、再看】</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 工具册 </category>
          
          <category> Doc View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具册 </tag>
            
            <tag> Doc View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Warning: Calling `brew list` to only list formulae is deprecated! Use `brew list --formula` instead.</title>
      <link href="2020/11/15/brew-list-warning.html"/>
      <url>2020/11/15/brew-list-warning.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>最近终端总是弹出这么一句话，咱也不懂怎么解决。</p><p>Google baidu 也查不到问题。</p><p>小伙伴帮忙看一下。</p><p>每次新打开终端都会有这个 Warning 。</p><pre><code>Warning: Calling `brew list` to only list formulae is deprecated! Use `brew list --formula` instead.</code></pre><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/5eDhZb-ptj6gr.png" alt="5eDhZb-ptj6gr"></p><p>最后被逼无奈，在 V 站 发帖求助小伙伴， 结果还真找到了答案</p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/HvJSlT-Q0oUVr.png" alt="HvJSlT-Q0oUVr"></p><p>最后找到问题所在，是因为按照网上的教程安装的 <code>Coreutils</code></p><p><code>~/.zshrc </code>里改一下即可。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/hAFz8B-HWsVNg.png" alt="hAFz8B-HWsVNg"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>写到这里，很多小伙伴应该已经知道问题所在了，可能有的小伙伴还不知道怎么解决：</p><ol><li><code>vim ~/.zshrc</code></li><li>找到使用 <code>brew list</code> 的地方</li><li>将 <code>brew list</code> 改为 <code>brew list --formula</code></li></ol><p>如果还不知道怎么弄，那可以用编辑工具打开<code> .zshrc</code> 文件，然后搜索找到 <code>brew list</code> ，然后替换。</p>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
            <tag> mac </tag>
            
            <tag> brew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工作笔记】- Spring 自调用事务失效，你是怎么解决的？</title>
      <link href="2020/11/08/spring-self-call.html"/>
      <url>2020/11/08/spring-self-call.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>相信大家都遇到一种事务失效场景，那就是 Spring 自调用，就是在 Service 方法内，调用另一个加 <code>@Transactional</code> 注解的方法，发现事务失效，这时候你是怎么解决的呢？</p></blockquote><h3 id="事情回顾"><a href="#事情回顾" class="headerlink" title="事情回顾"></a>事情回顾</h3><p>那是一个我忘了天气咋样的下午，突然蹦出一个小红点，嗯~ 挺着急的小红点。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/3E8q0W-3Cg65u.png" alt="3E8q0W-3Cg65u"></p><p>原来是事务失效了！</p><p>莫慌！莫慌！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/kRoqUW-MKbcBj.png" alt="kRoqUW-MKbcBj"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/KVdtlZ-F3jW3p.png" alt="KVdtlZ-F3jW3p"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/T4poZK-qyiLEV.png" alt="T4poZK-qyiLEV"></p><p>最后小伙伴选择了抽走，是我的工具类不香了么？</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/zVf6LC-tLzseS.png" alt="zVf6LC-tLzseS"></p><p>当然故事的结果是完美的，问题解决了。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/v3W8tg-VJEgZS.jpg" alt="v3W8tg-VJEgZS"></p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>在开发中涉及到同时操作多个表的时候，要保证两个操作要么一起成功，要么一起失败，这时候就需要用到事务。</p><p>现在一般使用的都是基于 <code>@Transactional</code> 注解的<strong>声明式事务</strong>。</p><p>而事务使用过程中有以下几个注意事项：</p><ol><li>事务只能应用到 public 方法上才会有效；</li><li>事务需要从外部调用，Spring 自调用会失效；</li><li>建议事务注解 @Transactional 一般添加在实现类上。</li></ol><p>当然这几句话不是说我的，人家官方文档可是明确说明的！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/IlNXVn-uemNYF.png" alt="IlNXVn-uemNYF"></p><p>这里可是说明了<code>应仅将 @Transactional 注解应用于具有公开可见性的方法。如果对受 protected, private o或 package-visible 修饰的方法使用，则不会引发任何错误，但是被注解的方法不会显示已配置的事务设置。</code></p><p>说白了，就是你用了，不会报错，但是不生效！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/M5XTck-YnrPiu.png" alt="M5XTck-YnrPiu"></p><p>至于建议加在实现类上，这个只是建议，不过如果加在接口类或接口方法上时，只有配置基于接口的代理才会生效。所以这块还是老老实实的<code>加在实现类或实现类方法上</code>吧。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/P28Ciu-4YvetS.png" alt="P28Ciu-4YvetS"></p><p>因为代理模式只拦截通过代理传入的外部方法调用，所以自调用事务是不生效的。</p><p>官方的解释还是比较简单明了的，虽然我看不懂，但是不影响我截图。</p><p>那我还是再截一个吧……</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/sBkeIz-80K1UE.png" alt="sBkeIz-80K1UE"></p><h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h3><p>但是在开发中，小伙伴们往往会遇到这种情况！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/g1BG6s-BgQfOw.png" alt="g1BG6s-BgQfOw"></p><p>本来<strong>自己写的</strong>代码就一坨坨的又臭又长，里面有各种验签、验参、查询、验证等等，就想着来个事务，让事务包裹的范围最小，仅仅在同时更新的时候加上事务吧！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/38SYyX-gEXV58.png" alt="38SYyX-gEXV58"></p><p>这么写，咦~ IDEA 报错了，好像不能 <code>private</code> 修饰，那我改成 <code>public</code>。</p><p>很显然事务是不生效的。</p><p>把更新的代码放到<code>又臭又长</code>的代码里面，让它变得更臭更长，然后用 <code>@Transactional</code> 注解一加。完美解决！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/9r8ioC-W6kSbv.jpg" alt="9r8ioC-W6kSbv"></p><p>请放过那坨代码吧！来看看下面的办法。</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案 1"></a>解决方案 1</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/08fPAy-ee1X6A.png" alt="08fPAy-ee1X6A"></p><p>那我改成外部调用不就行了么？</p><p>再声明一个 Service，把更新表的逻辑放过去。</p><p>我一般就喜欢使用这个办法。</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案 2"></a>解决方案 2</h4><p>使用<code>编程式事务</code>，前面说了，使用<code>声明式事务</code>时，又这又那，我换一种总可以吧！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/yuJKad-LGJuVt.png" alt="yuJKad-LGJuVt"></p><p>你看，我还把方法改成 <code>private</code> 修饰了，事务也生效。完美解决！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/8orQs4-tgtQts.jpg" alt="8orQs4-tgtQts"></p><p>其实这个方法也很不错哦！</p><h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案 3"></a>解决方案 3</h4><p>又想用注解，又想自调用怎么办？</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/MBSeHo-E5RDuC.jpg" alt="MBSeHo-E5RDuC"></p><p>不过… 麻烦一点还是可以的。</p><p>咱们可以参考<code>编程式事务</code>的方式，不就是不让自调用么，我调外部方法，然后外部方法再给我调回来不就可以了。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransactionalComponent</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Cell</span> </span>&#123;<br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">required</span><span class="hljs-params">(Cell cell)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        cell.run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的话不就可以通过 <code>TransactionalComponent</code> 调用了么，并且还可以使用 <code>lambda</code> 表达式。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/y5bnw5-TMtjKN.png" alt="y5bnw5-TMtjKN"></p><p>当然基于这个版本也可以做一个迭代，就是使用静态方法调用，不用每次都用 <code>@Autowired</code> 注入一次。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransactionalUtils</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> TransactionalComponent transactionalComponent;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> TransactionalComponent <span class="hljs-title">getTransactionalComponent</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (transactionalComponent == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 从容器中获取 transactionalComponent</span><br>            transactionalComponent = ApplicationContextUtils.getBean(TransactionalComponent.class);<br>        &#125;<br>        <span class="hljs-keyword">return</span> transactionalComponent;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">required</span><span class="hljs-params">(TransactionalComponent.Cell cell)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        getTransactionalComponent().required(cell);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/awzH4i-JjJNp4.png" alt="awzH4i-JjJNp4"></p><p>这样通过工具类 <code>TransactionalUtils</code> 便可以直接调用静态方法的方式执行事务操作。</p><h4 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案 4"></a>解决方案 4</h4><blockquote><p>这是一个补充方案：</p></blockquote><p>其实小伙伴完全可以注入自己。 比如 自己是 ServiceA</p><p>然后再代码中声明一个 </p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ServiceA serviceA<br></code></pre></td></tr></table></figure><p>这样再用 serviceA，调用自己的其他事务方法就可以开启事务了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>本文主要介绍为什么会遇到事务失效，以及事务失效的避免方式，同时提供了三种方式来解决自调用事务失效的问题。不足之处，欢迎指正。</p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ol><li>Spring 文档：<a href="https://docs.spring.io/spring-framework/docs/5.3.0/reference/html/data-access.html#transaction-declarative-annotations">https://docs.spring.io/spring-framework/docs/5.3.0/reference/html/data-access.html#transaction-declarative-annotations</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具册】- 写文档太麻烦，试试这款 IDEA 插件吧！</title>
      <link href="2020/11/01/doc-view.html"/>
      <url>2020/11/01/doc-view.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>每次开发完新项目或者新接口功能等，第一件事就是提供接口文档。说到接口文档，当然是用 Markdown 了。各种复制粘贴字段，必填非必填，字段备注，请求返回示例等等。简直是浪费时间哇。所以想到了开发一款插件来解决重复复制文档的问题。下面来看我介绍介绍这款插件。</p><p>PS：插件比较简陋，还需要不断迭代。</p></blockquote><h2 id="为什么开发插件"><a href="#为什么开发插件" class="headerlink" title="为什么开发插件"></a>为什么开发插件</h2><p>每次在对外提供接口时都要写文档，各种麻烦，并且文档耗费了很大一部分时间。也使用了一些文档工具，在线写作工具，最终还是比较喜欢自己手写文档。</p><h3 id="使用过的生成工具"><a href="#使用过的生成工具" class="headerlink" title="使用过的生成工具"></a>使用过的生成工具</h3><ol><li>Swagger ： 添加依赖，配置类及描述信息，然后在方法及实体上添加注解，启动项目便可以通过访问 <code>xxxx/swagger-ui.html</code> 查看接口文档；</li><li>API Doc ：添加配置文件及注释，安装 <code>npm</code> 并通过执行命令生成文档；</li><li>SmartDoc ：添加依赖及注释后执行测试类生成文档；</li><li>API2DOC ：添加依赖，开启注解，通过注解配置生成文档。</li></ol><p>上面四种方法，无疑都需要添加依赖，使用注解等方式，可以说有一定的代码侵入性。</p><h3 id="使用过的接口文档工具"><a href="#使用过的接口文档工具" class="headerlink" title="使用过的接口文档工具"></a>使用过的接口文档工具</h3><ol><li>ShowDoc ：曾经一段时间很喜欢用这个， Markdown 语法，方便直观。不过就是要自己手写；</li><li>YApi ：现在在使用 YApi，可以通过 Swagger 导入；</li><li>VS Code 写 Markdown ：直接离线写 Markdown ，可以导出 PDF、Word、Html。</li></ol><p>自己写文档比较重复，繁琐，不过个人比较喜欢 Markdown 格式。简洁直观。并且配合着我之前写的 IDEA 插件 <code>copy-as-json</code> 和 <code>Tookit</code> 将实体复制为 json 字符串，用来快速生成请求样例和返回样例，还是可以减少一定的工作量的。</p><h3 id="其他使用方式"><a href="#其他使用方式" class="headerlink" title="其他使用方式"></a>其他使用方式</h3><p>使用各种在线协作工具，腾讯文档、语雀、石墨文档。使用离线版本 PDF、Word、Excel 等等。也有一些其他的文档工具，不过自己都没有使用过或者调研过了。</p><p>基本上这些文档工具要么通过代码侵入的方式生成文档，要么自己手撸文档。总体来说各有千秋。</p><h3 id="个人手写更方便"><a href="#个人手写更方便" class="headerlink" title="个人手写更方便"></a>个人手写更方便</h3><p><strong>个人比较喜欢的就是手写 Markdown 。</strong></p><p>下面是两幅图：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/fWC7q0-bt3RuN.png" alt="ShowDoc 官方样例"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Yh68js-evYsQS.png" alt="VS Code 手写文档"></p><p>有时候文档比较多的时候，就写的累了。尤其是最近使用了 <code>YApi</code> ， 个人感觉使用 <code>Swagger</code> 然后导入到 <code>YApi</code> 里面还是挺方便的，省时省力。</p><p>后来就想，既然 <code>YApi</code> 提供接口，那我是不是可以自己生成，然后传到 <code>YApi</code> 中呢？</p><p>所以就开始着手这个插件的开发。</p><h2 id="使用及功能"><a href="#使用及功能" class="headerlink" title="使用及功能"></a>使用及功能</h2><p>既然已经开发好最基础版本了，当然也得介绍下，首先看图：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/B9FzFw-9M24Py.png" alt="Doc View 样例"></p><p>通过图简单介绍下使用以及功能：</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用方式很简单，直接在 <code>Controller</code> 类或者 <code>Controller</code> 类的公共非静态方法内右键唤出菜单，单机 <code>Doc View</code> 即可。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Gq0gn6-XnAfto.png"></p><p>只能在 <code>Controller</code> 类或者 <code>Controller</code> 类的公共非静态方法内使用。至于两者的区别，后续会介绍。</p><p>这里可能会有小伙伴们发出疑问：Dubbo 接口也要写文档，难道不可以么？</p><p>嗯~ 可以！但是现在不支持~</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>基本功能就是截图展示的那样。</p><ol><li>左侧显示接口名及列表，右侧展示接口信息；</li><li>点击 <code>Copy 按钮</code> 就会将展示的信息原本对应的 Markdown 文本复制到剪贴板；</li><li>在 Class 内部点击，生成的如图所示的列表，而在方法内右键生成的是只有本方法的。</li></ol><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>Dubbo 接口，当前版本不支持，所以下面介绍的全都是在 Class 上的使用：</p><h4 id="要生成文档，需要满足什么条件？"><a href="#要生成文档，需要满足什么条件？" class="headerlink" title="要生成文档，需要满足什么条件？"></a>要生成文档，需要满足什么条件？</h4><ol><li>目标类内部有方法；</li><li>类必须有相关 <code>Spring</code> 注解。<ol><li><code>org.springframework.stereotype.Controller</code> </li><li><code>org.springframework.web.bind.annotation.RestController</code></li></ol></li></ol><h4 id="生成文档，接口方法需要满足什么条件？"><a href="#生成文档，接口方法需要满足什么条件？" class="headerlink" title="生成文档，接口方法需要满足什么条件？"></a>生成文档，接口方法需要满足什么条件？</h4><p>文档的方法：<code>Public</code> 修饰且非静态方法（<code>static</code> 修饰），方法上包含以下注解：</p><ol><li><code>org.springframework.web.bind.annotation.GetMapping</code></li><li><code>org.springframework.web.bind.annotation.PostMapping</code></li><li><code>org.springframework.web.bind.annotation.GetMapping</code></li><li><code>org.springframework.web.bind.annotation.DeleteMapping</code></li><li><code>org.springframework.web.bind.annotation.PatchMapping</code></li><li><code>org.springframework.web.bind.annotation.RequestMapping</code></li></ol><h4 id="文档模版是否可以设置？"><a href="#文档模版是否可以设置？" class="headerlink" title="文档模版是否可以设置？"></a>文档模版是否可以设置？</h4><p>当前版本文档模版只有展示的这个，不支持自定义模版。</p><h4 id="接口名称是如何设置的？"><a href="#接口名称是如何设置的？" class="headerlink" title="接口名称是如何设置的？"></a>接口名称是如何设置的？</h4><ol><li><p>接口名称默认取值如图截图所示 <code>类名#方法名</code>；</p><p> <img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/7LRtm9-LzXotO.png" alt="7LRtm9-LzXotO"></p></li><li><p>支持在注释上使用 <code>@name</code> 设置接口名。</p><p> <img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/zdw5TG-QtZFyB.png" alt="zdw5TG-QtZFyB"></p></li></ol><h4 id="接口描述是从哪里获取的？"><a href="#接口描述是从哪里获取的？" class="headerlink" title="接口描述是从哪里获取的？"></a>接口描述是从哪里获取的？</h4><ol><li><p>接口描述直接取的方法注释；</p></li><li><p>如果有 <code>@description</code> 标签，则会优先使用标签对应的描述。</p><p> <img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/pcZB5V-Tn33bX.png" alt="pcZB5V-Tn33bX"></p></li></ol><h4 id="请求路径是如何生成的？"><a href="#请求路径是如何生成的？" class="headerlink" title="请求路径是如何生成的？"></a>请求路径是如何生成的？</h4><p>取 <code>Class</code> 和  <code>Method</code> 上的 path 进行拼装组成。</p><h4 id="请求方式如何设置？"><a href="#请求方式如何设置？" class="headerlink" title="请求方式如何设置？"></a>请求方式如何设置？</h4><p>根据 <code>Method</code> 上的注解生成。</p><h4 id="请求参数及请求示例的需要设置什么？"><a href="#请求参数及请求示例的需要设置什么？" class="headerlink" title="请求参数及请求示例的需要设置什么？"></a>请求参数及请求示例的需要设置什么？</h4><ol><li><p>根据是否有 <code>@RequestBody</code> 注解，生成请求 Header 是否为 json 还是 form。同时会检测请求参数中是否有 <code>@RequestHeader</code> 注解；</p><p> <img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/pQHnXo-C4oPfT.png" alt="Header"></p></li><li><p>对象生成列表；</p></li><li><p>根据请求是 json 还是 form 生成对应的请求示例。</p></li></ol><h4 id="返回参数及返回示例怎么生成？"><a href="#返回参数及返回示例怎么生成？" class="headerlink" title="返回参数及返回示例怎么生成？"></a>返回参数及返回示例怎么生成？</h4><p>支持对象，返回空，返回带泛型方式。这里的泛型仅支持单个泛型且名称为 <code>T</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/9ML932-RbqIqV.png" alt="返回带泛型"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p><strong>Q: <code>Doc View</code> 插件去哪里下载？</strong></p><p><strong>A:</strong> </p><ol><li>可以直接通过 IDEA 插件仓库，直接搜索名称即可；</li><li>在 GitHub 通过 Releases 下载；</li><li>关注公众号并发送 <code>Doc View</code> 相关关键字（doc/doc view）获取。</li></ol><p><strong>Q: <code>Doc View</code> 是否开源？</strong></p><p><strong>A:</strong> 是的。开源地址为：<a href="https://github.com/liuzhihang/doc-view">https://github.com/liuzhihang/doc-view</a>，有兴趣的小伙伴，可以给个 Star ，如果想增加一些功能，也可以提 PR。</p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>插件开发从最开始开发到今天发布第一版，中间经历了很长一段时间，毕竟只是业余时间开发，就断断续续的写，不过现在最简单版本已经可以使用了。</p><p>目前来看，只有一个 <code>Copy</code> 功能，不过基本上可以满足使用。至于其他的需求，比如：自定义模版、支持 Dubbo 接口、预览导出等功能就需要后续不断迭代了。</p><p>个人开发精力有限，小伙伴在使用过程中遇到肯定会遇到 bug，或者是有其他的功能及使用建议，都可以通过以下方式反馈：</p><ol><li>关注公众号：『 刘志航 』 通过读者讨论进行留言；</li><li>在 GitHub 上提 Issues；</li><li>在插件帮助页面留言；</li><li>文章结尾留言；</li></ol><p>最后，感谢小伙伴们的支持。欢迎下载体验，并提出相关建议及意见。</p>]]></content>
      
      
      <categories>
          
          <category> 工具册 </category>
          
          <category> Doc View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具册 </tag>
            
            <tag> Doc View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 写时复制集合 —— CopyOnWriteArrayList</title>
      <link href="2020/10/31/copyonwritearraylist.html"/>
      <url>2020/10/31/copyonwritearraylist.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>JUC 下面还有一个系列的类，都是 CopyOnWriteXXX ，意思是写时复制，这个究竟是怎么回事？那就以 CopyOnWriteArrayList 为切入点，一起了解写时复制是怎么回事？</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>ArrayList 的一个线程安全的变体，其中所有可变操作（add、set 等等）都是通过对底层数组进行一次新的复制来实现的。</p><p>像名字一样，每次进行操作的时候，都会进行一次复制，当然会有很大的性能消耗，但是在某些使用场景下，又会提高性能。具体是怎么操作的，那就一步一步阅读源码，然后再做总结归纳。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CopyOnWriteArrayListTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        CopyOnWriteArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> CopyOnWriteArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// 添加元素</span><br>        list.add(<span class="hljs-string">&quot;liuzhihang&quot;</span>);<br><br>        <span class="hljs-comment">// 移除元素</span><br>        list.remove(<span class="hljs-string">&quot;liuzhihang&quot;</span>);<br><br>        <span class="hljs-comment">// 查看元素</span><br>        String value0 = list.get(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 遍历</span><br>        Iterator&lt;String&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            String next = iterator.next();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="问题疑问"><a href="#问题疑问" class="headerlink" title="问题疑问"></a>问题疑问</h4><ol><li>为什么要叫写时复制集合？</li><li>CopyOnWriteArrayList 实现原理是什么？</li><li>CopyOnWriteArrayList 和 ArrayList 有什么区别？</li><li>CopyOnWriteArrayList 复制是怎么进行复制的？</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/PRT4mY-DDwfkF.png" alt="PRT4mY-DDwfkF"></p><h4 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CopyOnWriteArrayList</span>&lt;<span class="hljs-title">E</span>&gt;</span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">E</span>&gt;, <span class="hljs-title">RandomAccess</span>, <span class="hljs-title">Cloneable</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">8673264195747942595L</span>;<br><br>    <span class="hljs-comment">/** 数据有变动时使用 */</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">transient</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-comment">/** 数组 只能通过 getArray/setArray 访问 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Object[] array;<br><br>    <span class="hljs-keyword">final</span> Object[] getArray() &#123;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br>    <span class="hljs-comment">// 将数组指向传入的新数组</span><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setArray</span><span class="hljs-params">(Object[] a)</span> </span>&#123;<br>        array = a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过参数可以了解到以下内容：</p><ol><li>基于数组实现；</li><li>使用了 ReentrantLock 互斥锁。</li></ol><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CopyOnWriteArrayList</span><span class="hljs-params">()</span> </span>&#123;<br>    setArray(<span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>在初始化 CopyOnWriteArrayList 时，就是创建了一个 Object 的数组。</p><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-comment">// 加锁</span><br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取当前数组</span><br>        Object[] elements = getArray();<br>        <span class="hljs-keyword">int</span> len = elements.length;<br>        <span class="hljs-comment">// 创建一个新数组，并将原数组数据复制到新数组</span><br>        Object[] newElements = Arrays.copyOf(elements, len + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 添加的新元素到数组尾部</span><br>        newElements[len] = e;<br>        <span class="hljs-comment">// 将数组指向新数组</span><br>        setArray(newElements);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>add 方法逻辑很简单：</p><ol><li>通过加互斥锁（ReentrantLock）从而保证在写的时候只有一个线程可以写。</li><li>新增元素时，先使用 <code>Arrays.copyOf(elements, len + 1)</code> 复制出一个长度 +1 的新数组。</li><li>添加元素到新数组。</li><li>然后再将原数组对象指向新数组。</li></ol><p>画图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/KCTNMP-kLOtFP.png" alt="KCTNMP-kLOtFP"></p><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-comment">// 加锁</span><br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 原数组</span><br>        Object[] elements = getArray();<br>        <span class="hljs-keyword">int</span> len = elements.length;<br>        <span class="hljs-comment">// 移除的值</span><br>        E oldValue = get(elements, index);<br>        <span class="hljs-keyword">int</span> numMoved = len - index - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (numMoved == <span class="hljs-number">0</span>)<br>            <span class="hljs-comment">// 如果移除最后一个元素</span><br>            <span class="hljs-comment">// 直接复制前面的元素即可</span><br>            setArray(Arrays.copyOf(elements, len - <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 移除中间的元素，进行两次复制</span><br>            Object[] newElements = <span class="hljs-keyword">new</span> Object[len - <span class="hljs-number">1</span>];<br>            System.arraycopy(elements, <span class="hljs-number">0</span>, newElements, <span class="hljs-number">0</span>, index);<br>            System.arraycopy(elements, index + <span class="hljs-number">1</span>, newElements, index,<br>                                numMoved);<br>            setArray(newElements);<br>        &#125;<br>        <span class="hljs-keyword">return</span> oldValue;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>remove 方法相对多了一些判断：</p><ol><li>通过加互斥锁（ReentrantLock）从而保证在写的时候只有一个线程可以移除元素。</li><li>如果移除的是最后一个元素，则直接复制前面的元素到新数组，并指向新数组即可。</li><li>如果移除的是中间的元素，则需要进行两次复制，然后指向新数组。</li></ol><p>画图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/q3iE0c-AGgXfP.png" alt="q3iE0c-AGgXfP"></p><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> get(getArray(), index);<br>&#125;<br></code></pre></td></tr></table></figure><p>get 方法可以看出：</p><ol><li>获取元素并没有进行加锁。</li><li>从原数组获取的元素。</li></ol><p>所以并发情况下，并不能保证很及时的读取的刚插入或者移除的元素。</p><h4 id="数组复制"><a href="#数组复制" class="headerlink" title="数组复制"></a>数组复制</h4><p>通过阅读 add 和 remove 相关代码，可以看到在数组复制时使用了 <code>Arrays.copyOf</code> 和 <code>System.arraycopy</code>，这相当于一个优化方面吧。</p><p>毕竟数组复制总不能把原数组遍历一遍，挨着赋值到新数组里面吧。</p><p>那接下来看一下内部是如何实现的：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Arrays</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 其他方法省略 ...</span><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * original 要复制的数组</span><br><span class="hljs-comment">     * newLength 新数组的长度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class="hljs-keyword">int</span> newLength) &#123;<br>        <span class="hljs-keyword">return</span> (T[]) copyOf(original, newLength, original.getClass());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * original 要复制的数组</span><br><span class="hljs-comment">     * newLength 新数组的长度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="hljs-keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;<br>        <span class="hljs-comment">// 创建一个新数组，长度是指定的长度</span><br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        T[] copy = ((Object)newType == (Object)Object[].class)<br>            ? (T[]) <span class="hljs-keyword">new</span> Object[newLength]<br>            <span class="hljs-comment">// 创建具有指定的组件类型和长度的新数组</span><br>            : (T[]) Array.newInstance(newType.getComponentType(), newLength);<br>        <br>        <span class="hljs-comment">// 调用 System.arraycopy 复制数组</span><br>        System.arraycopy(original, <span class="hljs-number">0</span>, copy, <span class="hljs-number">0</span>,<br>                         Math.min(original.length, newLength));<br>        <span class="hljs-keyword">return</span> copy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过阅读 <code>Arrays.copyOf</code> 相关源码，发现其实 <code>Arrays.copyOf</code> 底层也是调用的 <code>System.arraycopy</code></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">System</span> </span>&#123;<br><br>    <span class="hljs-comment">// 其他方法省略 ...</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * src 源数组</span><br><span class="hljs-comment">     * srcPos 源数组起始位置</span><br><span class="hljs-comment">     * dest 目标数组</span><br><span class="hljs-comment">     * destPos 目标数组的起始位置</span><br><span class="hljs-comment">     * length 要复制的元素数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">arraycopy</span><span class="hljs-params">(Object src,  <span class="hljs-keyword">int</span>  srcPos,</span></span><br><span class="hljs-function"><span class="hljs-params">                                        Object dest, <span class="hljs-keyword">int</span> destPos,</span></span><br><span class="hljs-function"><span class="hljs-params">                                        <span class="hljs-keyword">int</span> length)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 <code>System.arraycopy</code> 是一个 <code>native</code> 方法，这个是 JVM 内部实现的，具体可以阅读相关资料。而使用这种方式要比 <code>for</code> 循环和 <code>clone</code> 要高效很多。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><p><strong>Q: 为什么要叫写时复制集合？</strong></p><p><strong>A:</strong> 因为在 add、remove 操作时会复制出来一个新数组。</p><p><strong>Q: CopyOnWriteArrayList 实现原理是什么？</strong></p><p><strong>A:</strong> 在 add、remove 操作时会进行加锁，然后复制出来一个新数组，操作的都是新数组，而此时原数组是可以提供查询的。当操作结束之后，会将对象指针指向新数组。</p><p><strong>Q: CopyOnWriteArrayList 和 ArrayList 有什么区别？</strong></p><p><strong>A:</strong> CopyOnWriteArrayList 在读多写少的场景下可以提高效率，而 ArrayList 只是普通数组集合，并不适用于并发场景，而如果对 ArrayList 加锁，则会影响一部分性能。</p><p>同样对 CopyOnWriteArrayList 而言，仅能保证最终一致性。因为刚写入的数据，是写到的复制的数组中，此时并不能立即查询到。如果要保证实时性可以尝试使用 <code>Collections.synchronizedList</code> 或者加锁等方式。</p><p><strong>Q: CopyOnWriteArrayList 复制是怎么进行复制的？</strong></p><p><strong>A:</strong> 内部使用的是本地方法 <code>System.arraycopy</code> 进行数组的复制。</p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>通过阅读 CopyOnWriteArrayList 源码，了解到写时复制是的原理。同时了解到可以使用 <code>System.arraycopy</code> 的方式提高数组复制的效率。</p><p>同样 CopyOnWriteArrayList 适合读多写少的场景，满足最终一致性，但是并不能保证数据修改及时查询到。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 非阻塞的无界线程安全队列 —— ConcurrentLinkedQueue</title>
      <link href="2020/10/25/source-code-concurrentlinkedqueue.html"/>
      <url>2020/10/25/source-code-concurrentlinkedqueue.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>JUC 下面的相关源码继续往下阅读，这就看到了非阻塞的无界线程安全队列 —— ConcurrentLinkedQueue，来一起看看吧。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>基于链接节点的无界线程安全队列，对元素FIFO（先进先出）进行排序。 队列的头部是队列中最长时间的元素，队列的尾部是队列中最短时间的元素。 在队列的尾部插入新元素，队列检索操作获取队列头部的元素。</p><p>当许多线程共享对公共集合的访问 ConcurrentLinkedQueue 是一个合适的选择。 与大多数其他并发集合实现一样，此类不允许使用null元素。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcurrentLinkedQueueTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        ConcurrentLinkedQueue&lt;String&gt; queue = <span class="hljs-keyword">new</span> ConcurrentLinkedQueue&lt;String&gt;();<br><br>        <span class="hljs-comment">// 将指定元素插入此队列的尾部。</span><br>        queue.add(<span class="hljs-string">&quot;liuzhihang&quot;</span>);<br>        <span class="hljs-comment">// 将指定元素插入此队列的尾部。</span><br>        queue.offer(<span class="hljs-string">&quot;liuzhihang&quot;</span>);<br><br>        <span class="hljs-comment">// 获取但不移除此队列的头，队列为空返回 null。</span><br>        queue.peek();<br>        <span class="hljs-comment">// 获取并移除此队列的头，此队列为空返回 null。</span><br>        queue.poll();<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/LNKjGH-iwlqrt.png" alt="LNKjGH-iwlqrt"></p><h4 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <br>    <span class="hljs-comment">// 节点中的元素</span><br>    <span class="hljs-keyword">volatile</span> E item;<br>    <span class="hljs-comment">// 下一个节点</span><br>    <span class="hljs-keyword">volatile</span> Node&lt;E&gt; next;<br><br>    Node(E item) &#123;<br>        UNSAFE.putObject(<span class="hljs-keyword">this</span>, itemOffset, item);<br>    &#125;<br>    <span class="hljs-comment">// CAS 的方式设置节点元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">casItem</span><span class="hljs-params">(E cmp, E val)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> UNSAFE.compareAndSwapObject(<span class="hljs-keyword">this</span>, itemOffset, cmp, val);<br>    &#125;<br>    <span class="hljs-comment">// 设置下一个节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lazySetNext</span><span class="hljs-params">(Node&lt;E&gt; val)</span> </span>&#123;<br>        UNSAFE.putOrderedObject(<span class="hljs-keyword">this</span>, nextOffset, val);<br>    &#125;<br><br>    <span class="hljs-comment">// CAS 的方式设置下一个节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">casNext</span><span class="hljs-params">(Node&lt;E&gt; cmp, Node&lt;E&gt; val)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> UNSAFE.compareAndSwapObject(<span class="hljs-keyword">this</span>, nextOffset, cmp, val);<br>    &#125;<br><br>    <span class="hljs-comment">// 省略 ……</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 ConcurrentLinkedQueue 内部含有一个内部类 Node，如上所示，这个内部类用来标识链表中的一个节点，通过代码可以看出，在 ConcurrentLinkedQueue 中的链表为<code>单向链表</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcurrentLinkedQueue</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueue</span>&lt;<span class="hljs-title">E</span>&gt;</span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">Queue</span>&lt;<span class="hljs-title">E</span>&gt;, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br>        <br>    <span class="hljs-comment">// 其他省略</span><br><br>    <span class="hljs-comment">// 头结点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node&lt;E&gt; head;      <br><br>    <span class="hljs-comment">// 尾节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node&lt;E&gt; tail;<br>&#125;<br></code></pre></td></tr></table></figure><p>头尾节点使用 <code>volatile</code> 修饰，保证内存可见性。</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcurrentLinkedQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    head = tail = <span class="hljs-keyword">new</span> Node&lt;E&gt;(<span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当创建对象时，头尾节点都是指向一个空节点。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ZzpJTa-lOE9g4.png" alt="ZzpJTa-lOE9g4"></p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> offer(e);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">offer</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 验证是否为空</span><br>    checkNotNull(e);<br><br>    <span class="hljs-comment">// 创建节点</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;E&gt;(e);<br><br>    <span class="hljs-comment">// 循环入队列</span><br>    <span class="hljs-comment">// t 是当前尾节点，p 初始为 t</span><br>    <span class="hljs-keyword">for</span> (Node&lt;E&gt; t = tail, p = t;;) &#123;<br>        <span class="hljs-comment">// q 为尾节点的下一个节点</span><br>        Node&lt;E&gt; q = p.next;<br>        <span class="hljs-keyword">if</span> (q == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 为空，说明后面没有节点，则 CAS 设置尾节点</span><br>            <span class="hljs-keyword">if</span> (p.casNext(<span class="hljs-keyword">null</span>, newNode)) &#123;<br>                <span class="hljs-comment">// 此时 p.next 是 newNode</span><br>                <span class="hljs-comment">// 如果 p ！= t 说明有并发</span><br>                <span class="hljs-keyword">if</span> (p != t) <br>                    <span class="hljs-comment">// 其他线程已经更新了 tail</span><br>                    <span class="hljs-comment">// q = p.next 所以 q == null 不正确了</span><br>                    <span class="hljs-comment">// q 取到了 t.next</span><br>                    <span class="hljs-comment">// 此时将 tail 更新为 新节点</span><br>                    casTail(t, newNode);  <span class="hljs-comment">// Failure is OK.</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-comment">// Lost CAS race to another thread; re-read next</span><br>        &#125;<br>        <span class="hljs-comment">// 多线程情况下， poll ，操作移除元素，可能会导致 p == q </span><br>        <span class="hljs-comment">// 此时要重新查找</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p == q)<br>            <span class="hljs-comment">// </span><br>            p = (t != (t = tail)) ? t : head;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">// 检查 tail 并更新</span><br>            p = (p != t &amp;&amp; t != (t = tail)) ? t : q;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>画图说明：</p><ul><li>单线程情况下：</li></ul><ol><li>当执行到 <code>Node&lt;E&gt; q = p.next;</code> 时，当前情况如图所示：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/QJ5fjB-QtmN7F.png" alt="QJ5fjB-QtmN7F"></p><ol start="2"><li>判断 <code>q == null</code>，满足条件，此时便会执行 <code>p.casNext(null, newNode)</code> 使用 CAS 设置 p.next。</li><li>设置成功之后，<code>p == t</code> 没有变动，所以程序退出。</li></ol><ul><li>多线程情况下：</li></ul><ol><li>当执行到 <code>Node&lt;E&gt; q = p.next;</code> 时，当前情况如图所示：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/QJ5fjB-QtmN7F.png" alt="QJ5fjB-QtmN7F"></p><ol start="2"><li>多个线程执行 <code>p.casNext(null, newNode)</code> 使用 CAS 设置 p.next。</li><li>A 线程 CAS 设置成功：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/u4O6mX-yQeaI6.png" alt="u4O6mX-yQeaI6"></p><ol start="4"><li>B 线程 CAS 执行失败， 重新循环，会执行到 <code>p = (p != t &amp;&amp; t != (t = tail)) ? t : q</code>。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/vkP5tp-jaUZOc.png" alt="vkP5tp-jaUZOc"></p><ol start="5"><li>再次循环就可以成功设置上了。</li></ol><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">poll</span><span class="hljs-params">()</span> </span>&#123;<br>    restartFromHead:<br>    <span class="hljs-comment">// 无限循环</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; h = head, p = h, q;;) &#123;<br>            <span class="hljs-comment">// 头结点的 iterm</span><br>            E item = p.item;<br>            <span class="hljs-comment">// 当前节点如果不为 null CAS 设置为 null</span><br>            <span class="hljs-keyword">if</span> (item != <span class="hljs-keyword">null</span> &amp;&amp; p.casItem(item, <span class="hljs-keyword">null</span>)) &#123;<br>                <span class="hljs-comment">// CAS 成功 则标记移除</span><br>                <span class="hljs-keyword">if</span> (p != h) <span class="hljs-comment">// hop two nodes at a time</span><br>                    updateHead(h, ((q = p.next) != <span class="hljs-keyword">null</span>) ? q : p);<br>                <span class="hljs-keyword">return</span> item;<br>            &#125;<br>            <span class="hljs-comment">// 当前队列未空 返回 null</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((q = p.next) == <span class="hljs-keyword">null</span>) &#123;<br>                updateHead(h, p);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            <span class="hljs-comment">// 自引用了， 重新进行循环</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p == q)<br>                <span class="hljs-keyword">continue</span> restartFromHead;<br>            <span class="hljs-keyword">else</span><br>                p = q;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>画图过程如下：</p><ol><li>在执行内层循环时，如果队列为空：<code>E item = p.item;</code> 此时，iterm 为 null，会 <code>updateHead(h, p)</code> 并返回 null。</li><li>假设同时有并发插入操作，添加了一个元素，此时如图所示：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/zGeE4p-Udb3x0.png" alt="zGeE4p-Udb3x0"></p><p>这时会执行最后的 else 将 <code>p = q</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/KkcsgS-8RvW4W.png" alt="KkcsgS-8RvW4W"></p><ol start="3"><li>继续循环获取 item，并执行 <code>p.casItem(item, null)</code> ， 然后判断 <code>p != h</code>，更新 head 并返回 item。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/mBNd6o-RS2hU0.png" alt="mBNd6o-RS2hU0"></p><p>这里的情况比较复杂，这里只是列举一种，如果需要可以自己多列举几种。</p><p>而查看元素的代码和获取元素代码类似就不多介绍了。</p><h4 id="size-操作"><a href="#size-操作" class="headerlink" title="size 操作"></a>size 操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Node&lt;E&gt; p = first(); p != <span class="hljs-keyword">null</span>; p = succ(p))<br>        <span class="hljs-keyword">if</span> (p.item != <span class="hljs-keyword">null</span>)<br>            <span class="hljs-comment">// Collection.size() spec says to max out</span><br>            <span class="hljs-keyword">if</span> (++count == Integer.MAX_VALUE)<br>                <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>CAS 没有加锁，所以 size 是不准确的。并且 size 会遍历一遍列表，比较耗费性能。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ConcurrentLinkedQueue 在工作中使用的相对较少，所以阅读相关源码的时候也只是大概看了一下，了解常用 API，以及底层原理。</p><p>简单总结就是使用<strong>单向链表</strong>来保存队列元素，内部使用非阻塞的 CAS 算法，没有加锁。所以计算 size 时可能不准确，同样 size 会遍历链表，所以并不建议使用。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工作笔记】- APP 莫名崩溃，开始以为是 Header 中 name 大小写的锅，最后发现原来是容器的错！</title>
      <link href="2020/10/19/header-name-case.html"/>
      <url>2020/10/19/header-name-case.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>部署测试，部署预发布，一切测试就绪，上生产。</p><p>发布生产</p><p>闪退</p><p>What？？？</p><p>马上回滚</p><p>开始排查</p><p>后端一模一样的代码，不是 APP 端的问题吧。可 APP 端没有发版啊。</p><p>…… 一番排查</p><p>原来是 APP 端打包，测试和预发布包 Header 传的都是 <code>Authorization</code> ，生产传的是 <code>authorization</code> 。就是大小写问题，那赶紧改。</p></blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>首页接口只有登录才可以进入，因为首页要展示获取用户账户的一些信息。这里使用的是统一拦截，从 Header 中获取 token 后，使用 token 获取用户信息。</p><p>而现在要改为用户未登录也可以查看首页信息中的宣传文案等等，只不过账户信息不显示。</p><h4 id="原流程"><a href="#原流程" class="headerlink" title="原流程"></a>原流程</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/FiwOie-8ZLjgv.png" alt="FiwOie-8ZLjgv"></p><p>整个过程代码在 <a href="https://mp.weixin.qq.com/s/8qY94y3w0Q2RRhkG7iUfOg">ThreadLocal底层原理</a> 里面有所介绍。这里省略一部分代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        LocalUserUtils.remove();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 请求方法是否存在注解</span><br>        <span class="hljs-keyword">boolean</span> assignableFrom = handler.getClass().isAssignableFrom(HandlerMethod.class);<br><br>        <span class="hljs-keyword">if</span> (!assignableFrom) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        CheckToken checkToken = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod) &#123;<br>            checkToken = ((HandlerMethod) handler).getMethodAnnotation(CheckToken.class);<br>        &#125;<br><br>        <span class="hljs-comment">// 没有加注解 直接放过</span><br>        <span class="hljs-keyword">if</span> (checkToken == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 从Header中获取Authorization</span><br>        String authorization = request.getHeader(<span class="hljs-string">&quot;Authorization&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;header authorization : &#123;&#125;&quot;</span>, authorization);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(authorization)) &#123;<br>            log.error(<span class="hljs-string">&quot;从Header中获取Authorization失败&quot;</span>);<br>            <span class="hljs-keyword">throw</span> CustomExceptionEnum.NOT_HAVE_TOKEN.throwCustomException();<br>        &#125;<br><br>        <span class="hljs-comment">// 其他代码省略</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从代码中可以看出这里大概过程如下：</p><ol><li>是使用拦截器拦截请求</li><li>如果方法没有 CheckToken 注解直接放过</li><li>有 CheckToken 注解，则从 request 的 header 中获取 Authorization</li></ol><h4 id="新需求"><a href="#新需求" class="headerlink" title="新需求"></a>新需求</h4><p>这里想到只需要把注解去掉，然后从请求参数中获取 token 即可。获取到走原逻辑，获取不到则只返回宣传文案等信息。</p><h3 id="从-Header-中获取信息"><a href="#从-Header-中获取信息" class="headerlink" title="从 Header 中获取信息"></a>从 Header 中获取信息</h3><h4 id="直接获取请求头某一个-headerName"><a href="#直接获取请求头某一个-headerName" class="headerlink" title="直接获取请求头某一个 headerName"></a>直接获取请求头某一个 headerName</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/getAuthorizationByKey&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthorizationByKey</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(&quot;Authorization&quot;)</span> String authorization)</span> </span>&#123;<br><br>    log.info(<span class="hljs-string">&quot;获取 Authorization ---&gt;&#123;&#125;&quot;</span>, authorization);<br><br>    <span class="hljs-keyword">return</span> authorization;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用-Map-获取所有请求头"><a href="#使用-Map-获取所有请求头" class="headerlink" title="使用 Map 获取所有请求头"></a>使用 Map 获取所有请求头</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/getAuthorizationByMap&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthorizationByMap</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader</span> Map&lt;String, String&gt; map)</span> </span>&#123;<br><br>    String authorization = map.get(<span class="hljs-string">&quot;Authorization&quot;</span>);<br><br>    log.info(<span class="hljs-string">&quot;获取 Authorization ---&gt;&#123;&#125;&quot;</span>, authorization);<br><br>    <span class="hljs-keyword">return</span> authorization;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用-MultiValueMap-获取请求头"><a href="#使用-MultiValueMap-获取请求头" class="headerlink" title="使用 MultiValueMap 获取请求头"></a>使用 MultiValueMap 获取请求头</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/getAuthorizationByMultiValueMap&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthorizationByMultiValueMap</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader</span> MultiValueMap&lt;String, String&gt; map)</span> </span>&#123;<br><br>    List&lt;String&gt; authorization = map.get(<span class="hljs-string">&quot;Authorization&quot;</span>);<br><br>    log.info(<span class="hljs-string">&quot;获取 Authorization ---&gt;&#123;&#125;&quot;</span>, authorization);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SUCCESS&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用-HttpHeaders-获取请求头"><a href="#使用-HttpHeaders-获取请求头" class="headerlink" title="使用 HttpHeaders 获取请求头"></a>使用 HttpHeaders 获取请求头</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/getAuthorizationByHeaders&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthorizationByHeaders</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader</span> HttpHeaders headers)</span> </span>&#123;<br><br>    List&lt;String&gt; authorization = headers.get(<span class="hljs-string">&quot;Authorization&quot;</span>);<br><br>    log.info(<span class="hljs-string">&quot;获取 Authorization ---&gt;&#123;&#125;&quot;</span>, authorization);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SUCCESS&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用-HttpServletRequest-获取"><a href="#使用-HttpServletRequest-获取" class="headerlink" title="使用 HttpServletRequest 获取"></a>使用 HttpServletRequest 获取</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/getAuthorizationByServlet&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthorizationByServlet</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br><br>    String authorization = request.getHeader(<span class="hljs-string">&quot;Authorization&quot;</span>);<br><br>    log.info(<span class="hljs-string">&quot;获取 Authorization ---&gt;&#123;&#125;&quot;</span>, authorization);<br><br>    <span class="hljs-keyword">return</span> authorization;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/dqAEES-LSudFy.png" alt="dqAEES-LSudFy"></p><p>经过测试这些都是可以的，最终选择使用 Map 接收 Header ，然后从 Map 中获取 Authorization。</p><blockquote><p>PS: 可能有小伙伴测试不过，发现接受的 header 里的 name 全都是小写了，可以继续阅读。<br>源码在文末，也可以关注公众号，发送 headerName/4 获取。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/rXC2fS-cVftVR.jpg" alt="rXC2fS-cVftVR"></p><p>你以为事情如果到这里就结束了，那真是太天真了。</p><p>这不，出现了文章开头的描述的场景，赶紧回滚，然后排查问题，最后定位到是 Header 的 name 大小写问题。</p><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><ol><li>之前 APP 端也是这么传的，那为什么使用拦截器是正常的呢？</li><li>上面的那几种方式是不是都是这样？</li><li>不排除 tomcat 发现原来都会转换为小写，又是为什么？</li></ol><h3 id="模拟排查"><a href="#模拟排查" class="headerlink" title="模拟排查"></a>模拟排查</h3><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>模拟生产首先使用相同的容器配置，这里排除了内置的 tomcat 容器，并且使用 undertow 容器。</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Exclude the Tomcat dependency --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用拦截器传小写为什么没有问题"><a href="#使用拦截器传小写为什么没有问题" class="headerlink" title="使用拦截器传小写为什么没有问题"></a>使用拦截器传小写为什么没有问题</h4><ul><li>修改使用小写 <code>authorization</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/BnwZnf-7AvYYg.png" alt="BnwZnf-7AvYYg"></p><ul><li>debug 断点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/OOjOyV-54K6Na.png" alt="OOjOyV-54K6Na"></p><p>神奇的一幕出现了，收到的确实是小写，但是 <strong>request.getHeader(“Authorization”);</strong> 却可以获取到 <code>authorization</code></p><ul><li>F7 继续往里跟</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/JwgnFS-cW3pJY.png" alt="JwgnFS-cW3pJY"></p><p><code>io.undertow.servlet.spec.HttpServletRequestImpl#getHeader</code> 第 190 行，从 HeaderMap 中获取第一个元素</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/DnRSum-crs0Mb.png" alt="DnRSum-crs0Mb"></p><p><code>io.undertow.util.HeaderMap#getFirst</code> 第 297 行， 通过 getEntry 方法获取 header</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/C8lSGw-XxKDPW.png" alt="C8lSGw-XxKDPW"></p><p>继续追踪，发现在 <code>io.undertow.util.HeaderMap#getEntry(java.lang.String)</code> 方法 77~79 行的时候获取到了 header 信息。那就看一下这块的源码吧。</p><p>在仔细看一下发现是 77 行 <code>final int hc = HttpString.hashCodeOf(headerName);</code> 在获取 name 的 hashCode 时，这里无论大小写，都是同一个 hashCode。这块代码如下</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/3v1FVJ-MuPXUA.png" alt="3v1FVJ-MuPXUA"></p><p>higher 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">higher</span><span class="hljs-params">(<span class="hljs-keyword">byte</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> b &amp; (b &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; b &lt;= <span class="hljs-string">&#x27;z&#x27;</span> ? <span class="hljs-number">0xDF</span> : <span class="hljs-number">0xFF</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这块的含义</p><ol><li>如果 b 是小写字符则 <code>b &amp; 0xDF</code></li><li>如果 b 是大写字符则 <code>b &amp; 0xFF</code></li></ol><p>对照 ASCII 表，大小写字母相差 32 而 0xFF(255) 和 0xDF(223) 同样相差 32，所以问题定位到了。header 的 name 无论是大写还是小写，都会查出同一个值。</p><p>当然你也可以这么传</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/VOOF8k-LoGjAf.png" alt="VOOF8k-LoGjAf"></p><p>这样的话谁在上面，Header 中使用的 name 就是那个。</p><h4 id="使用-Map-为什么会区分大小写"><a href="#使用-Map-为什么会区分大小写" class="headerlink" title="使用 Map 为什么会区分大小写"></a>使用 Map 为什么会区分大小写</h4><p>传入的是大写</p><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">HttpServlet <br>-&gt; DispatcherServlet#doDispatch <br>-&gt; AbstractHandlerMethodAdapter#handle <br>-&gt; RequestMappingHandlerAdapter#handleInternal <br>-&gt; RequestMappingHandlerAdapter#invokeHandlerMethod <br>-&gt; ServletInvocableHandlerMethod#invokeAndHandle<br>-&gt; InvocableHandlerMethod#invokeForRequest (解析参数值)<br>-&gt; InvocableHandlerMethod#getMethodArgumentValues<br>-&gt; RequestHeaderMapMethodArgumentResolver#resolveArgument<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/dqAEES-LSudFy.png" alt="dqAEES-LSudFy"></p><p>如图所示 <code>String headerName = iterator.next();</code> name 被区分大小写放到了 LinkedHashMap 中，后续会反射调用对应的 Controller 方法。</p><p>所以也就出现了我所遇到的问题。 </p><p>当然理论上 APP 客户端不应该测试和预发布使用大写，而生产使用小写。</p><p>上面阅读的源码只是 Spring 对 Header 的处理，Spring 在 <code>HttpServlet</code> 收到请求时，Spring 没有对请求 Header 的 name 大小写进行转换，只是在获取对应 value 的时候，没有区分大小写进行获取。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/mpl3PK-m7dKAb.jpg"></p><h3 id="容器对-header-的处理"><a href="#容器对-header-的处理" class="headerlink" title="容器对 header 的处理"></a>容器对 header 的处理</h3><h5 id="undertow-容器的处理"><a href="#undertow-容器的处理" class="headerlink" title="undertow 容器的处理"></a>undertow 容器的处理</h5><ul><li>请求参数的处理</li></ul><p>这里发现 undertow 并没有对请求参数进行大小写转换处理操作。</p><ul><li>从 HttpServletRequest 获取 header</li></ul><p>debug 发现调用的是 <code>io.undertow.servlet.spec.HttpServletRequestImpl#getHeader</code>，这个过程就是上面的排查过程。</p><ul><li>从 Headers 中获取 header</li></ul><p>通过 debug 发现 jetty 调用的是 <code>org.springframework.http.HttpHeaders#get</code>，然后调用 <code>org.springframework.util.MultiValueMapAdapter#get</code>，然后调用 <code>org.springframework.util.LinkedCaseInsensitiveMap#get</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/nRw6xN-GkUqAN.png" alt="nRw6xN-GkUqAN"></p><p>这里会不区分大小写</p><ul><li>从 MultiValueMap 获取 header</li></ul><p>这块 debug 发现是直接从 <code>LinkedHashMap</code> 获取的，所以区分了大小写。</p><h4 id="tomcat-容器的处理"><a href="#tomcat-容器的处理" class="headerlink" title="tomcat 容器的处理"></a>tomcat 容器的处理</h4><ul><li>请求参数的处理</li></ul><p>而如果没有排除的话，即使用内嵌的 tomcat 容器无论传递大写还是小写，接收到的全部都是小写，又是怎么个情况呢？</p><p>通过 debug 发现没有排除 tomcat 使用的是，在接收请求时使用的是 <code>org.apache.coyote.http11.Http11Processor</code>。</p><p>在 <code>Http11Processor#service</code> 方法中</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/303mmp-6TczCR.png" alt="303mmp-6TczCR"></p><p>类 284 行负责处理解析 header </p><p>进入 <code>org.apache.coyote.http11.Http11InputBuffer#parseHeaders</code> 方法</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/cqHTEZ-1E9mH7.png" alt="cqHTEZ-1E9mH7"></p><p>第 589 行 （Download Sources 后），阅读 <code>parseHeader</code> 方法</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/oEEbej-rMulR7.png" alt="oEEbej-rMulR7"></p><p>发现会将请求 header 的 name 转换为小写</p><ul><li>从 HttpServletRequest 获取 header</li></ul><p>当使用 tomcat 容器时，调用 <code>org.apache.catalina.connector.RequestFacade#getHeader</code>， <code>org.apache.catalina.connector.Request#getHeader</code>， <code>org.apache.coyote.Request#getHeader</code> <code>org.apache.tomcat.util.http.MimeHeaders#getHeader</code> 最后调用 <code>org.apache.tomcat.util.http.MimeHeaders#getValue</code> 获取 header </p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/qDJXXn-z6hTjZ.png" alt="qDJXXn-z6hTjZ"></p><p>这里也会忽略大小写判断</p><ul><li>从 Headers 获取 header</li></ul><p>通过 debug 发现 tomcat 容器下调用的是 <code>org.springframework.http.HttpHeaders#get</code>，然后调用 <code>org.springframework.util.MultiValueMapAdapter#get</code>，然后调用 <code>org.springframework.util.LinkedCaseInsensitiveMap#get</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/nRw6xN-GkUqAN.png" alt="nRw6xN-GkUqAN"></p><p>这里会不区分大小写</p><ul><li>从 MultiValueMap 获取 header</li></ul><p>这块 debug 发现是直接从 <code>LinkedHashMap</code> 获取的，所以区分了大小写。</p><h4 id="jetty-容器的处理"><a href="#jetty-容器的处理" class="headerlink" title="jetty 容器的处理"></a>jetty 容器的处理</h4><ul><li>请求参数的处理</li></ul><p>如果换成 jetty 容器的话</p><p>在 <code>org.eclipse.jetty.server.HttpConnection</code> 中又会发现无论传入大写还是小写都会被转换为驼峰。</p><p>源码可以阅读 <code>org.eclipse.jetty.http.HttpParser#parseFields</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Q9KjmT-HSRusz.png" alt="Q9KjmT-HSRusz"></p><p>会转换为驼峰命名法。</p><ul><li>从 HttpServletRequest 获取 header</li></ul><p>通过 debug 发现 jetty 调用的是 <code>org.eclipse.jetty.server.Request#getHeader</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/H9onCc-uyaMMn.png" alt="H9onCc-uyaMMn"></p><p>jetty 在获取 header 时，会调用 <code>org.eclipse.jetty.http.HttpFields#get</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/BOkxFw-op6ZIV.png" alt="BOkxFw-op6ZIV"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ioe7pS-uNuRU6.png" alt="ioe7pS-uNuRU6"></p><p>原来在获取的时候忽略了大小写</p><ul><li>从 Headers 获取 header</li></ul><p>通过 debug 发现 jetty 容器下调用的是 <code>org.springframework.http.HttpHeaders#get</code>，然后调用 <code>org.springframework.util.MultiValueMapAdapter#get</code>，然后调用 <code>org.springframework.util.LinkedCaseInsensitiveMap#get</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/nRw6xN-GkUqAN.png" alt="nRw6xN-GkUqAN"></p><p>这里会不区分大小写</p><ul><li>从 MultiValueMap 获取</li></ul><p>也是调用的 <code>org.springframework.util.MultiValueMapAdapter#get</code> 然后不区分大小写。和从 Headers 中获取相同。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><p><strong>Q: 为什么拦截器获取 Authorization 可以不区分大小写？</strong></p><p><strong>A:</strong> 从拦截器获取 Authorization 其实就是从 <code>HttpServletRequest</code> 中获取，这里无论使用 tomcat 还是使用 undertow 或者 jetty 获取 Header 是都是忽略 headerName 的大小写的。具体可以阅读上面的源码分析。</p><p><strong>Q: 这么多获取 Header 的方式有什么区别？</strong><br><strong>A:</strong></p><p>不同的容器下实现方式不同，这里列表说明</p><table><thead><tr><th align="center"></th><th align="center">undertow</th><th align="center">tomcat</th><th align="center">jetty</th></tr></thead><tbody><tr><td align="center">请求参数大小写转换</td><td align="center">不变</td><td align="center">小写</td><td align="center">驼峰</td></tr><tr><td align="center">直接获取请求头某一个 headerName</td><td align="center">忽略大小写，不能为空</td><td align="center">忽略大小写，不能为空</td><td align="center">忽略大小写，不能为空</td></tr><tr><td align="center">使用 Map 获取所有请求头</td><td align="center">Map 的 key 和传入 headerName 大小写的一致，保持一致可获取到</td><td align="center">Map 的 key 全是小写，需要使用小写headerName 获取</td><td align="center">Map 的 key 是驼峰命名法，要使用驼峰命名才可以获取到</td></tr><tr><td align="center">使用 MultiValueMap 获取请求头</td><td align="center">实际是从 LinkedHashMap 中获取，区分大小写</td><td align="center">实际是从 LinkedHashMap 中获取，区分大小写</td><td align="center">从 LinkedCaseInsensitiveMap 获取，不区分大小写</td></tr><tr><td align="center">使用 HttpHeaders 获取请求头</td><td align="center">从 LinkedCaseInsensitiveMap 获取，不区分大小写</td><td align="center">从 LinkedCaseInsensitiveMap 获取，不区分大小写</td><td align="center">从 LinkedCaseInsensitiveMap 获取，不区分大小写</td></tr><tr><td align="center">使用 HttpServletRequest 获取</td><td align="center">使用 HttpString.hashCodeOf(headerName) 忽略了大小写</td><td align="center">调用 MimeHeaders#getValue 忽略了大小写</td><td align="center">HttpFields#get 忽略了大小写</td></tr></tbody></table><p>通过表格发现，即使是不同的容器在使用 HttpHeaders 获取请求头是都是调用了 Spring 的 <code>LinkedCaseInsensitiveMap</code> 获取 header，并且内部忽略了大小写，这里比较推荐使用。</p><p>同样使用 HttpServletRequest 的方式获取也比较推荐。</p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>本文主要是分析生产遇到的一个问题，然后开始探究原因，开始的时候发现是 Spring 的原因，因为使用 Map 接收时， headerName 什么格式就是什么格式。</p><p>在自己写 demo 时又发现，原来和 Spring 的关系并不大，是容器的原因。不同的容器处理方式不同。所以总结出来相关文章，供大家参考，不足之处，欢迎指正。</p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ol><li>本文源码地址：<a href="https://github.com/liuzhihang/header-demo">https://github.com/liuzhihang/header-demo</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工作笔记】- 几行代码轻松实现跨系统传递 traceId，再也不用担心对不上日志了！</title>
      <link href="2020/10/18/log-trace-id.html"/>
      <url>2020/10/18/log-trace-id.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>新项目查日志太麻烦，多台机器之间查来查去，还不知道是不是同一个请求的。打印日志时使用 MDC 在日志上添加一个 traceId，那这个 traceId 如何跨系统传递呢？</p></blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>同样是新项目开发的笔记，因为使用的是分布式架构，涉及到各个系统之间的交互</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/hHJYwn-b0KzBU.png" alt="hHJYwn-b0KzBU"></p><p>这时候就会遇到一个很常见的问题：</p><ol><li>单个系统是集群部署，日志分布在多台服务器上；</li><li>多个系统的日志在多台机器，但是一次请求，查日志更是难上加难。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/53_b91a8fc194febf0f3d3edf032e6cf78d-dSqBDj.jpg" alt="53_b91a8fc194febf0f3d3edf032e6cf78d-dSqBDj"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li>使用 SkyWalking traceid 进行链路追踪；</li><li>使用 Elastic APM 的 trace.id 进行链路追踪；</li><li>自己生成 traceId 并 put 到 MDC 里面。</li></ol><h3 id="MDC"><a href="#MDC" class="headerlink" title="MDC"></a>MDC</h3><p>MDC（Mapped Diagnostic Context）是一个映射，用于存储运行上下文的特定线程的上下文数据。因此，如果使用log4j进行日志记录，则每个线程都可以拥有自己的MDC，该MDC对整个线程是全局的。属于该线程的任何代码都可以轻松访问线程的MDC中存在的值。</p><h4 id="如何使用-MDC"><a href="#如何使用-MDC" class="headerlink" title="如何使用 MDC"></a>如何使用 MDC</h4><ol><li>在 <strong>log4j2-spring.xml</strong> 的日志格式中添加 <code>%X&#123;traceId&#125;</code> 配置。</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_PATTERN&quot;</span>&gt;</span><br>    [%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;]-[%t]-[%X&#123;traceId&#125;]-[%-5level]-[%c&#123;36&#125;:%L]-[%m]%n<br><span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_PATTERN_ERROR&quot;</span>&gt;</span><br>    [%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;]-[%t]-[%X&#123;traceId&#125;]-[%-5level]-[%l:%M]-[%m]%n<br><span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 省略 --&gt;</span><br><br><span class="hljs-comment">&lt;!--这个输出控制台的配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span> <span class="hljs-attr">follow</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--输出日志的格式--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>  <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Console</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>新增拦截器</li></ol><p>拦截所有请求，从 header 中获取 traceId 然后放到 MDC 中，如果没有获取到，则直接用 UUID 生成一个。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TRACE_ID = <span class="hljs-string">&quot;traceId&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception arg3)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView arg3)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        String traceId = request.getHeader(TRACE_ID);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(traceId)) &#123;<br>            MDC.put(TRACE_ID, UUID.randomUUID().toString());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            MDC.put(TRACE_ID, traceId);<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>配置拦截器</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> LogInterceptor logInterceptor;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        registry.addInterceptor(logInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="跨服务之间如何传递-traceId"><a href="#跨服务之间如何传递-traceId" class="headerlink" title="跨服务之间如何传递 traceId"></a>跨服务之间如何传递 traceId</h4><ul><li>FeignClient</li></ul><p>因为这边使用的是 FeignClient 进行服务之间的调用，只需要新增请求拦截器即可</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeignInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RequestInterceptor</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TRACE_ID = <span class="hljs-string">&quot;traceId&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(RequestTemplate requestTemplate)</span> </span>&#123;<br><br>        requestTemplate.header(TRACE_ID, MDC.get(TRACE_ID));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Dubbo</li></ul><p>如果是 Dubbo 可以通过扩展 Filter 的方式传递 traceId</p><ol><li>编写 filter</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Activate(group = &#123;&quot;provider&quot;, &quot;consumer&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TraceIdFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">invoke</span><span class="hljs-params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="hljs-keyword">throws</span> RpcException </span>&#123;<br><br><br>        RpcContext rpcContext = RpcContext.getContext();<br><br><br>        String traceId;<br><br>        <span class="hljs-keyword">if</span> (rpcContext.isConsumerSide()) &#123;<br><br>            traceId = MDC.get(<span class="hljs-string">&quot;traceId&quot;</span>);<br><br>            <span class="hljs-keyword">if</span> (traceId == <span class="hljs-keyword">null</span>) &#123;<br>                traceId = UUID.randomUUID().toString();<br>            &#125;<br><br>            rpcContext.setAttachment(<span class="hljs-string">&quot;traceId&quot;</span>, traceId);<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (rpcContext.isProviderSide()) &#123;<br>            traceId = rpcContext.getAttachment(<span class="hljs-string">&quot;traceId&quot;</span>);<br>            MDC.put(<span class="hljs-string">&quot;traceId&quot;</span>, traceId);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> invoker.invoke(invocation);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>指定 filter</li></ol><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">src<br> |-main<br>    |-java<br>        |-com<br>            |-xxx<br>                |-XxxFilter.java (实现Filter接口)<br>    |-resources<br>        |-META-INF<br>            |-dubbo<br>                |-org.apache.dubbo.rpc.Filter (纯文本文件，内容为：xxx=com.xxx.XxxFilter)<br></code></pre></td></tr></table></figure><p>截图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/STZ8hr-q8AmQ6.png" alt="STZ8hr-q8AmQ6"></p><p>测试结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/FKroew-oE1qSz.png" alt="FKroew-oE1qSz"></p><blockquote><p>dubbo filter 相关源码地址在文末<br>也可以关注公众号，发送 traceid 获取</p></blockquote><h4 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h4><p>当然如果小伙伴们有使用 SkyWalking 或者 Elastic APM 也可以通过以下方式进行注入：</p><ol><li>SkyWalking</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.skywalking<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>apm-toolkit-log4j-2.x<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>&#123;project.release.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span></span><br></code></pre></td></tr></table></figure><p>然后将 <code>[%traceId]</code> 配置在 log4j2.xml 文件的 pattern 中即可</p><ol start="2"><li><p>Elastic APM</p><ol><li>在启动时指定 enable_log_correlation 为 true</li><li>将 <code>%X&#123;trace.id&#125;</code> 配置在 log4j2.xml 文件的 pattern 中</li></ol></li></ol><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="统一日志采集"><a href="#统一日志采集" class="headerlink" title="统一日志采集"></a>统一日志采集</h4><p>虽然有了 traceId 可以进行全链路追踪查询日志，但是毕竟也是在多台服务器上，为了提高查询效率，可以考虑将日志汇总到一起。</p><p>常用的使用方法就是基于 ELK 的日志系统：</p><ol><li>使用 filebeat 采集日志报送到 logstash</li><li>logstash 进行分词过滤等处理，输出到 Elasticsearch</li><li>使用 Kinbana 或者自己开发的可视化工具从 Elasticsearch 查询日志</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/aBn5LF-utuTLx.png" alt="aBn5LF-utuTLx"></p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>本文主要记录近期开发过程中的遇到的一点问题，希望对小伙伴也有所帮助。不足之处，欢迎指正。如果小伙伴有其他的建议或者观点欢迎留言讨论，共同进步。</p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ol><li>Log4j 2 API：<a href="https://logging.apache.org/log4j/2.x/manual/thread-context.html">https://logging.apache.org/log4j/2.x/manual/thread-context.html</a></li><li>SkyWalking：<a href="https://github.com/apache/skywalking/tree/master/docs/en/setup/service-agent/java-agent">https://github.com/apache/skywalking/tree/master/docs/en/setup/service-agent/java-agent</a></li><li>Elastic APM：<a href="https://www.elastic.co/guide/en/apm/agent/java/current/log-correlation.html">https://www.elastic.co/guide/en/apm/agent/java/current/log-correlation.html</a></li><li>Dubbo filter：<a href="http://dubbo.apache.org/zh-cn/docs/dev/impls/filter.html">http://dubbo.apache.org/zh-cn/docs/dev/impls/filter.html</a></li><li>本文 Dubbo filter demo：<a href="https://github.com/liuzhihang/trace">https://github.com/liuzhihang/trace</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
          <category> 链路追踪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
            <tag> 链路追踪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工作笔记】- 老大问我：“建表为啥还设置个自增 id ？用流水号当主键不正好么？”</title>
      <link href="2020/10/11/work-trans-why-table-id.html"/>
      <url>2020/10/11/work-trans-why-table-id.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>又要开始新项目了，一顿操作猛如虎，梳理流程加画图。这不，开始对流程及表结构了。<br><br><br>我：吧啦吧啦吧啦 ……<br>老大：这个建表为啥还设置个自增 id ？直接用流水号（用户号/产品号）当主键不就行了？<br>我：这个是 DBA 规定的，创建表 id、create_time、update_time 这三个字段都要有。《Java 开发规范》也是这么规定的。<br>小伙伴：（附和）是的，规定的是这样的！<br>老大：流水号在你这是唯一索引吧？设置成主键，这样就不用 id 了，还减少一次回表查询？<br>我：…… （说的好像很有道理，咱也不敢说话。）<br>老大：既然他们规定了，那你回去查一下为什么要设计个自增 id ？<br>我：掏出小本本（回去查资料~）。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/why-id-8ZFv04.jpg" alt="why-id-8ZFv04"></p><h3 id="建表规约"><a href="#建表规约" class="headerlink" title="建表规约"></a>建表规约</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/create-db-id-Gv58zQ.png" alt="Java 开发手册-嵩山版"></p><p>在工作中，创建表的时候，DBA 也会审核一下建表 SQL，检查是否符合规范以及常用字段是否设置索引。</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`xxxx`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;自增主键&#x27;</span>,<br>  <span class="hljs-string">`create_time`</span> datetime(<span class="hljs-number">3</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">current_timestamp</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  <span class="hljs-string">`update_time`</span> datetime(<span class="hljs-number">3</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">current_timestamp</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">current_timestamp</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>) <span class="hljs-keyword">USING</span> BTREE,<br>  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`idx_create_time`</span> (<span class="hljs-string">`create_time`</span>) <span class="hljs-keyword">USING</span> BTREE,<br>  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`idx_update_time`</span> (<span class="hljs-string">`update_time`</span>) <span class="hljs-keyword">USING</span> BTREE<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COMMENT</span>=<span class="hljs-string">&#x27;表注释&#x27;</span>;<br></code></pre></td></tr></table></figure><p>所以在我使用的过程中，流水号都是单独设置了一个字段，比如叫 trans_no，但是这次就遇到了疑问：trans_no 既然是唯一的，那为什么不直接用 trans_no 当做 id 呢？</p><p>下面开始通过查阅相关资料，一步一步的了解是为什么？</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/why-id-2-pMeutc.jpg" alt="why-id-2-pMeutc"></p><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><h4 id="什么是主键"><a href="#什么是主键" class="headerlink" title="什么是主键"></a>什么是主键</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/MySQL-primary-key-z64UFB.png" alt="MySQL-primary-key-z64UFB"></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_primary_key">https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_primary_key</a></p><p>这段定义咱们主要关注最后一句：</p><blockquote><p>When choosing primary key values, consider using arbitrary values (a <strong>synthetic key</strong>) rather than relying on values derived from some other source (a <strong>natural key</strong>).</p></blockquote><p>意思是创建主键的时候尽量使用 MySQL 自增主键而不是使用业务生成的值当做主键。</p><h4 id="主键的特征"><a href="#主键的特征" class="headerlink" title="主键的特征"></a>主键的特征</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/MySQL-primary-key-1-QDuU4H.png" alt="MySQL-primary-key-1-QDuU4H"></p><p>简而言之：</p><p>非空、唯一、少更改或不更改 。</p><h4 id="如何添加主键"><a href="#如何添加主键" class="headerlink" title="如何添加主键"></a>如何添加主键</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/hfPeDL-r5M5YU.png" alt="hfPeDL-r5M5YU"></p><p>可以在 create 创建表的时候指定，也可以使用 alter 语句后面添加主键，不过官方建议在创建表时就指定。</p><h4 id="为什么要添加主键"><a href="#为什么要添加主键" class="headerlink" title="为什么要添加主键"></a>为什么要添加主键</h4><ol><li>主键可以唯一标识这一行数据，从而保证在删除更新操作时，只是操作这一行数据。</li><li>索引需要，每个 InnoDB 表又有一个特殊的索引，即聚簇索引，用来存储行数据。通常，聚簇索引和主键同义。<ol><li>声明主键，InnoDB 会将主键作为聚簇索引。</li><li>未声明时，会在 UNIQUE 所有键列所在位置找到第一个索引，NOT NULL 并将其作为聚簇索引</li><li>未声明且找不到合适的 UNIQUE 索引，则内部生成一个隐藏的聚簇索引 GEN_CLUST_INDEX，这个隐藏的行 ID 是 6 字节且单调增加。</li></ol></li></ol><p>图 -&gt; 那什么是索引</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>这里仅介绍 InnoDB 引擎，具体可以参考官方文档，并且介绍的相对比较简单。</p><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><ol><li>聚簇索引：表存储是根据主键列的值组织的，以加快涉及主键列的查询和排序。在介绍主键时也对聚簇索引进行了介绍。</li><li>二级索引：也可以叫辅助索引，在辅助索引中会记录对应的主键列以及辅助索引列。根据辅助索引进行搜索的时候，会先根据辅助索引获取到对应的主键列，然后再根据主键去聚簇索引里面搜索。<strong>一般不建议主键很长，因为主键很长辅助索引就会使用更多的空间。</strong></li></ol><blockquote><p><strong>补充：</strong></p><p>回表：先在二级索引查询到对应的主键值，然后根据主键再去聚簇索引里面取查询。<br>索引覆盖：二级索引记录了主键列和二级索引列，如果我只查询主键列的值和二级索引列的值，那就不需要回表了。</p></blockquote><h4 id="索引的物理结构"><a href="#索引的物理结构" class="headerlink" title="索引的物理结构"></a>索引的物理结构</h4><p>InnoDB 使用的 B+ 数数据结构，根据聚簇索引值（主键/UNQIUE/或者自己生成）构建一颗 B+ 树，叶子节点中存放行记录数据，所以每个叶子节点也可以叫数据页。每个数据页大小默认为 16k，支持自定义。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/B+Tree-UgFQjS.png" alt="B+Tree-UgFQjS"></p><h4 id="数据的插入"><a href="#数据的插入" class="headerlink" title="数据的插入"></a>数据的插入</h4><p>当数据插入时，InnoDB 会使页面 1/16 空闲，以备将来插入和更新索引记录。</p><ol><li>顺序插入（升序或降序）：会将索引页剩余的大约 15/16 装满</li><li>随机插入：只会使用容量的 1/2 到 15/16</li></ol><p>在随机插入中，会频繁的移动、分页，从而造成大量的碎片，并且使索引树不够紧凑。而使用顺序插入的方式，则数据比较紧凑，有更高的空间利用率。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><p><strong>Q: 什么是回表和索引覆盖？</strong></p><p><strong>A:</strong></p><ol><li>回表：先在二级索引查询到对应的主键值，然后根据主键再去聚簇索引里面取查询。</li><li>索引覆盖：二级索引记录了主键列和二级索引列，如果我只查询主键列的值和二级索引列的值，那就不需要回表了。</li></ol><p><strong>Q: 为什么要设置自增主键 id ？</strong></p><p><strong>A:</strong></p><ol><li>可以唯一标识一行数据，在 InnoDB 构建索引树的时候会使用主键。</li><li>自增 id 是顺序的，可以保证索引树上的数据比较紧凑，有更高的空间利用率以及减少数据页的分裂合并等操作，提高效率。</li><li>一般使用手机号、身份证号作为主键等并不能保证顺序性。</li><li>流水号一般相对较长，比如 28 位，32 位等，过长的话会二级索引占用空间较多。同时为了业务需求，流水号具有一定的随机性。</li></ol><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>本文主要通过查阅资料，了解为什么要设置一个和业务无关的自增 id 用来当做主键，很多内容比较浅显，比如 InnoDB 的 B+ 树，页分裂及页合并，插入过程等都没有进行深入研究，有兴趣的小伙伴可以更深入的研究下。</p><p>同时在建表时除了要设置一个自增 id 用来当做主键，小伙伴们在业务开发过程中是否也会遇到一种情况：用户的注销，数据的删除等都是进行的逻辑删除，而不是物理删除。</p><p>本篇文章介绍比较简陋，不足之处，希望大家多多指正。</p>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 基于链表的有界阻塞队列 —— LinkedBlockingQueue</title>
      <link href="2020/10/04/source-code-linkedblockingqueue.html"/>
      <url>2020/10/04/source-code-linkedblockingqueue.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>上一节看了基于数据的有界阻塞队列 ArrayBlockingQueue 的源码，通过阅读源码了解到在 ArrayBlockingQueue 中入队列和出队列操作都是用了 ReentrantLock 来保证线程安全。下面咱们看另一种有界阻塞队列：LinkedBlockingQueue。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一个基于链接节点的，可选绑定的 BlockingQueue 阻塞队列。</p><p>对元素 FIFO（先进先出）进行排序。队列的头部是已在队列中停留最长时间的元素。队列的尾部是最短时间出现在队列中的元素。将新元素插入队列的尾部，并检索队列操作获取队列开头的元素。</p><p>基于连表的队列通常具有比基于数组的队列有更高的吞吐量，但是大多数并发应用程序中的可预测性较差。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedBlockingQueueTest</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> LinkedBlockingQueue&lt;String&gt; QUEUE = <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        <span class="hljs-comment">// 入队列</span><br>        QUEUE.put(<span class="hljs-string">&quot;put 入队列, 队列满则会阻塞等待&quot;</span>);<br><br>        QUEUE.add(<span class="hljs-string">&quot;add 入队列, 队列满则会抛出异常&quot;</span>);<br><br>        QUEUE.offer(<span class="hljs-string">&quot;offer 入队列, 队列满会返回 false&quot;</span>);<br><br>        <span class="hljs-comment">// 出队列</span><br>        <span class="hljs-comment">// 队列空返回 null</span><br>        String poll = QUEUE.poll();<br><br>        <span class="hljs-comment">// 队列空会阻塞等待</span><br>        String take = QUEUE.take();<br><br>        <span class="hljs-comment">// 仅仅看一下最早入队列的元素</span><br>        String peek = QUEUE.peek();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="问题疑问"><a href="#问题疑问" class="headerlink" title="问题疑问"></a>问题疑问</h4><ol><li>LinkedBlockingQueue 的实现原理是什么？</li><li>LinkedBlockingQueue 和 ArrayBlockingQueue 的区别是什么？</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/LinkedBlockingQueue-uml-Ma14n3.png" alt="LinkedBlockingQueue-uml-Ma14n3"></p><h4 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <br>    E item;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * One of:</span><br><span class="hljs-comment">    * - 真正的后继节点</span><br><span class="hljs-comment">    * - 有值，表示后继者是head.next</span><br><span class="hljs-comment">    * - null，表示没有后继（这是最后一个节点）</span><br><span class="hljs-comment">    */</span><br>    Node&lt;E&gt; next;<br><br>    Node(E x) &#123; item = x; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先在 LinkedBlockingQueue 中有一个静态内部类 Node<E> 支持泛型，下面看下其他字段：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 初始容量，如果没有，则为Integer.MAX_VALUE */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> capacity;<br><br><span class="hljs-comment">/** 当前元素数 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicInteger count = <span class="hljs-keyword">new</span> AtomicInteger();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 链表头</span><br><span class="hljs-comment">* 不变的是: head.item == null</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">transient</span> Node&lt;E&gt; head;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 链表尾</span><br><span class="hljs-comment">* 不变的是: last.next == null</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Node&lt;E&gt; last;<br><br><span class="hljs-comment">/** 执行 take, poll 等操作需要获取到 takeLock */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantLock takeLock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br><span class="hljs-comment">/** 等待执行 take 操作的线程，会放入这个条件队列 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Condition notEmpty = takeLock.newCondition();<br><br><span class="hljs-comment">/** 执行 put, offer 等操作需要获取到 putLock */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantLock putLock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br><span class="hljs-comment">/** 等待执行 put 操作的线程，会被放入这个条件队列 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Condition notFull = putLock.newCondition();<br><br></code></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedBlockingQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(Integer.MAX_VALUE);<br>&#125;<br><br><span class="hljs-comment">// 创建时指定容量</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedBlockingQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (capacity &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">this</span>.capacity = capacity;<br>    last = head = <span class="hljs-keyword">new</span> Node&lt;E&gt;(<span class="hljs-keyword">null</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过构造函数可以看出，在初始化 LinkedBlockingQueue 时，如果不传入容量则会默认指定 Integer.MAX_VALUE。</p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>add 方法是直接调用的父类 AbstractQueue 的方法，内部调用的 LinkedBlockingQueue 自己实现的 offer 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (offer(e))<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;Queue full&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要阅读的还是 LinkedBlockingQueue 的 put 和 offer 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    <span class="hljs-comment">// 插入元</span><br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    <span class="hljs-comment">// Note: 所有put / take / etc中的约定是预设本地变量</span><br>    <span class="hljs-comment">// 保持计数为负表示失败，除非置位。</span><br>    <span class="hljs-keyword">int</span> c = -<span class="hljs-number">1</span>;<br>    Node&lt;E&gt; node = <span class="hljs-keyword">new</span> Node&lt;E&gt;(e);<br>    <span class="hljs-keyword">final</span> ReentrantLock putLock = <span class="hljs-keyword">this</span>.putLock;<br>    <span class="hljs-keyword">final</span> AtomicInteger count = <span class="hljs-keyword">this</span>.count;<br>    putLock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>       <br>        <span class="hljs-comment">// 如果已经到最大容量，则等待 </span><br>        <span class="hljs-keyword">while</span> (count.get() == capacity) &#123;<br>            notFull.await();<br>        &#125;<br>        enqueue(node);<br>        <span class="hljs-comment">// 总数进行增加， 返回的是先前的容量</span><br>        c = count.getAndIncrement();<br>        <span class="hljs-comment">// 判断是否需要唤醒入队列阻塞的线程</span><br>        <span class="hljs-keyword">if</span> (c + <span class="hljs-number">1</span> &lt; capacity)<br>            notFull.signal();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        putLock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 唤醒因调用 notEmpty 的 await 方法而被阻塞的线程</span><br>        signalNotEmpty();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">offer</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-comment">// 为空抛出异常</span><br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    <span class="hljs-keyword">final</span> AtomicInteger count = <span class="hljs-keyword">this</span>.count;<br>    <span class="hljs-comment">// 如果已经到最大容量，返回 false</span><br>    <span class="hljs-keyword">if</span> (count.get() == capacity)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">int</span> c = -<span class="hljs-number">1</span>;<br>    Node&lt;E&gt; node = <span class="hljs-keyword">new</span> Node&lt;E&gt;(e);<br>    <span class="hljs-keyword">final</span> ReentrantLock putLock = <span class="hljs-keyword">this</span>.putLock;<br>    putLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (count.get() &lt; capacity) &#123;<br>            enqueue(node);<br>            c = count.getAndIncrement();<br>            <span class="hljs-keyword">if</span> (c + <span class="hljs-number">1</span> &lt; capacity)<br>                notFull.signal();<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        putLock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>)<br>        signalNotEmpty();<br>    <span class="hljs-keyword">return</span> c &gt;= <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面两段代码可以看出 put 和 offer 的最大区别在于是否阻塞。 put 方法当队列达到指定容量时，会阻塞，等待有元素出队列。而 offer 方法会直接返回 false。</p><p>同时两个方法操作元素入队列都是调用的 enqueue(node) 方法，下面一起看下 enqueue 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(Node&lt;E&gt; node)</span> </span>&#123;<br>    <span class="hljs-comment">// assert putLock.isHeldByCurrentThread();</span><br>    <span class="hljs-comment">// assert last.next == null;</span><br>    last = last.next = node;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 enqueue 方法中，直接指定当前尾节点的 next 为传入的元素即可。</p><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">poll</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> AtomicInteger count = <span class="hljs-keyword">this</span>.count;<br>    <span class="hljs-comment">// 队列为空返回 null</span><br>    <span class="hljs-keyword">if</span> (count.get() == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    E x = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">int</span> c = -<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 加锁</span><br>    <span class="hljs-keyword">final</span> ReentrantLock takeLock = <span class="hljs-keyword">this</span>.takeLock;<br>    takeLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (count.get() &gt; <span class="hljs-number">0</span>) &#123;<br>            x = dequeue();<br>            <span class="hljs-comment">// 减少队列元素计数，返回的是旧值</span><br>            c = count.getAndDecrement();<br>            <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">1</span>)<br>            <span class="hljs-comment">// 旧值大于 1 ，就是当前大于 0</span><br>            <span class="hljs-comment">// 唤醒调用 notEmpty.await 等待的线程</span><br>                notEmpty.signal();<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        takeLock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (c == capacity)<br>        <span class="hljs-comment">// 如果旧值等于 capacity 说明当前空了一个位置</span><br>        signalNotFull();<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">take</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    E x;<br>    <span class="hljs-keyword">int</span> c = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">final</span> AtomicInteger count = <span class="hljs-keyword">this</span>.count;<br>    <span class="hljs-keyword">final</span> ReentrantLock takeLock = <span class="hljs-keyword">this</span>.takeLock;<br>    takeLock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 阻塞等待</span><br>        <span class="hljs-keyword">while</span> (count.get() == <span class="hljs-number">0</span>) &#123;<br>            notEmpty.await();<br>        &#125;<br>        x = dequeue();<br>        c = count.getAndDecrement();<br>        <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">1</span>)<br>            notEmpty.signal();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        takeLock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (c == capacity)<br>        signalNotFull();<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面代码可以看出 poll 和 take 方法逻辑大致相同。区别就是在当前队列为空时的处理逻辑。poll 在当前队列为空时返回 null，take 会阻塞等待，知道当前队列中有元素。</p><p>poll 和 take 都试用 dequeue() 方法从队列中获取元素。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> E <span class="hljs-title">dequeue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// assert takeLock.isHeldByCurrentThread();</span><br>    <span class="hljs-comment">// assert head.item == null;</span><br>    Node&lt;E&gt; h = head;<br>    Node&lt;E&gt; first = h.next;<br>    h.next = h; <span class="hljs-comment">// help GC</span><br>    head = first;<br>    E x = first.item;<br>    first.item = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>dequeue() 方法逻辑就是获取头节点，并将 head 指向下一个节点。</p><h4 id="查看元素"><a href="#查看元素" class="headerlink" title="查看元素"></a>查看元素</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (count.get() == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">final</span> ReentrantLock takeLock = <span class="hljs-keyword">this</span>.takeLock;<br>    takeLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        Node&lt;E&gt; first = head.next;<br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> first.item;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        takeLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>peek() 方法比较简单，直接获取 head 的元素值即可。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><p><strong>Q: LinkedBlockingQueue 的实现原理？</strong></p><p><strong>A:</strong> LinkedBlockingQueue 是基于链表实现的，内部使用 ReentrantLock 互斥锁，防止并发放置元素或者取出元素的冲突问题。</p><ol><li>take、poll、peek 等从队列中获取元素的操作共用 takeLock 锁。</li><li>add、put、offer 等向队列中添加元素的操作共同 putLock 锁。</li><li>notEmpty 和 notFull 是 Condition 类型，在 take 和 put 操作时，如果如果队列为空或者队列已满，会调用相应的 await 将线程放入条件队列。</li></ol><p><strong>Q: 入队列和出队列方法之间的区别是什么？</strong></p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>add</td><td>添加元素，队列满了，添加失败抛出遗产</td></tr><tr><td>offer</td><td>添加元素， 队列满了，添加失败，返回 false</td></tr><tr><td>put</td><td>添加元素，队列满了，阻塞等待</td></tr><tr><td></td><td></td></tr><tr><td>poll</td><td>弹出元素，队列为空则返回 null</td></tr><tr><td>take</td><td>弹出元素，队列为空则等待队列中有元素</td></tr><tr><td></td><td></td></tr><tr><td>peek</td><td>查看队列中放入最早的一个元素</td></tr></tbody></table><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>LinkedBlockingQueue 使用和 ArrayBlockingQueue 并没有什么区别，内部实现都是使用的 ReentrantLock，可以对照着阅读。同时 Condition 这块也需要着重了解一下。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- AQS 都看完了，Condition 原理可不能少！</title>
      <link href="2020/10/01/source-code-condition.html"/>
      <url>2020/10/01/source-code-condition.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>在介绍 AQS 时，其中有一个内部类叫做 ConditionObject，当时并没有进行介绍，并且在后续阅读源码时，会发现很多地方用到了 Condition ，这时就会很诧异，这个 Condition 到底有什么作用？那今天就通过阅读 Condition 源码，从而弄清楚 Condition 到底是做什么的？当然阅读这篇文章的时候希望你已经阅读了 AQS、ReentrantLock 以及 LockSupport 的相关文章或者有一定的了解（<del>当然小伙伴也可以直接跳到文末看总结</del>）。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Object 的监视器方法：wait、notify、notifyAll 应该都不陌生，在多线程使用场景下，必须先使用 synchronized 获取到锁，然后才可以调用 Object 的 wait、notify。</p><p>Condition 的使用，相当于用 Lock 替换了 synchronized，然后用 Condition 替换 Object 的监视器方法。</p><p>Conditions（也称为条件队列或条件变量）为一种线程提供了一种暂停执行（等待），直到另一线程通知被阻塞的线程，某些状态条件现在可能为真。</p><p>因为访问到此共享状态信息发生在不同的线程中，因此必须对其进行保护，所以会使用某种形式的锁。等待条件提供的关键属性是它以原子地释放了关联的锁，并且挂起当前线程，就像 Object.wait 一样。</p><p>Condition 实例本质上要绑定到锁。 为了获得 Condition 实例，一般使用 Lock 实例的 newCondition() 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>Condition con = lock.newCondition();<br></code></pre></td></tr></table></figure><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BoundedBuffer</span> </span>&#123;<br><br>    <span class="hljs-keyword">final</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-comment">// condition 实例依赖于 lock 实例</span><br>    <span class="hljs-keyword">final</span> Condition notFull = lock.newCondition();<br>    <span class="hljs-keyword">final</span> Condition notEmpty = lock.newCondition();<br><br>    <span class="hljs-keyword">final</span> Object[] items = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">100</span>];<br><br>    <span class="hljs-keyword">int</span> putPtr, takePtr, count;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(Object x)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//  put 时判断是否已经满了</span><br>            <span class="hljs-comment">// 则线程在 notFull 条件上排队阻塞</span><br>            <span class="hljs-keyword">while</span> (count == items.length) &#123;<br>                notFull.await();<br>            &#125;<br>            items[putPtr] = x;<br>            <span class="hljs-keyword">if</span> (++putPtr == items.length) &#123;<br>                putPtr = <span class="hljs-number">0</span>;<br>            &#125;<br>            ++count;<br>            <span class="hljs-comment">// put 成功之后，队列中有元素</span><br>            <span class="hljs-comment">// 唤醒在 notEmpty 条件上排队阻塞的线程</span><br>            notEmpty.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">take</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// take 时，发现为空</span><br>            <span class="hljs-comment">// 则线程在 notEmpty 的条件上排队阻塞</span><br>            <span class="hljs-keyword">while</span> (count == <span class="hljs-number">0</span>) &#123;<br>                notEmpty.await();<br>            &#125;<br>            Object x = items[takePtr];<br>            <span class="hljs-keyword">if</span> (++takePtr == items.length) &#123;<br>                takePtr = <span class="hljs-number">0</span>;<br>            &#125;<br>            --count;<br>            <span class="hljs-comment">// take 成功，队列不可能是满的</span><br>            <span class="hljs-comment">// 唤醒在 notFull 条件上排队阻塞的线程</span><br>            notFull.signal();<br>            <span class="hljs-keyword">return</span> x;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面是官方文档的一个例子，实现了一个简单的 BlockingQueue ，看懂这里，会发现在<strong>同步队列</strong>中很多地方都是用的这个逻辑。必要的代码说明都已经在代码中进行注释。</p><h4 id="问题疑问"><a href="#问题疑问" class="headerlink" title="问题疑问"></a>问题疑问</h4><ol><li>Condition 和 AQS 有什么关系？</li><li>Condition 的实现原理是什么？</li><li>Condition 的等待队列和 AQS 的同步队列有什么区别和联系？</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/condition-uml-rMKuf3.png" alt="condition-uml-rMKuf3"></p><p>通过 UML 可以看出，Condition 只是一个抽象类，它的主要实现逻辑是在 AQS 的内部类 ConditionObject 实现的。下面主要从 await 和 signal 两个方法入手，从源码了解 ConditionObject。</p><h4 id="创建-Condition"><a href="#创建-Condition" class="headerlink" title="创建 Condition"></a>创建 Condition</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>Condition con = lock.newCondition();<br></code></pre></td></tr></table></figure><p>一般使用 lock.newCondition() 创建条件变量。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReentrantLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Condition <span class="hljs-title">newCondition</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sync.newCondition();<br>    &#125;<br>    <span class="hljs-comment">// Sync 集成 AQS</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> </span>&#123;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">final</span> ConditionObject <span class="hljs-title">newCondition</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConditionObject();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用的是 ReentrantLock 的源码，里面调用的 sync.newCondition()，Sync 继承 AQS，其实就是创建了一个 AQS 内部类的 ConditionObject 的实例。</p><p>这里需要注意的是 lock 每调用一次 <code>lock.newCondition()</code> 都会有一个新的 ConditionObject 实例生成，就是说一个 lock 可以创建多个 Condition 实例。</p><h4 id="Condition-参数"><a href="#Condition-参数" class="headerlink" title="Condition 参数"></a>Condition 参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 条件队列的第一个节点 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Node firstWaiter;<br><span class="hljs-comment">/** 条件队列的最后一个节点 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Node lastWaiter;<br></code></pre></td></tr></table></figure><h4 id="await-方法"><a href="#await-方法" class="headerlink" title="await 方法"></a>await 方法</h4><p>await 方法，会造成当前线程在等待，直到收到信号或被中断。</p><p>与此 Condition 相关联的锁被原子释放，并且出于线程调度目的，当前线程被禁用，并且处于休眠状态，直到发生以下四种情况之一：</p><ol><li>其他一些线程调用此 Condition 的 signal 方法，而当前线程恰好被选择为要唤醒的线程；</li><li>其他一些线程调用此 Condition 的 signalAll 方法；</li><li>其他一些线程中断当前线程，并支持中断线程挂起；</li><li>发生虚假唤醒。</li></ol><p>在所有情况下，在此方法可以返回之前，当前线程必须重新获取与此条件关联的锁。当线程返回时，可以保证保持此锁。</p><p>现在来看 AQS 内部的实现逻辑：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    <span class="hljs-comment">// 响应中断</span><br>    <span class="hljs-keyword">if</span> (Thread.interrupted())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InterruptedException();<br>    <span class="hljs-comment">// 添加到条件队列尾部（等待队列）</span><br>    <span class="hljs-comment">// 内部会创建 Node.CONDITION 类型的 Node</span><br>    Node node = addConditionWaiter();<br>    <span class="hljs-comment">// 释放当前线程获取的锁（通过操作 state 的值）</span><br>    <span class="hljs-comment">// 释放了锁就会被阻塞挂起</span><br>    <span class="hljs-keyword">int</span> savedState = fullyRelease(node);<br>    <span class="hljs-keyword">int</span> interruptMode = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 节点已经不在同步队列中，则调用 park 让其在等待队列中挂着</span><br>    <span class="hljs-keyword">while</span> (!isOnSyncQueue(node)) &#123;<br>        <span class="hljs-comment">// 调用 park 阻塞挂起当前线程</span><br>        LockSupport.park(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">// 说明 signal 被调用了或者线程被中断，校验下唤醒原因</span><br>        <span class="hljs-comment">// 如果因为终端被唤醒，则跳出循环</span><br>        <span class="hljs-keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-comment">// while 循环结束， 线程开始抢锁</span><br>    <span class="hljs-keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)<br>        interruptMode = REINTERRUPT;<br>    <span class="hljs-keyword">if</span> (node.nextWaiter != <span class="hljs-keyword">null</span>) <span class="hljs-comment">// clean up if cancelled</span><br>        unlinkCancelledWaiters();<br>    <span class="hljs-comment">// 统一处理中断的</span><br>    <span class="hljs-keyword">if</span> (interruptMode != <span class="hljs-number">0</span>)<br>        reportInterruptAfterWait(interruptMode);<br>&#125;<br></code></pre></td></tr></table></figure><p>await 方法步骤如下：</p><ol><li>创建 Node.CONDITION 类型的 Node 并添加到条件队列（ConditionQueue）的尾部；</li><li>释放当前线程获取的锁（通过操作 state 的值）</li><li>判断当前线程是否在同步队列（SyncQueue）中，不在的话会使用 park 挂起。</li><li>循环结束之后，说明已经已经在同步队列（SyncQueue）中了，后面等待获取到锁，继续执行即可。</li></ol><p>在这里一定要把条件队列和同步队列进行区分清楚！！</p><p>条件队列/等待队列：即 Condition 的队列<br>同步队列：AQS 的队列。</p><p>下面对 await 里面重要方法进行阅读：</p><ul><li>addConditionWaiter() 方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">addConditionWaiter</span><span class="hljs-params">()</span> </span>&#123;<br>    Node t = lastWaiter;<br>    <span class="hljs-comment">// If lastWaiter is cancelled, clean out.</span><br>    <span class="hljs-comment">// 判断尾节点状态，如果被取消，则清除所有被取消的节点</span><br>    <span class="hljs-keyword">if</span> (t != <span class="hljs-keyword">null</span> &amp;&amp; t.waitStatus != Node.CONDITION) &#123;<br>        unlinkCancelledWaiters();<br>        t = lastWaiter;<br>    &#125;<br>    <span class="hljs-comment">// 创建新节点，类型为 Node.CONDITION</span><br>    Node node = <span class="hljs-keyword">new</span> Node(Thread.currentThread(), Node.CONDITION);<br>    <span class="hljs-comment">// 将新节点放到等待队列尾部</span><br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-keyword">null</span>)<br>        firstWaiter = node;<br>    <span class="hljs-keyword">else</span><br>        t.nextWaiter = node;<br>    lastWaiter = node;<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><p>addConditionWaiter 方法可以看出，只是创建一个类型为 Node.CONDITION 的节点并放到条件队列尾部。同时通过这段代码还可以得出其他结论：</p><ol><li>条件队列内部的 Node，只用到了 thread、waitStatus、nextWaiter 属性；</li><li>条件队列是单向队列。</li></ol><p>作为对比，这里把条件队列和同步队列做出对比：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/condition-node-7yUQjE.png" alt="condition-node-7yUQjE"></p><p><a href="https://mp.weixin.qq.com/s/u-0aRcTTsQNzkkMhoJP0lQ">AQS</a> 同步队列如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/condition-aqs-n5Fs85.png" alt="condition-aqs-n5Fs85"></p><p>再来看下 Condition 的条件队列</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/condition-condition-A97bUS.png" alt="condition-condition-A97bUS"></p><p>waitStatus 在 AQS 中已经进行了介绍：</p><blockquote><ol><li>默认状态为 0；</li><li>waitStatus &gt; 0 (CANCELLED 1) 说明该节点超时或者中断了，需要从队列中移除；</li><li>waitStatus = -1 SIGNAL 当前线程的前一个节点的状态为 SIGNAL，则当前线程需要阻塞（unpark）；</li><li>waitStatus = -2 CONDITION -2 ：该节点目前在条件队列；</li><li>waitStatus = -3 PROPAGATE -3 ：releaseShared 应该被传播到其他节点，在共享锁模式下使用。</li></ol></blockquote><ul><li>fullyRelease 方法 （AQS）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fullyRelease</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-keyword">boolean</span> failed = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取当前节点的 state</span><br>        <span class="hljs-keyword">int</span> savedState = getState();<br>        <span class="hljs-comment">// 释放锁</span><br>        <span class="hljs-keyword">if</span> (release(savedState)) &#123;<br>            failed = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">return</span> savedState;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalMonitorStateException();<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            node.waitStatus = Node.CANCELLED;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>fullyRelease 方法是由 AQS 提供的，首先获取当前的 state，然后调用 release 方法进行释放锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">release</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        Node h = head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-keyword">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>release 方法在 <a href="https://mp.weixin.qq.com/s/u-0aRcTTsQNzkkMhoJP0lQ">AQS</a> 中做了详细的介绍。它的主要作用就是释放锁，并且需要注意的是：</p><ol><li>fullyRelease 会一次性释放所有的锁，所以说不管重入多少次，在这里都会全部释放的。</li><li>这里会抛出异常，主要是在释放锁失败时，这时就会在 finally 里面将节点状态置为 Node.CANCELLED。</li></ol><ul><li>isOnSyncQueue(node)</li></ul><p>通过上面的流程，节点已经放到了<strong>条件队列</strong>并且释放了持有的<strong>锁</strong>，而后就会挂起阻塞，直到 signal 唤醒。但是在挂起时要保证节点已经不在同步队列（SyncQueue）中了才可以挂起。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isOnSyncQueue</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-comment">// 当前节点是条件队列节点，或者上一个节点是空</span><br>    <span class="hljs-keyword">if</span> (node.waitStatus == Node.CONDITION || node.prev == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (node.next != <span class="hljs-keyword">null</span>) <span class="hljs-comment">// If has successor, it must be on queue</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-keyword">return</span> findNodeFromTail(node);<br>&#125;<br><span class="hljs-comment">// 从尾部开始遍历</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findNodeFromTail</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    Node t = tail;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">if</span> (t == node)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        t = t.prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果一个节点（总是一个最初放置在条件队列中的节点）现在正等待在同步队列上重新获取，则返回true。</p><p>这段代码的主要作用判断节点是不是在同步队列中，如果不在同步队列中，后面才会调用 park 进行阻塞当前线程。这里就会有一个疑问：AQS 的同步队列和 Condition 的条件队列应该是无关的，这里为什么会要保证节点不在同步队列之后才可以进行阻塞？因为 signal 或者 signalAll 唤醒节点之后，节点就会被放到同步队列中。</p><p>线程到这里已经被阻塞了，当有其他线程调用 signal 或者 signalAll 时，会唤醒当前线程。</p><p>而后会验证是否因中断唤醒当前线程，这里假设没有发生中断。那 while 循环的 isOnSyncQueue(Node node) 必然会返回 true ，表示当前节点已经在同步队列中了。</p><p>后续会调用 <strong>acquireQueued(node, savedState)</strong> 进行获取锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-comment">// 是否拿到资源</span><br>    <span class="hljs-keyword">boolean</span> failed = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 中断状态</span><br>        <span class="hljs-keyword">boolean</span> interrupted = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 无限循环</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 当前节点之前的节点</span><br>            <span class="hljs-keyword">final</span> Node p = node.predecessor();<br>            <span class="hljs-comment">// 前一个节点是头节点， 说明当前节点是 头节点的 next 即真实的第一个数据节点 （因为 head 是虚拟节点）</span><br>            <span class="hljs-comment">// 然后再尝试获取资源</span><br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                <span class="hljs-comment">// 获取成功之后 将头指针指向当前节点</span><br>                setHead(node); <br>                p.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// help GC</span><br>                failed = <span class="hljs-keyword">false</span>;<br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-comment">// p 不是头节点， 或者 头节点未能获取到资源 （非公平情况下被别的节点抢占） </span><br>            <span class="hljs-comment">// 判断 node 是否要被阻塞，获取不到锁就会一直阻塞</span><br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就是 AQS 的逻辑了，同样可以阅读 <a href="https://mp.weixin.qq.com/s/u-0aRcTTsQNzkkMhoJP0lQ">AQS</a> 的相关介绍。</p><blockquote><ol><li>不断获取本节点的上一个节点是否为 head，因为 head 是虚拟节点，如果当前节点的上一个节点是 head 节点，则当前节点为 <code>第一个数据节点&gt;</code>；</li><li>第一个数据节点不断的去获取资源，获取成功，则将 head 指向当前节点；</li><li>当前节点不是头节点，或者 <code>tryAcquire(arg)</code> 失败（失败可能是非公平锁）。这时候需要判断前一个节点状态决定<code>当前节点是否要被阻塞</code>（前一个节点状态是否为 SIGNAL）。</li></ol></blockquote><p>值得注意的是，当节点放到 AQS 的同步队列时，也是进行争抢资源，同时设置 <code>savedState</code> 的值，这个值则是代表当初释放锁的时候释放了多少重入次数。</p><p>总体流程画图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/condition-await-q4EBQx.png" alt="condition-await-q4EBQx"></p><h4 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">signal</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 是否为当前持有线程</span><br>    <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalMonitorStateException();<br>    Node first = firstWaiter;<br>    <span class="hljs-keyword">if</span> (first != <span class="hljs-keyword">null</span>)<br>        doSignal(first);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSignal</span><span class="hljs-params">(Node first)</span> </span>&#123;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-comment">// firstWaiter 头节点指向条件队列头的下一个节点</span><br>        <span class="hljs-keyword">if</span> ( (firstWaiter = first.nextWaiter) == <span class="hljs-keyword">null</span>)<br>            lastWaiter = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 将原来的头节点和同步队列断开</span><br>        first.nextWaiter = <span class="hljs-keyword">null</span>;<br>    &#125; <span class="hljs-keyword">while</span> (!transferForSignal(first) &amp;&amp;<br>                (first = firstWaiter) != <span class="hljs-keyword">null</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">transferForSignal</span><span class="hljs-params">(Node node)</span> </span>&#123;<br> <br>    <span class="hljs-comment">// 判断节点是否已经在之前被取消了</span><br>    <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-comment">// 调用 enq 添加到 同步队列的尾部</span><br>    Node p = enq(node);<br>    <span class="hljs-keyword">int</span> ws = p.waitStatus;<br>    <span class="hljs-comment">// node 的上一个节点 修改为 SIGNAL 这样后续就可以唤醒自己了</span><br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))<br>        LockSupport.unpark(node.thread);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>enq 同样可以阅读 <a href="https://mp.weixin.qq.com/s/u-0aRcTTsQNzkkMhoJP0lQ">AQS</a> 的代码 </p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">enq</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        Node t = tail;<br>        <span class="hljs-comment">// 尾节点为空 需要初始化头节点，此时头尾节点是一个</span><br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// Must initialize</span><br>            <span class="hljs-keyword">if</span> (compareAndSetHead(<span class="hljs-keyword">new</span> Node()))<br>                tail = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 不为空 循环赋值</span><br>            node.prev = t;<br>            <span class="hljs-keyword">if</span> (compareAndSetTail(t, node)) &#123;<br>                t.next = node;<br>                <span class="hljs-keyword">return</span> t;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 enq 方法将节点放到 AQS 的同步队列之后，要将 node 的前一个节点的 waitStatus 设置为 Node.SIGNAL。signalAll 的代码也是类似。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><p><strong>Q: Condition 和 AQS 有什么关系？</strong></p><p><strong>A:</strong> Condition 是基于 AQS 实现的，Condition 的实现类 ConditionObject 是 AQS 的一个内部类，在里面共用了一部分 AQS 的逻辑。</p><p><strong>Q: Condition 的实现原理是什么？</strong></p><p><strong>A:</strong> Condition 内部维护一个条件队列，在获取锁的情况下，线程调用 await，线程会被放置在条件队列中并被阻塞。直到调用 signal、signalAll 唤醒线程，此后线程唤醒，会放入到 AQS 的同步队列，参与争抢锁资源。</p><p><strong>Q: Condition 的等待队列和 AQS 的同步队列有什么区别和联系？</strong><br><strong>A:</strong> Condition 的等待队列是单向链表，AQS 的是双向链表。二者之间并没有什么明确的联系。仅仅在节点从阻塞状态被唤醒后，会从等待队列挪到同步队列中。</p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>本文主要是阅读 Condition 的相关代码，不过省略了线程中断等逻辑。有兴趣的小伙伴。可以更深入的研究相关的源码。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 基于数组的有界阻塞队列 —— ArrayBlockingQueue</title>
      <link href="2020/09/27/source-code-arrayblockingqueue.html"/>
      <url>2020/09/27/source-code-arrayblockingqueue.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>在阅读完和 AQS 相关的锁以及同步辅助器之后，来一起阅读 JUC 下的和队列相关的源码。先从第一个开始：ArrayBlockingQueue。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>由数组支持的有界BlockingQueue阻塞队列。</p><p>这个队列的命令元素FIFO（先入先出）。 队列的头是元素一直在队列中时间最长。 队列的尾部是该元素已经在队列中的时间最短。 新元素插入到队列的尾部，并且队列检索操作获取在队列的头部元素。</p><p>这是一个典型的“有界缓冲区”，在其中一个固定大小的数组保持由生产者插入并受到消费者的提取的元素。 一旦创建，容量不能改变。 试图put 一个元素到一个满的队列将导致操作阻塞; 试图 take 从空队列一个元素将类似地阻塞。</p><p>此类支持订购等待生产者和消费者线程可选的公平政策。 默认情况下，这个顺序不能保证。 然而，队列公平设置为构建 true 保证线程以FIFO的顺序进行访问。 公平性通常会降低吞吐量，但减少了可变性和避免饥饿。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayBlockingQueueTest</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ArrayBlockingQueue&lt;String&gt; QUEUE = <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> CountDownLatch LATCH = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        ExecutorService pool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="hljs-number">1024</span>),<br>                <span class="hljs-keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="hljs-string">&quot;Thread-pool-%d&quot;</span>).build(),<br>                <span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy());<br><br><br>        pool.submit(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000L</span>);<br><br>                    QUEUE.put(<span class="hljs-string">&quot;鸡蛋&quot;</span> + Thread.currentThread().getName());<br>                    System.out.println(<span class="hljs-string">&quot;put 放入元素&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException ignored) &#123;<br>                &#125;<br>            &#125;<br>            LATCH.countDown();<br>        &#125;);<br><br><br>        pool.submit(() -&gt; &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">500L</span>);<br><br>                    String take = QUEUE.take();<br><br>                    System.out.println(<span class="hljs-string">&quot;take = &quot;</span> + take);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException ignored) &#123;<br>                &#125;<br>            &#125;<br>            LATCH.countDown();<br><br>        &#125;);<br>        <span class="hljs-keyword">try</span> &#123;<br>            LATCH.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException ignored) &#123;<br><br>        &#125;<br>        pool.shutdown();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>demo 只是临时写的一个，很简单的版本。</p><h4 id="问题疑问"><a href="#问题疑问" class="headerlink" title="问题疑问"></a>问题疑问</h4><ol><li>ArrayBlockingQueue 的实现原理是什么？</li><li>入队列和出队列方法之间的区别是什么？</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ArrayBlockingQueue-uml-37BHBp.png" alt="ArrayBlockingQueue-uml-37BHBp"></p><h4 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/** 数组 - 存储队列中的元素 */</span><br><span class="hljs-keyword">final</span> Object[] items;<br><br><span class="hljs-comment">/** 下一个 take, poll, peek or remove 的索引 */</span><br><span class="hljs-keyword">int</span> takeIndex;<br><br><span class="hljs-comment">/** 下一个 put, offer, or add 的索引 */</span><br><span class="hljs-keyword">int</span> putIndex;<br><br><span class="hljs-comment">/** 队列中的元素数 */</span><br><span class="hljs-keyword">int</span> count;<br><br><br><span class="hljs-comment">/** Main lock guarding all access */</span><br><span class="hljs-keyword">final</span> ReentrantLock lock;<br><br><span class="hljs-comment">/** take 操作时是否等待 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Condition notEmpty;<br><br><span class="hljs-comment">/** put 操作时是否等待 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Condition notFull;<br><br></code></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayBlockingQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(capacity, <span class="hljs-keyword">false</span>);<br>&#125;<br><br><span class="hljs-comment">// 指定容量，及是否公平</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayBlockingQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity, <span class="hljs-keyword">boolean</span> fair)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (capacity &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">this</span>.items = <span class="hljs-keyword">new</span> Object[capacity];<br>    lock = <span class="hljs-keyword">new</span> ReentrantLock(fair);<br>    notEmpty = lock.newCondition();<br>    notFull =  lock.newCondition();<br>&#125;<br><span class="hljs-comment">// 初始化的时候放入元素</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayBlockingQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity, <span class="hljs-keyword">boolean</span> fair,</span></span><br><span class="hljs-function"><span class="hljs-params">                            Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(capacity, fair);<br><br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lock(); <span class="hljs-comment">// Lock only for visibility, not mutual exclusion</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (E e : c) &#123;<br>                checkNotNull(e);<br>                items[i++] = e;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>        &#125;<br>        count = i;<br>        putIndex = (i == capacity) ? <span class="hljs-number">0</span> : i;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.add(e);<br>&#125;<br><br><span class="hljs-comment">// 父类的方法，其实调用的也是 offer</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (offer(e))<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;Queue full&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 使用锁</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">offer</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    checkNotNull(e);<br>    <span class="hljs-comment">// 加锁</span><br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (count == items.length)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            enqueue(e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 放入元素， 如果队列满了，则等待</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    checkNotNull(e);<br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (count == items.length)<br>            notFull.await();<br>        enqueue(e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>add 方法：调用的是父类 AbstractQueue 的 add 方法，内部调用的是 offer 方法，如果 offer 返回 false，则抛出异常。</li><li>offer 方法：校验元素非空，加互斥锁，如果队列满了，则返回 false，如果队列未满，则调用 enqueue 方法，添加元素。</li><li>put 方法：校验元素非空，加互斥锁，如果队列满了，则一直自旋等待，队列未满则调用 enqueue 方法，添加元素。</li></ol><p>所以下面还是需要看一下 enqueue 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 只有在获取锁的时候才可以调用</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(E x)</span> </span>&#123;<br>    <span class="hljs-comment">// assert lock.getHoldCount() == 1;</span><br>    <span class="hljs-comment">// assert items[putIndex] == null;</span><br>    <span class="hljs-keyword">final</span> Object[] items = <span class="hljs-keyword">this</span>.items;<br>    <span class="hljs-comment">// putIndex 下一个 put, offer, or add 的索引</span><br>    <span class="hljs-comment">// 对其进行赋值，然后进行 ++putIndex 操作</span><br>    items[putIndex] = x;<br>    <span class="hljs-comment">// 如果等于长度，则指定为开始</span><br>    <span class="hljs-keyword">if</span> (++putIndex == items.length)<br>        putIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 对元素数进行 ++</span><br>    count++;<br>    <span class="hljs-comment">// 有元素入队列，唤醒在等待获取元素的线程</span><br>    notEmpty.signal();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">poll</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> (count == <span class="hljs-number">0</span>) ? <span class="hljs-keyword">null</span> : dequeue();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">take</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (count == <span class="hljs-number">0</span>)<br>            notEmpty.await();<br>        <span class="hljs-keyword">return</span> dequeue();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过源码可以看出：</p><ol><li>pool 和 take 都是从队列中获取元素，二者不同的是，当队列中没有元素时，poll 方法返回 null，而 take 方法会一直阻塞等待，直到从队列中获取到元素。</li><li>poll 和 take 方法获取元素都是调用的 dequeue 方法。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> E <span class="hljs-title">dequeue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// assert lock.getHoldCount() == 1;</span><br>    <span class="hljs-comment">// assert items[takeIndex] != null;</span><br>    <span class="hljs-keyword">final</span> Object[] items = <span class="hljs-keyword">this</span>.items;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-comment">// 获取元素并将元素置为 null</span><br>    E x = (E) items[takeIndex];<br>    items[takeIndex] = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">// takeIndex 下一个 take, poll, peek or remove 的索引</span><br>    <span class="hljs-comment">// 指向下一个元素，并且 元素数减少</span><br>    <span class="hljs-keyword">if</span> (++takeIndex == items.length)<br>        takeIndex = <span class="hljs-number">0</span>;<br>    count--;<br>    <span class="hljs-comment">// 更新迭代器状态</span><br>    <span class="hljs-keyword">if</span> (itrs != <span class="hljs-keyword">null</span>)<br>        itrs.elementDequeued();<br>    <span class="hljs-comment">// 唤醒等待放入元素的线程</span><br>    notFull.signal();<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查看元素"><a href="#查看元素" class="headerlink" title="查看元素"></a>查看元素</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> itemAt(takeIndex); <span class="hljs-comment">// null when queue is empty</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><p><strong>Q: ArrayBlockingQueue 的实现原理？</strong></p><p><strong>A:</strong> ArrayBlockingQueue 是基于数组实现的，内部使用 ReentrantLock 互斥锁，防止并发放置元素或者取出元素的冲突问题。</p><p><strong>Q: 入队列和出队列方法之间的区别是什么？</strong></p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>add</td><td>添加元素，队列满了，添加失败抛出遗产</td></tr><tr><td>offer</td><td>添加元素， 队列满了，添加失败，返回 false</td></tr><tr><td>put</td><td>添加元素，队列满了，阻塞等待</td></tr><tr><td></td><td></td></tr><tr><td>poll</td><td>弹出元素，队列为空则返回 null</td></tr><tr><td>take</td><td>弹出元素，队列为空则等待队列中有元素</td></tr><tr><td></td><td></td></tr><tr><td>peek</td><td>查看队列中放入最早的一个元素</td></tr></tbody></table><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>ArrayBlockingQueue 中使用了 ReentrantLock 互斥锁，在元素入队列和出队列的时候都进行了加锁，所以同时只会有一个线程进行入队列或者出队列，从而保证线程安全。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 使用递增计数器的线程同步工具 —— 信号量，它的原理是什么样子的？</title>
      <link href="2020/09/21/source-code-semaphore.html"/>
      <url>2020/09/21/source-code-semaphore.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>在 JUC 中线程同步器除了 CountDownLatch 和 CycleBarrier ，还有一个叫做 Semaphore （信号量），同样是基于 AQS 实现的。下面来看看信号量的内部原理。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一个计数信号量。 从概念上讲，信号量维护了一组许可。 如果有必要，在许可可用之前调用 acquire 方法会被阻塞，直到许可证可用。 调用 release 方法会增加了一个许可证，从而释放被阻塞的线程。 </p><ol><li>声明时指定初始许可数量。</li><li>调用 acquire(int permits) 方法，指定目标许可数量。</li><li>调用 release(int permits) 方法，发布指定的许可数量。</li></ol><p>在许可数量没有到达指定目标数量时，调用 acquire 方法的线程会被阻塞。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SemaphoreTest1</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Semaphore SEMAPHORE = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        ExecutorService pool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="hljs-number">1024</span>),<br>                <span class="hljs-keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="hljs-string">&quot;Thread-pool-%d&quot;</span>).build(),<br>                <span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy());<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br><br>            pool.submit(() -&gt; &#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span> + <span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">1000</span>));<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException ignored) &#123;<br>                &#125;<br><br>                System.out.println(<span class="hljs-string">&quot;当前线程: &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot; 发布一个许可&quot;</span>);<br>                SEMAPHORE.release(<span class="hljs-number">1</span>);<br><br>            &#125;);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;-----&gt; 这里是主线程&quot;</span>);<br><br>        SEMAPHORE.acquire(<span class="hljs-number">5</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;-----&gt; 主线程执行完毕&quot;</span>);<br><br>        pool.shutdown();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">-----&gt; 这里是主线程<br>当前线程: Thread-pool-2 发布一个许可<br>当前线程: Thread-pool-4 发布一个许可<br>当前线程: Thread-pool-1 发布一个许可<br>当前线程: Thread-pool-0 发布一个许可<br>当前线程: Thread-pool-3 发布一个许可<br>-----&gt; 主线程执行完毕<br></code></pre></td></tr></table></figure><p>上面这个方法也是模拟了类似 CountDownLatch 的用法， 在子线程执行完毕之后，主线程继续执行。只不过 Semaphore 和 CountDownLatch 区别最大的是：</p><p>Semaphore 是从指定数值开始增加，直到到达许可数量，然后被阻塞线程开始继续执行。</p><p>CountDownLatch 是从指定数量的线程开始减少，直到为 0 时，被阻塞的线程开始继续执行。</p><p>当然这只是最简单的用法，除此让主线程等待，同样也可以让其他线程等待，然后再开始执行。</p><h4 id="问题疑问"><a href="#问题疑问" class="headerlink" title="问题疑问"></a>问题疑问</h4><ol><li>Semaphore 和 AQS 有什么关系？</li><li>Semaphore 和 CountDownLatch 有什么区别？</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Semaphore-cover-iGaTzJ.png" alt="Semaphore-cover-iGaTzJ"></p><p>通过类图可以看出在 Semaphore 里面有一个静态内部类 Sync 继承了 AQS，同时为了区分公平和非公平的情况，Sync 分别有两个子类：NonfairSync 、FairSync。</p><p>下面根据案例分别从构造函数、acquire()、release() 入手，从而了解内部实现原理。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Semaphore</span><span class="hljs-params">(<span class="hljs-keyword">int</span> permits)</span> </span>&#123;<br>    sync = <span class="hljs-keyword">new</span> NonfairSync(permits);<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化默认非公平锁， 同时需要传入指定许可数， 可以看到这块代码是调用的 AQS 的 setState(permits) 方法。代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Sync</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">2694183684443567898L</span>;<br><br>    NonfairSync(<span class="hljs-keyword">int</span> permits) &#123;<br>        <span class="hljs-keyword">super</span>(permits);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1192457210091910933L</span>;<br><br>        Sync(<span class="hljs-keyword">int</span> permits) &#123;<br>            setState(permits);<br>        &#125;<br> &#125;<br><br></code></pre></td></tr></table></figure><p>setState 方法其实就是对 AQS 的 state 进行赋值。</p><blockquote><p>补充</p><ol><li>在 ReentrantLock 中 state 代表加锁状态，0 没有线程获得锁，大于等于 1 已经有线程获得锁，大于 1 说明该获得锁的线程多次重入。</li><li>在 ReentrantReadWriteLock 中 state 代表锁的状态。state 为 0 ，没有线程持有锁，state 的高 16 为代表读锁状态，低 16 为代表写锁状态。通过位运算可以获取读写锁的实际值。</li><li>而在这里 （CountDownLatch）则代表门闩或者说计数的值。</li></ol></blockquote><p>如果对 state 有所遗忘，可以阅读前面的 AQS 、CAS 相关代码。 state 在这里代表的是信号量的许可数量。</p><h4 id="acquire"><a href="#acquire" class="headerlink" title="acquire()"></a>acquire()</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">acquire</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">acquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> permits)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    sync.acquireSharedInterruptibly(permits);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>acquire() 和 acquire(int permits) 调用的都是 sync.acquireSharedInterruptibly(permits) 方法，只不过一个支持传递参数，一个默认为 1。</p><p>acquireSharedInterruptibly 方法，其实就是 Sync 继承自 AQS 的。</p><p>这块可以阅读 AQS 的文章，这里简单介绍下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAcquireSharedInterruptibly</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    <span class="hljs-keyword">final</span> Node node = addWaiter(Node.SHARED);<br>    <span class="hljs-keyword">boolean</span> failed = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> Node p = node.predecessor();<br>            <span class="hljs-keyword">if</span> (p == head) &#123;<br>                <span class="hljs-keyword">int</span> r = tryAcquireShared(arg);<br>                <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) &#123;<br>                    setHeadAndPropagate(node, r);<br>                    p.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// help GC</span><br>                    failed = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InterruptedException();<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>在失败后会使用 <code>doAcquireSharedInterruptibly(arg);</code> 不断获取资源；</li><li><code>final Node node = addWaiter(Node.SHARED);</code> 会创建节点以共享模式放到队列里；</li><li>在循环中不断判断前一个节点，如果是 head，则尝试获取共享资源；</li><li>在共享模式下获取到资源后会使用 <code>setHeadAndPropagate(node, r);</code> 设置头节点，同时唤醒后续节点。</li></ol><p>tryAcquireShared 是需要子类实现，也就是在 Semaphore.Sync 的实现类中实现了，这里以 FairSync 做讲解：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Sync</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">2014338818796000944L</span>;<br><br>    FairSync(<span class="hljs-keyword">int</span> permits) &#123;<br>        <span class="hljs-keyword">super</span>(permits);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 如果前面有节点，则直接返回 -1 表示失败</span><br>            <span class="hljs-keyword">if</span> (hasQueuedPredecessors())<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 获取当前信号量</span><br>            <span class="hljs-keyword">int</span> available = getState();<br>            <span class="hljs-comment">// 获取当前剩余量</span><br>            <span class="hljs-keyword">int</span> remaining = available - acquires;<br>            <span class="hljs-comment">// 如果小于 0 或者 CAS 设置信号量成功 则直接返回</span><br>            <span class="hljs-keyword">if</span> (remaining &lt; <span class="hljs-number">0</span> ||<br>                compareAndSetState(available, remaining))<br>                <span class="hljs-keyword">return</span> remaining;<br>        &#125;<br>    &#125;<br>&#125;<br>```  <br><br>而这段代码的含义：<br><span class="hljs-number">1.</span> 如果前面有节点，则直接阻塞；<br><span class="hljs-number">2.</span> 如果当前剩余信号量小于 <span class="hljs-number">0</span> ，则返回负值，直接阻塞；<br><span class="hljs-number">3.</span> 如果当前剩余量大于等于 <span class="hljs-number">0</span> ，会 CAS 更新信号量，并返回非负数。<br><br>&gt;这块数值的含义，在 AQS 中定义了，含义如下：<br><br>&gt;<span class="hljs-number">1.</span> 小于 <span class="hljs-number">0</span>: 表示失败；<br>&gt;<span class="hljs-number">2.</span> 等于 <span class="hljs-number">0</span>: 表示共享模式获取资源成功，但后续的节点不能以共享模式获取成功; <br>&gt;<span class="hljs-number">3.</span> 大于 <span class="hljs-number">0</span>: 表示共享模式获取资源成功，后续节点在共享模式获取也可能会成功，在这种情况下，后续等待线程必须检查可用性。<br><br>#### release()<br><br>```java<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">()</span> </span>&#123;<br>    sync.releaseShared(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(<span class="hljs-keyword">int</span> permits)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    sync.releaseShared(permits);<br>&#125;<br></code></pre></td></tr></table></figure><p>发布许可证的给定数量，该数量增加可用的许可数量。 看其内部调用的是 Sync 的 releaseShared， 其实就是 AQS 的对应方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">releaseShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>        doReleaseShared();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果实现tryReleaseShared返回true，以共享模式释放资源。 其中的 tryReleaseShared 部分由 Semaphore.Sync 中实现，逻辑如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> releases)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// 获取当前 state</span><br>        <span class="hljs-keyword">int</span> current = getState();<br>        <span class="hljs-comment">// 对 state 进行增加</span><br>        <span class="hljs-keyword">int</span> next = current + releases;<br>        <span class="hljs-keyword">if</span> (next &lt; current) <span class="hljs-comment">// overflow</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">&quot;Maximum permit count exceeded&quot;</span>);<br>        <span class="hljs-comment">// 使用 CAS 赋值</span><br>        <span class="hljs-keyword">if</span> (compareAndSetState(current, next))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面代码可以看出，在 Semaphore 的 release 方法中主要就是对 state 进行增加，增加成功后会调用 AQS 的 doReleaseShared 方法唤醒头节点。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><p><strong>Q: 既然 Semaphore 也是基于 AQS， 那在 Semaphore 中 state 的含义代表什么？</strong><br><strong>A:</strong> 在 Semaphore 中 state 代表许可数量，acquire 方法当许可小于指定数量会阻塞线程，release 方法增加许可当许可增加成功则唤醒阻塞节点。</p><p><strong>Q: Semaphore 基于 AQS 具体是怎么实现的呢？</strong><br><strong>A:</strong> </p><ol><li>初始设置 state 的初始值，即初始许可数量。</li><li>acquire 方法设置目标数量，当目标数量大于当前数量时，会阻塞线程并将其放到阻塞队列中。此处基于 AQS 实现。</li><li>release 对 state 进行增加，成功后会调用 AQS 的 doReleaseShared 唤醒头结点。同样是基于 AQS 实现。</li></ol><p><strong>Q: Semaphore 和 CountDownLatch 有什么区别？</strong><br><strong>A:</strong> Semaphore 的计数器是递加的，而 CountDownLatch 是递减的。相同点就是计数器都不可以重置。</p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>在阅读 Semaphore 源码过程中，发现其主要功能都是基于 AQS 实现的，可以回顾阅读 AQS 的相关笔记。同样 Semaphore 也支持公平和非公平模式，这块就需要小伙伴自己去阅读啦。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工作笔记】- 你有没有想过为什么交易和退款要拆开不同的表？</title>
      <link href="2020/09/19/work-trans-refund-table.html"/>
      <url>2020/09/19/work-trans-refund-table.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>近期做新项目，在设计表结构的时候，突然想起来之前面试的时候遇到的一个问题，那时候也是初出茅庐，对很多东西一知半解（当然现在也是），当时那个小哥哥问我为什么交易和退款要拆成两个表？是基于什么考虑？有什么好处和优点么？</p></blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>那是一个风和日丽的下午，当然，风和日丽的下午应该配点其他的形容词，实在是我才疏学浅，只能用这个词充当了下开头…… （此处省略小五千字）</p><p>赶紧进入正文！</p><p>因为之前一直做<strong>聚合支付</strong>，而在使用过程中，也是支付和退款表拆开的，一直这么用，并没有觉得不妥。</p><p>比如一个交易表基本就是这样的：</p><table><thead><tr><th>字段</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键 id</td></tr><tr><td>trans_id</td><td>varchar</td><td>交易订单号</td></tr><tr><td>trans_amount</td><td>bigint</td><td>订单金额</td></tr><tr><td>trans_status</td><td>tinyint</td><td>交易状态</td></tr><tr><td>……</td><td>……</td><td>……</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>update_time</td><td>datetime</td><td>更新时间</td></tr></tbody></table><p>退款表是这样子的：</p><table><thead><tr><th>字段</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键 id</td></tr><tr><td>refund_id</td><td>varchar</td><td>退款订单号</td></tr><tr><td>origin_trans_id</td><td>varchar</td><td>原始交易订单号</td></tr><tr><td>refund_status</td><td>tinyint</td><td>退款状态</td></tr><tr><td>refund_amount</td><td>bigint</td><td>退款金额</td></tr><tr><td>……</td><td>……</td><td>……</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>update_time</td><td>datetime</td><td>更新时间</td></tr></tbody></table><p>大概两个表就是这样子的吧！像一些其他字段就先省略了，平常用着也觉得没什么。</p><p>但是恰好那次那个小哥哥就问了这个问题，支付和退款为什么要分开记录？</p><p>当时也是确实是实力不允许，我只是说了就是这么用的，把正向流程和逆向流程拆开，分开实现逻辑，比较方便。</p><h3 id="个人见解"><a href="#个人见解" class="headerlink" title="个人见解"></a>个人见解</h3><p>这里说的不仅仅是交易和退款，同时泛指正向交易和逆向交易，比如充值和消费，借款和贷款，账户出账入账等等，下面仅说说个人见解，<strong>只做讨论</strong>，如果小伙伴有更好的说法，希望可以留言指出，共同学习。</p><h4 id="对账需要"><a href="#对账需要" class="headerlink" title="对账需要"></a>对账需要</h4><p>对账户而言，出款表和入款表最后两方的金额是能对的上的，也就是说<strong>收支平衡</strong>。</p><p>当然这个记在一个表里也是完全可以的。毕竟对出入账只是流水没有状态变化，比如出账中，入账中，等等，流水表完全可以记在一个里面，然后用字段进行标识是出账还是入账。</p><h4 id="拆表需要"><a href="#拆表需要" class="headerlink" title="拆表需要"></a>拆表需要</h4><p>在网上看资料经常会说<strong>分库分表</strong>，而像订单这种（交易/退款）完全两种业务，使用两张表相对而言比较合适，毕竟<strong>交易</strong>的订单相比退款订单要多的多。</p><h4 id="字段设计"><a href="#字段设计" class="headerlink" title="字段设计"></a>字段设计</h4><p>交易和退款是完全不同的两种业务，不像账户流水就是资金记录。</p><p>交易除了订单状态还有一些交易信息比如商户号、优惠金额、实付金额、交易渠道、商品 id 名称、备注等各种信息。</p><p>退款则是根据原单进行退款，需要记录原始订单号、退款金额（部分退款）、退款信息等。</p><p>虽然交易和退款总体上都包含 订单号、状态、金额等，但是如果强行放在一个表，就会导致以下问题：</p><ol><li>很多字段为空的情况，比如交易不需要原始订单号，退款需要存储原始订单号。本来可以设置索引来提高查询效率的字段也不太合适设置了。</li><li>状态也不一定可以完全兼容，像交易状态和退款状态就很难互相兼容。</li></ol><h4 id="开发效率"><a href="#开发效率" class="headerlink" title="开发效率"></a>开发效率</h4><p>交易和退款分开之后，两个人负责不同的业务进行开发，包括业务逻辑和查询展示。如果放在一起，就很多字段不能保证别人知道有还是没有，是存储还是不存储，毕竟表里设置的都可以为空。这种情况下需要很多沟通，或者干脆一个人进行开发。</p><h4 id="设计模式及原则"><a href="#设计模式及原则" class="headerlink" title="设计模式及原则"></a>设计模式及原则</h4><p>其他从设计模式及原则的角度上来说，可以说是职责单一，当然再高大上偏理论的我这就扯不出来了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><p><strong>Q: 那前端要将两种甚至多种在一个列表展示该如何处理？</strong></p><p><strong>A:</strong> 在很多 APP 中大家看到的多种订单都是在一个列表里面展示出来的，比如：支付宝的账单页面。</p><p>当然，如果前端分 tab 页，分开展示不同的业务，那对后端来说简直不要太友好。不过实际往往不是这样，这时候就需要将订单统一存储。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/LDZJYc-IFUqcP.png" alt="LDZJYc-IFUqcP"></p><p>在订单成功的时候存储到一个公共存储中，可以通过 MQ 等，将数据保送到另一张表/库，或者 ES 中用来存储。这样订单查询还可以和业务逻辑的表/库分开。也可以通过 binlog 进行处理，这里的方案只做参考。</p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>之所以写这篇文章，也是为了总结一下最近工作中遇到的问题，以及处理方法。同时一瞬间想起来了很久前遇到的相同的问题。</p><p>如果小伙伴们还有别的看法，欢迎留言，发表自己的意见及看法，共同讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- CyclicBarrier 不就是比 CountDownLatch 多了个回环么？</title>
      <link href="2020/09/13/source-code-cyclicbarrier.html"/>
      <url>2020/09/13/source-code-cyclicbarrier.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>看完 CountDownLatch 正准备表示一番，突然看到了一个 CyclicBarrier —— 回环屏障。沃特？回环还屏障？说比 CountDownLatch 要多一个回环，那咱可得瞧一瞧，看一看了！</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一个同步辅助，它允许一组线程的所有等待彼此达成共同屏障点。 </p><p>CyclicBarrier 在涉及固定线程数且必须等待彼此的程序非常有用。 </p><p>该屏障被称为回环屏障 ，因为它在等待的线程被释放后可以被重新利用。</p><p>CyclicBarrier 支持一个可选的 Runnable 命令，该命令在障碍中的最后一个线程到达之后，但在释放任何线程之前，每个屏障点运行一次。</p><p>此屏障操作对于在任何一方继续之前更新共享状态很有用。</p><p>通过上面的源码注释基本可以得出以下结论：</p><ol><li>CyclicBarrier 和 CountDownLatch 类似，但它是一组线程等待，直到在其他线程中执行的一组操作完成为止。</li><li>CountDownLatch 是计数递减，结束后再调用 await 或者 countdown 都会立即返回，但是 CyclicBarrier 可以重置屏障。</li><li>CyclicBarrier 还可以传入参数 Runnable ，Runnable 会在释放线程之前执行。</li></ol><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>既然上面总结了三个结论，下面当然从三个方面演示如何使用的：</p><p><strong>- 屏障功能</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CyclicBarrierTest</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> CyclicBarrier CYCLIC_BARRIER = <span class="hljs-keyword">new</span> CyclicBarrier(<span class="hljs-number">11</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> BrokenBarrierException, InterruptedException </span>&#123;<br><br>        ExecutorService pool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="hljs-number">1024</span>),<br>                <span class="hljs-keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="hljs-string">&quot;Thread-pool-%d&quot;</span>).build(),<br>                <span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy());<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><br>            pool.submit(() -&gt; &#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 开始执行&quot;</span>);<br>                    Thread.sleep(<span class="hljs-number">5000</span>);<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 执行结束，准备调用 await&quot;</span>);<br>                    CYCLIC_BARRIER.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;);<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;主线程执行 —————————————— &gt;&gt;&gt;&quot;</span>);<br><br>        CYCLIC_BARRIER.await();<br><br>        System.out.println(<span class="hljs-string">&quot;主线程继续执行 —————————————— &gt;&gt;&gt;&quot;</span>);<br><br>        pool.shutdown();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面代码其实模拟了个类似 CountDownLatch 的功能，让所有线程等待，直到都调用 await 之后，各个线程继续执行，同时主线程也继续往下执行。</p><p>不过相对 CountDownLatch 的指定一个线程或多个等待，直到其他线程执行结束，等待的线程才继续执行来说，CyclicBarrier 相对来说还是逊色。</p><p>差别总结如下：</p><ol><li>CountDownLatch 是指定等待的线程，其他线程进行 countDown，等计数为 0 时，等待的线程继续执行。</li><li>CyclicBarrier 是一组线程调用 await 进行等待，当所有的都进入等待的时候，这一组就会一起冲破屏障继续执行。</li></ol><p><strong>- 回环功能</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CyclicBarrierTest2</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> CyclicBarrier CYCLIC_BARRIER = <span class="hljs-keyword">new</span> CyclicBarrier(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> BrokenBarrierException, InterruptedException </span>&#123;<br>        <br>        ExecutorService pool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="hljs-number">1024</span>),<br>                <span class="hljs-keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="hljs-string">&quot;Thread-pool-%d&quot;</span>).build(),<br>                <span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy());<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br><br>            pool.submit(() -&gt; &#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 开始执行&quot;</span>);<br>                    CYCLIC_BARRIER.await();<br><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 冲破屏障 &gt;&gt;&gt; 1&quot;</span>);<br>                    CYCLIC_BARRIER.await();<br><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 冲破屏障 &gt;&gt;&gt;&gt;&gt; 2&quot;</span>);<br>                    CYCLIC_BARRIER.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;);<br><br>        &#125;<br><br>        pool.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://liuzhihang.com/oss/pic/article/carbon-gzpBD4.png" alt="carbon-gzpBD4"></p><p>上面演示的回环的用法。</p><p><strong>- 回环 Runnable</strong></p><p>这块只需要在声明的 CyclicBarrier 修改为以下即可：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> CyclicBarrier CYCLIC_BARRIER = <span class="hljs-keyword">new</span> CyclicBarrier(<span class="hljs-number">5</span>, <span class="hljs-keyword">new</span> Runnable() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行一次 Runnable &quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>打印结果如下：</p><p><img src="https://liuzhihang.com/oss/pic/article/carbon1-lHnKnA.png" alt="carbon1-lHnKnA"></p><p>可以看出只是在下一个计数开始之前，先执行 Runnable 。至于是不是在释放屏障之前，那很容易，直接 Debug 走一遭就知道了！专门录制了个视频：</p><p><img src="https://liuzhihang.com/oss/pic/article/cyclicBarrier-vl-5Bz3Xa.mov" alt="cyclicBarrier-vl-5Bz3Xa"></p><p>通过 debug 可以看出<strong>Runnable 会在释放线程之前执行</strong>。</p><h4 id="问题疑问？"><a href="#问题疑问？" class="headerlink" title="问题疑问？"></a>问题疑问？</h4><ol><li>CyclicBarrier 和 AQS 有什么关系？</li><li>CyclicBarrier 的实现原理是什么？</li><li>CyclicBarrier 是如何实现回环的？</li></ol><p>下面就带着疑问去源码阅读，一探究竟！</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p><img src="https://liuzhihang.com/oss/pic/article/CleanShot-2020-09-12-KFzaCR0G@2x-seVhre.png" alt="CleanShot-2020-09-12-KFzaCR0G@2x-seVhre"></p><p>通过 UML 乍一看，CyclicBarrier 和 AQS 并无什么关系，那下面开始从<strong>参数</strong>、<strong>构造器</strong>、<strong>await()方法</strong>分别看源码。</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CyclicBarrier</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 屏障的每次使用都表示为一个生成实例。</span><br><span class="hljs-comment">     * broken 表示屏障是否被打破。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generation</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> broken = <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/** 锁 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-comment">/** 条件等待，直到屏障 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Condition trip = lock.newCondition();<br>    <span class="hljs-comment">/** 等待计数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> parties;<br>    <span class="hljs-comment">/* The command to run when tripped */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Runnable barrierCommand;<br>    <span class="hljs-comment">/** 当前 generation 新创建的*/</span><br>    <span class="hljs-keyword">private</span> Generation generation = <span class="hljs-keyword">new</span> Generation();<br>    <span class="hljs-comment">/** 仍在等待的 parties 数量，递减 为 0 会重置 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count; <br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过上面可以看出：</p><p>内部使用了一个静态类 Generation ，它有什么功能呢？通过注释了解到，每次使用屏障的时候都会生成，具体有什么用，其实就是用来标示屏障是否被打破。</p><p>内部还有一个 parties 表示等待计数，count 表示仍在等待的计数。</p><p>那就继续往下看吧！</p><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CyclicBarrier</span><span class="hljs-params">(<span class="hljs-keyword">int</span> parties, Runnable barrierAction)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (parties &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">this</span>.parties = parties;<br>    <span class="hljs-keyword">this</span>.count = parties;<br>    <span class="hljs-keyword">this</span>.barrierCommand = barrierAction;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的入参有两个：</p><ul><li>parties（等待计数）：记录多少个线程调用 await 之后，才会一起打破屏障。</li><li>barrierAction：冲破屏障前执行的行为。</li><li>但是会同时对 parties 和 count 赋值为传入的 parties。</li></ul><p>单参数构造，其实就是将 barrierAction 赋值为 null。</p><h4 id="await-方法"><a href="#await-方法" class="headerlink" title="await() 方法"></a>await() 方法</h4><p>在示例中用的 <strong>await()</strong> 方法， 那就从 <strong>await()</strong> 方法入手：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, BrokenBarrierException </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> dowait(<span class="hljs-keyword">false</span>, <span class="hljs-number">0L</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (TimeoutException toe) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(toe); <span class="hljs-comment">// cannot happen</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>await() 才是重头戏， 先来根据源码注释，了解是干嘛的，看看作者怎么讲：</p><ol><li>等到所有各方都在此障碍上调用await。</li><li>如果当前线程不是最后到达的线程，则出于线程调度目的将其禁用，并使其处于休眠状态，直到发生以下情况之一：<ol><li>最后一个线程到达；</li><li>其他一些线程中断当前线程；</li><li>其他一些线程中断其他正在等待的线程之一；</li><li>等待屏障的时候其他线程超时；</li><li>其他一些线程在此屏障上调用 reset。</li></ol></li></ol><p>看到这些，咱们最想看的当然是 2.1 ，等待最后一个线程到达屏障，之后所有的线程一起继续执行。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dowait</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> timed, <span class="hljs-keyword">long</span> nanos)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> InterruptedException, BrokenBarrierException,</span><br><span class="hljs-function">            TimeoutException </span>&#123;<br>    <br>    <span class="hljs-comment">// 加锁</span><br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br><br>        <span class="hljs-comment">// 在这里用到了这个代</span><br>        <span class="hljs-keyword">final</span> Generation g = generation;<br><br>        <span class="hljs-keyword">if</span> (g.broken)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BrokenBarrierException();<br>        <span class="hljs-comment">// 线程终中断标示</span><br>        <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<br>            breakBarrier();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InterruptedException();<br>        &#125;<br><br>        <span class="hljs-comment">// 对计数进行递减</span><br>        <span class="hljs-keyword">int</span> index = --count;<br>        <span class="hljs-comment">// 如果是 0 则</span><br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// tripped</span><br>            <span class="hljs-keyword">boolean</span> ranAction = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">final</span> Runnable command = barrierCommand;<br>                <span class="hljs-comment">// 不是 null 先执行行为</span><br>                <span class="hljs-keyword">if</span> (command != <span class="hljs-keyword">null</span>)<br>                    <span class="hljs-comment">// 这里不是新开线程</span><br>                    command.run();<br>                ranAction = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-comment">// 下一代</span><br>                nextGeneration();<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">// 任务未成功时，即 ranAction 还是 false 打破屏障</span><br>                <span class="hljs-keyword">if</span> (!ranAction)<br>                    breakBarrier();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// loop until tripped, broken, interrupted, or timed out</span><br>        <span class="hljs-comment">// 自旋</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 没有设置超时时间</span><br>                <span class="hljs-keyword">if</span> (!timed)<br>                <span class="hljs-comment">// 进入等待</span><br>                    trip.await();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nanos &gt; <span class="hljs-number">0L</span>)<br>                    nanos = trip.awaitNanos(nanos);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>                <span class="hljs-keyword">if</span> (g == generation &amp;&amp; ! g.broken) &#123;<br>                    breakBarrier();<br>                    <span class="hljs-keyword">throw</span> ie;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    Thread.currentThread().interrupt();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (g.broken)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BrokenBarrierException();<br>            <span class="hljs-comment">// 已经下一代了</span><br>            <span class="hljs-keyword">if</span> (g != generation)<br>                <span class="hljs-keyword">return</span> index;<br><br>            <span class="hljs-keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="hljs-number">0L</span>) &#123;<br>                breakBarrier();<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TimeoutException();<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一大坨代码，完全没有看的欲望，直接划过去吧！</p><p>所以…… 直接看到了这里吧。</p><p>代码还是要阅读的，分开来看（异常流程省略）：</p><ol><li>使用了 ReentrantLock 互斥锁，因此对 count、broken 的修改是原子性的。</li><li>对 count 进行 –count 操作，这样就理解为什么说 count 是仍在等待的计数，或者说还有多少才能到达屏障点。</li><li>当 count 为 0 ，表示到达屏障点了<ol><li><img src="https://liuzhihang.com/oss/pic/article/cyclicbarrier-amQMu4.png" alt="cyclicbarrier-amQMu4"></li><li>command 不为 null，会先执行 **command.run()**， 值得注意的是这里并不是新开了个线程。</li><li>**nextGeneration()**开始新的下一代，即重置 count 为 parties。</li><li>在 finally 里面使用 <strong>breakBarrier()</strong> 打破屏障。</li></ol></li><li>当 count 不是 0<ol><li>自旋，直到是 0.</li></ol></li></ol><p>这后面还有两个方法不能少：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">nextGeneration</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 唤醒线程</span><br>    trip.signalAll();<br>    <span class="hljs-comment">// 更新 count 为 parties</span><br>    count = parties;<br>    <span class="hljs-comment">// 更新 Generation</span><br>    generation = <span class="hljs-keyword">new</span> Generation();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 打破屏障，并唤醒全部</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">breakBarrier</span><span class="hljs-params">()</span> </span>&#123;<br>    generation.broken = <span class="hljs-keyword">true</span>;<br>    count = parties;<br>    trip.signalAll();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="reset"><a href="#reset" class="headerlink" title="reset()"></a>reset()</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        breakBarrier();   <span class="hljs-comment">// break the current generation</span><br>        nextGeneration(); <span class="hljs-comment">// start a new generation</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将屏障重置为其初始状态，reset() 方法其实还是调用的 breakBarrier() 和 nextGeneration()，前者时打破当前代，后者是开始新的一轮。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>Q: CyclicBarrier 和 AQS 有什么关系？</strong><br><strong>A:</strong> 通过阅读源码，其实发现是使用了 ReentrantLock 互斥锁 以及 Condition 的等待唤醒功能。</p><p><strong>Q: CyclicBarrier 的实现原理是什么？</strong><br><strong>A:</strong> 内部含有两个计数，分别是 parties 和 count ，初始是二者相等，当有线程调用 await() 时，count 递减，只要 count 不为 0 ， 就会阻塞线程，直到 count 递减为 0 时，此时会所有线程一起释放，同时将 count 重置为 parties。</p><p><strong>Q: CyclicBarrier 是如何实现回环的？</strong><br><strong>A:</strong> 使用两个计数，count 递减，当 count 为 0 时，会重置为 parties，从而达到回环效果。</p><p><strong>Q: 为什么 count 的 –count 操作没有使用 CAS？</strong><br><strong>A:</strong> 因为已经 lock.lock() 了，使用了 ReentrantLock 锁能够保证 count 的原子性。</p><h4 id="CyclicBarrier-和-CountDownLatch-的区别"><a href="#CyclicBarrier-和-CountDownLatch-的区别" class="headerlink" title="CyclicBarrier 和 CountDownLatch 的区别"></a>CyclicBarrier 和 CountDownLatch 的区别</h4><ol><li>回环：CyclicBarrier 可以回环，重新计数。CountDownLatch 只能一轮。</li><li>计数器：CyclicBarrier 的计数器自己维护递减， CountDownLatch 的计数器维护则是交给使用者。</li><li>阻塞线程：CyclicBarrier 阻塞的是自身，当到达屏障后，所有被阻塞的线程一起释放。CountDownLatch 可以指定阻塞线程。</li></ol><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>本文主要介绍了 CyclicBarrier 的常用方式，通过源码方式，分析如何达到屏障以及回环的效果。不对之处，请多指正。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具册】- 给大家介绍下，这是我的流程图软件 —— draw.io</title>
      <link href="2020/09/06/source-tool-drawio.html"/>
      <url>2020/09/06/source-tool-drawio.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>之前推了一篇文章《<a href="https://mp.weixin.qq.com/s/Ktjcc_7XCPx6fU4Zn8Tmlg">十张图带大家看懂 ES 原理 ！明白为什么说：ES 是准实时的！</a>》，很多小伙伴都比较好奇在文章中的图是用的什么画图软件？看那么明显的手绘风格，当然是手画的啦！（开玩笑），其实我用的是 draw.io ，下面分享我的画图软件 —— draw.io 。</p></blockquote><h3 id="为什么需要画图？"><a href="#为什么需要画图？" class="headerlink" title="为什么需要画图？"></a>为什么需要画图？</h3><p>俗话说：“一图顶百字！”，好吧！这是我现想的俗话。</p><p>在新项目开发，技术分享，阅读代码笔记，或者面试的时候，画个流程图，架构图等等，比较直观，便于理解等。优点啥的就不多介绍了，这里主要介绍我的画图软件。</p><h4 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h4><ol><li>免费</li><li>使用方便</li><li>支持离线使用</li></ol><h4 id="用过的其他软件"><a href="#用过的其他软件" class="headerlink" title="用过的其他软件"></a>用过的其他软件</h4><ol><li>Visio：使用方便，在最开始的时候就是使用 Visio，不过只能在 Win 系统上使用。</li><li>ProcessOn：在线版，使用方便，很简洁。个人免费，不过限制文件数量。</li><li>OmniGraffle：Mac 客户端，收费，有很多功能，不过对我来说有点玩不熟练。</li><li>语雀：语雀也支持画简单的流程图。</li><li>其他一些，暂时没想起来的。</li></ol><p>体验了很多画图软件，最后还是（暂时）选择了 draw.io 。 原因很简单，支持多平台（网页/Win/Mac/Linux），开源免费，文件存储在本地，也可以选择存储位置。</p><p>下面简单介绍下 draw.io</p><h3 id="draw-io"><a href="#draw-io" class="headerlink" title="draw.io"></a>draw.io</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在线版可以直接访问 <a href="https://draw.io/">https://draw.io</a> 或者 <a href="https://app.diagrams.net/">https://app.diagrams.net/</a> 使用，进去之后如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/draw-web-FlEHBo.png" alt="draw-web-FlEHBo"></p><p>可以选择存储，当然也有离线版本，即 drawio-desktop ，下载地址：<a href="https://github.com/jgraph/drawio-desktop">https://github.com/jgraph/drawio-desktop</a></p><p>选择对应的平台下载安装即可：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/drawio-desktop-nj8Mpy.png" alt="drawio-desktop-nj8Mpy"></p><h4 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h4><p>打开 app 或者 进入 app 之后可以设置语言，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/drawio-desktop-1-sIyT2d.png" alt="drawio-desktop-1-sIyT2d"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/drawio-desktop-2-qmJ3XA.png" alt="drawio-desktop-2-qmJ3XA"></p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>都已经到这里了，就不用说怎么使用的了吧！下面展示之前画的图：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/draw-1-slJldy.png" alt="draw-1-slJldy"></p><h4 id="手绘风格"><a href="#手绘风格" class="headerlink" title="手绘风格"></a>手绘风格</h4><p>那手绘风格是怎么画的呢？</p><p>秘籍就在右侧工具栏，选中 Sketch 选项，之后图片就会变为手绘风格的了！</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/draw-2-smWIKE.png" alt="draw-2-smWIKE"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇文章主要分享我常用的画图软件，有兴趣的小伙伴可以使用试一下。软件万万千，自己用的顺手的才是最重要的。不过 draw.io 还是比较推荐的。</p><p>后续我也会分享一些其他软件工具等，有兴趣的小伙伴可以关注以下。如果有什么比较有趣或生产力软件都可以给推荐下。</p>]]></content>
      
      
      <categories>
          
          <category> 工具册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 快来看看！AQS 和  CountDownLatch 有怎么样的关系？</title>
      <link href="2020/09/06/source-code-countdownlatch.html"/>
      <url>2020/09/06/source-code-countdownlatch.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>CountDownLatch 一个同步辅助工具，同样是基于 AQS 实现，本篇文件主要是介绍 CountDownLatch 的使用，以及源码。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一个同步辅助工具，允许一个或多个线程等待，直到在其他线程中执行的一组操作完成为止</p><p>一个 CountDownLatch 初始化为给定计数。 在 await 方法阻塞，调用 countDown 方法会减少计数直到达到零，此后所有等待的线程被释放，任何后续调用 await 都会立即返回。 这是一次性的现象 - 计数不能复位。 如果你需要一个版本重置计数，请考虑使用CyclicBarrier 。</p><p>CountDownLatch 是一种通用的同步工具，可用于多种用途。 </p><ol><li>用作一个简单的开/关锁存器，或者门：所有线程调用await在门口等待，直到被调用 countDown 的线程打开。 </li><li>初始化计数为 N ，用一个线程等待，直到 N 个线程完成某项操作，或某些动作已经完成 N 次。</li></ol><p>CountDownLatch 一个有用的属性是，它不要求调用 countDown 线程等待计数到达零之前继续，它只是阻止任何线程通过await ，直到所有线程可以通过。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>在我之前 CAS 那篇文章《<a href="https://mp.weixin.qq.com/s/nSZW-bZ_snQ0ZYyzeEBJiw">从JUC源码看CAS，我做了个笔记 ……</a>》中介绍 CAS 举例时使用了 CountDownLatch，其代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CasTest</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> CountDownLatch LATCH = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> NUM_I = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> NUM_J = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> AtomicInteger NUM_K = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><br>            threadPool.execute(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10000</span>; j++) &#123;<br>                        NUM_I++;<br>                        NUM_J++;<br>                        NUM_K.incrementAndGet();<br>                    &#125;<br>                    LATCH.countDown();<br>                &#125;<br>            &#125;);<br>        &#125;<br>        LATCH.await();<br><br>        System.out.println(<span class="hljs-string">&quot;NUM_I = &quot;</span> + NUM_I);<br>        System.out.println(<span class="hljs-string">&quot;NUM_J = &quot;</span> + NUM_J);<br>        System.out.println(<span class="hljs-string">&quot;NUM_K = &quot;</span> + NUM_K.get());<br>        threadPool.shutdown();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>简单介绍下这段代码的主要逻辑及功能：</p><ol><li>CountDownLatch 初始化计数为 10 。</li><li>开 10 个线程去处理业务逻辑，业务逻辑结束会调用 LATCH.countDown() 对计数进行 -1 操作。</li><li>在 LATCH.await() 处会阻塞等待，直到 LATCH 的值为 0 ，即 10 个线程业务都处理结束。</li><li>然后主线程继续执行。</li></ol><h4 id="问题疑问"><a href="#问题疑问" class="headerlink" title="问题疑问"></a>问题疑问</h4><ol><li>CountDownLatch 和 AQS 有什么关系？</li><li>CountDownLatch 的实现原理是什么？</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/uml-VAGlMb.png" alt="uml-VAGlMb"></p><p>通过类图可以看出，CountDownLatch 内部存在一个静态类 Sync，而 Sync 继承了 AbstractQueuedSynchronizer。具体内部是如何实现的，则下面通过源码和画图一步一步的进行介绍。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CountDownLatch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;count &lt; 0&quot;</span>);<br>    <span class="hljs-keyword">this</span>.sync = <span class="hljs-keyword">new</span> Sync(count);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过初始化构造器可以看出，在 new 创建对象时必须传递一个 int 类型的非负数。实现逻辑可以看出，是创建了一个 Sync 对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">4982264981922014374L</span>;<br><br>    Sync(<span class="hljs-keyword">int</span> count) &#123;<br>        setState(count);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getState();<br>    &#125;<br><br>&#125;   <br></code></pre></td></tr></table></figure><p>之前在介绍 AQS 源码中已经介绍了 state 的含义，state 在不同子类中代表不同的含义。</p><ol><li>在 ReentrantLock 中 state 代表加锁状态，0 没有线程获得锁，大于等于 1 已经有线程获得锁，大于 1 说明该获得锁的线程多次重入。</li><li>在 ReentrantReadWriteLock 中 state 代表锁的状态。state 为 0 ，没有线程持有锁，state 的高 16 为代表读锁状态，低 16 为代表写锁状态。通过位运算可以获取读写锁的实际值。</li><li>而在这里 （CountDownLatch）则代表门闩或者说计数的值。</li></ol><h4 id="countDown"><a href="#countDown" class="headerlink" title="countDown"></a>countDown</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">countDown</span><span class="hljs-params">()</span> </span>&#123;<br>    sync.releaseShared(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>递减锁存器的计数：</p><ul><li>如果当前计数大于零，则递减。 </li><li>如果计数到达零，则释放所有等待的线程。</li><li>如果那么当前计数等于零没有任何反应。</li></ul><p>此处调用的是 AQS 的 releaseShard() 方法，释放共享资源。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AQS 代码</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">releaseShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>        doReleaseShared();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 AQS 释放共享资源方法中 <strong>tryReleaseShared(arg)</strong> 部分是在 CountDownLatch 的内部类 Sync 中实现的，代码部分如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> releases)</span> </span>&#123;<br>    <span class="hljs-comment">// Decrement count; signal when transition to zero</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">int</span> c = getState();<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">int</span> nextc = c-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>            <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>递减更新 state ，如果 state 为 0 则返回 false，否则返回 true 。</p><p>此时再对照上面 AQS 代码，发现：如果 tryReleaseShared 返回 true ，则会唤醒后续节点开始执行操作。所以也就是说，如果 state 不为 0，则不会唤醒后续节点，直到 state 为 0 。</p><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>导致当前线程等待，直到锁存器倒计数至零，除非线程被中断。</p><ul><li><p>如果当前计数为零，则此方法立即返回。</p></li><li><p>如果当前计数大于零，则当前线程用于线程调度目的，禁用并一直处于休眠状态的两件事情之一发生：</p><ul><li>因调用countDown方法使计数达到0; </li><li>其他某些线程中断当前线程。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">acquireSharedInterruptibly</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    <span class="hljs-keyword">if</span> (Thread.interrupted())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InterruptedException();<br>    <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)<br>        doAcquireSharedInterruptibly(arg);<br>&#125;<br></code></pre></td></tr></table></figure><p>AQS 定义了 tryAcquireShared 返回值分为 3 种：</p><ol><li>小于 0: 表示失败；</li><li>等于 0: 表示共享模式获取资源成功，但后续的节点不能以共享模式获取成功; </li><li>大于 0: 表示共享模式获取资源成功，后续节点在共享模式获取也可能会成功，在这种情况下，后续等待线程必须检查可用性。</li></ol><p>其中 tryAcquireShared 同样由 CountDownLatch 的内部类 Sync 中实现，内部逻辑主要是判断 state 的值，进行返回。</p><p>在内部实现中返回的值只有 1 和 -1 ，说明在 state == 0 时，返回 1 ，即唤醒后续节点。不等于 0 时，会阻塞。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (getState() == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>Q: CountDownLatch 和 AQS 有什么关系？</strong></p><p><strong>A:</strong> CountDownLatch 是基于 AQS 的共享模式实现的。</p><p><strong>Q: CountDownLatch 的实现原理是什么？</strong></p><p><strong>A:</strong> 可以参考上面的源码解析，进行总结介绍。 CountDownLatch 是基于 AQS 共享模式实现的，在初始化时必须传入计数，该计数实际上是 AQS 的 state 值。在 countDown 时对 state 进行递减，在 当 state 为 0 时 会唤醒 AQS 队列中的所有等待的节点 （因为是共享模式）。而 await 方法是判断 state 的值，如果不是 0 ，则所有线程在队列中阻塞，等待唤醒。</p><p><strong>Q: state 在代表的含义是什么？</strong><br><strong>A:</strong> </p><ol><li>在 ReentrantLock 中 state 代表加锁状态，0 没有线程获得锁，大于等于 1 已经有线程获得锁，大于 1 说明该获得锁的线程多次重入。</li><li>在 ReentrantReadWriteLock 中 state 代表锁的状态。state 为 0 ，没有线程持有锁，state 的高 16 为代表读锁状态，低 16 为代表写锁状态。通过位运算可以获取读写锁的实际值。</li><li>而在这里 （CountDownLatch）则代表门闩或者说计数的值。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Elasticsearch 技术分享】—— 十张图带大家看懂 ES 原理 ！明白为什么说：ES 是准实时的！</title>
      <link href="2020/08/29/technology-sharing-es-5.html"/>
      <url>2020/08/29/technology-sharing-es-5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>说到 Elasticsearch ，其中最明显的一个特点就是 <em>near real-time</em> 准实时 —— 当文档存储在Elasticsearch中时，将在1秒内以几乎实时的方式对其进行索引和完全搜索。那为什么说 ES 是准实时的呢？</p></blockquote><h3 id="Lucene-和-ES"><a href="#Lucene-和-ES" class="headerlink" title="Lucene 和 ES"></a>Lucene 和 ES</h3><h4 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h4><p>Lucene 是 Elasticsearch所基于的 Java 库，它引入了按段搜索的概念。</p><p>Segment： 也叫段，类似于倒排索引，相当于一个数据集。</p><p>Commit point：提交点，记录着所有已知的段。</p><p>Lucene index： “a collection of segments plus a commit point”。由一堆 Segment 的集合加上一个提交点组成。</p><p>对于一个 Lucene index 的组成，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/lucene-woYwZZ.png" alt="lucene-woYwZZ"></p><h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><p>一个 Elasticsearch Index 由一个或者多个 shard （分片） 组成。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/es-shard-TjHfGE.png" alt="es-shard-TjHfGE"></p><p>而 Lucene 中的 Lucene index 相当于 ES 的一个 shard。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/es-shard-lucene-5CpsYR.png" alt="es-shard-lucene-5CpsYR"></p><h3 id="写入过程"><a href="#写入过程" class="headerlink" title="写入过程"></a>写入过程</h3><h4 id="写入过程-1-0-（不完善）"><a href="#写入过程-1-0-（不完善）" class="headerlink" title="写入过程 1.0 （不完善）"></a>写入过程 1.0 （不完善）</h4><ol><li>不断将 Document 写入到 In-memory buffer （内存缓冲区）。</li><li>当满足一定条件后内存缓冲区中的 Documents 刷新到磁盘。</li><li>生成新的 segment 以及一个 Commit point 提交点。</li><li>这个 segment 就可以像其他 segment 一样被读取了。</li></ol><p>画图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/es-write-1-L60ip2.png" alt="es-write-1-L60ip2"></p><p>将文件刷新到磁盘是非常耗费资源的，而且在内存缓冲区和磁盘中间存在一个高速缓存（cache），一旦文件进入到 cache 就可以像磁盘上的 segment 一样被读取了。</p><h4 id="写入过程-2-0"><a href="#写入过程-2-0" class="headerlink" title="写入过程 2.0"></a>写入过程 2.0</h4><ol><li>不断将 Document 写入到 In-memory buffer （内存缓冲区）。</li><li>当满足一定条件后内存缓冲区中的 Documents 刷新到 高速缓存（<strong>cache</strong>）。</li><li>生成新的 segment ，这个 segment 还在 cache 中。</li><li>这时候还没有 commit ，但是已经可以被读取了。</li></ol><p>画图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/es-write-2-CW97xV.png" alt="es-write-2-CW97xV"></p><p>数据从 buffer 到 cache 的过程是定期每秒刷新一次。所以新写入的 Document 最慢 1 秒就可以在 cache 中被搜索到。</p><p>而 Document 从 buffer 到 cache 的过程叫做 <strong>?refresh</strong> 。一般是 1 秒刷新一次，不需要进行额外修改。当然，如果有修改的需要，可以参考文末的相关资料。这也就是为什么说 Elasticsearch 是<strong>准实时</strong>的。</p><p>使文档立即可见：</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs Json">PUT /test/_doc/1?refresh<br>&#123;<span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>&#125;<br><br><span class="hljs-comment">// 或者</span><br>PUT /test/_doc/2?refresh=true<br>&#123;<span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="Translog-事务日志"><a href="#Translog-事务日志" class="headerlink" title="Translog 事务日志"></a>Translog 事务日志</h4><p>此处可以联想 Mysql 的 binlog， ES 中也存在一个 translog 用来失败恢复。</p><ol><li>Document 不断写入到 In-memory buffer，此时也会追加 translog。</li><li>当 buffer 中的数据每秒 refresh 到 cache 中时，translog 并没有进入到刷新到磁盘，是持续追加的。</li><li>translog 每隔 5s 会 fsync 到磁盘。</li><li>translog 会继续累加变得越来越大，当 translog 大到一定程度或者每隔一段时间，会执行 flush。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/es-write-translog-1-L8RWwm.png" alt="es-write-translog-1-L8RWwm"></p><p>flush 操作会分为以下几步执行：</p><ol><li>buffer 被清空。</li><li>记录 commit point。</li><li>cache 内的 segment 被 fsync 刷新到磁盘。</li><li>translog 被删除。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/es-write-translog-2-BWnz3P.png" alt="es-write-translog-2-BWnz3P"></p><p>值得注意的是：</p><ol><li>translog 每 5s 刷新一次磁盘，所以故障重启，可能会丢失 5s 的数据。</li><li>translog 执行 flush 操作，默认 30 分钟一次，或者 translog 太大 也会执行。</li></ol><p>手动执行flush：</p><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs json">POST /my-index-000001/_flush<br></code></pre></td></tr></table></figure><h3 id="删除和更新"><a href="#删除和更新" class="headerlink" title="删除和更新"></a>删除和更新</h3><p>segment 不可改变，所以 docment 并不能从之前的 segment 中移除或更新。</p><p>所以每次 commit， 生成 commit point 时，会有一个 .del 文件，里面会列出被删除的 document（逻辑删除）。<br>而查询时，获取到的结果在返回前会经过 .del 过滤。</p><p>更新时，也会标记旧的 docment 被删除，写入到 .del 文件，同时会写入一个新的文件。此时查询会查询到两个版本的数据，但在返回前会被移除掉一个。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/es-del-1-nc0mKK.png" alt="es-del-1-nc0mKK"></p><h3 id="segment-合并"><a href="#segment-合并" class="headerlink" title="segment 合并"></a>segment 合并</h3><p>每 1s 执行一次 refresh 都会将内存中的数据创建一个 segment。</p><p>segment 数目太多会带来较大的麻烦。 每一个 segment 都会消耗文件句柄、内存和cpu运行周期。更重要的是，每个搜索请求都必须轮流检查每个 segment ；所以 segment 越多，搜索也就越慢。</p><p>在 ES 后台会有一个线程进行 segment 合并。</p><ol><li>refresh操作会创建新的 segment 并打开以供搜索使用。</li><li>合并进程选择一小部分大小相似的 segment，并且在后台将它们合并到更大的 segment 中。这并不会中断索引和搜索。</li><li>当合并结束，老的 segment 被删除 说明合并完成时的活动：<ol><li>新的 segment 被刷新（flush）到了磁盘。  写入一个包含新 segment 且排除旧的和较小的 segment的新 commit point。</li><li>新的 segment 被打开用来搜索。</li><li>老的 segment 被删除。</li></ol></li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/segment-merge-55A1b6.png" alt="segment-merge-55A1b6"></p><p>物理删除：</p><p>在 segment merge 这块，那些被逻辑删除的 document 才会被真正的物理删除。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>主要介绍了内部写入和删除的过程，需要了解 refresh、fsync、flush、.del、segment merge 等名词的具体含义。</p><p>完整画图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/all-FMAPTS.png" alt="all-FMAPTS"></p><p>以上就是个人分享的 ES 相关的内容，主要目的是组内技术分享，进行扫盲。不对之处，希望大家留言指正。</p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ol><li>准实时搜索： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.9/near-real-time.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.9/near-real-time.html</a></li><li>Refresh API：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.9/indices-refresh.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.9/indices-refresh.html</a></li><li>Flush API：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.9/indices-flush.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.9/indices-flush.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Elasticsearch 技术分享】—— ES 查询检索数据的过程，是什么样子的？</title>
      <link href="2020/08/26/technology-sharing-es-4.html"/>
      <url>2020/08/26/technology-sharing-es-4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>ES 使用过程中常用的就是查询以及检索，那查询和检索的过程，什么样的呢？</p></blockquote><h3 id="查询流程"><a href="#查询流程" class="headerlink" title="查询流程"></a>查询流程</h3><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs json">GET my-index/_doc/0<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/fJmmvi-T7hz9J.png" alt="fJmmvi-T7hz9J"></p><ol><li>Client 将请求发送到任意节点 node，此时 node 节点就是<strong>协调节点</strong>（coordinating node）。</li><li>协调节点对 id 进行路由，从而判断该数据在哪个shard。</li><li>在 primary shard 和 replica shard 之间 随机选择一个，请求获取 doc。</li><li>接收请求的节点会将数据返回给<strong>协调节点</strong>，协调节点会将数据返回给Client。</li></ol><p>可以通过 preference 参数指定执行操作的节点或分片。默认为随机。</p><h3 id="检索流程"><a href="#检索流程" class="headerlink" title="检索流程"></a>检索流程</h3><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs json">GET /my-index/_search <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/w1lGEZ-TgHyvN.png" alt="w1lGEZ-TgHyvN"></p><ol><li>Client 将请求发送到任意节点 node，此时 node 节点就是<strong>协调节点</strong>（coordinating node）</li><li>协调节点进行分词等操作后，去查询所有的 shard （primary shard 和 replica shard 选择一个）</li><li>所有 shard 将满足条件的数据 id 排序字段 等信息返回给路由节点</li><li>路由节点重新进行排序，截取数据后，获取到真正需要返回的数据的 id</li><li>路由节点再次请求对应的 shard （此时有 id 了，可以直接定位到对应shard）</li><li>获取到全量数据，返回给 Client</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>主要介绍了 ES 查询以及检索的流程，不足及错误之处欢迎指正。</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ol><li>协调节点：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.9/modules-node.html#coordinating-node">https://www.elastic.co/guide/en/elasticsearch/reference/7.9/modules-node.html#coordinating-node</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Elasticsearch 技术分享】—— Elasticsearch 存储一条数据， put 过程是什么样子的？</title>
      <link href="2020/08/26/technology-sharing-es-3.html"/>
      <url>2020/08/26/technology-sharing-es-3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>在前面已经介绍了 ES 中常用的一些名词，知道了数据是存储在 shard 中的，而 index 会映射一个或者多个 shard 。那这时候我要存储一条数据到某个索引下，这条数据是在哪个 index 下的呢？</p></blockquote><h3 id="ES-演示"><a href="#ES-演示" class="headerlink" title="ES 演示"></a>ES 演示</h3><p>一切按照官方教程使用 三条命令，在本机启动三个节点组装成伪集群。</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">~  % &gt; ./elasticsearch<br><br>~  % &gt; ./elasticsearch -Epath.data=data2 -Epath.logs=log2<br><br>~  % &gt; ./elasticsearch -Epath.data=data3 -Epath.logs=log3<br></code></pre></td></tr></table></figure><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X PUT <span class="hljs-string">&quot;localhost:9200/my-index-000001?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;settings&quot;: &#123;</span><br><span class="hljs-string">    &quot;index&quot;: &#123;</span><br><span class="hljs-string">      &quot;number_of_shards&quot;: 3,  </span><br><span class="hljs-string">      &quot;number_of_replicas&quot;: 2 </span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>当前版本 7.9</p><p>文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html</a></p><p>ES 默认 number_of_shards 为 1<br>默认 number_of_replicas 为 1，即一个分片只有一个副本</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/put-index-0-dyP7ph.png" alt="put-index-0-dyP7ph"></p><p>下面命令可以查看索引信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/_cat/indices/my-index-000001?v&amp;s=index&amp;pretty&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/put-index-1-VKKT73.png" alt="put-index-1-VKKT73"></p><h4 id="存放数据"><a href="#存放数据" class="headerlink" title="存放数据"></a>存放数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X PUT <span class="hljs-string">&quot;localhost:9200/my-index-000001/_doc/0825?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;name&quot;: &quot;liuzhihang&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/put-1-vJVlLn.png" alt="put-1-vJVlLn"></p><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/my-index-000001/_doc/0825?pretty&quot;</span><br></code></pre></td></tr></table></figure><p>文档地址：<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/put-2-JwDffk.png" alt="put-2-JwDffk"></p><h3 id="一条数据该存放在哪个-shard"><a href="#一条数据该存放在哪个-shard" class="headerlink" title="一条数据该存放在哪个 shard"></a>一条数据该存放在哪个 shard</h3><p>通过命令可以看出：在存放数据时并没有指定到哪个 shard，那数据是存在哪里的呢？</p><p>当一条数据进来，会默认会根据 id 做路由</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">shard &#x3D; hash(routing) % number_of_primary_shards<br></code></pre></td></tr></table></figure><p>从而确定存放在哪个 shard。 routing 默认是 _id， 也可以设置其他。</p><p>这个 id 可以自己指定也可以系统给生成, 如果不指定则会系统自动生成。</p><h3 id="put-一条数据的过程是什么样的？"><a href="#put-一条数据的过程是什么样的？" class="headerlink" title="put 一条数据的过程是什么样的？"></a>put 一条数据的过程是什么样的？</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/OxOQ9V-S0Wt6P.png" alt="OxOQ9V-S0Wt6P"></p><p>写入过程主要分为三个阶段</p><ol><li>协调阶段：Client 客户端选择一个 node 发送 put 请求，此时当前节点就是<strong>协调节点</strong>（coordinating node）。协调节点根据 document 的 id 进行路由，将请求转发给对应的 node。这个 node 上的是 primary shard 。</li><li>主要阶段：对应的 primary shard 处理请求，写入数据 ，然后将数据同步到 replica shard。<ol><li>primary shard 会验证传入的数据结构</li><li>本地执行相关操作</li><li>将操作转发给 replica shard</li><li>当数据写入 primary shard 和 replica shard 成功后，路由节点返回响应给 Client。</li></ol></li><li>副本阶段：每个 replica shard 在转发后，会进行本地操作。</li></ol><p>在写操作时，默认情况下，只需要 primary shard 处于活跃状态即可进行操作。</p><p>在索引设置时可以设置这个属性</p><p>index.write.wait_for_active_shards</p><p>默认是 1，即 primary shard 写入成功即可返回。 </p><p>如果设置为 all 则相当于 number_of_replicas+1  就是 primary shard 数量 + replica shard 数量。 就是需要等待 primary shard 和 replica shard 都写入成功才算成功。</p><p>可以通过索引设置动态覆盖此默认设置。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="如何查看数据在哪个-shard-上呢？"><a href="#如何查看数据在哪个-shard-上呢？" class="headerlink" title="如何查看数据在哪个 shard 上呢？"></a>如何查看数据在哪个 shard 上呢？</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/my-index-000001/_search_shards?routing=0825&amp;pretty&quot;</span><br></code></pre></td></tr></table></figure><p>通过上面命令可以查到数据 0825 的所在 shard。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/put-index-3-JIP0zD.png" alt="put-index-3-JIP0zD"></p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ol><li>ES 创建索引：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html</a></li><li>ES 查询数据：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html</a></li><li>ES 检索 shard：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-shards.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-shards.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Elasticsearch 技术分享】—— ES 常用名词及结构</title>
      <link href="2020/08/23/technology-sharing-es-2.html"/>
      <url>2020/08/23/technology-sharing-es-2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>看完什么是 Elasticsearch 以及了解到了倒排索引的概念，下面就熟悉下 ES 中常用的一些名词。</p></blockquote><h3 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h3><table><thead><tr><th><strong>名词</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td><strong>cluster</strong></td><td>一个或者多个 node 指定相同的 cluster name，则它们会组成集群，并且自动选举 master，以及在故障时自动选举。</td></tr><tr><td><strong>node</strong></td><td>节点是属于集群的Elasticsearch的运行实例 。在启动时，节点将使用单播来发现具有相同集群名称的现有集群，并将尝试加入该集群。</td></tr><tr><td><strong>index</strong></td><td>类似关系数据库的表，映射一个或者多个主分片，同时拥有零个或多个副本分片。</td></tr><tr><td><strong>index alias</strong></td><td>索引别名是用于引用一个或多个现有索引的辅助名称。大多数Elasticsearch API接受索引别名代替索引名称。</td></tr><tr><td><strong>mapping</strong></td><td>每个 index 都有一个 mapping ，定义一个 type 以及许多索引范围的设置。mapping 可以明确定义，也可以在为文档建立索引后自动生成。</td></tr><tr><td><strong>shard</strong></td><td>分片是单个Lucene实例。最小的工作单位，由Elasticsearch自动管理。索引是指向主分片和副本分片的逻辑命名空间。</td></tr><tr><td><strong>primary shard</strong></td><td>每个文档都存储在一个主分片中。当您为文档建立索引时，将首先在主 shard 上建立索引，然后在主 shard 的所有副本上建立索引。默认情况下，索引具有一个主分片。您可以指定更多的主要分片来扩展 索引可以处理的文档数量。创建索引后，您将无法更改索引中的主要分片数量。但是，可以使用split API将索引拆分为新索引 。</td></tr><tr><td><strong>replica shard</strong></td><td>每个主分片可以具有零个或多个副本。副本是 primary shard 的副本。</td></tr><tr><td><strong>document</strong></td><td>document 是存储在 Elasticsearch 中的 JSON 文档。每个 document 都存储在索引中，并且有 type 和 id。被索引的 JSON 文档 将存储在 _source 字段中，该字段在获取或搜索文档时默认返回。</td></tr><tr><td><strong>id</strong></td><td>每个 document 都有不同的 id，没有指定的话，会自动生成。</td></tr><tr><td><strong>field</strong></td><td>一个 document 包含字段或键值对的列表。字段类似于关系数据库中表中的列。</td></tr><tr><td><strong>source field</strong></td><td>默认情况下，索引的JSON文档存储在 _source 字段中，并且将由所有 get 和 search 请求返回。这样，可以直接从搜索结果中访问原始对象，而无需执行第二步来从 ID 中检索对象。</td></tr></tbody></table><p>画图出来就是下面这个样子</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/CWbmcX-mPCKR6.png" alt="CWbmcX-mPCKR6"></p><h3 id="replica-shard-有什么用？"><a href="#replica-shard-有什么用？" class="headerlink" title="replica shard 有什么用？"></a>replica shard 有什么用？</h3><ol><li><p>增加故障转移：如果主副本发生故障，副本副本可以提升为主副本</p></li><li><p>提高性能：获取和搜索请求可以由主或副本分片处理。</p><p> 默认情况下，每个主分片都有一个副本，但是可以在现有索引上动态更改副本的数量。副本分片永远不会与其主分片在同一节点上启动。</p></li></ol><p>除了定义索引应具有的主分片和副本分片的数量外，您无需直接引用分片。相反，您的代码应仅处理索引。</p><p>Elasticsearch 在 集群中的所有节点之间分配分片，并且在节点发生故障或添加新节点的情况下，可以自动将分片从一个节点移动到另一个节点。</p><p>分片 默认是 5个，副本默认为 1个。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章简单介绍了 ES 的常用名词，因为只有了解到这些名词，在小伙伴讨论 ES 的时候，才不会一脸懵逼。</p>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Elasticsearch 技术分享】—— Elasticsearch ？倒排索引？这都是什么？</title>
      <link href="2020/08/18/technology-sharing-es-1.html"/>
      <url>2020/08/18/technology-sharing-es-1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>革命同志是块砖，哪里需要哪里搬！这不，老大发话，要我在组内做一个 Elasticsearch 技术分享。这不话题一转，开始看起来 ES 了。虽然很久之前用过 ELK 做过日志监控系统，但是毕竟时隔已久，还是得从头看起。当然手头的活也不能停，话不多说，开始分享。先看看什么是 ES？</p></blockquote><h3 id="什么是ES"><a href="#什么是ES" class="headerlink" title="什么是ES"></a>什么是ES</h3><p>Elasticsearch 是分布式搜索和分析引擎。</p><p>Elasticsearch 为所有类型的数据提供<strong>近实时（near real-time）</strong>的搜索和分析。</p><p>常用场景：</p><ol><li>网站搜索</li><li>ELK 日志采集，存储，分析</li><li>地理信息系统分析</li></ol><p>像下图中使用的设计：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/HiP4n4-mnRdVv.png" alt="HiP4n4-mnRdVv"></p><p>特点：</p><ol><li>ES是一个分布式文档存储，存储的数据都是序列化为 JSON documents 。</li><li>使用<strong>倒排索引</strong>存储数据，倒排索引比较适合全文本搜索。</li><li>基于<strong>Apache Lucene</strong>搜索引擎库，可以存储，检索文档及元数据。</li><li>支持 JSON 样式的查询语言——Query DSL，也支持 SQL 样式的查询。</li><li>集群部署，易于扩展。节点（node）分片（shard），将新的 node 添加到集群时，ES 会自动迁移 shard 到新 node 上，重新平衡集群。<ol><li>shard 分为两种 主分片（primary shard）和 副本分片 （replica shard）</li><li>replica shard 存放的是 primary shard 的冗余副本 —— 可以防止集群故障，数据丢失，同时可以提高搜索或检索速度。</li><li>在创建索引时 primary shard 数量是固定的，而replica shard 数量是可以更改的。</li><li>分片由索引配置，分片越多，维护索引则开销则越大，分片大小越大，则 ES 在增减节点重新平衡集群时，分片移动时间越长。</li></ol></li><li>集群恢复： 跨集群复制 （CCR），可以自动将索引从主集群同步到热备份的辅助远程集群。</li></ol><h3 id="什么是倒排索引？"><a href="#什么是倒排索引？" class="headerlink" title="什么是倒排索引？"></a>什么是倒排索引？</h3><p>倒排索引也可以成为反向索引。</p><p>作为开发咱们经常接触到的就是 MySql，假设有一堆技术书籍，并且已经编上号。</p><ol><li>Java 并发编程之美</li><li>Java 开发手册</li><li>深入分布式缓存</li><li>Java 并发程序设计</li><li>算法</li><li>数据结构与算法</li></ol><ul><li>如果放在 MySql 里面就是这样</li></ul><table><thead><tr><th>id</th><th>book_name</th></tr></thead><tbody><tr><td>1</td><td>Java 并发编程之美</td></tr><tr><td>2</td><td>Java 开发手册</td></tr><tr><td>3</td><td>深入分布式缓存</td></tr><tr><td>4</td><td>Java 并发程序设计</td></tr><tr><td>5</td><td>算法</td></tr><tr><td>6</td><td>数据结构与算法</td></tr></tbody></table><p>此时我想查询所有关于 <strong>并发</strong> 的书籍。</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> table_book <span class="hljs-keyword">where</span> book_name <span class="hljs-keyword">like</span> %并发%;<br></code></pre></td></tr></table></figure><p>然后会开始遍历表格，查找到 1和4两条记录。</p><ul><li>如果是倒排索引处理的话</li></ul><p>首先会将每个名称进行分词，比如 <code>Java 并发编程之美</code> 会被分为 <code>Java</code> <code>并发</code> <code>编程</code> <code>之</code> <code>美</code>。<br>分词结束之后按照词关联书籍的编号。</p><table><thead><tr><th>term</th><th>ids</th></tr></thead><tbody><tr><td>Java</td><td>1、2、4</td></tr><tr><td>并发</td><td>1、4</td></tr><tr><td>编程</td><td>1</td></tr><tr><td>算法</td><td>5、6</td></tr><tr><td>分布式</td><td>3</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>在倒排索引中搜索<strong>并发</strong>，然后进行检索，就很容易定位到关于<strong>并发</strong>书籍的编号。</p><h3 id="那什么是-Lucene？"><a href="#那什么是-Lucene？" class="headerlink" title="那什么是 Lucene？"></a>那什么是 Lucene？</h3><p>Lucene 可以理解为一个开源的、高性能、可伸缩的信息搜索库。使用 Java 开发，封装了各种倒排索引和搜索的API。相当于一个组件。</p><p>而 ES 就是在 Lucene 之上进行的开发，从而可以<strong>高可用</strong>、<strong>集群部署</strong>、<strong>故障迁移</strong>、<strong>备份容灾</strong>等。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>就这么多，先知道个 ES 是干嘛的。后续再慢慢看、慢慢总结。</p>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 除了读写锁，JUC 下面还有个 StampedLock！还不过来了解一下么？</title>
      <link href="2020/08/09/source-code-stamped-lock.html"/>
      <url>2020/08/09/source-code-stamped-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>在了解完 ReentrantLock 和 ReentrantReadWriteLock 之后，惊奇的发现 JUC 下还有一个 StampedLock 。 查阅资料发现是 JDK8 新增的一个锁。现在已经 JDK15 了，原谅我的孤陋寡闻，实在是业务开发中用的太少。那行吧，赶紧来看一下 StampedLock 到底是什么？为什么有了 ReentrantLock 和 ReentrantReadWriteLock 之后还要设计一个 StampedLock ？</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="往期回顾"><a href="#往期回顾" class="headerlink" title="往期回顾"></a>往期回顾</h4><p>在介绍 StampedLock 之前还是先看一下 ReentrantLock 和 ReentrantReadWriteLock。</p><p>ReentrantLock：互斥锁，同时只有一个线程可以持有。支持锁重入。</p><p>ReentrantReadWriteLock：读写锁，分为读锁和写锁，支持重入。其中读读共享，写写独占，读写互斥，写读互斥。支持锁降级，线程获取写锁后可以降级为读锁。适合读多写少的场景。</p><p>那为什么要设计 StampedLock 呢？先来看一下源码上的注释：</p><h4 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h4><p>基于功能的锁，具有三种模式来控制读/写访问。StampedLock的状态由版本和模式组成。锁获取方法返回一个 stamp 用来表示并控制锁状态的访问；这些方法的“try”版本可能会返回特殊值零，以表示无法获取访问权限。<br>锁的释放和转换方法需要使用 stamp 作为参数，如果它们与锁的状态不匹配，则会失败。</p><p>三种模式是：写锁、读锁、乐观读锁。</p><p>并且具有以下特征：</p><ol><li>获取锁的时候（无论读锁还是写锁或者乐观读锁）都会返回一个 stamp，在释放锁的时候需要使用这个 stamp；</li><li>支持三种模式转换；</li><li>不是可重入的，所以获得锁的时候，不要尝试再次获取。</li></ol><h4 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/8/6 15:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Count</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StampedLock stampedLock = <span class="hljs-keyword">new</span> StampedLock();<br><br>    <span class="hljs-comment">// 使用写锁，在对 num 进行写入的时候加锁</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> stamp = stampedLock.writeLock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            num += x;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            stampedLock.unlockWrite(stamp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 乐观读</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 获取乐观读锁；返回 stamp</span><br>        <span class="hljs-keyword">long</span> stamp = stampedLock.tryOptimisticRead();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// validate 验证是否被写锁持有</span><br>            <span class="hljs-comment">// 没有被写锁持有，可以直接返回</span><br>            <span class="hljs-keyword">if</span> (!stampedLock.validate(stamp)) &#123;<br>                <span class="hljs-comment">// 被写锁持有，那只能获取读锁</span><br>                stamp = stampedLock.readLock();<br>            &#125;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            stampedLock.unlockRead(stamp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">convertWrite</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-comment">// 读</span><br>        <span class="hljs-keyword">long</span> stamp = stampedLock.readLock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (num == x) &#123;<br>                <span class="hljs-comment">// 满足条件，转换为写锁</span><br>                <span class="hljs-keyword">long</span> ws = stampedLock.tryConvertToWriteLock(stamp);<br>                <span class="hljs-comment">// 转为写锁成功</span><br>                <span class="hljs-keyword">if</span> (ws != <span class="hljs-number">0L</span>) &#123;<br>                    stamp = ws;<br>                    num = x;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 转换失败，释放读锁</span><br>                    stampedLock.unlockRead(stamp);<br>                    <span class="hljs-comment">// 再次获取写锁</span><br>                    stamp = stampedLock.writeLock();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            stampedLock.unlock(stamp);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>写锁使用方法一样；</li><li>乐观读，可以先去读数据，发现没有改变可以返回，发现改变了，则重新获取读锁，然后再返回；</li><li>读锁可以升级为写锁，通过 tryConvertToWriteLock 方法。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/StampedLock-uml-Wq0Jz2.png" alt="StampedLock-uml-Wq0Jz2"></p><p>通过 UML 可以看出 StampedLock 和 AQS 并无任何关系。</p><h4 id="StampedLock-和-ReentrantReadWriteLock-的区别？"><a href="#StampedLock-和-ReentrantReadWriteLock-的区别？" class="headerlink" title="StampedLock 和 ReentrantReadWriteLock 的区别？"></a>StampedLock 和 ReentrantReadWriteLock 的区别？</h4><ol><li>StampedLock 也是读写锁，但是和 AQS 没有关系</li><li>StampedLock 除了 读锁和写锁，还有一个乐观读。</li><li>StampedLock 的读锁可以升级为写锁。</li><li>StampedLock 不支持锁重入。</li></ol><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>本文主要介绍 StampedLock 的相关使用及和 ReentrantReadWriteLock 的区别。</p><p>因为工作确实很少使用，阅读源码，内部自旋逻辑等有很多。如果介绍的话会篇幅特别长，这里就省略了。有兴趣的小伙伴可以自己阅读源码。</p><p>因为 StampedLock 提供的乐观读锁支持，所以在多线程多读情况下，性能比 ReentrantReadWriteLock 要更好，但是需要注意的是 StampedLock 是不支持锁重入的。</p><p>另一个需要记住的就是 StampedLock 和 AQS 并没有什么关系，它是在自己内部维护了一个双向阻塞队列。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA插件开发常用API</title>
      <link href="2020/08/01/idea-plugin-development-common-api.html"/>
      <url>2020/08/01/idea-plugin-development-common-api.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在开发Toolkit过程中查阅相关资料和阅读其他开源项目总结的一些常用API.<br>整体内容来源于网络, 以及自己使用开发Toolkit过程中使用到的.<br>总结的不到位的地方欢迎指正.</p></blockquote><h3 id="AnAction操作"><a href="#AnAction操作" class="headerlink" title="AnAction操作"></a>AnAction操作</h3><ol><li>创建Action集成<code>AnAction</code>并实现其<code>actionPerformed</code>方法. 在方法中可以获取到<code>AnActionEvent</code>对象. 代码如下:</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonFormatAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AnAction</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(AnActionEvent event)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 获取当前project对象</span><br>        Project project = event.getData(PlatformDataKeys.PROJECT);<br>        <span class="hljs-comment">// 获取当前编辑的文件, 可以进而获取 PsiClass, PsiField 对象</span><br>        PsiFile psiFile = event.getData(CommonDataKeys.PSI_FILE);<br>        Editor editor = event.getData(CommonDataKeys.EDITOR);<br>        <span class="hljs-comment">// 获取Java类或者接口</span><br>        PsiClass psiClass = getTargetClass(editor, psiFile);<br>        <span class="hljs-comment">// 创建并调起 DialogWrapper</span><br>        DialogWrapper dialog = <span class="hljs-keyword">new</span> JsonFormat(project, psiFile, editor, psiClass);<br>        dialog.show();<br>    &#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>其他方式</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取project. 内部调用 getData(CommonDataKeys.PROJECT) = getDataContext().getData(CommonDataKeys.PROJECT)</span><br>Project project = e.getProject();<br><span class="hljs-comment">// 获取数据上下文</span><br>DataContext dataContext = e.getDataContext();<br><span class="hljs-comment">// context可以也获取到其他信息, 入参为 PlatformDataKeys 定义的字段</span><br>Project project1 = dataContext.getData(PlatformDataKeys.PROJECT);<br>Editor editor = dataContext.getData(PlatformDataKeys.EDITOR);<br>PsiFile psiFile = dataContext.getData(PlatformDataKeys.PSI_FILE);<br>PsiElement psiElement = dataContext.getData(PlatformDataKeys.PSI_ELEMENT);<br><span class="hljs-comment">// 虚拟文件</span><br>VirtualFile virtualFile = dataContext.getData(PlatformDataKeys.VIRTUAL_FILE);<br></code></pre></td></tr></table></figure><h3 id="获取PsiClass"><a href="#获取PsiClass" class="headerlink" title="获取PsiClass"></a>获取PsiClass</h3><p>PsiClass为java类或者接口</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> PsiClass <span class="hljs-title">getTargetClass</span><span class="hljs-params">(Editor editor, PsiFile file)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> offset = editor.getCaretModel().getOffset();<br>    PsiElement element = file.findElementAt(offset);<br>    <span class="hljs-keyword">if</span> (element == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        PsiClass target = PsiTreeUtil.getParentOfType(element, PsiClass.class);<br>        <span class="hljs-keyword">return</span> target <span class="hljs-keyword">instanceof</span> SyntheticElement ? <span class="hljs-keyword">null</span> : target;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Psixxx操作"><a href="#Psixxx操作" class="headerlink" title="Psixxx操作"></a>Psixxx操作</h3><h4 id="PsiClass操作API"><a href="#PsiClass操作API" class="headerlink" title="PsiClass操作API"></a>PsiClass操作API</h4><p>源码有注释且比较清楚, 此处仅记录我用到的一部分</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取全类名</span><br>String qualifiedName = aClass.getQualifiedName();<br><span class="hljs-comment">// 获取所有字段</span><br>PsiField[] fields = aClass.getFields();<br></code></pre></td></tr></table></figure><h4 id="PsiField操作"><a href="#PsiField操作" class="headerlink" title="PsiField操作"></a>PsiField操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取字段名</span><br>String name = psiField.getName()<br></code></pre></td></tr></table></figure><h4 id="PsiElement操作"><a href="#PsiElement操作" class="headerlink" title="PsiElement操作"></a>PsiElement操作</h4><p>PsiClass和PsiField都实现了PsiElement</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除</span><br>element.delete()<br><span class="hljs-comment">// 添加元素, 向一个类中添加方法, 字段等, 也可以调用 addBefore, addAfter</span><br>add(PsiElement element)<br></code></pre></td></tr></table></figure><h4 id="PsiType操作"><a href="#PsiType操作" class="headerlink" title="PsiType操作"></a>PsiType操作</h4><p>PsiType支持常用基本类型, 但是当创建对象时则不支持.需要自己创建</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">PsiElementFactory psiElementFactory = JavaPsiFacade.getElementFactory(project);<br><span class="hljs-comment">// String 类型</span><br>PsiType stringPsiType = psiElementFactory.createTypeFromText(<span class="hljs-string">&quot;java.lang.String&quot;</span>, <span class="hljs-keyword">null</span>)<br><span class="hljs-comment">// list</span><br>PsiType listPsiType = psiElementFactory.createTypeFromText(<span class="hljs-string">&quot;java.util.List&lt;String&gt;&quot;</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-comment">// 自定义list</span><br>PsiType typeFromText = psiElementFactory.createTypeFromText(<span class="hljs-string">&quot;java.util.List&lt;&quot;</span> + className + <span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><h3 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h3><h4 id="XML-文件操作"><a href="#XML-文件操作" class="headerlink" title="XML 文件操作"></a>XML 文件操作</h4><p>参考地址：<a href="https://jetbrains.org/intellij/sdk/docs/reference_guide/frameworks_and_external_apis/xml_dom_api.html">https://jetbrains.org/intellij/sdk/docs/reference_guide/frameworks_and_external_apis/xml_dom_api.html</a></p><p>以 Mapper.xml 举例声明接口，继承 DomElement，并配合 @Attribute、@SubTag 、@SubTagsList 注解定义一个 xml model，其中需要注意 @SubTagsList 方法要使用复数形式。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Mapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DomElement</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * namespace</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Attribute(&quot;namespace&quot;)</span><br>    <span class="hljs-function">GenericAttributeValue&lt;String&gt; <span class="hljs-title">getNamespace</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 增删改查对应的节点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SubTagsList(&#123;&quot;select&quot;, &quot;insert&quot;, &quot;update&quot;, &quot;delete&quot;&#125;)</span><br>    <span class="hljs-function">List&lt;Statement&gt; <span class="hljs-title">getStatements</span><span class="hljs-params">()</span></span>;<br>​<br>    <span class="hljs-meta">@SubTagList(&quot;select&quot;)</span><br>    <span class="hljs-function">List&lt;Select&gt; <span class="hljs-title">getSelects</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-meta">@SubTagList(&quot;insert&quot;)</span><br>    <span class="hljs-function">List&lt;Insert&gt; <span class="hljs-title">getInserts</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-meta">@SubTagList(&quot;update&quot;)</span><br>    <span class="hljs-function">List&lt;Update&gt; <span class="hljs-title">getUpdates</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-meta">@SubTagList(&quot;delete&quot;)</span><br>    <span class="hljs-function">List&lt;Delete&gt; <span class="hljs-title">getDeletes</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h4><p>比如想搜索项目中的所有 xml 文件，上面使用 Mapper 接口定义了 Mapper.xml 的结构，就可以利用 DomService 搜索所有的 Mapper.xml：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 当前项目的所有元素 mapper, 分别填入类型, 作用域 GlobalSearchScope</span><br>List&lt;DomFileElement&lt;Mapper&gt;&gt; fileElements = DomService.getInstance().getFileElements(Mapper.class, project, GlobalSearchScope.allScope(project));<br></code></pre></td></tr></table></figure><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>需要调用<code>WriteCommandAction</code>进行异步写入.</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">WriteCommandAction.runWriteCommandAction(project, () -&gt; &#123;<br>    doGenerate(psiClass, jsonObject);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>在操作成功之后，在 IDEA 右下角通知用户，使用 NotificationGroup 类即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 静态属性</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> NotificationGroup NOTIFICATION_GROUP = <span class="hljs-keyword">new</span> NotificationGroup(<span class="hljs-string">&quot;Java2Json.NotificationGroup&quot;</span>, NotificationDisplayType.BALLOON, <span class="hljs-keyword">true</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> AnActionEvent e)</span> </span>&#123;<br>    <span class="hljs-comment">// 在方法中调用</span><br>    Notification success = NOTIFICATION_GROUP.createNotification(message, NotificationType.INFORMATION);<br>    Notifications.Bus.notify(success, project);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>也可以定义为工具类，如下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 进行消息通知工具类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/2/28 18:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotificationUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> NotificationGroup notificationGroup = <span class="hljs-keyword">new</span> NotificationGroup(<span class="hljs-string">&quot;ApiDoc.NotificationGroup&quot;</span>, NotificationDisplayType.BALLOON, <span class="hljs-keyword">true</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">warnNotify</span><span class="hljs-params">(String message, Project project)</span> </span>&#123;<br>        Notifications.Bus.notify(notificationGroup.createNotification(message, NotificationType.WARNING), project);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infoNotify</span><span class="hljs-params">(String message, Project project)</span> </span>&#123;<br>        Notifications.Bus.notify(notificationGroup.createNotification(message, NotificationType.INFORMATION), project);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">errorNotify</span><span class="hljs-params">(String message, Project project)</span> </span>&#123;<br>        Notifications.Bus.notify(notificationGroup.createNotification(message, NotificationType.ERROR), project);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>基本上常用的就是这些了，也可以查找官方文档，官方文档现在还是比较全面的，地址在相关资料中。也可以 Clone Toolkit 这个插件源码，源码中有一些注释。在其他优秀的插件中，同样可有相关使用方法。</p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ul><li>Toolkit: <a href="https://github.com/liuzhihang/toolkit">https://github.com/liuzhihang/toolkit</a></li><li>copy-as-json: <a href="https://github.com/liuzhihang/copy-as-json">https://github.com/liuzhihang/copy-as-json</a></li><li>IntelliJ Platform SDK: <a href="https://jetbrains.org/intellij/sdk/docs/intro/welcome.html">https://jetbrains.org/intellij/sdk/docs/intro/welcome.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具册】- IDEA 插件找不到？看这里！那就自己敲一个！</title>
      <link href="2020/07/29/tool-book-copy-as-json.html"/>
      <url>2020/07/29/tool-book-copy-as-json.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>大家都经常使用 IDEA 进行开发，肯定会使用一些 IDEA 插件，我之前也写过两个插件，不过已经很久没有更新了，就让它先放着吧！</p><p>那小伙伴你是否想亲手写一个插件，或者你是否有一些插件的想法，但是找不到插件。那就自己实现一个吧！</p></blockquote><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="使用-Gradle-创建"><a href="#使用-Gradle-创建" class="headerlink" title="使用 Gradle 创建"></a>使用 Gradle 创建</h4><p>写插件，先从创建项目开始：</p><p><code>File</code> -&gt; <code>New</code> -&gt; <code>Project...</code></p><ul><li>这里使用 Gradle，其中 Java 已经默认选中，咱们再额外选择 <strong>IntelliJ Platform Plugin</strong>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/create-CS5lN3.png" alt="create-CS5lN3"></p><ul><li>点击 <strong>Next</strong> ，然后填写项目名称，路径等选项。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/create2-rBTM8z.png" alt="create2-rBTM8z"></p><ul><li>项目结构</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/structure-oKmDur.png" alt="structure-oKmDur"></p><p><strong>build.gradle</strong> 为项目配置文件。<br><strong>resources/META-INF/plugin.xml</strong> 为插件配置文件。</p><h4 id="使用-GitHub-模版"><a href="#使用-GitHub-模版" class="headerlink" title="使用 GitHub 模版"></a>使用 GitHub 模版</h4><ol><li>访问 <a href="https://github.com/JetBrains/intellij-platform-plugin-template">https://github.com/JetBrains/intellij-platform-plugin-template</a></li><li>点击 <strong>Use this template</strong> 创建模版。<img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/use-this-template-Z9tfjX.png" alt="use-this-template-Z9tfjX"></li><li>Clone 项目到自己本地。</li></ol><p>注：模版生成的项目是使用的 <strong>Kotlin</strong>，所以这里使用的第一种方式创建。</p><h3 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h3><h4 id="修改-build-gradle-配置文件"><a href="#修改-build-gradle-配置文件" class="headerlink" title="修改 build.gradle 配置文件"></a>修改 build.gradle 配置文件</h4><p>原内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/build-gradle-K0gj4a.png" alt="build-gradle-K0gj4a"></p><p>修改后：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">plugins &#123;<br>    id <span class="hljs-string">&#x27;java&#x27;</span><br>    id <span class="hljs-string">&#x27;org.jetbrains.intellij&#x27;</span> version <span class="hljs-string">&#x27;0.4.15&#x27;</span><br>&#125;<br><br>group <span class="hljs-string">&#x27;com.liuzhihang.toolkit&#x27;</span><br>version <span class="hljs-string">&#x27;1.0.2&#x27;</span><br><br>sourceCompatibility = <span class="hljs-number">1.8</span><br><br>repositories &#123;<br>    mavenLocal()<br>    maven &#123; url <span class="hljs-string">&quot;https://maven.aliyun.com/repository/public&quot;</span> &#125;<br>    mavenCentral()<br>    jcenter()<br>&#125;<br><br>dependencies &#123;<br>    testCompile group: <span class="hljs-string">&#x27;junit&#x27;</span>, name: <span class="hljs-string">&#x27;junit&#x27;</span>, version: <span class="hljs-string">&#x27;4.12&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// See https://github.com/JetBrains/gradle-intellij-plugin/</span><br>intellij &#123;<br>    version <span class="hljs-string">&#x27;2019.1.1&#x27;</span><br>    pluginName <span class="hljs-string">&#x27;Copy as Json&#x27;</span><br>    updateSinceUntilBuild <span class="hljs-keyword">false</span><br>    sameSinceUntilBuild <span class="hljs-keyword">false</span><br>&#125;<br>patchPluginXml &#123;<br>    pluginDescription(file(descriptionFile).text)<br>    changeNotes(file(changesFile).text)<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>修改 <strong>repositories</strong> 使用阿里云</li><li>修改 <strong>patchPluginXml</strong> 使用外置文件</li><li>在<strong>根目录</strong>下创建 parts 路径，并创建 <strong>changeNotes.html</strong>、<strong>pluginDescription.html</strong></li></ol><h4 id="修改-resources-META-INF-plugin-xml-插件信息"><a href="#修改-resources-META-INF-plugin-xml-插件信息" class="headerlink" title="修改 resources/META-INF/plugin.xml 插件信息"></a>修改 resources/META-INF/plugin.xml 插件信息</h4><p>原内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/plugin-xml-AuzOSc.png" alt="plugin-xml-AuzOSc"></p><p>修改后：</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">idea-plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>com.liuzhihang.toolkit.copyasjson<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Copy as Json<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">vendor</span> <span class="hljs-attr">email</span>=<span class="hljs-string">&quot;liuzhihangs@qq.com&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;https://liuzhihang.com&quot;</span>&gt;</span>Liu ZhiHang<span class="hljs-tag">&lt;/<span class="hljs-name">vendor</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>&lt;![CDATA[ Description will be added by gradle build]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html</span><br><span class="hljs-comment">         on how to target different products --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">depends</span>&gt;</span>com.intellij.modules.java<span class="hljs-tag">&lt;/<span class="hljs-name">depends</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">idea-version</span> <span class="hljs-attr">since-build</span>=<span class="hljs-string">&quot;181.00&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span> <span class="hljs-attr">defaultExtensionNs</span>=<span class="hljs-string">&quot;com.intellij&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Add your extensions here --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">extensions</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">actions</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">actions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">idea-plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>plugin.xml 说明：<a href="https://jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_configuration_file.html">https://jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_configuration_file.html</a></p><h4 id="创建-Action"><a href="#创建-Action" class="headerlink" title="创建 Action"></a>创建 Action</h4><ol><li><p>先在 main 下 创建 java 目录，及包路径。</p></li><li><p><code>New</code> -&gt; <code>Plugin DevKit</code> -&gt; <code>Action</code>  <img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/new-action-Pbv61Y.png" alt="new-action-Pbv61Y"></p></li><li><p>设置 Action 的 <strong>id</strong> 、<strong>Class Name</strong> 、 <strong>description</strong> 、 <strong>group</strong> 及<strong>快捷键</strong>等<img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/create-action-5rIhur.png" alt="create-action-5rIhur"></p></li><li><p>这时候会发现在 plugin.xml 也插入了 <strong>action</strong>。</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">actions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Toolkit.Json.CopyAsJsonAction&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.liuzhihang.toolkit.action.CopyAsJsonAction&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;CopyAsJsonAction&quot;</span> <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Copy As Json&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">add-to-group</span> <span class="hljs-attr">group-id</span>=<span class="hljs-string">&quot;EditorTabsGroup&quot;</span> <span class="hljs-attr">anchor</span>=<span class="hljs-string">&quot;first&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">keymap</span>=<span class="hljs-string">&quot;$default&quot;</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">&quot;shift meta J&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">actions</span>&gt;</span><br></code></pre></td></tr></table></figure><p>到这里已经结构完全创建完毕了，下面将演示插件 <strong>copy-as-json</strong> 的内部逻辑。当然这块也可以直接跳过，阅读源码即可。</p><p>源码地址：文末相关资料或公众号发送 <strong>copy-as-json</strong> 获取。</p><p>插件效果：将 JavaBean 复制为 Json 字符串。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/demo-gNnhR9.gif" alt="demo-gNnhR9"></p><h4 id="开发笔记"><a href="#开发笔记" class="headerlink" title="开发笔记"></a>开发笔记</h4><p>首先需要知道一些常用的 API，常用 API 可以阅读官方文档或者关注公众号后面会推送，这里仅介绍一些在这里用到的。</p><ul><li>打开 <strong>CopyAsJsonAction</strong> </li></ul><p>该类继承并需要实现 <strong>actionPerformed</strong> 方法。在 <strong>actionPerformed</strong> 方法中可以通过以下三个方法获取到项目相关信息：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取项目</span><br>Project project = e.getData(PlatformDataKeys.PROJECT);<br><span class="hljs-comment">// 获取Psi文件</span><br>PsiFile psiFile = e.getData(CommonDataKeys.PSI_FILE);<br><span class="hljs-comment">// 获取当前编辑的文件</span><br>Editor editor = e.getData(CommonDataKeys.EDITOR);<br></code></pre></td></tr></table></figure><ul><li>获取到当前编辑的文件</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PsiClass <span class="hljs-title">getTargetClass</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Editor editor, <span class="hljs-meta">@NotNull</span> PsiFile file)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> offset = editor.getCaretModel().getOffset();<br>    PsiElement element = file.findElementAt(offset);<br>    <span class="hljs-keyword">if</span> (element != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 当前类</span><br>        PsiClass target = PsiTreeUtil.getParentOfType(element, PsiClass.class);<br><br>        <span class="hljs-keyword">return</span> target <span class="hljs-keyword">instanceof</span> SyntheticElement ? <span class="hljs-keyword">null</span> : target;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>从当前编辑的文件里面获取到字段</li></ul><p>将当前编辑的 JavaBean 中的字段提取，并转换为 Map。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; fieldsMap = getFields(selectedClass);<br></code></pre></td></tr></table></figure><p>getFields 方法篇幅较长，请参考源码。</p><ul><li>将字段转化成 Json 字符串，并格式化</li></ul><p>使用 Gson 将 Map 转换为 Json 字符串，并格式化。其中格式化自定义了缩进。</p><p>见代码：<code>com.liuzhihang.toolkit.utils.GsonFormatUtil</code></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Gson gson = <span class="hljs-keyword">new</span> GsonBuilder().create();<br>String json = GsonFormatUtil.gsonFormat(gson, fieldsMap);<br><br><span class="hljs-comment">// 使用自定义缩进格式 String json = new GsonBuilder().setPrettyPrinting().create().toJson(fieldsMap);</span><br>StringSelection selection = <span class="hljs-keyword">new</span> StringSelection(json);<br></code></pre></td></tr></table></figure><ul><li>将 Json 字符串拷贝到剪贴板</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">StringSelection selection = <span class="hljs-keyword">new</span> StringSelection(json);<br>Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();<br>clipboard.setContents(selection, selection);<br></code></pre></td></tr></table></figure><ul><li>发出提示 success</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String message = <span class="hljs-string">&quot;Convert &quot;</span> + selectedClass.getName() + <span class="hljs-string">&quot; to JSON success, copied to clipboard.&quot;</span>;<br>Notification success = NOTIFICATION_GROUP.createNotification(message, NotificationType.INFORMATION);<br>Notifications.Bus.notify(success, project);<br></code></pre></td></tr></table></figure><h4 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h4><p>右侧 <code>Gradle</code> -&gt; <code>选择 intellij</code> -&gt; <code>点击 runlde</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/run-GfscZn.png" alt="run-GfscZn"></p><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>右侧 <code>Gradle</code> -&gt; 选择 <code>intellij</code> -&gt; <code>点击 buildPlugin</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/build-epNxlA.png" alt="build-epNxlA"></p><p>此时在项目路径下会生成插件，把这个插件包发给小兄弟安装使用就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/build-1-2aX8za.png" alt="build-1-2aX8za"></p><h4 id="上传到-IDEA-插件库"><a href="#上传到-IDEA-插件库" class="headerlink" title="上传到 IDEA 插件库"></a>上传到 IDEA 插件库</h4><p>访问 <a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com/</a> 创建账号，将插件包上传到仓库即可。当然也有其他的方式，这块就没有研究了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面的方式已经简单开发一个插件了，要问这个插件有什么用？</p><p>其实就是在写文档，或者接口调用的时候，直接将 Java Bean 复制为 Json 串，省过一个一个敲，然后手写 Json 了。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/postman-7trAcJ.gif" alt="postman-7trAcJ"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/req111-JvWo5q.gif" alt="req111-JvWo5q"></p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><p>[1] IntelliJ Platform SDK DevGuide：<a href="https://jetbrains.org/intellij/sdk/docs/intro/intellij_platform.html">https://jetbrains.org/intellij/sdk/docs/intro/intellij_platform.html</a><br>[2] JetBrains Plugins Repository：<a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com/</a><br>[3] Toolkit： <a href="https://github.com/liuzhihang/toolkit">https://github.com/liuzhihang/toolkit</a><br>[4] copy-as-json：<a href="https://github.com/liuzhihang/copy-as-json">https://github.com/liuzhihang/copy-as-json</a><br>[5] copy-as-json 插件地址：<a href="https://plugins.jetbrains.com/plugin/13606-copy-as-json">https://plugins.jetbrains.com/plugin/13606-copy-as-json</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具册 </category>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具册 </tag>
            
            <tag> IDEA </tag>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 快进来！花几分钟看一下 ReentrantReadWriteLock 的原理！</title>
      <link href="2020/07/27/source-code-reentrant-read-write-lock.html"/>
      <url>2020/07/27/source-code-reentrant-read-write-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><br><p>在看完 ReentrantLock 之后，在高并发场景下 ReentrantLock 已经足够使用，但是因为 ReentrantLock 是独占锁，同时只有一个线程可以获取该锁，而很多应用场景都是读多写少，这时候使用 ReentrantLock 就不太合适了。读多写少的场景该如何使用？在 JUC 包下同样提供了读写锁 ReentrantReadWriteLock 来应对读多写少的场景。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>支持类似 ReentrantLock 语义的 ReadWriteLock 的实现。</p><p>具有以下属性：</p><ul><li><strong>获取顺序</strong></li></ul><p>此类不会将读取优先或写入优先强加给锁访问的排序。但是，它确实支持可选的<em>公平</em> 策略。</p><p>支持<strong>公平模式</strong>和<strong>非公平模式</strong>，默认为<strong>非公平模式</strong>。</p><ul><li><strong>重入</strong></li></ul><p>允许 reader 和 writer 按照 <code>ReentrantLock</code> 的样式重新获取读锁或写锁。在写线程释放持有的所有写锁后，reader 才允许重入使用它们。此外，writer 可以获取读锁，但反过来则不成立。</p><ul><li><strong>锁降级</strong></li></ul><p>重入还允许从写锁降级为读锁，通过先获取写锁，然后获取读锁，最后释放写锁的方式降级。但是，从读锁升级到写锁是<strong>不可能的</strong>。</p><ul><li><strong>锁获取的中断</strong></li></ul><p>读锁和写锁都支持锁获取期间的中断。</p><ul><li><strong><code>Condition</code> 支持</strong></li></ul><p>写锁提供了一个 <code>Condition</code> 实现，对于写锁来说，该实现的方式与 <code>ReentrantLock.newCondition()</code> 提供的 <code>Condition</code> 实现对 <code>ReentrantLock</code> 所做的行为相同。当然，此 <code>Condition</code> 只能用于写锁。读锁不支持 <code>Condition</code>。</p><ul><li><strong>监测</strong></li></ul><p>此类支持一些确定是保持锁还是争用锁的方法。这些方法设计用于监视系统状态，而不是同步控制。</p><p>锁最多支持 65535 个递归写锁和 65535 个读锁</p><p>以上为 <em>Java Api 官方文档</em><sup>[1]</sup> 的解释，总结一下内容如下：</p><ol><li>支持非公平和公平模式，默认为非公平模式。</li><li>支持重入，读锁可以重入获取读锁，写锁可以重入获取写锁，写锁可以获取读锁，读锁不可以获取写锁。</li><li>锁可以降级，从写锁降级为读锁，但是不可能从读锁升级到写锁。</li></ol><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CachedData</span> </span>&#123;<br>    Object data;<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">boolean</span> cacheValid;<br>    <span class="hljs-keyword">final</span> ReentrantReadWriteLock rwl = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">processCachedData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 读锁加锁</span><br>        rwl.readLock().lock();<br>        <span class="hljs-keyword">if</span> (!cacheValid) &#123;<br>            <span class="hljs-comment">// 获取写锁之前必须释放读锁</span><br>            rwl.readLock().unlock();<br>            <span class="hljs-comment">// 写锁加锁</span><br>            rwl.writeLock().lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 重新检查状态，因为另一个线程可能</span><br>                <span class="hljs-comment">// 在执行操作之前获取了写锁定并更改了状态</span><br>                <span class="hljs-keyword">if</span> (!cacheValid) &#123;<br>                    data = ...<br>                    cacheValid = <span class="hljs-keyword">true</span>;<br>                &#125;<br>                <span class="hljs-comment">// 通过在释放写锁之前获取读锁来降级</span><br>                rwl.readLock().lock();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                rwl.writeLock().unlock(); <span class="hljs-comment">// Unlock write, still hold read</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            use(data);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            rwl.readLock().unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面只是官方文档提供的一个 demo。</p><h4 id="问题疑问"><a href="#问题疑问" class="headerlink" title="问题疑问"></a>问题疑问</h4><ol><li>在 ReentrantReadWriteLock 中 state 代表什么？</li><li>线程获取锁的流程是怎么样的？</li><li>读锁和写锁的可重入性是如何实现的？</li><li>当前线程获取锁失败，被阻塞的后续操作是什么？</li><li>锁降级是怎么降级的？</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ReentrantReadWriteLock-uml-SQCZqu.png" alt="ReentrantReadWriteLock-uml-SQCZqu"></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReentrantReadWriteLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ReadWriteLock</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">6992448646407690164L</span>;<br>    <span class="hljs-comment">/** 提供读锁的内部类 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;<br>    <span class="hljs-comment">/** 提供写锁的内部类 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;<br>    <span class="hljs-comment">/** 执行所有同步机制 */</span><br>    <span class="hljs-keyword">final</span> Sync sync;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>之前在阅读 ReentrantLock 源码的时候 state 代表了锁的状态，0 表示没有线程持有锁，大于 1 表示已经有线程持有锁及其重入的次数。而在 ReentrantReadWriteLock 是读写锁，那就需要保存<strong>读锁</strong>和<strong>写锁</strong>两种状态的，那是怎么样表示的呢？</p><p>在 ReentrantReadWriteLock 中同样存在一个 Sync 继承了 AbstractQueuedSynchronizer，也是 FairSync、NonfairSync 的父类。内部定义了 state 的一些操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">6317671515068378041L</span>;<br>    <span class="hljs-comment">// 移位数</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SHARED_SHIFT   = <span class="hljs-number">16</span>;<br>    <span class="hljs-comment">// 单位</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SHARED_UNIT    = (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT);<br>    <span class="hljs-comment">// 最大数量 1 &lt;&lt; 16 -&gt; 65536</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_COUNT      = (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 计算独占数使用 1 &lt;&lt; 16 -&gt; 65536</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> EXCLUSIVE_MASK = (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 返回共享保留数</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sharedCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span>    </span>&#123; <span class="hljs-keyword">return</span> c &gt;&gt;&gt; SHARED_SHIFT; &#125;<br>    <span class="hljs-comment">// 返回独占保留数 </span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">exclusiveCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span> </span>&#123; <span class="hljs-keyword">return</span> c &amp; EXCLUSIVE_MASK; &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 AQS 中定义 state 为 int 类型，而在 ReentrantReadWriteLock 中，将 state 的 高 16 位和低 16 位拆开表示读写锁。其中高 16 位表示读锁，低 16 位表示写锁。分别使用 sharedCount 和 exclusiveCount 方法获取读锁和写锁的当前状态。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ReentrantReadWriteLock-state-JusW2l.png" alt="ReentrantReadWriteLock-state-JusW2l"></p><p>下面分别从读锁和写锁的角度来看如何进行加锁和释放锁的？</p><h4 id="ReadLock-lock"><a href="#ReadLock-lock" class="headerlink" title="ReadLock.lock"></a>ReadLock.lock</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadLock</span> </span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取读取锁。</span><br><span class="hljs-comment">     * 如果写锁没有被另一个线程持有，则获取读锁并立即返回。</span><br><span class="hljs-comment">     * 如果写锁由另一个线程持有，则出于线程调度目的，</span><br><span class="hljs-comment">     * 当前线程将被禁用，并处于休眠状态，直到获取读锁为止。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 调用 AQS 获取共享资源</span><br>        sync.acquireShared(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ReentrantReadWriteLock-AQS-Share-gTrD2e.png" alt="ReentrantReadWriteLock-AQS-Share-gTrD2e"></p><p>获取共享资源，这块使用的 AQS 的逻辑，其中 tryAcquireShared(arg) 是在 ReentrantReadWriteLock.Sync 中实现的。并且 AQS 中有规定，tryAcquireShared 分为三种返回值：</p><ol><li>小于 0: 表示失败；</li><li>等于 0: 表示共享模式获取资源成功，但后续的节点不能以共享模式获取成功; </li><li>大于 0: 表示共享模式获取资源成功，后续节点在共享模式获取也可能会成功，在这种情况下，后续等待线程必须检查可用性。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> unused)</span> </span>&#123;<br>     <br>        Thread current = Thread.currentThread();<br>        <span class="hljs-comment">// 获取 state 值</span><br>        <span class="hljs-keyword">int</span> c = getState();<br>        <span class="hljs-comment">// 独占计数不为 0 且 不是当前线程， 说明已经有写锁</span><br>        <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span> &amp;&amp; getExclusiveOwnerThread() != current)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 获取共享计数（读锁计数）</span><br>        <span class="hljs-keyword">int</span> r = sharedCount(c);<br>        <span class="hljs-comment">// 不需要阻塞读锁 &amp;&amp; 共享计数小于最大值 &amp;&amp; state 更新成功</span><br>        <span class="hljs-keyword">if</span> (!readerShouldBlock() &amp;&amp; r &lt; MAX_COUNT &amp;&amp;<br>            compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>            <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 当前读锁计数为 0</span><br>                <span class="hljs-comment">// firstReader是获得读锁的第一个线程</span><br>                <span class="hljs-comment">// firstReaderHoldCount是firstReader的保持计数</span><br>                firstReader = current;<br>                firstReaderHoldCount = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                <span class="hljs-comment">// 读锁重入</span><br>                firstReaderHoldCount++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 当前缓存计数</span><br>                HoldCounter rh = cachedHoldCounter;<br>                <span class="hljs-comment">// 当前线程没有计数 或者 没有创建计数器</span><br>                <span class="hljs-keyword">if</span> (rh == <span class="hljs-keyword">null</span> || rh.tid != getThreadId(current))<br>                    <span class="hljs-comment">// 创建计数，基于 ThreadLocal</span><br>                    cachedHoldCounter = rh = readHolds.get();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>) <br>                    readHolds.set(rh);<br>                <span class="hljs-comment">// 计数累加</span><br>                rh.count++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 完整地获取共享锁方法，作为tryAcquireShared方法因CAS获取锁失败后的处理。</span><br>        <span class="hljs-comment">// 因为前面可能失败 CAS 失败， 队列策略失败等原因。</span><br>        <span class="hljs-keyword">return</span> fullTryAcquireShared(current);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>先获取 state ，通过 exclusiveCount 方法获取到写锁的计数值，不为 0 且 不是当前线程， 说明已经有写锁。返回 -1 失败。</li><li>通过 sharedCount 获取读锁计数，判断是否需要阻塞以及是否超过上限后，使用 CAS 更新 读锁计数。</li><li>设置或更新 firstReader、firstReaderHoldCount、 cachedHoldCounter。</li><li>最后会进行完整的获取共享锁方法，作为之前获取失败的后续处理方法。</li></ol><p>firstReader：firstReader是获得读锁的第一个线程；<br>firstReaderHoldCount：firstReaderHoldCount是firstReader的保持计数。即获得读锁的第一个线程的重入次数。<br>cachedHoldCounter：最后一个获得读锁的线程获得读锁的重入次数。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fullTryAcquireShared</span><span class="hljs-params">(Thread current)</span> </span>&#123;<br> <br>    HoldCounter rh = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">// 无限循环</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">int</span> c = getState();<br>        <span class="hljs-comment">// 是否有写锁</span><br>        <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 有写锁，但是不是当前线程，直接返回失败</span><br>            <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() != current)<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (readerShouldBlock()) &#123;<br>            <span class="hljs-comment">// 需要阻塞</span><br>            <span class="hljs-comment">// 没有写锁，确保没有重新获取读锁</span><br>            <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                <span class="hljs-comment">// assert firstReaderHoldCount &gt; 0;</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 当前线程的读锁计数 ThreadLocal 中</span><br>                <span class="hljs-keyword">if</span> (rh == <span class="hljs-keyword">null</span>) &#123;<br>                    rh = cachedHoldCounter;<br>                    <span class="hljs-keyword">if</span> (rh == <span class="hljs-keyword">null</span> || rh.tid != getThreadId(current)) &#123;<br>                        rh = readHolds.get();<br>                        <span class="hljs-comment">// 计数结束，remove 掉</span><br>                        <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                            readHolds.remove();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 为 0 直接失败</span><br>                <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 到达上限 抛出异常</span><br>        <span class="hljs-keyword">if</span> (sharedCount(c) == MAX_COUNT)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        <span class="hljs-comment">// CAS 设置读锁</span><br>        <span class="hljs-keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>            <span class="hljs-keyword">if</span> (sharedCount(c) == <span class="hljs-number">0</span>) &#123;<br>                firstReader = current;<br>                firstReaderHoldCount = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                firstReaderHoldCount++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (rh == <span class="hljs-keyword">null</span>)<br>                    rh = cachedHoldCounter;<br>                <span class="hljs-keyword">if</span> (rh == <span class="hljs-keyword">null</span> || rh.tid != getThreadId(current))<br>                    rh = readHolds.get();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                    readHolds.set(rh);<br>                rh.count++;<br>                cachedHoldCounter = rh; <span class="hljs-comment">// cache for release</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>首先会一直循环</li><li>有写锁，但是不是当前线程，直接返回失败。<strong>但是，有写锁，如果是当前线程，是会继续执行的。</strong></li><li>设置或更新 firstReader、firstReaderHoldCount、 cachedHoldCounter。</li></ol><p>当存在写锁（独占锁）时，方法会返回 -1 失败，后续会调用 AQS 的 doAcquireShared 方法，循环获取资源。doAcquireShared 方法会不断循环，尝试获取读锁，一旦获取到读锁，当前节点会立即唤醒后续节点，后续节点开始尝试获取读锁，依次传播。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ReentrantReadWriteLock-1-rl0DjC.png" alt="ReentrantReadWriteLock-1-rl0DjC"></p><h4 id="ReadLock-unlock"><a href="#ReadLock-unlock" class="headerlink" title="ReadLock.unlock"></a>ReadLock.unlock</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadLock</span> </span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>&#123;<br>        sync.releaseShared(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用 AQS 的 releaseShared 释放共享资源方法。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ReadLock-unlock-LE7vUH.png" alt="ReadLock-unlock-LE7vUH"></p><p>其中 tryReleaseShared 有 ReadLock 实现。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> unused)</span> </span>&#123;<br>    Thread current = Thread.currentThread();<br>    <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>        <span class="hljs-comment">// 第一个线程是当前线程</span><br>        <span class="hljs-keyword">if</span> (firstReaderHoldCount == <span class="hljs-number">1</span>)<br>            firstReader = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">else</span><br>            firstReaderHoldCount--;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 第一个线程不是当前线程，更新自己的 ThreadLocal 里面的计数</span><br>        HoldCounter rh = cachedHoldCounter;<br>        <span class="hljs-keyword">if</span> (rh == <span class="hljs-keyword">null</span> || rh.tid != getThreadId(current))<br>            rh = readHolds.get();<br>        <span class="hljs-keyword">int</span> count = rh.count;<br>        <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">1</span>) &#123;<br>            readHolds.remove();<br>            <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">throw</span> unmatchedUnlockException();<br>        &#125;<br>        --rh.count;<br>    &#125;<br>    <span class="hljs-comment">// 循环</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">int</span> c = getState();<br>        <span class="hljs-keyword">int</span> nextc = c - SHARED_UNIT;<br>        <span class="hljs-comment">// 使用 CAS 更新 state</span><br>        <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>            <span class="hljs-comment">// 但是如果现在读和写锁都已释放，</span><br>            <span class="hljs-comment">// 它可能允许等待的写程序继续进行。</span><br>            <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>如果是第一个线程，直接更新技术，不是则更新自己 ThreadLocal 里面保存的计数。</li><li>循环，使用 CAS 更新 state 的值。</li><li>如果 state 更新后的值为 0，说明没有线程持有读锁或者写锁了。</li><li>当 state 为 0，此时会调用 AQS 的 doReleaseShared 方法。此时队列如果有写锁，那就会被写锁获取的锁。</li></ol><h4 id="WriteLock-lock"><a href="#WriteLock-lock" class="headerlink" title="WriteLock.lock"></a>WriteLock.lock</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WriteLock</span> </span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取写入锁。</span><br><span class="hljs-comment">     * 如果没有其他线程持有读锁或写锁，会直接返回，并将写锁计数设置为1。</span><br><span class="hljs-comment">     * 如果当前线程持有写锁，则将写锁计数 +1，然后返回。</span><br><span class="hljs-comment">     * 如果锁正在被其他线程持有，则当前线程用于线程调度目的，</span><br><span class="hljs-comment">     * 当前线程将被禁用，并处于休眠状态，直到获取读锁并将写锁计数设置为1。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;<br>        sync.acquire(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/WriteLock.lock-wBuvUA.png" alt="WriteLock.lock-wBuvUA"></p><p>tryAcquire 方法由 Write 自己实现，方式和 ReentrantLock 类似。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 如果读锁计数为非零或写锁计数为非零，并且所有者是另一个线程，则失败。</span><br>    <span class="hljs-comment">// 如果计数饱和，则失败。只有在count不为零时，才可能发生这种情况。</span><br>    <span class="hljs-comment">// 否则，如果该线程是可重入获取或队列策略允许的话，则有资格进行锁定。</span><br>    <span class="hljs-comment">// 如果是这样，请更新状态并设置所有者。</span><br>    Thread current = Thread.currentThread();<br>    <span class="hljs-keyword">int</span> c = getState();<br>    <span class="hljs-comment">// 写锁计数</span><br>    <span class="hljs-keyword">int</span> w = exclusiveCount(c);<br>    <span class="hljs-comment">// c ！= 0 说明有有线程获取锁了</span><br>    <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span><br>        <span class="hljs-comment">// 判断是不是自己，不是自己 返回 false</span><br>        <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 判断有没有超过上限</span><br>        <span class="hljs-keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        <span class="hljs-comment">// 重入</span><br>        setState(c + acquires);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 不需要阻塞，或者 CAS 更新 state 失败</span><br>    <span class="hljs-keyword">if</span> (writerShouldBlock() || !compareAndSetState(c, c + acquires))<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    setExclusiveOwnerThread(current);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>获取 state ， 如果 state 不为 0 则判断是否为当前线程重入获取。</li><li>state 为 0 ，则当前线程 CAS 更新 state，获取锁。</li><li>更新成功之后绑定当前线程。</li><li>如果失败会继续调用 AQS 的 acquireQueued，将当前阻塞放在 AQS 队列中。AQS 会不断循环，等待上一个锁释放后，尝试获得锁。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ReentrantReadWriteLock-2-mQAgGL.png" alt="ReentrantReadWriteLock-2-mQAgGL"></p><h4 id="WriteLock-unlock"><a href="#WriteLock-unlock" class="headerlink" title="WriteLock.unlock"></a>WriteLock.unlock</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WriteLock</span> </span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">// 如果当前线程是此锁的持有者，则保持计数递减。 </span><br>    <span class="hljs-comment">// 如果保持现在的计数为零，则解除锁定。 </span><br>    <span class="hljs-comment">// 如果当前线程不是此锁的持有者则IllegalMonitorStateException异常。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>&#123;<br>        sync.release(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/Write-unlock-bwHAcw.png" alt="Write-unlock-bwHAcw"></p><p>同样这块代码是使用 AQS 的逻辑，tryRelease 部分由 WriteLock 自己实现。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryRelease</span><span class="hljs-params">(<span class="hljs-keyword">int</span> releases)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalMonitorStateException();<br>    <span class="hljs-keyword">int</span> nextc = getState() - releases;<br>    <span class="hljs-keyword">boolean</span> free = exclusiveCount(nextc) == <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (free)<br>        setExclusiveOwnerThread(<span class="hljs-keyword">null</span>);<br>    setState(nextc);<br>    <span class="hljs-keyword">return</span> free;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>如果是当前线程重入，扣减重入次数。</li><li>扣减后如果为 0，则设置锁持有线程为 null，更新 state 值。AQS 会唤醒后续节点获取锁。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p><strong>Q：</strong>在 ReentrantReadWriteLock 中 state 代表什么？</p><p><strong>A：</strong>state 代表锁的状态。state 为 0 ，没有线程持有锁，state 的高 16 为代表读锁状态，低 16 为代表写锁状态。通过位运算可以获取读写锁的实际值。</p><p><strong>Q：</strong>线程获取锁的流程是怎么样的？</p><p><strong>A：</strong>可以参考上面的源码笔记，以及后面的流程图。</p><p><strong>Q：</strong>读锁和写锁的可重入性是如何实现的？</p><p><strong>A：</strong>在加锁的时候，判断是否为当前线程，如果是当前线程，则直接累加计数。值得注意的是：读锁重入计数使用的 ThreadLocal 在线程中缓存计数，而写锁则直接用的 state 进行累加（其实和 state 低 16 位进行累加一样）。</p><p><strong>Q：</strong>当前线程获取锁失败，被阻塞的后续操作是什么？</p><p><strong>A：</strong>获取失败，会放到 AQS 等待队列中，在队列中不断循环，监视前一个节点是否为 head ，是的话，会重新尝试获取锁。</p><p><strong>Q：</strong>锁降级是怎么降级的？</p><p><strong>A：</strong> <img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/write-to-read-koAuqm.png" alt="write-to-read-koAuqm"><br>如图，在圈出部分 fullTryAcquireShared 代码中，可以看出来，在获取读锁的时候，如果当前线程持有写锁，是可以获取读锁的。这块就是指锁降级，比如线程 A 获取到了写锁，当线程 A 执行完毕时，它需要获取当前数据，假设不支持锁降级，就会导致 A 释放写锁，然后再次请求读锁。而在这中间是有可能被其他阻塞的线程获取到写锁的。从而导致线程 A 在一次执行过程中数据不一致。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>ReentrantReadWriteLock 读写锁，内部实现是 ReadLock 读锁 和 WriteLock 写锁。读锁，允许共享；写锁，是独占锁。</li><li>读写锁都支持重入，读锁的重入次数记录在线程维护的 ThreadLocal 中，写锁维护在 state 上（低 16 位）。</li><li>支持锁降级，从写锁降级为读锁，防止脏读。</li><li>ReadLock 和 WriteLock 都是通过 AQS 来实现的。获取锁失败后会放到 AQS 等待队列中，后续不断尝试获取锁。区别在读锁只有存在写锁的时候才放到等待队列，而写锁是只要存在非当前线程锁（无论写锁还是读锁）都会放到等待队列。<img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/read-write-different-gzNdCo.png" alt="read-write-different-gzNdCo"></li><li>通过源码分析，可以得出读写锁适合在<strong>读多写少</strong>的场景中使用。</li></ol><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><p>[1] Java Api：<a href="https://docs.oracle.com/javase/8/docs/api/overview-summary.html">https://docs.oracle.com/javase/8/docs/api/overview-summary.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 不能再被问住了！ReentrantLock 源码、画图一起看一看！</title>
      <link href="2020/07/25/source-code-reentrant-lock.html"/>
      <url>2020/07/25/source-code-reentrant-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在阅读完 JUC 包下的 AQS 源码之后，其中有很多疑问，最大的疑问就是 state 究竟是什么含义？并且 AQS 主要定义了队列的出入，但是获取资源、释放资源都是交给子类实现的，那子类是怎么实现的呢？下面开始了解 ReentrantLock。 </p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一个可重入的互斥锁与隐式监视器锁synchronized具有相同的基本行为和语义，但功能更强大。</p><p>具有以下特征：</p><ol><li>互斥性：同时只有一个线程可以获取到该锁，此时其他线程请求获取锁，会被阻塞，然后被放到该锁内部维护的一个 AQS 阻塞队列中。</li><li>可重入性：维护 state 变量，初始为 0，当一个线程获取到锁时，state 使用 cas 更新为 1，本线程再次申请获取锁，会对 state 进行 CAS 递增，重复获取次数即 state，最多为 2147483647 。试图超出此限制会从锁定方法抛出 Error。</li><li>公平/非公平性：在初始化时，可以通过构造器传参，指定是否为公平锁，还是非公平锁。当设置为 true 时，为公平锁，线程争用锁时，会倾向于等待时间最长的线程。</li></ol><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">X</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();  <span class="hljs-comment">// block until condition holds</span><br>        <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// ... method body</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock()<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="问题疑问？"><a href="#问题疑问？" class="headerlink" title="问题疑问？"></a>问题疑问？</h4><p>首先在阅读本文时，对 AQS 有了一定的了解，如果不了解的话，可以看以下之前的文章。<a href="">图文讲解 AQS</a></p><ol><li>在 AQS 中介绍 state 时，说 state 含义由子类进行定义，那在 ReentrantLock 中 state 代表什么？</li><li>ReentrantLock 和 AQS 有什么关系？</li><li>线程是如何获取到锁的？</li><li>锁的可重入性是如何实现的？</li><li>当前线程获取锁失败，被阻塞的后续操作是什么？</li><li>公平锁和非公平锁是如何体现的？</li><li>锁是如何释放的？</li></ol><p>将通过源码及画图的方式，围绕上面几个问题，展开阅读和分析。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ReentrantLock-uml-DDnlDW.png" alt="ReentrantLock-uml-DDnlDW"></p><p>基本结构如图所示，ReentrantLock 类实现了接口 Lock，在接口 Lock 中定义了使用锁时的方法，方法及含义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Lock</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 获取锁，如果没有获取到，会阻塞。</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 获取锁，如果没有获取到，会阻塞。响应中断。</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br><br>    <span class="hljs-comment">// 尝试获取锁，如果获取到，返回 true，没有获取到 返回 false</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 尝试获取锁，没有有获取到，会等待指定时间，响应中断。</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">(<span class="hljs-keyword">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br><br>    <span class="hljs-comment">// 释放锁</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>而 ReentrantLock 也只是实现了 Lock 接口，并实现了这些方法，那 ReentrantLock 和 AQS 到底有什么关系呢？这就需要看内部具体如何实现的了。</p><p>通过上面类图可以看出，在 ReentrantLock 中含有两个内部类，分别是 NonfairSync FairSync 而它俩又实现了 抽象类 Sync，抽象类 Sync 继承了 AbstractQueuedSynchronizer 即 AQS。具体代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReentrantLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;<br><br>    <span class="hljs-comment">// 锁的同步控制基础类。 子类具体到公平和非公平的版本。 使用AQS状态来表示持有该锁的数量。</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> </span>&#123; <br>        <span class="hljs-comment">// 省略 ...</span><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Sync</span> </span>&#123; <br>        <span class="hljs-comment">// 非公平锁逻辑 省略 ...</span><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Sync</span> </span>&#123; <br>        <span class="hljs-comment">// 公平锁逻辑 省略 ...</span><br>    &#125;<br>    <span class="hljs-comment">// 默认非公平锁</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReentrantLock</span><span class="hljs-params">()</span> </span>&#123;<br>        sync = <span class="hljs-keyword">new</span> NonfairSync();<br>    &#125;<br>    <span class="hljs-comment">// 根据传参指定公平锁还是非公平锁，true 公平锁，false 非公平锁</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReentrantLock</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> fair)</span> </span>&#123;<br>        sync = fair ? <span class="hljs-keyword">new</span> FairSync() : <span class="hljs-keyword">new</span> NonfairSync();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过上面代码可以看出：</p><ol><li>锁的基本控制是由 NonfairSync 和 FairSync 进行控制的，而它俩的父类 Sync 继承了 AQS (AbstractQueuedSynchronizer)，这也就是说明 ReentrantLock 的实现和 AQS 是有关的。</li><li>NonfairSync 代表非公平锁实现逻辑，FairSync 代表公平锁实现逻辑。</li><li>构造器传参可以看出，初始化时，默认为 NonfairSync 非公平锁。也可以指定声明为公平锁或非公平锁，传参 true 为 公平锁，false 为非公平锁。</li></ol><p>具体 ReentrantLock 和 AQS 的关系是怎样的，就需要通过加锁的过程来分析了。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/878c841a671f102ddc2cdeae35faa4cc-pKLxAS.gif" alt="878c841a671f102ddc2cdeae35faa4cc-pKLxAS"></p><h4 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ReentrantLock-lock-4apftk.png" alt="ReentrantLock-lock-4apftk"></p><p>如图所示，默认声明非公平锁，lock 方法内部调用 <code>sync.lock();</code> 此时应该是使用的非公平锁内部的 lock 加锁操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 通过 CAS 设置 state 值 0 -&gt; 1</span><br>    <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>        <span class="hljs-comment">// 设置成功当前线程获取到了锁</span><br>        setExclusiveOwnerThread(Thread.currentThread());<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 设置失败，则调用 AQS 的方法，尝试获取锁。</span><br>        acquire(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>首先会 使用 CAS 更新 state 的值， 此时就会发现， state 在这里代表的锁的状态。 0 未加锁，1 加锁。</li><li>设置失败，会调用 AQS 的 acquire(1); 方法。</li></ol><p>再看下 AQS 的 acquire 代码</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">acquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-comment">// tryAcquire 尝试获取 state，获取失败则会加入到队列</span><br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>        selfInterrupt();<br>&#125;<br></code></pre></td></tr></table></figure><p>在之前分析 AQS 源码时，已经介绍 tryAcquire 是尝试获取 state 的值，AQS 中并不提供可用的方法，此处是由子类实现的。所以这块代码还是在 NonfairSync 类中自己实现的业务逻辑。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Sync</span> </span>&#123;<br>    <span class="hljs-comment">// NonfairSync 实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;<br>        <span class="hljs-comment">// 调用父类的方法</span><br>        <span class="hljs-keyword">return</span> nonfairTryAcquire(acquires);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> </span>&#123;<br>    <span class="hljs-comment">// NonfairSync 的父类 Sync 中有实现</span><br>    <span class="hljs-comment">// state 传参是 1</span><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">nonfairTryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;<br>        <span class="hljs-comment">// 获取当前线程</span><br>        <span class="hljs-keyword">final</span> Thread current = Thread.currentThread();<br>        <span class="hljs-comment">// 获取 state</span><br>        <span class="hljs-keyword">int</span> c = getState();<br>        <span class="hljs-comment">// 如果 c 是 0 </span><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 使用 cas 更新为 1</span><br>            <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                <span class="hljs-comment">// 设置持有线程为当前</span><br>                setExclusiveOwnerThread(current);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>            <span class="hljs-comment">// 如果是当前线程持有</span><br>            <span class="hljs-comment">// 对 state 进行累加</span><br>            <span class="hljs-keyword">int</span> nextc = c + acquires;<br>            <span class="hljs-comment">// 不允许超过 int 的最大值 2147483647 + 1 = -2147483648</span><br>            <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>            <span class="hljs-comment">// 设置 state 的值</span><br>            setState(nextc);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>当前线程加锁，直接使用 CAS 方式对 state 从 0 更新为 1，更新成功，则获得锁，更新失败，则获取失败。</li><li>更新失败后会调用 AQS 的 <code>acquire(1);</code> 方法， 此处传参为 1。</li><li>tryAcquire 再次尝试获取锁。<ol><li>state 是 0，尝试获取。获取成功返回 true；</li><li>state 不是 0，判断是否为当前线程持有，是当前线程持有则对 state 进行累加。</li></ol></li><li>tryAcquire 获取锁失败，则走 AQS 的 acquireQueued 逻辑，创建节点，并加入到等待队列中。</li></ol><p>流程画图如下：</p><ul><li>初始为单个线程</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ReentrantLock-1-1ozuSU.png" alt="ReentrantLock-1-1ozuSU"></p><ul><li>此时其他线程来请求获取锁</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ReentrantLock-2-zO9REa.png" alt="ReentrantLock-2-zO9REa"></p><ul><li>加锁流程图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ReentrantLock-nonfair-LcRGc7.png" alt="ReentrantLock-nonfair-LcRGc7"></p><h4 id="再来看下公平锁是如何体现的？"><a href="#再来看下公平锁是如何体现的？" class="headerlink" title="再来看下公平锁是如何体现的？"></a>再来看下公平锁是如何体现的？</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Sync</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">3000897897090466540L</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;<br>        acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Thread current = Thread.currentThread();<br>        <span class="hljs-keyword">int</span> c = getState();<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 判断有无节点排队</span><br>            <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;<br>                compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                setExclusiveOwnerThread(current);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>            <span class="hljs-keyword">int</span> nextc = c + acquires;<br>            <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>            setState(nextc);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拉出来代码比较一下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/compare-UFOHD0.png" alt="compare-UFOHD0"></p><p>可以看出在公平锁（FairSync）中多了一个判断条件</p><p><strong><code>!hasQueuedPredecessors()</code></strong></p><p>hasQueuedPredecessors 方法在 AQS 中，如果有当前线程前面的线程排队返回true，如果当前线程是在队列的头部或队列为空，返回false。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasQueuedPredecessors</span><span class="hljs-params">()</span> </span>&#123;<br><br>    Node t = tail; <br>    Node h = head;<br>    Node s;<br><br>    <span class="hljs-keyword">return</span> h != t &amp;&amp; ((s = h.next) == <span class="hljs-keyword">null</span> || s.thread != Thread.currentThread());<br>&#125;<br></code></pre></td></tr></table></figure><p>如果当前加锁时已经有节点在排队，那就去节点尾部排队，否则才会去抢占锁。</p><p>到这里基本上已经知道公平锁和非公平锁的区别了：</p><p>非公平锁：不管有没有节点在排队，都会试图去获取锁，如果获取失败，进入 acquire 方法，还是会试图获取一次，之后才会进入队列中。<br>公平锁：已经有节点在排队，那就自己去节点后面排队。</p><h4 id="tryLock"><a href="#tryLock" class="headerlink" title="tryLock"></a>tryLock</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> sync.nonfairTryAcquire(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>直接调用的 Sync 中的 nonfairTryAcquire， 尝试获取锁，获取失败，就返回 false，获取到锁或者是当前线程持有锁则对 state 累加后都返回 true。</p><h4 id="unlock"><a href="#unlock" class="headerlink" title="unlock"></a>unlock</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>&#123;<br>    sync.release(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>发现 unlock 直接调用的 AQS 的 release 方法，进行释放资源。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">release</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        Node h = head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-keyword">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这块在 AQS 中有介绍，也说明 tryRelease 由子类进行实现，现在在 ReentrantLock 重点关注 tryRelease 的实现。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 释放资源，传入值为 1</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryRelease</span><span class="hljs-params">(<span class="hljs-keyword">int</span> releases)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c = getState() - releases;<br>    <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalMonitorStateException();<br>    <span class="hljs-keyword">boolean</span> free = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        free = <span class="hljs-keyword">true</span>;<br>        setExclusiveOwnerThread(<span class="hljs-keyword">null</span>);<br>    &#125;<br>    setState(c);<br>    <span class="hljs-keyword">return</span> free;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>获取当前的 state 进行 -1 操作；</li><li>判断了下当前线程是否为持有线程；</li><li>如果释放完之后 state 为 0 ，则设置持有线程为 null；</li><li>更新并返回 state 的值。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面的源码及画图，基本上对开始的问题已经有了答案：</p><p><strong>Q</strong>：在 AQS 中介绍 state 时，说 state 含义由子类进行定义，那在 ReentrantLock 中 state 代表什么？<br><strong>A</strong>：在 ReentrantLock 中 state 代表加锁状态，0 没有线程获得锁，大于等于 1 已经有线程获得锁，大于 1 说明该获得锁的线程多次重入。</p><p><strong>Q</strong>：ReentrantLock 和 AQS 有什么关系？<br><strong>A</strong>：ReentrantLock 内部基于 AQS 实现，无论是锁状态，还是进入等待队列，锁释放等都是基于 AQS 实现。ReentrantLock 的公平锁和非公平锁都是 NonfairSync、FairSync 来实现的，而他们的父类 Sync 继承了 AQS。</p><p><strong>Q</strong>：线程是如何获取到锁的？<br><strong>A</strong>：线程通过修改 state 字段的状态来获取到锁。</p><p><strong>Q</strong>：锁的可重入性是如何实现的？<br><strong>A</strong>：当前线程发现 state 不是 0 ，则说明有锁已经被获取了，此时会判断当前获取到锁的线程是不是自己，如果是，则对 state 进行累加。</p><p><strong>Q</strong>：当前线程获取锁失败，被阻塞的后续操作是什么？<br><strong>A</strong>：获取失败，会放到 AQS 等待队列中，在队列中不断循环，监视前一个节点是否为 head ，是的话，会重新尝试获取锁。</p><p><strong>Q</strong>：公平锁和非公平锁是如何体现的？<br><strong>A</strong>：公平锁主要体现在如果当前队列中已经有排队的线程了，则自己直接排在后面。非公平锁是不管当前队列都没有线程排队，都会直接尝试修改 state 获取锁。</p><p><strong>Q</strong>：锁是如何释放的？<br><strong>A</strong>：锁释放资源，即将 state 进行 -1 操作，如果 -1 后 state 为 0，则释放节点，后续节点尝试获取锁。此处可以看 AQS 相关逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工作笔记】- 老大说新项目的结构和 xxx 项目一样就可以了，我 ……</title>
      <link href="2020/07/18/work-archetype.html"/>
      <url>2020/07/18/work-archetype.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>又要开发新项目了，还是创建新项目，怎么办？老大说按照 xxx 项目的结构创建一个新项目就可以了。</p></blockquote><p>在工作中经常有新项目需要创建，此时就会有三种常用的方式</p><p><strong>CC 大法</strong> 新建项目，然后找到之前的各种工具类，复制粘贴进来，此时还不一定能跑起来，然后再进行各种调试。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-cc-45VBU1.png" alt="archetype-cc-45VBU1"></p><p><strong>CD 大法</strong> 复制老项目，然后改 module 名字，依赖名字，删除老代码，当然也不一定能跑起来，此时再进行各种调试。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-cc1-SPx1ct.png" alt="archetype-cc1-SPx1ct"></p><p>当然，这里肯定不是使用这两种办法，下面咱们介绍一种更简洁的方式，使用 maven archetype 生成项目模版，一键创建项目。</p><p>Action！！！</p><h3 id="什么是-Archetype-？"><a href="#什么是-Archetype-？" class="headerlink" title="什么是 Archetype ？"></a>什么是 Archetype ？</h3><p>简而言之，Archetype 是 Maven 项目模板工具箱。</p><p><em>An archetype is defined as an original pattern or model from which all other things of the same kind are made.</em> </p><p>原型被定义为原始样式或模型，从中可以制成所有其他同类项目。</p><p>官方解释，简洁明了，就是使用已有的项目，生成一个模版。以后使用这个模版就可以快速生成结构相同的项目了。在团队开发中很有用。</p><p>其实就是官方解释，地址贴上来：<a href="http://maven.apache.org/archetype/maven-archetype-plugin/index.html">http://maven.apache.org/archetype/maven-archetype-plugin/index.html</a></p><p>下面使用 IDEA 作为演示工具，一步一步开始介绍。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/8e83e6d78b16698fb19762806acadd1c-ZXYM5I.jpg" alt="8e83e6d78b16698fb19762806acadd1c-ZXYM5I"></p><h3 id="准备模版项目"><a href="#准备模版项目" class="headerlink" title="准备模版项目"></a>准备模版项目</h3><p>这里还是要有一个模版项目，比如这样：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype1-lZkrqX.png" alt="archetype1-lZkrqX"></p><p>这是一个多 module 项目，一个简单的 demo</p><ol><li>使用了 nacos 作为注册中心；</li><li>fegin 作为调用工具；</li><li>有通用校验 token 工具类；</li><li>假设里面也有一些公司的公共配置（MQ，链路监控，统一日志等）。</li></ol><p>当然这个项目是可以跑起来的。新创建的项目也是这个模版。</p><h3 id="进入主题"><a href="#进入主题" class="headerlink" title="进入主题"></a>进入主题</h3><h4 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h4><p>**archetype:generate **</p><p>这样是基于当前项目生成，你也可以使用官网的用法分别指定参数</p><ol><li><strong>mvn archetype:generate</strong> 然后一步一步按照提示输入；</li><li>一次性输入，其中 <code>DarchetypeGroupId</code> <code>、DarchetypeArtifactId</code> <code>、DarchetypeVersion</code> 为生成的 Archetype 项目的组织版本。</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mvn archetype:generate                                  \<br>  -DarchetypeGroupId=&lt;archetype-groupId&gt;                \<br>  -DarchetypeArtifactId=&lt;archetype-artifactId&gt;          \<br>  -DarchetypeVersion=&lt;archetype-version&gt;                \<br>  -DgroupId=&lt;my.groupid&gt;                                \<br>  -DartifactId=&lt;my-artifactId&gt;<br></code></pre></td></tr></table></figure><p>高级用法 <strong>mvn clean archetype:create-from-project</strong></p><p>执行图示如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-iterm-GONbvt.png" alt="archetype-iterm-GONbvt"></p><p>执行后返回 IDEA 查看项目，在 <code>target/generated-sources</code> 目录下的 <code>archetype</code> 即生成的项目模版。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-afer-term-vP3Tz3.png" alt="archetype-afer-term-vP3Tz3"></p><p>结构如图所示：</p><ol><li>main/resources/archetype-resources：项目的模版，生成新项目，就是根据这块的代码进行生成的。<ol><li>.idea 无用，删除掉。</li><li>__rootArtifactId__xxx 项目的各个 module</li></ol></li><li>main/resources/META-INF/maven/archetype-metadata.xml：模版工程的元数据配置。</li></ol><p>可以把 archetype 拷出去，这是一个单独的工程模版，拷出去之后，使用 IDEA 打开。</p><p>下面开始介绍 archetype 里面都有什么。</p><h3 id="archetype-模版项目介绍"><a href="#archetype-模版项目介绍" class="headerlink" title="archetype 模版项目介绍"></a>archetype 模版项目介绍</h3><p>使用 IDEA 打开之后发现，还是一个 Maven 项目。</p><h4 id="archetype-resources"><a href="#archetype-resources" class="headerlink" title="archetype-resources"></a>archetype-resources</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-structure-xUdYE2.png" alt="archetype-structure-xUdYE2"></p><p>打开 pom 文件，可以看到里面 <code>$&#123;groupId&#125;</code> 、 <code>$&#123;artifactId&#125;</code> 、<code>$&#123;version&#125;</code> 使用占位符指定的组织版本，这些就是新创建项目时指定的。</p><h4 id="archetype-metadata-xml"><a href="#archetype-metadata-xml" class="headerlink" title="archetype-metadata.xml"></a>archetype-metadata.xml</h4><p>archetype-metadata.xml 里面为元数据配置。</p><ul><li>fileSet：用来生成一些项目中的文件。如果文件或目录名称包含 <code>__property__</code> 模式，则将其替换为相应的属性值。</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>filtered</td><td>boolean</td><td>过滤文集，将指定文件直接复制不需要修改。<strong>默认值为：false。</strong></td></tr><tr><td>packaged</td><td>boolean</td><td>打包文件，指定文件将在package属性之前的目录结构中生成/复制。它们可以是非打包的，这意味着所选文件将在没有该前缀的情况下生成/复制。<strong>默认值为：false。</strong></td></tr><tr><td>encoding</td><td>String</td><td>过滤内容时使用的编码。</td></tr></tbody></table><p>fileSet 包含以下元素：</p><table><thead><tr><th>元素</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>directory</td><td>String</td><td>生成项目文件的目录</td></tr><tr><td>includes/include*</td><td>List<String></td><td>包含文件</td></tr><tr><td>excludes/exclude*</td><td>List<String></td><td>排除文件</td></tr></tbody></table><p>因为生成项目不需要 .idea *.iml 文件，所以直接删除：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-metadata1-iVIvLq.png" alt="archetype-metadata1-iVIvLq"></p><ul><li>module 就是要生成的项目一共几个 module</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>The module’s artifactId.</td></tr><tr><td>dir</td><td>String</td><td>The module’s directory.</td></tr><tr><td>name</td><td>String</td><td>The module’s name.</td></tr></tbody></table><table><thead><tr><th>元素</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>fileSets/fileSet*</td><td>List<FileSet></td><td>文件</td></tr><tr><td>modules/module*</td><td>List<ModuleDescriptor></td><td>模块</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-metadata2-HCnJqd.png" alt="archetype-metadata2-HCnJqd"></p><p>可以看出里面就是自己的项目模版。</p><p><code>__rootArtifactId__-controller</code> 在生成的时候，就会根据传入的 artifactId 生成指定的 module 名字。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>clean install </li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-clean-install-zbua0z.png" alt="archetype-clean-install-zbua0z"></p><ol start="2"><li>IDEA Add Archetype</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-maven-b3sZ6a.png" alt="archetype-maven-b3sZ6a"></p><ol start="3"><li>选择使用 Archetype 生成新项目</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-maven2-HDnFc4.png" alt="archetype-maven2-HDnFc4"></p><ol start="4"><li>填写新生成项目的名字等</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-maven3-sbJlI1.png" alt="archetype-maven3-sbJlI1"></p><ol start="5"><li>生成新项目</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-generate-5GUrpu.png" alt="archetype-generate-5GUrpu"></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><strong>Q:</strong> 如何自定义包路径？</p><p><strong>A:</strong> 可以使用 <code>requiredProperties</code> 自定义参数。通过传入自定义的参数，来生成自定的包路径。</p><p>比如发现新生成项目的包路径都是 <code>com.liuzhihang.archetype</code>，这样肯定是不行的，每个项目有每个项目自己的包路径。只需要做以下修改：</p><ol><li>将 <code>requiredProperties</code> 添加到项目中，然后添加新变量 <code>middlePackage</code>。</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">requiredProperties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使用archetype时候必须要求输入的参数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">requiredProperty</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;groupId&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--可以设置默认值，使用archetype会使用默认值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>com.liuzhihang<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">requiredProperty</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">requiredProperty</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;package&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>com.liuzhihang<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">requiredProperty</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">requiredProperty</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;middlePackage&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>$&#123;rootArtifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">requiredProperty</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">requiredProperties</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>修改模版的文件名</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-middle-mH0Gzf.png" alt="archetype-middle-mH0Gzf"></p><p>如果文件或目录名称包含 <code>__property__</code> 模式，则将其替换为相应的属性值。到这里还不行，因为生成的包名还没改。</p><ol start="3"><li>修改内部文件的包路径。包括 <strong>.java</strong> 、** .xml** 、** .properties** 等。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-change-middle-3C0Msb.png" alt="archetype-change-middle-3C0Msb"></p><ol start="4"><li>重新 clean install</li></ol><p>注：此时可能会报错，需要在 <code>src/test/resources/projects/basic/archetype.properties</code> 下添加 <code>middlePackage=basic</code> 再重新尝试下。</p><p>在生成时注意指定 <code>middlePackage</code> 属性。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-middle-1-r8qOco.png" alt="archetype-middle-1-r8qOco"></p><p><strong>Q:</strong> 我想自定义 Application 的名字怎么弄？</p><p><strong>A:</strong> 同样使用 <code>requiredProperties</code> 自定义参数。</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">requiredProperty</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;appName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">requiredProperty</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-app-name-Vt9Xj3.png" alt="archetype-app-name-Vt9Xj3"></p><p>当然也可以起一个通用的名字。</p><p><strong>Q:</strong> 别的小伙伴怎么用？</p><p><strong>A:</strong> 当然是 deploy 到私服了， 在 pom 里面添加如下配置，指定自己公司的私服。deploy ，这样就可以和小伙伴一起愉快的使用啦。</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 远程仓库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus Release Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://liuzhihang.com:xxxx/repository/maven-releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus Snapshot Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://liuzhihang.com:xxxx/repository/maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Q:</strong> 我要怎么从 IDEA 删除 Archetype ​？</p><p><strong>A:</strong> 这么好用怎么舍得删除​呢？只要找到以下路径</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">liuzhihang % &gt; <span class="hljs-built_in">pwd</span><br>/Users/liuzhihang/Library/Caches/JetBrains/IntelliJIdea2020.1/Maven/Indices<br></code></pre></td></tr></table></figure><p>里面有一个 <code>UserArchetypes.xml​</code>， 打开，删除掉里面的 archetype 就行。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/archetype-delete-ZyQULu.png" alt="archetype-delete-ZyQULu"></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>Maven Archetype 文档：<a href="http://maven.apache.org/archetype/maven-archetype-plugin/index.html">http://maven.apache.org/archetype/maven-archetype-plugin/index.html</a></p><p>代码地址：<a href="https://github.com/liuzhihang/archetype-demo">https://github.com/liuzhihang/archetype-demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
          <category> Archetype </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
            <tag> Archetype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 别走！这里有个笔记：图文讲解 AQS ，一起看看 AQS 的源码……(图文较长)</title>
      <link href="2020/07/12/source-code-aqs.html"/>
      <url>2020/07/12/source-code-aqs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>AbstractQueuedSynchronizer 抽象队列同步器，简称 AQS 。是在 JUC 包下面一个非常重要的基础组件，JUC 包下面的并发锁 <code>ReentrantLock</code> <code>CountDownLatch</code> 等都是基于 AQS 实现的。所以想进一步研究锁的底层原理，非常有必要先了解 AQS 的原理。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>先看下 AQS 的类图结构，以及源码注释，有一定的大概了解之后再从源码入手，一步一步研究它的底层原理。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/aqs.png" alt="aqs"></p><p>“ 源码注释</p><p>提供了实现阻塞锁和相关同步器依靠先入先出（FIFO）等待队列（信号量，事件等）的框架。 此类中设计了一个对大多数基于 AQS 的同步器有用的原子变量来表示状态（state）。 子类必须定义 protected 方法来修改这个 state，并且定义 state 值在对象中的具体含义是 acquired 或 released。 考虑到这些，在这个类中的其他方法可以实现所有排队和阻塞机制。 子类可以保持其他状态字段，但只能使用方法 getState 、setState 和 compareAndSetState 以原子方式更新 state 。</p><p>子类应被定义为用于实现其封闭类的同步性能的非公共内部辅助类。 类AbstractQueuedSynchronizer没有实现任何同步接口。 相反，它定义了一些方法，如 acquireInterruptibly 可以通过具体的锁和相关同步器来调用适当履行其公共方法。</p><p>此类支持独占模式和共享模式。 在独占模式下，其他线程不能获取成功，共享模式下可以（但不一定）获取成功。 此类不“理解”，在机械意义上这些不同的是，当共享模式获取成功，则下一个等待的线程（如果存在）也必须确定它是否能够获取。 线程在不同模式下的等待共享相同的FIFO队列。 通常情况下，实现子类只支持其中一种模式，但同时使用两种模式也可以，例如ReadWriteLock 。 仅共享模式不需要定义支持未使用的模式的方法的子类。</p><p>这个类中定义了嵌套类 AbstractQueuedSynchronizer.ConditionObject ，可用于作为一个 Condition 由子类实现，并使用 isHeldExclusively 方法说明当前线程是否以独占方式进行，release()、 getState() acquire() 方法用于操作 state 原子变量。</p><p>此类提供检查和监视内部队列的方法，以及类似方法的条件对象。 根据需要进使用以用于它们的同步机制。</p><p>要使用这个类用作同步的基础上，需要重新定义以下方法，如使用，通过检查和或修改 getState 、setState 或 compareAndSetState 方法：</p><p>tryAcquire<br>tryRelease<br>tryAcquireShared<br>tryReleaseShared<br>isHeldExclusively</p><p>“</p><p>通过上面的注释可以得出大概的印象：</p><ol><li>内部依靠先入先出（FIFO） 等待队列。</li><li>存在 state 表示状态信息。state 值只能用 getState 、setState 和 compareAndSetState 方法以原子方式更新。</li><li>支持独占模式和共享模式，但具体需要子类实现具体支持哪种模式。</li><li>嵌套 AbstractQueuedSynchronizer.ConditionObject 可以作为 Condition 由子类实现。</li><li>子类需要重新定义  tryAcquire、tryRelease、tryAcquireShared、tryReleaseShared、isHeldExclusively 方法。</li></ol><h3 id="队列节点-Node"><a href="#队列节点-Node" class="headerlink" title="队列节点 Node"></a>队列节点 Node</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/node-1P32mR.png" alt="node-1P32mR"></p><p>Node节点，包含以下元素：</p><table><thead><tr><th>元素</th><th>含义</th></tr></thead><tbody><tr><td>prev</td><td>上一个节点</td></tr><tr><td>next</td><td>下一个节点</td></tr><tr><td>thread</td><td>持有线程</td></tr><tr><td>waitStatus</td><td>节点状态</td></tr><tr><td>nextWaiter</td><td>下一个处于 CONDITION 状态的节点</td></tr></tbody></table><p>组合成等待队列则如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/node-fifo.png" alt="node-fifo"></p><p>下面是等待队列节点的 Node 属性：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-comment">// 节点正在共享模式下等待的标记</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Node SHARED = <span class="hljs-keyword">new</span> Node();<br>    <span class="hljs-comment">// 指示节点正在以独占模式等待的标记</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Node EXCLUSIVE = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">// 指示线程已取消</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CANCELLED =  <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 指示后续线程需要唤醒</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SIGNAL    = -<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 指示线程正在等待条件</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CONDITION = -<span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 指示下一次acquireShared应该无条件传播</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> PROPAGATE = -<span class="hljs-number">3</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态字段，仅使用以下值</span><br><span class="hljs-comment">     * SIGNAL -1 ：当前节点释放或者取消时，必须 unpark 他的后续节点。</span><br><span class="hljs-comment">     * CANCELLED 1 ：由于超时（timeout）或中断（interrupt），该节点被取消。节点永远不会离开此状态。特别是，具有取消节点的线程永远不会再次阻塞。</span><br><span class="hljs-comment">     * CONDITION -2 ：该节点目前在条件队列。 但它不会被用作同步队列节点，直到转移，转移时的状态将被设置为 0 。</span><br><span class="hljs-comment">     * PROPAGATE -3 ：releaseShared 应该被传播到其他节点。 </span><br><span class="hljs-comment">     * 0：都不是</span><br><span class="hljs-comment">     * 值以数字表示以简化使用，大多数时候可以检查符号（是否大于0）以简化使用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> waitStatus;<br><br>    <span class="hljs-comment">// 上一个节点</span><br>    <span class="hljs-keyword">volatile</span> Node prev;<br><br>    <span class="hljs-comment">// 下一个节点</span><br>    <span class="hljs-keyword">volatile</span> Node next;<br><br>    <span class="hljs-comment">// 节点持有线程</span><br>    <span class="hljs-keyword">volatile</span> Thread thread;<br><br>    <span class="hljs-comment">// 链接下一个等待条件节点，或特殊值共享</span><br>    Node nextWaiter;<br><br>    <span class="hljs-comment">// 节点是否处于 共享状态 是， 返回 true</span><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isShared</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> nextWaiter == SHARED;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回前一个节点， 使用时 前一个节点不能为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> Node <span class="hljs-title">predecessor</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NullPointerException </span>&#123;<br>        Node p = prev;<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    Node() &#123;    <span class="hljs-comment">// Used to establish initial head or SHARED marker</span><br>    &#125;<br><br>    Node(Thread thread, Node mode) &#123;     <span class="hljs-comment">// Used by addWaiter</span><br>        <span class="hljs-keyword">this</span>.nextWaiter = mode;<br>        <span class="hljs-keyword">this</span>.thread = thread;<br>    &#125;<br><br>    Node(Thread thread, <span class="hljs-keyword">int</span> waitStatus) &#123; <span class="hljs-comment">// Used by Condition</span><br>        <span class="hljs-keyword">this</span>.waitStatus = waitStatus;<br>        <span class="hljs-keyword">this</span>.thread = thread;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Node 节点中需要重点关注 waitStatus</p><ol><li>默认状态为 0；</li><li>waitStatus &gt; 0 (CANCELLED 1) 说明该节点超时或者中断了，需要从队列中移除；</li><li>waitStatus = -1 SIGNAL 当前线程的前一个节点的状态为 SIGNAL，则当前线程需要阻塞（unpark）；</li><li>waitStatus = -2 CONDITION -2 ：该节点目前在条件队列；</li><li>waitStatus = -3 PROPAGATE -3 ：releaseShared 应该被传播到其他节点，在共享锁模式下使用。</li></ol><p>了解完 Node 的结构之后，再了解下 AQS 结构，并从常用方法入手，逐步了解具体实现逻辑。</p><h3 id="AbstractQueuedSynchronizer"><a href="#AbstractQueuedSynchronizer" class="headerlink" title="AbstractQueuedSynchronizer"></a>AbstractQueuedSynchronizer</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractOwnableSynchronizer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-comment">// 等待队列的头，延迟初始化。 除了初始化，它是仅经由方法setHead修改。 注意：如果头存在，其waitStatus保证不会是 CANCELLED 状态</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node head;<br><br>    <span class="hljs-comment">// 等待队列的尾部，延迟初始化。 仅在修改通过方法ENQ添加新节点等待。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node tail;<br><br>    <span class="hljs-comment">// 同步状态 </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> state;<br><br>    <span class="hljs-comment">// 获取状态</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getState</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-comment">// 设置状态值</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> newState)</span> </span>&#123;<br>        state = newState;<br>    &#125;<br><br>    <span class="hljs-comment">// 原子更新状态值</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSetState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> expect, <span class="hljs-keyword">int</span> update)</span> </span>&#123;<br>        <span class="hljs-comment">// See below for intrinsics setup to support this</span><br>        <span class="hljs-keyword">return</span> unsafe.compareAndSwapInt(<span class="hljs-keyword">this</span>, stateOffset, expect, update);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在 AQS 中主要参数为：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>head</td><td>等待队列头</td></tr><tr><td>tail</td><td>等待队列尾</td></tr><tr><td>state</td><td>同步状态</td></tr></tbody></table><p>通过注释了解到，在 AQS 里主要分为两种操作模式，分别是：独占模式、共享模式，下面分别从两个不同的角度去分析源码。</p><table><thead><tr><th>操作</th><th>含义</th></tr></thead><tbody><tr><td>acquire</td><td>以独占模式获取，忽略中断。 通过调用至少一次实施tryAcquire ，在成功时返回。 否则，线程排队，可能重复查封和解封，调用tryAcquire直到成功为止。 这种方法可以用来实现方法Lock.lock 。</td></tr><tr><td>release</td><td>以独占模式释放。 通过疏通一个或多个线程，如果实现tryRelease返回true。 这种方法可以用来实现方法Lock.unlock 。</td></tr><tr><td>acquireShared</td><td>获取在共享模式下，忽略中断。 通过至少一次第一调用实现tryAcquireShared ，在成功时返回。 否则，线程排队，可能重复查封和解封，调用tryAcquireShared直到成功为止。</td></tr><tr><td>releaseShared</td><td>以共享模式释放。 通过疏通一个或多个线程，如果实现tryReleaseShared返回true。</td></tr></tbody></table><p>无论是共享模式还是独占模式在这里面都会用到 addWaiter 方法，将当前线程及模式创建排队节点。</p><h4 id="独占模式"><a href="#独占模式" class="headerlink" title="独占模式"></a>独占模式</h4><h5 id="获取独占资源-acquire"><a href="#获取独占资源-acquire" class="headerlink" title="获取独占资源 acquire"></a>获取独占资源 acquire</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">acquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-comment">// tryAcquire 尝试获取 state，获取失败则会加入到队列</span><br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>        selfInterrupt();<br>&#125;<br></code></pre></td></tr></table></figure><p>在独占模式下会尝试获取 state，当获取失败时会调用 acquireQueued(addWaiter(Node.EXCLUSIVE), arg)。</p><ol><li>tryAcquire(arg)，尝试获取 state 这块由子类自己实现，不同的子类逻辑不同，这块在介绍子类代码时会说明。</li><li>获取 state 失败后，会进行 acquireQueued(addWaiter(Node.EXCLUSIVE), arg)，这块代码可以拆分为两块：addWaiter(Node.EXCLUSIVE)，acquireQueued(node, arg)。</li><li>addWaiter(Node.EXCLUSIVE) 返回的是当前新创建的节点。</li><li>acquireQueued(node, arg) 线程获取锁失败，使用 addWaiter(Node.EXCLUSIVE) 放入等待队列，而 acquireQueued(node, arg) 使用循环，不断的为队列中的节点去尝试获取资源，直到获取成功或者被中断。</li></ol><p>总结获取资源主要分为三步：</p><ol><li>尝试获取资源</li><li>入队列</li><li>出队列</li></ol><p>尝试获取资源 <code>tryAcquire(arg)</code>，由子类实现，那下面则着手分别分析 <code>入队列</code>、<code>出队列</code>。</p><h6 id="入队列：addWaiter-Node-EXCLUSIVE"><a href="#入队列：addWaiter-Node-EXCLUSIVE" class="headerlink" title="入队列：addWaiter(Node.EXCLUSIVE)"></a>入队列：addWaiter(Node.EXCLUSIVE)</h6><p>使用 <code>addWaiter(Node.EXCLUSIVE)</code> 方法将节点插入到队列中，步骤如下：</p><ol><li>根据传入的模式创建节点</li><li>判断尾节点是否存在，不存在则需要使用 <code>enq(node)</code> 方法初始化节点，存在则直接<code>尝试</code>插入尾部。</li><li><code>尝试</code>插入尾部时使用 CAS 插入，防止并发情况，如果插入失败，会调用 <code>enq(node)</code> 自旋直到插入。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">addWaiter</span><span class="hljs-params">(Node mode)</span> </span>&#123;<br>    Node node = <span class="hljs-keyword">new</span> Node(Thread.currentThread(), mode);<br>    <span class="hljs-comment">// 定位到队列末尾的 node</span><br>    Node pred = tail;<br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 新节点的上一个节点 指向尾节点</span><br>        node.prev = pred;<br>        <span class="hljs-comment">// 使用 CAS 设置尾节点，tail 如果等于 pred 则更新为 node</span><br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            <span class="hljs-comment">// 更新成功则将 pred 的下一个节点指向 node</span><br>            pred.next = node;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 尾节点没有初始化，或竞争失败，自旋</span><br>    enq(node);<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * tailOffset 也就是成员变量 tail 的值</span><br><span class="hljs-comment"> * 此处相当于：比较 tail 的值和 expect 的值是否相等， 相等则更新为 update</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSetTail</span><span class="hljs-params">(Node expect, Node update)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> unsafe.compareAndSwapObject(<span class="hljs-keyword">this</span>, tailOffset, expect, update);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSetHead</span><span class="hljs-params">(Node update)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> unsafe.compareAndSwapObject(<span class="hljs-keyword">this</span>, headOffset, <span class="hljs-keyword">null</span>, update);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">enq</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        Node t = tail;<br>        <span class="hljs-comment">// 尾节点为空 需要初始化头节点，此时头尾节点是一个</span><br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// Must initialize</span><br>            <span class="hljs-keyword">if</span> (compareAndSetHead(<span class="hljs-keyword">new</span> Node()))<br>                tail = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 不为空 循环赋值</span><br>            node.prev = t;<br>            <span class="hljs-keyword">if</span> (compareAndSetTail(t, node)) &#123;<br>                t.next = node;<br>                <span class="hljs-keyword">return</span> t;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看完代码和注释肯定还是有点模糊，现在用图一步一步进行说明。</p><p>因为根据<code>初始尾节点是否为空</code>分为两种情况，这里使用两幅图：</p><ol><li>第一幅为第一次添加节点，此时 head 会延迟初始化；</li><li>第二幅图为已经存在队列，进行插入节点；</li><li>注意看代码，enq 方法返回的是<code>之前的尾节点</code>；</li><li>addWaiter 方法 返回的是<code>当前插入的新创建的节点</code>。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/aqs-addwaiter-1.png" alt="aqs-addwaiter-1"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/cas-add-waiter-02.png" alt="cas-add-waiter-02"></p><p>节点添加到队列之后，返回当前节点，而下一步则需要调用方法 <code>acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</code> 不断的去获取资源。</p><h6 id="出队列：acquireQueued-addWaiter-Node-EXCLUSIVE-arg"><a href="#出队列：acquireQueued-addWaiter-Node-EXCLUSIVE-arg" class="headerlink" title="出队列：acquireQueued(addWaiter(Node.EXCLUSIVE), arg)"></a>出队列：acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</h6><p>方法会通过循环不断尝试获取拿到资源，直到成功。代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-comment">// 是否拿到资源</span><br>    <span class="hljs-keyword">boolean</span> failed = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 中断状态</span><br>        <span class="hljs-keyword">boolean</span> interrupted = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 无限循环</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 当前节点之前的节点</span><br>            <span class="hljs-keyword">final</span> Node p = node.predecessor();<br>            <span class="hljs-comment">// 前一个节点是头节点， 说明当前节点是 头节点的 next 即真实的第一个数据节点 （因为 head 是虚拟节点）</span><br>            <span class="hljs-comment">// 然后再尝试获取资源</span><br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                <span class="hljs-comment">// 获取成功之后 将头指针指向当前节点</span><br>                setHead(node); <br>                p.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// help GC</span><br>                failed = <span class="hljs-keyword">false</span>;<br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-comment">// p 不是头节点， 或者 头节点未能获取到资源 （非公平情况下被别的节点抢占） </span><br>            <span class="hljs-comment">// 判断 node 是否要被阻塞，</span><br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>不断获取本节点的上一个节点是否为 head，因为 head 是虚拟节点，如果当前节点的上一个节点是 head 节点，则当前节点为 <code>第一个数据节点</code>；</li><li>第一个数据节点不断的去获取资源，获取成功，则将 head 指向当前节点；</li><li>当前节点不是头节点，或者 <code>tryAcquire(arg)</code> 失败（失败可能是非公平锁）。这时候需要判断前一个节点状态决定<code>当前节点是否要被阻塞</code>（前一个节点状态是否为 SIGNAL）。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据上一个节点的状态，判断当前线程是否应该被阻塞</span><br><span class="hljs-comment"> * SIGNAL -1 ：当前节点释放或者取消时，必须 unpark 他的后续节点。</span><br><span class="hljs-comment"> * CANCELLED 1 ：由于超时（timeout）或中断（interrupt），该节点被取消。节点永远不会离开此状态。特别是，具有取消节点的线程永远不会再次阻塞。</span><br><span class="hljs-comment"> * CONDITION -2 ：该节点目前在条件队列。 但它不会被用作同步队列节点，直到转移，转移时的状态将被设置为 0 。</span><br><span class="hljs-comment"> * PROPAGATE -3 ：releaseShared 应该被传播到其他节点。 </span><br><span class="hljs-comment"> * 0：都不是</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> </span>&#123;<br>    <span class="hljs-comment">// 前一个节点的等待状态</span><br>    <span class="hljs-keyword">int</span> ws = pred.waitStatus;<br>    <span class="hljs-comment">// 前一个节点需要 unpark 后续节点</span><br>    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-comment">// 当前节点处于取消状态</span><br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">// 将取消的节点从队列中移除</span><br>            node.prev = pred = pred.prev;<br>        &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);<br>        pred.next = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 设置前一个节点为 SIGNAL 状态</span><br>        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>shouldParkAfterFailedAcquire</code> 方法中，会判断前一个节点的状态，同时取消在队列中当前节点前面无效的节点。</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/aqs-acquire.png" alt="aqs-acquire"></p><p>再继续阅读 出队列 acquireQueued 方法，发现有一个 finally 会判断状态后执行 <code>cancelAcquire(node);</code> ，也就是上面流程图中下面的红色方块。</p><h6 id="cancelAcquire-Node-node"><a href="#cancelAcquire-Node-node" class="headerlink" title="cancelAcquire(Node node)"></a>cancelAcquire(Node node)</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-comment">// 是否拿到资源</span><br>    <span class="hljs-keyword">boolean</span> failed = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 省略</span><br>        <span class="hljs-comment">// 在 finally 会将当前节点置为取消状态</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cancelAcquire</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-comment">// 节点不存在 直接返回</span><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 取消节点关联线程</span><br>    node.thread = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">//跳过已经取消的节点，获取当前节点之前的有效节点</span><br>    Node pred = node.prev;<br>    <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>)<br>        node.prev = pred = pred.prev;<br><br>    <span class="hljs-comment">// 获取当前节点之前的有效节点的下一个节点</span><br>    Node predNext = pred.next;<br><br>    <span class="hljs-comment">// 当前节点设置为取消</span><br>    node.waitStatus = Node.CANCELLED;<br><br>    <span class="hljs-comment">// 当前节点如果是尾节点，则将最后一个有效节点设置为尾节点，并将 predNext 设置为空</span><br>    <span class="hljs-keyword">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;<br>        compareAndSetNext(pred, predNext, <span class="hljs-keyword">null</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">int</span> ws;<br>        <span class="hljs-comment">// pred 不是头节点(node 的上一个有效节点 不是 head) &amp;&amp; （ pred的状态是 SIGNAL ||  pred 的状态设置为 SIGNAL 成功 ） &amp;&amp; pred 的绑定线程不为空</span><br>        <span class="hljs-keyword">if</span> (pred != head &amp;&amp; <br>        ((ws = pred.waitStatus) == Node.SIGNAL || (ws &lt;= <span class="hljs-number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp; <br>        pred.thread != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 当前节点的后继节点</span><br>            Node next = node.next;<br>            <span class="hljs-comment">// 后继节点不为空 且 状态有效 将 pred 的 后继节点设置为 当前节点的后继节点</span><br>            <span class="hljs-keyword">if</span> (next != <span class="hljs-keyword">null</span> &amp;&amp; next.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                compareAndSetNext(pred, predNext, next);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// node 的上一个有效节点 是 head， 或者其他情况 唤醒当前节点的下一个有效节点</span><br>            unparkSuccessor(node);<br>        &#125;<br><br>        node.next = node; <span class="hljs-comment">// help GC</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unparkSuccessor</span><span class="hljs-params">(Node node)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 判断当前节点状态</span><br>    <span class="hljs-keyword">int</span> ws = node.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 将节点状态更新为 0 </span><br>        compareAndSetWaitStatus(node, ws, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 下一个节点， 一般是下一个节点应该就是需要唤醒的节点，即颁发证书。</span><br>    Node s = node.next;<br>    <span class="hljs-comment">// 大于 0  CANCELLED ： 线程已取消</span><br>    <span class="hljs-comment">// 但是有可能 后继节点 为空或者被取消了。</span><br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;<br>        s = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 从尾节点开始遍历，直到定位到 t.waitStatus &lt;= 0 的节点</span><br>        <span class="hljs-comment">// 定位到后并不会停止，会继续执行，相当于找到最开始的那个需要唤醒的节点</span><br>        <span class="hljs-comment">// t.waitStatus &lt;= 0 ： SIGNAL（ -1 后续线程需要释放） </span><br>        <span class="hljs-comment">//                     CONDITION （ -2 线程正在等待条件） </span><br>        <span class="hljs-comment">//                     PROPAGATE （ -3 releaseShared 应该被传播到其他节点）</span><br>        <span class="hljs-keyword">for</span> (Node t = tail; t != <span class="hljs-keyword">null</span> &amp;&amp; t != node; t = t.prev)<br>            <span class="hljs-keyword">if</span> (t.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                s = t;<br>    &#125;<br>    <span class="hljs-comment">// 定位到需要唤醒的节点后 进行 unpark</span><br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-keyword">null</span>)<br>        LockSupport.unpark(s.thread);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>流程分析：</p><ol><li>找到当前节点的前一个非无效节点 pred；</li><li>当前节点如果是尾节点，则将最后一个有效节点设置为尾节点，并将 predNext 设置为空；</li><li>pred 不是头节点 &amp;&amp; （ pred的状态是 SIGNAL ||  pred 的状态设置为 SIGNAL 成功 ） &amp;&amp; pred 的绑定线程不为空；</li><li>其他情况。</li></ol><p>下面分别画图：</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/1-RD0LEx.png" alt="1-RD0LEx"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/2-PHY9bi.png" alt="2-PHY9bi"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/3-rOnnvu.png" alt="3-rOnnvu"></p><p><strong>Q: 通过图可以看出来，只操作了 next 指针，但是没有操作 prev 指针，这是为什么呢？</strong></p><p><strong>A:</strong> 在 <code>出队列：acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</code> 方法中，<code>shouldParkAfterFailedAcquire</code> 方法会判断前一个节点的状态，同时取消在队列中当前节点前面无效的节点。这时候会移除之前的无效节点，此处也是为了防止指向一个已经被移除的节点。同时保证 prev 的稳定，有利于从 tail 开始遍历列表，这块在 <code>unparkSuccessor(node);</code> 中也可以看到是从后往前表里列表。</p><p><strong>Q: unparkSuccessor(Node node) 为什么从后往前遍历？</strong></p><p><strong>A:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/AQS-8IDBPX.png" alt="AQS-8IDBPX"></p><p>在 <code>addWaiter(Node.EXCLUSIVE)</code> 插入新节点时，使用的是 <code>尾插法</code>，看红框部分，此时有可能还未指向next。</p><p><strong>Q: node.next = node; 这块导致 head不是指向最新节点，链表不就断了么？</strong><br><strong>A：</strong> acquireQueued 方法介绍中，里面有个循环，会不断尝试获取资源，成功之后会设置为 head。并且在 shouldParkAfterFailedAcquire 中也会清除当前节点前的无效节点。</p><h5 id="释放独占资源-release"><a href="#释放独占资源-release" class="headerlink" title="释放独占资源 release"></a>释放独占资源 release</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">release</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        Node h = head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-keyword">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以独占模式释放。 通过释放一个或多个线程，如果实现tryRelease返回true。 这种方法可以用来实现方法Lock.unlock 。</p><ol><li>tryRelease(arg) 操作释放资源，同样是由子类实现，后面介绍子类时会进行说明。返回 true 说明资源现在已经没有线程持有了，其他节点可以尝试获取；</li><li>释放成功，且 head != null &amp;&amp; h.waitStatus != 0, 会继续执行 unparkSuccessor(h)；</li><li>这块会看到 只要 tryRelease(arg) 操作释放资源成功， 后面无论执行是否成功，都会返回 true，unparkSuccessor(h) 相当于只是附加操作。</li></ol><h4 id="共享模式"><a href="#共享模式" class="headerlink" title="共享模式"></a>共享模式</h4><h5 id="获取共享资源-acquireShared"><a href="#获取共享资源-acquireShared" class="headerlink" title="获取共享资源 acquireShared"></a>获取共享资源 acquireShared</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">acquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-comment">// 小于 0 表示获取资源失败</span><br>    <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)<br>        doAcquireShared(arg);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAcquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-comment">// 添加到节点 此处是共享节点</span><br>    <span class="hljs-keyword">final</span> Node node = addWaiter(Node.SHARED);<br>    <span class="hljs-comment">// 根据是否拿到资源 判断是否需要取消</span><br>    <span class="hljs-keyword">boolean</span> failed = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">boolean</span> interrupted = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 返回前一个节点</span><br>            <span class="hljs-keyword">final</span> Node p = node.predecessor();<br>            <span class="hljs-keyword">if</span> (p == head) &#123;<br>                <span class="hljs-comment">// 再次尝试获取共享资源</span><br>                <span class="hljs-keyword">int</span> r = tryAcquireShared(arg);<br>                <span class="hljs-comment">// 表示获取成功</span><br>                <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 设置当前节点为头节点 并尝试唤醒后续节点</span><br>                    setHeadAndPropagate(node, r);<br>                    <span class="hljs-comment">// 释放头节点 GC 会回收</span><br>                    p.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// help GC</span><br>                    <span class="hljs-keyword">if</span> (interrupted)<br>                        selfInterrupt();<br>                    failed = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>tryAcquireShared(arg)，尝试获取资源，这块由子类实现；</li><li>返回值分为 3 种：<ol><li>小于 0: 表示失败；</li><li>等于 0: 表示共享模式获取资源成功，但后续的节点不能以共享模式获取成功; </li><li>大于 0: 表示共享模式获取资源成功，后续节点在共享模式获取也可能会成功，在这种情况下，后续等待线程必须检查可用性。</li></ol></li><li>在失败后会使用 <code>doAcquireShared(arg);</code> 不断获取资源；</li><li><code>final Node node = addWaiter(Node.SHARED);</code> 同样会创建节点；</li><li>在循环中不断判断前一个节点如果是 head，则尝试获取资源；</li><li>在共享模式下获取到资源后会使用 <code>setHeadAndPropagate(node, r);</code> 设置头节点，同时唤醒后续节点。</li></ol><h6 id="设置头节点，并传播唤醒后续节点"><a href="#设置头节点，并传播唤醒后续节点" class="headerlink" title="设置头节点，并传播唤醒后续节点"></a>设置头节点，并传播唤醒后续节点</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// node 是当前节点</span><br><span class="hljs-comment">// propagate 是 前一步 tryAcquireShared 的返回值 进来时 &gt;=0</span><br><span class="hljs-comment">// 大于 0: 表示共享模式获取资源成功，后续节点在共享模式获取也可能会成功，在这种情况下，后续等待线程必须检查可用性。</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHeadAndPropagate</span><span class="hljs-params">(Node node, <span class="hljs-keyword">int</span> propagate)</span> </span>&#123;<br>    <span class="hljs-comment">// 记录下当前头节点</span><br>    Node h = head; <span class="hljs-comment">// Record old head for check below</span><br>    <span class="hljs-comment">// 设置传入 node 为头节点</span><br>    setHead(node);<br>    <span class="hljs-comment">// 判断条件，唤醒后续节点</span><br>    <span class="hljs-comment">// propagate &gt; 0 有后续资源</span><br>    <span class="hljs-comment">// h == null 旧的头节点 因为前面 addWaiter， 肯定不会为空，应该是防止 h.waitStatus &lt; 0 空指针的写法</span><br>    <span class="hljs-comment">// (h = head) == null 当前的 头节点，再判断状态</span><br>    <span class="hljs-comment">// waitStatus &lt; 0 后续节点就需要被唤醒</span><br>    <span class="hljs-keyword">if</span> (propagate &gt; <span class="hljs-number">0</span> || h == <span class="hljs-keyword">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span> ||<br>        (h = head) == <span class="hljs-keyword">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span>) &#123;<br>        Node s = node.next;<br>        <span class="hljs-comment">// 后续节点为共享，则需要唤醒</span><br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.isShared())<br>            doReleaseShared();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="doReleaseShared-释放共享资源"><a href="#doReleaseShared-释放共享资源" class="headerlink" title="doReleaseShared() 释放共享资源"></a>doReleaseShared() 释放共享资源</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doReleaseShared</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 循环</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// 从头开始</span><br>        Node h = head;<br>        <span class="hljs-comment">// 判断队列是否为空，就是刚初始化</span><br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-keyword">null</span> &amp;&amp; h != tail) &#123;<br>            <span class="hljs-keyword">int</span> ws = h.waitStatus;<br>            <span class="hljs-comment">// SIGNAL（ -1 后续线程需要释放）</span><br>            <span class="hljs-keyword">if</span> (ws == Node.SIGNAL) &#123;<br>                <span class="hljs-comment">// 将等待状态更新为 0 如果失败，会循环</span><br>                <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">continue</span>;            <span class="hljs-comment">// loop to recheck cases</span><br>                <span class="hljs-comment">// 唤醒后续节点， 同时将当前节点设置为 取消</span><br>                unparkSuccessor(h);<br>            &#125;<br>            <span class="hljs-comment">// 如果状态是 0 则会更新状态为 PROPAGATE</span><br>            <span class="hljs-comment">// PROPAGATE （ -3 releaseShared 应该被传播到其他节点）</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ws == <span class="hljs-number">0</span> &amp;&amp; !compareAndSetWaitStatus(h, <span class="hljs-number">0</span>, Node.PROPAGATE))<br>                <span class="hljs-keyword">continue</span>;                <span class="hljs-comment">// loop on failed CAS</span><br>        &#125;<br>        <span class="hljs-comment">// 判断头节点有没有变化，有变化 是因为竞争，别的线程获取到了锁，会继续循环</span><br>        <span class="hljs-comment">// 没有变化直接结束</span><br>        <span class="hljs-keyword">if</span> (h == head)                   <span class="hljs-comment">// loop if head changed</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>从头节点开始进行，如果 h != null &amp;&amp; h != tail 说明队列不是空或者刚初始化；</li><li>节点状态为 SIGNAL（ -1 ）说明后续线程需要释放；</li><li>会更改当前节点状态，成功后唤醒后续节点，失败则继续循环；</li><li>节点状态如果是 0 则更新为 PROPAGATE，会将状态传播。</li></ol><h5 id="释放共享资源-releaseShared"><a href="#释放共享资源-releaseShared" class="headerlink" title="释放共享资源 releaseShared"></a>释放共享资源 releaseShared</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">releaseShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>        <span class="hljs-comment">// 释放共享资源</span><br>        doReleaseShared();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以共享模式释放。 通过释放一个或多个线程，如果实现tryReleaseShared返回true。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>Q: AQS 到底是什么？</strong><br><strong>A:</strong> AQS 内部提供了一个先入先出（FIFO）双向等待队列，内部依靠 Node 实现，并提供了在<code>独占模式</code>和<code>共享模式</code>下的出入队列的公共方法。而关于状态信息 state 的定义是由子类实现。tryAcquire、tryRelease、tryAcquireShared、tryReleaseShared等尝试获取资源操作都是由子类进行定义和实现的。而 AQS 中提供了子类获取资源之后的相关操作，包括节点 Node 的出入队列，自旋获取资源等等。</p><p><strong>Q: AQS 获取资源失败后会如何操作？</strong><br><strong>A:</strong> 线程获取资源失败后，会放到等待队列中，在队列中会不断尝试获取资源（自旋），说明线程只是进入等待状态，后面还是可以再次获取资源的。</p><p><strong>Q: AQS 等待队列的数据结构是什么？</strong><br><strong>A:</strong> CLH变体的先入先出（FIFO）双向等待队列。（CLH锁是一个自旋锁。能确保无饥饿性。提供先来先服务的公平性。是一种基于链表的可扩展、高性能、公平的自旋锁，申请线程仅仅在本地变量上自旋，它不断轮询前驱的状态，如果发现前驱释放了锁就结束自旋。）</p><p><strong>Q: AQS 等待队列中的节点如何获取获取和释放资源的？</strong><br><strong>A:</strong> 可以看下<code>独占模式</code>中的讲述过程，通过代码梳理。</p><p>本文分别从 <code>独占模式</code> 和 <code>共享模式</code>介绍的 AQS 基本逻辑，并通过源码和作图理解基本思路。但是并没有对需要子类实现的业务逻辑做介绍。这块会在后面介绍 <code>ReentrantLock</code>、<code>CountDownLatch</code> 等子类的时候做介绍。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- JUC 包下工具类，它的名字叫 LockSupport ！你造么？</title>
      <link href="2020/07/05/source-code-locksupport.html"/>
      <url>2020/07/05/source-code-locksupport.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>LockSupport 是 JUC 中常用的一个工具类，主要作用是挂起和唤醒线程。在阅读 JUC 源码中经常看到，所以很有必要了解一下。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>基本线程阻塞原语创建锁和其他同步类。Basic thread blocking primitives for creating locks and other synchronization classes.</p></blockquote><blockquote><p>LockSupport 类每个使用它的线程关联一个许可（在意义上的Semaphore类）。 如果许可可用，调用 park 将立即返回，并在此过程中消费它; 否则可能阻塞。如果许可不是可用，可以调用 unpark 使得许可可用。（但与Semaphore不同，许可不能累积。最多有一个。）</p><p>方法 park 和 unpark 提供了阻塞的有效手段和解锁线程不会遇到死锁问题，而 Thread.suspend 和 Thread.resume 是不能用于这种目的：因为许可的存在，一个线程调用 park 和另一个线程试图 unpark 它之间的竞争将保持活性。 此外，如果调用者线程被中断，park 将返回，并且支持设置超时。 该 park 方法也可能返回在其他任何时间，“毫无理由”，因此通常必须在一个循环中调用的返回后重新检查条件。 在这个意义上park作为“忙碌等待”不会浪费太多的时间自旋的优化，但必须以配对 unpark 使用。</p><p>这三种形式的 park 还支持 blocker 对象参数。而线程被阻塞时是允许使用监测和诊断工具，以确定线程被阻塞的原因。（诊断工具可以使用getBlocker(Thread) 方法 。）同时推荐使用带有 blocker 参数的 park方法，通常做法是 blocker 被设置为 this 。</p></blockquote><p>上面的意思总结下来个人理解是：</p><ol><li>许可（permit）的上限是1，也就是说只有 0 或 1 。</li><li>park: 没有许可的时候，permit 为 0 ，调用 park 会阻塞；有许可的时候，permit 为 1 ， 调用 park 会扣除一个许可，然后返回。</li><li>unpark：没有许可的时候，permit 为 0 ，调用 unpark 会增加一个许可，因为许可上限是 1 ， 所以调用多次也只会为 1 个。</li><li>线程初始的时候是没有许可的。</li><li>park 的当前线程如果被中断，会立即返回，并不会抛出中断异常。</li><li>park 方法的调用一般要放在一个循环判断体里面。</li></ol><p>大概如图所示：</p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/rGm1AX.png" align=center /><p>下面是源码注释中的案例：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * FIFO 独占锁</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FIFOMutex</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicBoolean locked = <span class="hljs-keyword">new</span> AtomicBoolean(<span class="hljs-keyword">false</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Queue&lt;Thread&gt; waiters = <span class="hljs-keyword">new</span> ConcurrentLinkedQueue&lt;Thread&gt;();<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;<br>     <span class="hljs-keyword">boolean</span> wasInterrupted = <span class="hljs-keyword">false</span>;<br>     Thread current = Thread.currentThread();<br>     waiters.add(current);<br><br>     <span class="hljs-comment">// Block while not first in queue or cannot acquire lock</span><br>     <span class="hljs-comment">// 不在队列头，或者锁被占用，则阻塞， 就是只有队列头的可以获得锁</span><br>     <span class="hljs-keyword">while</span> (waiters.peek() != current || !locked.compareAndSet(<span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>)) &#123;<br>       LockSupport.park(<span class="hljs-keyword">this</span>);<br>       <span class="hljs-keyword">if</span> (Thread.interrupted()) <span class="hljs-comment">// ignore interrupts while waiting</span><br>         wasInterrupted = <span class="hljs-keyword">true</span>;<br>     &#125;<br><br>     waiters.remove();<br>     <span class="hljs-keyword">if</span> (wasInterrupted)          <span class="hljs-comment">// reassert interrupt status on exit</span><br>       current.interrupt();<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>&#123;<br>     locked.set(<span class="hljs-keyword">false</span>);<br>     LockSupport.unpark(waiters.peek());<br>   &#125;<br> &#125;<br><br></code></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="线程初始有没有许可？"><a href="#线程初始有没有许可？" class="headerlink" title="线程初始有没有许可？"></a>线程初始有没有许可？</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockSupportTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;开始执行……&quot;</span>);<br><br>        LockSupport.park();<br><br>        System.out.println(<span class="hljs-string">&quot;LockSupport park 之后……&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>执行后会发现，代码在 park 处阻塞。说明，线程初始是没有许可的。</li></ol><h4 id="添加许可并消耗许可"><a href="#添加许可并消耗许可" class="headerlink" title="添加许可并消耗许可"></a>添加许可并消耗许可</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockSupportTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;开始执行……&quot;</span>);<br><br>        LockSupport.unpark(Thread.currentThread());<br><br>        System.out.println(<span class="hljs-string">&quot;执行 - park&quot;</span>);<br>        <br>        LockSupport.park();<br><br>        System.out.println(<span class="hljs-string">&quot;LockSupport park 之后……&quot;</span>);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockSupportTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;线程 &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;开始执行 park&quot;</span>);<br>                LockSupport.park(<span class="hljs-keyword">this</span>);<br>                System.out.println(<span class="hljs-string">&quot;线程 &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;执行 park 结束&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        thread.start();<br>        <span class="hljs-comment">// 保证 上面线程先执行，然后再主线程</span><br>        Thread.sleep(<span class="hljs-number">5000</span>);<br>        System.out.println(<span class="hljs-string">&quot;开始执行 unpark(thread)&quot;</span>);<br>        LockSupport.unpark(thread);<br>        Thread.sleep(<span class="hljs-number">5000</span>);<br>        System.out.println(<span class="hljs-string">&quot;执行 unpark(thread) 结束&quot;</span>);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过上面示例可以看出：</p><ol><li>执行 unpark 可以进行给予指定线程一个证书。</li><li>线程当前被 park 阻塞，此时给予证书之后， park 会消耗证书，然后继续执行。</li></ol><h4 id="许可上限为-1"><a href="#许可上限为-1" class="headerlink" title="许可上限为 1"></a>许可上限为 1</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockSupportTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;unpark 1次&quot;</span>);<br>        LockSupport.unpark(Thread.currentThread());<br>        System.out.println(<span class="hljs-string">&quot;unpark 2次&quot;</span>);<br>        LockSupport.unpark(Thread.currentThread());<br><br>        System.out.println(<span class="hljs-string">&quot;执行 - park 1 次&quot;</span>);<br>        LockSupport.park();<br>        System.out.println(<span class="hljs-string">&quot;执行 - park 2 次&quot;</span>);<br>        LockSupport.park();<br>        <br>        System.out.println(<span class="hljs-string">&quot;LockSupport park 之后……&quot;</span>);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>线程阻塞，可以看出 permit 只能有一个</li></ol><h4 id="中断可以使-park-继续执行并不会抛出异常"><a href="#中断可以使-park-继续执行并不会抛出异常" class="headerlink" title="中断可以使 park 继续执行并不会抛出异常"></a>中断可以使 park 继续执行并不会抛出异常</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockSupportTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;线程 &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;开始执行 park&quot;</span>);<br>                LockSupport.park(<span class="hljs-keyword">this</span>);<br>                System.out.println(<span class="hljs-string">&quot;线程 &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;执行 park 结束&quot;</span>);<br><br>                System.out.println(<span class="hljs-string">&quot;线程 &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;开始执行 park 第二次&quot;</span>);<br>                LockSupport.park(<span class="hljs-keyword">this</span>);<br>                System.out.println(<span class="hljs-string">&quot;线程 &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;执行 park 第二次 结束&quot;</span>);<br><br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            thread.start();<br>            <span class="hljs-comment">// 保证 上面线程先执行，然后再主线程</span><br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>            System.out.println(<span class="hljs-string">&quot;开始执行 unpark(thread)&quot;</span>);<br>            <span class="hljs-comment">// LockSupport.unpark(thread);</span><br>            thread.interrupt();<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>            System.out.println(<span class="hljs-string">&quot;执行 unpark(thread) 结束&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/bin/java ...<br>线程 Thread-0开始执行 park<br>开始执行 unpark(thread)<br>线程 Thread-0执行 park 结束<br>线程 Thread-0开始执行 park 第二次<br>线程 Thread-0执行 park 第二次 结束<br>执行 unpark(thread) 结束<br></code></pre></td></tr></table></figure><ol><li>可以看出线程中断，park 会继续执行，并且没有抛出异常。</li><li>thread.interrupt(); 调用之后， 设置线程中断标示，unpark 没有清除中断标示，第二个 park 也会继续执行。</li></ol><h4 id="使用诊断工具"><a href="#使用诊断工具" class="headerlink" title="使用诊断工具"></a>使用诊断工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">liuzhihang % &gt; jps<br>76690 LockSupportTest<br>77130 Jps<br>liuzhihang % &gt; jstack 77265<br>...<br><span class="hljs-string">&quot;main&quot;</span> <span class="hljs-comment">#1 prio=5 os_prio=31 tid=0x00007f7f3e80a000 nid=0xe03 waiting on condition [0x000070000dfcd000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)<br>        at com.liuzhihang.source.LockSupportTest.main(LockSupportTest.java:14)<br></code></pre></td></tr></table></figure><ol><li>中间省略部分，但是可以看出线程进入 <code>WAITING</code> 状态</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockSupport</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> sun.misc.Unsafe UNSAFE;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 为线程 thread 设置一个许可</span><br><span class="hljs-comment">     * 无许可，则添加一个许可，有许可，则不添加</span><br><span class="hljs-comment">     * 如果线程因为 park 被阻塞， 添加许可之后，会解除阻塞状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unpark</span><span class="hljs-params">(Thread thread)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (thread != <span class="hljs-keyword">null</span>)<br>            UNSAFE.unpark(thread);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有许可，则使用该许可</span><br><span class="hljs-comment">     * 没有许可，阻塞线程，直到获得许可</span><br><span class="hljs-comment">     * 传递 blocker 是为了方便使用诊断工具</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">park</span><span class="hljs-params">(Object blocker)</span> </span>&#123;<br>        Thread t = Thread.currentThread();<br>        setBlocker(t, blocker);<br>        UNSAFE.park(<span class="hljs-keyword">false</span>, <span class="hljs-number">0L</span>);<br>        setBlocker(t, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置线程的 blocker 属性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBlocker</span><span class="hljs-params">(Thread t, Object arg)</span> </span>&#123;<br>        <span class="hljs-comment">// Even though volatile, hotspot doesn&#x27;t need a write barrier here.</span><br>        UNSAFE.putObject(t, parkBlockerOffset, arg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>LockSupport 的 park unpark 方法，实际调用的是底层 Unsafe 类的 native 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Unsafe</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unpark</span><span class="hljs-params">(Object var1)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">park</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> var1, <span class="hljs-keyword">long</span> var2)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>既然调用了 Unsafe 到此处肯定不能善罢甘休。</p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/ffecad2c8644bab7d152be118c31722d.jpg" align=center /><h4 id="hotspot-源码"><a href="#hotspot-源码" class="headerlink" title="hotspot 源码"></a>hotspot 源码</h4><p>这块是下载的官方包中的源码，阅读并查阅资料了解的大概逻辑，不清楚之处，希望指导出来。</p><p>也可以直接跳过直接看结论。</p><p>查看jdk源码<br><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/5a83b7215107/src/share/vm/runtime/park.hpp">http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/5a83b7215107/src/share/vm/runtime/park.hpp</a></p><p>这块在以 os_linux 代码为例<br><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/5a83b7215107/src/os/linux/vm/os_linux.cpp">http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/5a83b7215107/src/os/linux/vm/os_linux.cpp</a></p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/c-parker.png" align=center /><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/c-park.png" align=center /><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/c-unpark.png" align=center /><ol><li>在底层维护了一个 <code>_counter</code> 通过更新 <code>_counter</code> 的值来标示是否有证明。</li><li>在 park 时，判断 <code>_counter</code> 为 0，则阻塞等待，为 1 则获得更新为 0 并返回。</li><li>在 unpark 时，判断 <code>_counter</code> 为 0，则给予凭证，并唤醒线程，为 1 则直接返回。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结也是和预想的是相同的。</p><ol><li>许可（permit）的上限是1，也就是说只有 0 或 1 。</li><li>park: 没有许可的时候，permit 为 0 ，调用 park 会阻塞；有许可的时候，permit 为 1 ， 调用 park 会扣除一个许可，然后返回。</li><li>unpark：没有许可的时候，permit 为 0 ，调用 unpark 会增加一个许可，因为许可上限是 1 ， 所以调用多次也只会为 1 个。</li><li>线程初始的时候是没有许可的。</li><li>park 的当前线程如果被中断，会立即返回，并不会抛出中断异常。</li></ol><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul><li>park/unpark 和 wait/notify 区别</li></ul><ol><li>park 阻塞当前线程，unpark 唤醒指定线程。</li><li>wait() 需要结合锁使用，并释放锁资源，如果没有设置超时时间，则需要 notify() 唤醒。而 notify() 是随机唤醒线程。 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- JDK 8 新增的 LongAdder，得过来看一下！</title>
      <link href="2020/06/28/source-code-longadder.html"/>
      <url>2020/06/28/source-code-longadder.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在介绍 AtomicInteger 时，已经说明在高并发下大量线程去竞争更新同一个原子变量时，因为只有一个线程能够更新成功，其他的线程在竞争失败后，只能一直循环，不断的进行 CAS 尝试，从而浪费了 CPU 资源。而在 JDK 8 中新增了 LongAdder 用来解决高并发下变量的原子操作。下面同样通过阅读源码来了解 LongAdder 。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一个或多个变量共同维持初值为 0 总和。 当跨线程竞争更新时，变量集可以动态增长以减少竞争。 方法 sum 返回当前变量集的总和。</p><p>当多个线程更新时，这个类是通常优选 AtomicLong ，比如用于收集统计信息，不用于细粒度同步控制的共同总和。 在低更新竞争，这两个类具有相似的特征。 但在高更新竞争时，使用 LongAdder 性能要高于 AtomicLong，同样要消耗更高的空间为代价。</p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/longadder-uml.png" align=center /><p>LongAdder 继承了 Striped64，内部维护一个 Cells 数组，相当于多个 Cell 变量， 每个 Cell 里面都有一个初始值为 0 的 long 型变量。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="Cell-类"><a href="#Cell-类" class="headerlink" title="Cell 类"></a>Cell 类</h4><p>Cell 类 是 Striped64 的静态内部类。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@sun</span>.misc.Contended <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cell</span> </span>&#123;<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">long</span> value;<br>    Cell(<span class="hljs-keyword">long</span> x) &#123; value = x; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">cas</span><span class="hljs-params">(<span class="hljs-keyword">long</span> cmp, <span class="hljs-keyword">long</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> UNSAFE.compareAndSwapLong(<span class="hljs-keyword">this</span>, valueOffset, cmp, val);<br>    &#125;<br><br>    <span class="hljs-comment">// Unsafe mechanics</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> sun.misc.Unsafe UNSAFE;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> valueOffset;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            UNSAFE = sun.misc.Unsafe.getUnsafe();<br>            Class&lt;?&gt; ak = Cell.class;<br>            valueOffset = UNSAFE.objectFieldOffset<br>                (ak.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>Cell 使用 @sun.misc.Contended 注解。</li><li>内部维护一个被 volatile 修饰的 long 型 value 。</li><li>提供 cas 方法，更新value。</li></ol><p>其中 @sun.misc.Contended 注解作用是为了减少缓存争用。什么是缓存争用，这里只做下简要介绍。</p><blockquote><p>伪共享<br>CPU 存在多级缓存，其中最小存储单元是 Cache Line，每个 Cache Line 能存储 64 个字节的数据。<br>在多线程场景下，A B 两个线程数据如果被存储到同一个 Cache Line 上，此时 A B 更新各自的数据，就会发生缓存争用，导致多个线程之间相互牵制，变成了串行程序，降低了并发。<br>@sun.misc.Contended 注解，则可以保证该变量独占一个 Cache Line。<br>详细可参考：<a href="http://openjdk.java.net/jeps/142">http://openjdk.java.net/jeps/142</a></p></blockquote><h4 id="Striped64-核心属性"><a href="#Striped64-核心属性" class="headerlink" title="Striped64 核心属性"></a>Striped64 核心属性</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Striped64</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Number</span> </span>&#123;<br><br>    <span class="hljs-comment">/** CPU 的数量，以限制表大小 */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> NCPU = Runtime.getRuntime().availableProcessors();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * cell 数组，当非空时，大小是 2 的幂。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Cell[] cells;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Base 值，在无争用时使用，表初始化竞赛期间的后备。使用 CAS 更新 </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">long</span> base;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调整大小和创建Cells时自旋锁（通过CAS锁定）使用。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> cellsBusy;<br>&#125;<br></code></pre></td></tr></table></figure><p>Striped64 类主要提供以下几个属性：</p><ol><li>NCPU：CPU 的数量，以限制表大小。</li><li>cells：Cell[] cell 数组，当非空时，大小是 2 的幂。</li><li>base：long 型，Base 值，在无争用时使用，表初始化竞赛期间的后备。使用 CAS 更新。</li><li>cellsBusy：调整大小和创建Cells时自旋锁（通过CAS锁定）使用。</li></ol><p>下面看是进入核心逻辑：</p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/uFCfpw.gif" align=center /><h4 id="LongAdder-add"><a href="#LongAdder-add" class="headerlink" title="LongAdder#add"></a>LongAdder#add</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LongAdder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Striped64</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">long</span> x)</span> </span>&#123;<br>        Cell[] as; <span class="hljs-keyword">long</span> b, v; <span class="hljs-keyword">int</span> m; Cell a;<br>        <span class="hljs-comment">// cells 是 数组，base 是基础值</span><br>        <span class="hljs-keyword">if</span> ((as = cells) != <span class="hljs-keyword">null</span> || !casBase(b = base, b + x)) &#123;<br>            <span class="hljs-keyword">boolean</span> uncontended = <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">if</span> (as == <span class="hljs-keyword">null</span> || (m = as.length - <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span> ||<br>                (a = as[getProbe() &amp; m]) == <span class="hljs-keyword">null</span> ||<br>                !(uncontended = a.cas(v = a.value, v + x)))<br>                longAccumulate(x, <span class="hljs-keyword">null</span>, uncontended);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Striped64</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Number</span> </span>&#123;<br>    <span class="hljs-comment">// 使用 CAS 更新 BASE 的值</span><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">casBase</span><span class="hljs-params">(<span class="hljs-keyword">long</span> cmp, <span class="hljs-keyword">long</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> UNSAFE.compareAndSwapLong(<span class="hljs-keyword">this</span>, BASE, cmp, val);<br>    &#125;<br>    <span class="hljs-comment">// 返回当前线程的探测值。 由于包装限制，从ThreadLocalRandom复制</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getProbe</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> UNSAFE.getInt(Thread.currentThread(), PROBE);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/longadder-add.png" align=center /><ol><li>首先会对 Base 值进行 CAS 更新，当 Base 发生竞争时， 会更新数组内的 Cell 。</li><li>数组未初始化，Cell 未初始化， Cell 更新失败，即 Cell 也发生竞争时，会调用 Striped64 的 longAccumulate 方法。</li></ol><h4 id="Striped64-longAccumulate"><a href="#Striped64-longAccumulate" class="headerlink" title="Striped64#longAccumulate"></a>Striped64#longAccumulate</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Striped64</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Number</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * x 要增加的值</span><br><span class="hljs-comment">     * wasUncontended 有没有发生竞争 </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">longAccumulate</span><span class="hljs-params">(<span class="hljs-keyword">long</span> x, LongBinaryOperator fn, <span class="hljs-keyword">boolean</span> wasUncontended)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> h;<br>        <span class="hljs-comment">// 当前线程有无初始化线程探测值， 给当前线程生成一个 非 0 探测值</span><br>        <span class="hljs-keyword">if</span> ((h = getProbe()) == <span class="hljs-number">0</span>) &#123;<br>            ThreadLocalRandom.current(); <span class="hljs-comment">// force initialization</span><br>            h = getProbe();<br>            wasUncontended = <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">boolean</span> collide = <span class="hljs-keyword">false</span>;                <span class="hljs-comment">// True if last slot nonempty</span><br>        <span class="hljs-comment">// 循环</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            Cell[] as; Cell a; <span class="hljs-keyword">int</span> n; <span class="hljs-keyword">long</span> v;<br>            <span class="hljs-comment">// 数组不为空切数组长度大于 0</span><br>            <span class="hljs-keyword">if</span> ((as = cells) != <span class="hljs-keyword">null</span> &amp;&amp; (n = as.length) &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// (n - 1) &amp; h 获取到索引，索引处 cell 是否为 null， cell未初始化</span><br>                <span class="hljs-keyword">if</span> ((a = as[(n - <span class="hljs-number">1</span>) &amp; h]) == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-comment">// 判断 cellsBusy 是否为 0</span><br>                    <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span>) &#123;       <span class="hljs-comment">// Try to attach new Cell</span><br>                        Cell r = <span class="hljs-keyword">new</span> Cell(x);   <span class="hljs-comment">// Optimistically create</span><br>                        <span class="hljs-comment">// cellsBusy == 0 且 使用 casCellsBusy 方法将其更新为 1，失败会继续循环</span><br>                        <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span> &amp;&amp; casCellsBusy()) &#123;<br>                            <span class="hljs-keyword">boolean</span> created = <span class="hljs-keyword">false</span>;<br>                            <span class="hljs-keyword">try</span> &#123;               <span class="hljs-comment">// Recheck under lock</span><br>                                Cell[] rs; <span class="hljs-keyword">int</span> m, j;<br>                                <span class="hljs-comment">// 重新检查状态 并创建</span><br>                                <span class="hljs-keyword">if</span> ((rs = cells) != <span class="hljs-keyword">null</span> &amp;&amp; (m = rs.length) &gt; <span class="hljs-number">0</span> &amp;&amp; rs[j = (m - <span class="hljs-number">1</span>) &amp; h] == <span class="hljs-keyword">null</span>) &#123;<br>                                    rs[j] = r;<br>                                    created = <span class="hljs-keyword">true</span>;<br>                                &#125;<br>                            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                                <span class="hljs-comment">// 创建完成之后， 改回 cellsBusy 值</span><br>                                cellsBusy = <span class="hljs-number">0</span>;<br>                            &#125;<br>                            <span class="hljs-keyword">if</span> (created)<br>                                <span class="hljs-keyword">break</span>;<br>                            <span class="hljs-comment">// 未创建继续循环</span><br>                            <span class="hljs-keyword">continue</span>;           <span class="hljs-comment">// Slot is now non-empty</span><br>                        &#125;<br>                    &#125;<br>                    collide = <span class="hljs-keyword">false</span>;<br>                &#125;<br>                <span class="hljs-comment">// 传入的 wasUncontended 为 false 即发生碰撞了， 修改为未碰撞， 此处会继续循环，走到下一步，相当于会一直循环这个 cell</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!wasUncontended)       <span class="hljs-comment">// CAS already known to fail</span><br>                    wasUncontended = <span class="hljs-keyword">true</span>;      <span class="hljs-comment">// Continue after rehash</span><br>                <span class="hljs-comment">// cas 更新 cell 的 value， 成功则返回</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a.cas(v = a.value, ((fn == <span class="hljs-keyword">null</span>) ? v + x : fn.applyAsLong(v, x))))<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// 数组到最大长度 即大于等于 CPU 数量， 或者 cells 数组被改变，</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &gt;= NCPU || cells != as)<br>                    collide = <span class="hljs-keyword">false</span>;            <span class="hljs-comment">// At max size or stale</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!collide)<br>                    collide = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-comment">// 乐观锁 进行扩容</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span> &amp;&amp; casCellsBusy()) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">if</span> (cells == as) &#123;      <span class="hljs-comment">// Expand table unless stale</span><br>                            Cell[] rs = <span class="hljs-keyword">new</span> Cell[n &lt;&lt; <span class="hljs-number">1</span>];<br>                            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>                                rs[i] = as[i];<br>                            cells = rs;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        cellsBusy = <span class="hljs-number">0</span>;<br>                    &#125;<br>                    collide = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">continue</span>;                   <span class="hljs-comment">// Retry with expanded table</span><br>                &#125;<br>                <span class="hljs-comment">// 当前探针值不能操作成功，则重新设置一个进行尝试</span><br>                h = advanceProbe(h);<br>            &#125;<br>            <span class="hljs-comment">// 没有加 cellsBusy 乐观锁 且 没有初始化，且获得锁成功（此时 cellsBusy == 1）</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span> &amp;&amp; cells == as &amp;&amp; casCellsBusy()) &#123;<br>                <span class="hljs-keyword">boolean</span> init = <span class="hljs-keyword">false</span>;<br>                <span class="hljs-keyword">try</span> &#123;                           <span class="hljs-comment">// Initialize table</span><br>                    <span class="hljs-keyword">if</span> (cells == as) &#123;<br>                        Cell[] rs = <span class="hljs-keyword">new</span> Cell[<span class="hljs-number">2</span>];<br>                        rs[h &amp; <span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Cell(x);<br>                        cells = rs;<br>                        init = <span class="hljs-keyword">true</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    cellsBusy = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (init)<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 尝试在base上累加</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (casBase(v = base, ((fn == <span class="hljs-keyword">null</span>) ? v + x : fn.applyAsLong(v, x))))<br>                <span class="hljs-keyword">break</span>;                          <span class="hljs-comment">// Fall back on using base</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>longAccumulate 方法一共有三种情况</p><ol><li><code>(as = cells) != null &amp;&amp; (n = as.length) &gt; 0</code> 数组不为空且长度大于 0 。<ol><li>获取索引处的 cell ， cell 为空则进行初始化。</li><li>cell 不为空，使用 cas 更新， 成功 <code>break;</code> 跳出循环， 失败则还在循环内，会一直尝试。</li><li>collide 指是否发生冲突，冲突后会进行重试。</li><li>冲突后会尝试获得锁并进行扩容，扩容长度为原来的 2 倍，然后继续重试。</li><li>获得锁失败（说明其他线程在扩容）会重新进行计算探针值。</li></ol></li><li><code>cellsBusy == 0 &amp;&amp; cells == as &amp;&amp; casCellsBusy()</code> 数组为空，获得乐观锁成功。<ol><li>直接初始化数组。</li><li>初始数组长度为 2 。</li></ol></li><li><code>casBase(v = base, ((fn == null) ? v + x : fn.applyAsLong(v, x)))</code> 获得乐观锁失败。<ol><li>说明有其他线程在初始化数组，直接 CAS 更新 base 。</li></ol></li></ol><h4 id="LongAdder-sum"><a href="#LongAdder-sum" class="headerlink" title="LongAdder#sum"></a>LongAdder#sum</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LongAdder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Striped64</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span> </span>&#123;<br>        Cell[] as = cells; Cell a;<br>        <span class="hljs-keyword">long</span> sum = base;<br>        <span class="hljs-keyword">if</span> (as != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; as.length; ++i) &#123;<br>                <span class="hljs-keyword">if</span> ((a = as[i]) != <span class="hljs-keyword">null</span>)<br>                    sum += a.value;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>数组为空，说明没有发生竞争，直接返回 base 。</li><li>数组不为空，说明发生竞争，累加 cell 的 value 和 base 的和进行返回。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><ol><li>LongAdder 继承了 Striped64，内部维护一个 Cells 数组，相当于多个 Cell 变量， 每个 Cell 里面都有一个初始值为 0 的 long 型变量。</li><li>未发生竞争时（Cells 数组未初始化），是对 base 变量进行原子操作。</li><li>发生竞争时，每个线程对自己的 Cell 变量的 value 进行原子操作。</li></ol><h4 id="如何确定哪个线程操作哪个-cell？"><a href="#如何确定哪个线程操作哪个-cell？" class="headerlink" title="如何确定哪个线程操作哪个 cell？"></a>如何确定哪个线程操作哪个 cell？</h4><p>通过 <code>getProbe()</code> 方法获取该线程的探测值，然后和数组长度 <code>n - 1</code> 做 <code>&amp;</code> 操作 (n - 1) &amp; h 。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getProbe</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> UNSAFE.getInt(Thread.currentThread(), PROBE);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Cells-数组初始化及扩容？"><a href="#Cells-数组初始化及扩容？" class="headerlink" title="Cells 数组初始化及扩容？"></a>Cells 数组初始化及扩容？</h4><p>初始化扩容时会判断 <code>cellsBusy</code>， cellsBusy 使用 <code>volatile</code> 修饰，保证线程见可见性，同时使用 CAS 进行更新。 0 表示空闲，1 表示正在初始化或扩容。</p><p>初始化时会创建长度为 2 的 Cell 数组。扩容是创建一个长度是原数组长度 2 倍的新数组，并循环赋值。</p><p>如果线程访问分配的 Cell 元素有冲突后，会使用 <code>advanceProbe()</code> 方法重新获取探测值，再次进行尝试。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>在高并发情况下，需要相对高的性能，同时数据准确性要求不高，可以考虑使用 LongAdder。</p><p>当要保证线程安全，并允许一定的性能损耗时，并对数据准确性要求较高，优先使用 AtomicLong。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 请介绍下你了解的ThreadLocal，它的底层原理！</title>
      <link href="2020/06/21/source-code-threadlocal.html"/>
      <url>2020/06/21/source-code-threadlocal.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>前言</strong></p><p>业务开发中经常使用 ThreadLocal 来存储用户信息等线程私有对象… ThreadLocal 内部构造是什么样子的？为什么可以线程私有？常说的内存泄露又是怎么回事？</p><p>公众号：liuzhihangs ，记录工作学习中的技术、开发及源码笔记；时不时分享一些生活中的见闻感悟。欢迎大佬来指导！</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>ThreadLocal 类提供了线程局部变量。和正常对象不同的是，每个线程都可以访问 get()、set() 方法，获取独属于自己的副本。 ThreadLocal 实例通常是类中的私有静态字段，并且其状态和线程关联。<br>每个线程都保持对其线程局部变量副本的隐式引用，只要线程是活动的并且 ThreadLocal 实例访问; 一个线程消失之后，所有的线程局部实例的副本都会被垃圾回收（除非存在对这些副本的其他引用）。</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>有这么一种使用场景，收到 web 请求，先进行 token 验证，而这个 token，可以解析出用户 user 的信息。所以我这边一般是这样使用的：</p><ol><li>自定义注解， <code>@CheckToken</code> ， 标识该方法需要校验 token。</li><li>在 <code>Interceptor</code>（拦截器）中检查，如果方法有 <code>@CheckToken</code> 注解则校验 token。</li><li>从Header中获取 <code>Authorization</code> ，请求第三方或者自己的逻辑校验 token ，并解析成 user。</li><li>将user放到<code>ThreadLocal</code>中。</li><li>controller、service 在后续使用中， 如果需要 user 信息，可以直接从 <code>ThreadLocal</code> 中获取。</li><li>使用结束后进行remove。</li></ol><h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocalUserUtils</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户信息保存至 ThreadLocal 中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;User&gt; USER_THREAD_LOCAL = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        USER_THREAD_LOCAL.set(user);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> User <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> USER_THREAD_LOCAL.get();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;<br>        USER_THREAD_LOCAL.remove();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. 加上注解 CheckToken</span><br><span class="hljs-comment"> * 只有方法， 类忽略</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@CheckToken</span><br><span class="hljs-meta">@PostMapping(&quot;/doXxx&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;Resp&gt; <span class="hljs-title">doXxx</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Req req)</span> </span>&#123;<br><br>    Resp resp = xxxService.doXxx(req);<br><br>    <span class="hljs-keyword">return</span> result.success(resp);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 2. 3. 4.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        LocalUserUtils.remove();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 请求方法是否存在注解</span><br>        <span class="hljs-keyword">boolean</span> assignableFrom = handler.getClass().isAssignableFrom(HandlerMethod.class);<br><br>        <span class="hljs-keyword">if</span> (!assignableFrom) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        CheckToken checkToken = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod) &#123;<br>            checkToken = ((HandlerMethod) handler).getMethodAnnotation(CheckToken.class);<br>        &#125;<br><br>        <span class="hljs-comment">// 没有加注解 直接放过</span><br>        <span class="hljs-keyword">if</span> (checkToken == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 从Header中获取Authorization</span><br>        String authorization = request.getHeader(<span class="hljs-string">&quot;Authorization&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;header authorization : &#123;&#125;&quot;</span>, authorization);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(authorization)) &#123;<br>            log.error(<span class="hljs-string">&quot;从Header中获取Authorization失败&quot;</span>);<br>            <span class="hljs-keyword">throw</span> CustomExceptionEnum.NOT_HAVE_TOKEN.throwCustomException();<br>        &#125;<br><br>        User user = xxxUserService.checkAuthorization(authorization);<br>        <span class="hljs-comment">// 放到</span><br>        LocalUserUtils.set(user);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 5. 使用</span><br><span class="hljs-comment"> * 只有方法， 类忽略</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Resp <span class="hljs-title">doXxx</span><span class="hljs-params">(Req req)</span> </span>&#123;<br><br>    User user = LocalUserUtils.get();<br>    <br>    <span class="hljs-comment">// do something ...</span><br><br>    <span class="hljs-keyword">return</span> resp;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/640.jpeg"  div align=center /><h4 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h4><ol><li>为什么可以线程私有？</li><li>为什么建议声明为静态？</li><li>为什么强制使用后必须remove？</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/19.png" alt="19"></p><p>图 | 阿里巴巴 - Java开发手册（截图）</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/6.png" alt="6"></p><p>图 | 阿里巴巴 - Java开发手册（截图）</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">// 省略 ...</span><br><br>    ThreadLocal.ThreadLocalMap threadLocals = <span class="hljs-keyword">null</span>;<br> <br>    ThreadLocal.ThreadLocalMap inheritableThreadLocals = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">// 省略 ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出 <code>Thread</code> 对象中声明了 <code>ThreadLocal.ThreadLocalMap</code> 对象，每个线程都有自己的工作内存，每个线程都有自己的 <code>ThreadLocal. ThreadLocalMap</code> 对象，所以在线程之间是互相<code>隔离</code>的。</p><h4 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h4><p>ThreadLocal则是一个泛型类，同时提供 <code>set()</code>、<code>get()</code>、<code>remove()</code> 等<code>静态</code>方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocal</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">// 线程本地hashCode</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> threadLocalHashCode = nextHashCode();<br><br>    <span class="hljs-comment">// 获取此线程局部变量的当前线程副本中的值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;...&#125;<br>    <span class="hljs-comment">// 设置当前线程的此线程局部变量的复制到指定的值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T value)</span> </span>&#123;...&#125;<br>    <span class="hljs-comment">// 删除当前线程的此线程局部变量的值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;...&#125;<br>    <span class="hljs-comment">// ThreadLocalMap只是用来维持线程本地值的定制Map</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocalMap</span> </span>&#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="set-T-value-方法"><a href="#set-T-value-方法" class="headerlink" title="set(T value)方法"></a>set(T value)方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T value)</span> </span>&#123;<br>    <span class="hljs-comment">// 获取当前线程</span><br>    Thread t = Thread.currentThread();<br>    <span class="hljs-comment">// 获取当前线程的 threadLocals 属性</span><br>    ThreadLocalMap map = getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>)<br>        <span class="hljs-comment">// 存在则赋值</span><br>        map.set(<span class="hljs-keyword">this</span>, value);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 不存在则直接创建</span><br>        createMap(t, value);<br>&#125;<br><span class="hljs-comment">// 根据线程获取当前线程的ThreadLocalMap</span><br><span class="hljs-function">ThreadLocalMap <span class="hljs-title">getMap</span><span class="hljs-params">(Thread t)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> t.threadLocals;<br>&#125;<br><span class="hljs-comment">// 创建ThreadLocalMap 并赋值给当前线程的threadLocals字段</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> </span>&#123;<br>    t.threadLocals = <span class="hljs-keyword">new</span> ThreadLocalMap(<span class="hljs-keyword">this</span>, firstValue);<br>&#125;<br></code></pre></td></tr></table></figure><p>1.<code>Thread.currentThread()</code> 先获取到当前线程。<br>2. 获取当前线程的 <code>threadLocals</code> 属性，即 <code>ThreadLocalMap</code>。<br>3. 判断 Map 是否存在，存在则赋值，不存在则创建对象。</p><h5 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 获取当前线程</span><br>    Thread t = Thread.currentThread();<br>    <span class="hljs-comment">// 获取当前线程的 threadLocals 属性</span><br>    ThreadLocalMap map = getMap(t);<br>    <span class="hljs-comment">// map不为空</span><br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 根据当前ThreadLocal获取的ThreadLocalMap的Entry节点</span><br>        ThreadLocalMap.Entry e = map.getEntry(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 获取节点的value 并返回</span><br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            T result = (T)e.value;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 设置初始值并返回 （null）</span><br>    <span class="hljs-keyword">return</span> setInitialValue();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>1.<code>Thread.currentThread()</code> 先获取到当前线程。<br>2. 获取当前线程的 <code>threadLocals</code> 属性，即 <code>ThreadLocalMap</code> 。<br>3. 判断 Map 不为空，根据当前 <code>ThreadLocal</code> 对象获取 <code>ThreadLocalMap.Entry</code> 节点, 从节点中获取 value。<br>4.<code>ThreadLocalMap</code> 为空或者 <code>ThreadLocalMap.Entry</code> 为空，则初始化 ThreadLocalMap 并返回。</p><h5 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 获取当前线程的ThreadLocalMap</span><br>    ThreadLocalMap m = getMap(Thread.currentThread());<br>    <span class="hljs-comment">// 不为空， 从ThreadLocalMap中移除该属性</span><br>    <span class="hljs-keyword">if</span> (m != <span class="hljs-keyword">null</span>)<br>        m.remove(<span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>阅读 <code>set()</code>、<code>get()</code>、<code>remove()</code> 的源码之后发现后面其实是操作的 <code>ThreadLocalMap</code>, 主要还是操作的 <code>ThreadLocalMap</code> 的 <code>set()</code>、<code>getEntry()</code>、<code>remove()</code> 以及构造函数。下面看是看 ThreadLocalMap 的源码。</p><h4 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocalMap</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Entry节点继承WeakReference是弱引用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WeakReference</span>&lt;<span class="hljs-title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;<br>        <span class="hljs-comment">/** 与此ThreadLocal关联的值。 */</span><br>        Object value;<br><br>        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;<br>            <span class="hljs-keyword">super</span>(k);<br>            value = v;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 初始容量-必须是2的幂</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> INITIAL_CAPACITY = <span class="hljs-number">16</span>;<br><br>    <span class="hljs-comment">// 表，根据需要调整大小. table.length必须始终为2的幂.</span><br>    <span class="hljs-keyword">private</span> ThreadLocal.ThreadLocalMap.Entry[] table;<br><br>    <span class="hljs-comment">// 表中的条目数。 </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 扩容阈值  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> threshold; <span class="hljs-comment">// Default to 0</span><br>    <span class="hljs-comment">// 设置阀值为长度的 2/3   </span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setThreshold</span><span class="hljs-params">(<span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>        threshold = len * <span class="hljs-number">2</span> / <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-comment">// 构造函数</span><br>    ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;...&#125;<br><br>    <span class="hljs-comment">// 根据ThreadLocal获取节点Entry</span><br>    <span class="hljs-keyword">private</span> ThreadLocal.ThreadLocalMap.<span class="hljs-function">Entry <span class="hljs-title">getEntry</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;...&#125;<br><br>    <span class="hljs-comment">// set ThreadLocalMap的k-v</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;...&#125;<br><br>    <span class="hljs-comment">// 移除当前值</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;...&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>Entry 继承了 <code>WeakReference&lt;ThreadLocal&lt;?&gt;</code> 也就意味着， <code>Entry 节点的 key 是弱引用</code>。</li><li>Entry 对象的key弱引用，指向的是 <code>ThreadLocal</code> 对象。</li><li>线程对象执行完毕，线程对象内实例属性会被回收，此时线程内 <code>ThreadLocal</code> 对象的<code>引用</code>被置为 <code>null</code> ，即 Entry 的 <code>key</code> 为 <code>null</code>, key 会被垃圾回收。</li><li>ThreadLocal 对象通常为私有静态变量， 生命周期不会至少不会随着线程技术而结束。</li><li>ThreadLocal 对象存在，并且 <code>Entry的 key == null &amp;&amp; value != null</code> ，这时就会造成内存泄漏。</li></ol><ul><li>小补充</li></ul><ol><li>强引用、软引用、弱引用、虚引用<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">强引用（StrongReference）：最常见，直接 new Object(); 创建的即为强引用。当内存空间不足，Java虚拟机宁愿抛出 OOM，也不愿意随意回收具有强引用的对象来解决内存不足问题。<br>软引用（SoftReference）：内存足够，垃圾回收器不会回收软引用对象；内存不足时，垃圾回收器会回收。<br>弱引用（WeakReference）：垃圾回收器线程，发现就会回收。<br>虚引用（PhantomReference）：任何时候都有可能被垃圾回收，必须引用队列联合使用。<br></code></pre></td></tr></table></figure></li><li>内存泄露：<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。<br>—— 维基百科<br></code></pre></td></tr></table></figure></li></ol><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/SJPSIU.jpg"  div align=center /><h5 id="构造函数及hash计算"><a href="#构造函数及hash计算" class="headerlink" title="构造函数及hash计算"></a>构造函数及hash计算</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;<br>    <span class="hljs-comment">// 初始化Entry数组， 长度为16</span><br>    table = <span class="hljs-keyword">new</span> Entry[INITIAL_CAPACITY];<br>    <span class="hljs-comment">// 获取key的hashCode，并计算出在数组中的索引，</span><br>    <span class="hljs-comment">// 长度是 2的幂的情况下，取模 a % b == a &amp; (b - 1)</span><br>    <span class="hljs-keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="hljs-number">1</span>);<br>    table[i] = <span class="hljs-keyword">new</span> Entry(firstKey, firstValue);<br>    <span class="hljs-comment">// 设置数组元素数</span><br>    size = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 设置扩容阈值</span><br>    setThreshold(INITIAL_CAPACITY);<br>&#125;<br></code></pre></td></tr></table></figure><p>threadLocalHashCode 是 ThreadLocal 的静态属性，通过 nextHashCode 方法获取。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> threadLocalHashCode = nextHashCode();<br><br><span class="hljs-comment">// 被赋予了接下来的哈希码。 原子更新。 从零开始。</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> AtomicInteger nextHashCode = <span class="hljs-keyword">new</span> AtomicInteger();<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> HASH_INCREMENT = <span class="hljs-number">0x61c88647</span>;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nextHashCode</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 返回下一个hash码，通过步长 0x61c88647 累加生成，这块注释说明是最佳哈希值</span><br>    <span class="hljs-keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>初始化数组，长度16。</li><li>计算 key 的 hashCode，对2的幂取模。</li><li>设置元素，元素数及扩容阈值。</li></ol><p>hashCode 通过步长 0x61c88647 累加生成， 并且使用了 AtomicInteger，保证原子性。</p><h5 id="set-方法"><a href="#set-方法" class="headerlink" title="set()方法"></a>set()方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;<br><br>    Entry[] tab = table;<br>    <span class="hljs-keyword">int</span> len = tab.length;<br>    <span class="hljs-comment">// hashcode取模求数组索引</span><br>    <span class="hljs-keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 获取数组中对应的位置， 重点关注 e = tab[i = nextIndex(i, len)]</span><br>    <span class="hljs-keyword">for</span> (Entry e = tab[i]; e != <span class="hljs-keyword">null</span>; e = tab[i = nextIndex(i, len)]) &#123;<br>        <span class="hljs-comment">// 获取key</span><br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class="hljs-comment">// key 存在则覆盖</span><br>        <span class="hljs-keyword">if</span> (k == key) &#123;<br>            e.value = value;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// key 不存在则赋值</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span>) &#123;<br>            replaceStaleEntry(key, value, i);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 此时 e == null 直接执创建节点</span><br>    tab[i] = <span class="hljs-keyword">new</span> Entry(key, value);<br>    <span class="hljs-keyword">int</span> sz = ++size;<br>    <span class="hljs-comment">// cleanSomeSlots 循环数组 查找全部key==null的Entry</span><br>    <span class="hljs-keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)<br>        rehash();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>获取循环 Entry 数组，获取 tab[i] 处的 e， e != null 继续循环<ol><li>此时发现 e 的 key 不存在，并且不是 null （hash冲突了。）</li><li>那就通过 e = tab[i = nextIndex(i, len)]) 继续获取下一个 i，并获取新的 tab[i] 处的 e。</li><li>赋值替换值结束结束并返回。</li></ol></li><li>e == null 结束循环。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 下一个index，如果 i + 1 &lt; len 直接返回下一个位置  </span><br><span class="hljs-comment">// 如果 i + 1 &gt;= len 则返回 0， 从头开始。</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nextIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ((i + <span class="hljs-number">1</span> &lt; len) ? i + <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">prevIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ((i - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span>) ? i - <span class="hljs-number">1</span> : len - <span class="hljs-number">1</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>这块利用环形设计，如果长度到达数组长度，则从开头开始继续查找。</li><li>int i = key.threadLocalHashCode &amp; (len-1); 求出索引，并不是从0开始的。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * staleSlot 为当前索引位置， 并且当前索引位置的 k == null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">replaceStaleEntry</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value, <span class="hljs-keyword">int</span> staleSlot)</span> </span>&#123;<br>    Entry[] tab = table;<br>    <span class="hljs-keyword">int</span> len = tab.length;<br>    Entry e;<br><br>    <span class="hljs-comment">// 需要清除的 entry 的索引</span><br>    <span class="hljs-keyword">int</span> slotToExpunge = staleSlot;<br><br>    <span class="hljs-comment">// 循环获取到上一个 key==null 的节点及其索引，有可能还是自己</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = prevIndex(staleSlot, len); (e = tab[i]) != <span class="hljs-keyword">null</span>; i = prevIndex(i, len))<br>        <span class="hljs-keyword">if</span> (e.get() == <span class="hljs-keyword">null</span>)<br>            slotToExpunge = i;<br><br>    <span class="hljs-comment">// 继续上一层的循环，查找下一个 k == key 的节点索引</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nextIndex(staleSlot, len); (e = tab[i]) != <span class="hljs-keyword">null</span>; i = nextIndex(i, len)) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <br>        <span class="hljs-keyword">if</span> (k == key) &#123;<br>            <span class="hljs-comment">// key 相等 则直接赋值</span><br>            e.value = value;<br>            <span class="hljs-comment">// 并且将 此处的 entry替换为 tab[staleSlot]</span><br>            tab[i] = tab[staleSlot];<br>            tab[staleSlot] = e;<br><br>            <span class="hljs-comment">// 如果发现要清除的 entry和传入的在一个位置上， 则直接赋值</span><br>            <span class="hljs-keyword">if</span> (slotToExpunge == staleSlot)<br>                slotToExpunge = i;<br>            <br>            <span class="hljs-comment">// 清除掉过期的 expungeStaleEntry(slotToExpunge) 会清除 entry的value，将其设置为null并将其设置为null， 并返回下一个需要清除的entry的索引位置</span><br>            <span class="hljs-comment">// cleanSomeSlots 循环数组 查找全部key==null的Entry</span><br>            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果向后扫描没有找到，并且已经到第初始传入的索引位置处了</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span> &amp;&amp; slotToExpunge == staleSlot)<br>            slotToExpunge = i;<br>    &#125;<br><br>    <span class="hljs-comment">// 没找到， 直接将旧值 Entry 设置为 null 并指向新创建的Entry</span><br>    tab[staleSlot].value = <span class="hljs-keyword">null</span>;<br>    tab[staleSlot] = <span class="hljs-keyword">new</span> Entry(key, value);<br><br>    <span class="hljs-comment">// 结束之后发现要清楚的 key的索引 不等于当前传入的索引， 说明还有其他需要清除。</span><br>    <span class="hljs-keyword">if</span> (slotToExpunge != staleSlot)<br>        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>这里存在三个属性 key， value，以及 staleSlot， staleSlot节点的 Entry != null 但是 k == null。</li><li>向前扫描获取到上一个  Entry != null 但是 k == null 的节点及其索引, 赋值给 slotToExpunge， 没有扫描到的话 slotToExpunge 还是等于 staleSlot。</li><li>向后扫描 Entry != null 的节点，因为在 set 方法中， 后面还有一段数组没有遍历。<ol><li>发现 key 相等的Entry节点了， 直接赋值，然后清除其他 Entry != null 但是 k == null 的节点， 并返回。</li><li>没有找到key相等的节点，但是找到了下一个 Entry != null 但是 k == null， 且此时 slotToExpunge 未发生变化，还是指向 staleSlot， 则 i 赋值给 slotToExpunge。</li></ol></li><li>向后扫描没有扫描到，则直接对当前节点（索引值为staleSlot）的节点的value设置为null，并指向新value。</li><li>结束之后发现 slotToExpunge 被改变了， 说明还有其他的要清除。</li></ol><h5 id="getEntry-方法"><a href="#getEntry-方法" class="headerlink" title="getEntry()方法"></a>getEntry()方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">private</span> Entry <span class="hljs-title">getEntry</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;<br>    <span class="hljs-comment">// hashcode取模求数组索引</span><br>    <span class="hljs-keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="hljs-number">1</span>);<br>    Entry e = table[i];<br>    <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span> &amp;&amp; e.get() == key)<br>        <span class="hljs-comment">// 存在则返回</span><br>        <span class="hljs-keyword">return</span> e;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 不存在</span><br>        <span class="hljs-keyword">return</span> getEntryAfterMiss(key, i, e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Entry <span class="hljs-title">getEntryAfterMiss</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, <span class="hljs-keyword">int</span> i, Entry e)</span> </span>&#123;<br>    Entry[] tab = table;<br>    <span class="hljs-keyword">int</span> len = tab.length;<br><br>    <span class="hljs-keyword">while</span> (e != <span class="hljs-keyword">null</span>) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class="hljs-keyword">if</span> (k == key)<br>            <span class="hljs-keyword">return</span> e;<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-comment">// key 已经 == null 了 清除一下 value</span><br>            expungeStaleEntry(i);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">// 继续获取下一个</span><br>            i = nextIndex(i, len);<br>        e = tab[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>hashcode 取模求数组索引。</li><li>索引处获取到 Entry 则直接返回。</li><li>获取不到或者获取到的 Entry key 不相等时，有可能是因为 hash 冲突，被放到别的地方， 调用 getEntryAfterMiss 方法。</li><li>getEntryAfterMiss 方法中。<ol><li>e == null  返回null。</li><li>e != null  判断key， key相等返回 Entry， key == null， 那就需要清除这个节点，然后继续按照 <code>nextIndex(i, len)</code> 方法找下一个节点。</li></ol></li></ol><h4 id="remove-方法-1"><a href="#remove-方法-1" class="headerlink" title="remove()方法"></a>remove()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;<br>    Entry[] tab = table;<br>    <span class="hljs-keyword">int</span> len = tab.length;<br>    <span class="hljs-comment">// hashcode 取模求数组索引</span><br>    <span class="hljs-keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 清除当前节点的value</span><br>    <span class="hljs-keyword">for</span> (Entry e = tab[i]; e != <span class="hljs-keyword">null</span>; e = tab[i = nextIndex(i, len)]) &#123;<br>        <span class="hljs-keyword">if</span> (e.get() == key) &#123;<br>            <span class="hljs-comment">// 清楚对象引用</span><br>            e.clear();<br>            <span class="hljs-comment">// value 指向 null</span><br>            expungeStaleEntry(i);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.referent = <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>hashcode 取模求数组索引。</li><li>循环查找数组，将当前 key 的 Entry 的引用，将 value 设置为 null， 后面会被垃圾回收掉。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="为什么可以线程私有？"><a href="#为什么可以线程私有？" class="headerlink" title="为什么可以线程私有？"></a>为什么可以线程私有？</h4><p>ThreadLocal 的 get()、set()、remove()方法中都有 <code>Thread t = Thread.currentThread();</code> 操作的其实是本线程，获取本线程的ThreadLocalMap。</p><p>每个线程都有自己的 ThreadLocal，并且是将 value 存放在一个以 ThreadLocal 为 key 的 ThreadLocalMap 中的。所以线程间隔离。</p><h4 id="为什么建议声明为静态？"><a href="#为什么建议声明为静态？" class="headerlink" title="为什么建议声明为静态？"></a>为什么建议声明为静态？</h4><p>Java开发手册已经给出说明，还有就是，如果 ThreadLocal 设置为非静态，那就是某个线程的实例类，这样的话就会失去了线程共享的本质属性。</p><h4 id="为什么强制必须时候后remove-？"><a href="#为什么强制必须时候后remove-？" class="headerlink" title="为什么强制必须时候后remove()？"></a>为什么强制必须时候后remove()？</h4><p>这块可以和内存泄露一块说明， 通过上面的 <code>ThreadLocalMap</code> 处关于弱引用的讲解已经说明会产生内存泄露。至于如何解决也给出了答案：</p><p>1.<code>set()</code> 时清除 Entry != null &amp;&amp; key == null 的节点， 将其 value 设置为 null。<br>2.<code>getEntry()</code> 时清除<code>当前 key 到 nextIndex(i, len)==null 之间的</code> Entry != null &amp;&amp; key == null 的节点， 将其 value 设置为 null。<br>3.<code>remove()</code> 时清除<code>指定key</code>的 Entry != null &amp;&amp; key == null 的节点， 将其 value 设置为 null。</p><p>之所以使用remove()，还是为了解决内存泄露的问题。</p><h4 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h4><ol><li>使用时注意声明为 <code>private static final</code>。</li><li>使用后要 <code>remove()</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- 从JUC源码看CAS，我做了个笔记 ......</title>
      <link href="2020/06/12/source-code-cas.html"/>
      <url>2020/06/12/source-code-cas.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>前言<br>JUC包下大量使用了CAS，工作和面试中也经常遇到CAS，包括说到乐观锁，也不可避免的想起CAS，那CAS究竟是什么？</p></blockquote><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>说到CAS，基本上都会想到乐观锁、AtomicInteger、Unsafe … </p><p>当然也有可能啥也没想到！</p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/zoi3eG.jpg" div align=center /><p>不管你们怎么想， 我第一印象是乐观锁，毕竟做交易更新交易状态经常用到乐观锁，就自然想到这个SQL：</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> trans_order <br><span class="hljs-keyword">set</span> order_status = <span class="hljs-number">1</span> <br><span class="hljs-keyword">where</span> order_no = <span class="hljs-string">&#x27;xxxxxxxxxxx&#x27;</span> <span class="hljs-keyword">and</span> order_status = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>其实就是 set和where里面都携带order_status。</p><p>那什么是CAS？</p><p>CAS就是<code>Compare-and-Swap</code>，即比较并替换，在并发算法时常用，并且在JUC（java.util.concurrent）包下很多类都使用了CAS。</p><p>非常常见的问题就是多线程操作i++问题。一般解决办法就是添加 synchronized 关键字修饰，当然也可以使用 AtomicInteger 代码举例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CasTest</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> CountDownLatch LATCH = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> NUM_I = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> NUM_J = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> AtomicInteger NUM_K = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><br>            threadPool.execute(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10000</span>; j++) &#123;<br>                        NUM_I++;<br>                        NUM_J++;<br>                        NUM_K.incrementAndGet();<br>                    &#125;<br>                    LATCH.countDown();<br>                &#125;<br>            &#125;);<br>        &#125;<br>        LATCH.await();<br><br>        System.out.println(<span class="hljs-string">&quot;NUM_I = &quot;</span> + NUM_I);<br>        System.out.println(<span class="hljs-string">&quot;NUM_J = &quot;</span> + NUM_J);<br>        System.out.println(<span class="hljs-string">&quot;NUM_K = &quot;</span> + NUM_K.get());<br>        threadPool.shutdown();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>下面就从<code>AtomicInteger</code>开始了解CAS。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomicInteger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">6214790243416807050L</span>;<br><br>    <span class="hljs-comment">// setup to use Unsafe.compareAndSwapInt for updates</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> valueOffset;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            valueOffset = unsafe.objectFieldOffset<br>                (AtomicInteger.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(ex); &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> value;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">incrementAndGet</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> unsafe.getAndAddInt(<span class="hljs-keyword">this</span>, valueOffset, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">decrementAndGet</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> unsafe.getAndAddInt(<span class="hljs-keyword">this</span>, valueOffset, -<span class="hljs-number">1</span>) - <span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出里面使用了<code>Unsafe</code>类下的<code>getAndAddInt</code>方法，<code>Unsafe</code>类很多方法是本地（native）方法，主要是硬件级别的<code>原子操作</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> var1 当前对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> var2 当前对象在内存偏移量，Unsafe可以根据内存偏移地址获取数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> var4 操作值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAndAddInt</span><span class="hljs-params">(Object var1, <span class="hljs-keyword">long</span> var2, <span class="hljs-keyword">int</span> var4)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> var5;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-comment">// 获取在var1在内存的值</span><br>        var5 = <span class="hljs-keyword">this</span>.getIntVolatile(var1, var2);<br>        <span class="hljs-comment">// 将var1赋值为var5+var4， 赋值时会判断var1是否为var5</span><br>    &#125; <span class="hljs-keyword">while</span>(!<span class="hljs-keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    <span class="hljs-keyword">return</span> var5;<br>&#125;<br><span class="hljs-comment">// 原子操作</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSwapInt</span><span class="hljs-params">(Object var1, <span class="hljs-keyword">long</span> var2, <span class="hljs-keyword">int</span> var4, <span class="hljs-keyword">int</span> var5)</span></span>;<br></code></pre></td></tr></table></figure><p>至于 compareAndSwapInt 的分析就忽略了。 </p><p>看完代码过程其实就是：</p><ol><li>比较var1的值是否为var4，是的话将var1更新为var5。</li><li>如果不是的话就一直循环，直到var1是var4。</li></ol><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/3E5FDF0D-875A-4CD0-9B75-61D01ACBCD50_4_5005_c.jpeg"  div align=center /><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/iyLlPP.png"  div align=center /><ol><li>这要是一直获取不到，岂不是一直循环。线程多的情况下，会自旋很长时间，导致浪费资源。</li><li>你更新了， 我又给你更新回去了，你也不知道。ABA问题！比如像这样，A想更新值为a，还未抢到资源，这时候B进行了更新，将对象更新为了b，然后又马上更新回了a， 这时候A是什么都不知道的。</li></ol><p>以乐观锁举例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 0 -&gt; 1</span><br><span class="hljs-keyword">update</span> trans_order <br><span class="hljs-keyword">set</span> order_status = <span class="hljs-number">1</span> <br><span class="hljs-keyword">where</span> order_no = <span class="hljs-string">&#x27;xxxxxxxxxxx&#x27;</span> <span class="hljs-keyword">and</span> order_status = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 1 -&gt; 0</span><br><span class="hljs-keyword">update</span> trans_order <br><span class="hljs-keyword">set</span> order_status = <span class="hljs-number">1</span> <br><span class="hljs-keyword">where</span> order_no = <span class="hljs-string">&#x27;xxxxxxxxxxx&#x27;</span> <span class="hljs-keyword">and</span> order_status = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 0 -&gt; 1</span><br><span class="hljs-keyword">update</span> trans_order <br><span class="hljs-keyword">set</span> order_status = <span class="hljs-number">1</span> <br><span class="hljs-keyword">where</span> order_no = <span class="hljs-string">&#x27;xxxxxxxxxxx&#x27;</span> <span class="hljs-keyword">and</span> order_status = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>解决办法可以添加version进行版本号控制。</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 0 -&gt; 1</span><br><span class="hljs-keyword">update</span> trans_order <br><span class="hljs-keyword">set</span> order_status = <span class="hljs-number">1</span> <br><span class="hljs-keyword">where</span> order_no = <span class="hljs-string">&#x27;xxxxxxxxxxx&#x27;</span> <span class="hljs-keyword">and</span> order_status = <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">version</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 1 -&gt; 0</span><br><span class="hljs-keyword">update</span> trans_order <br><span class="hljs-keyword">set</span> order_status = <span class="hljs-number">1</span> <br><span class="hljs-keyword">where</span> order_no = <span class="hljs-string">&#x27;xxxxxxxxxxx&#x27;</span> <span class="hljs-keyword">and</span> order_status = <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">version</span> = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">-- 0 -&gt; 1</span><br><span class="hljs-keyword">update</span> trans_order <br><span class="hljs-keyword">set</span> order_status = <span class="hljs-number">1</span> <br><span class="hljs-keyword">where</span> order_no = <span class="hljs-string">&#x27;xxxxxxxxxxx&#x27;</span> <span class="hljs-keyword">and</span> order_status = <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">version</span> = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>代码中可以看 <code>AtomicStampedReference</code> 类：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 以原子方式设置该引用和标志给定的更新值的值，</span><br><span class="hljs-comment"> * 如果当前引用==预期的引用，并且当前标志==预期标志。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> expectedReference 预期引用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> newReference 更新的值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> expectedStamp 预期标志</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> newStamp 更新的标志</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if successful</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSet</span><span class="hljs-params">(V   expectedReference,</span></span><br><span class="hljs-function"><span class="hljs-params">                                V   newReference,</span></span><br><span class="hljs-function"><span class="hljs-params">                                <span class="hljs-keyword">int</span> expectedStamp,</span></span><br><span class="hljs-function"><span class="hljs-params">                                <span class="hljs-keyword">int</span> newStamp)</span> </span>&#123;<br>    Pair&lt;V&gt; current = pair;<br>    <span class="hljs-keyword">return</span><br>        expectedReference == current.reference &amp;&amp;<br>        expectedStamp == current.stamp &amp;&amp;<br>        ((newReference == current.reference &amp;&amp;<br>            newStamp == current.stamp) ||<br>            casPair(current, Pair.of(newReference, newStamp)));<br>&#125;<br></code></pre></td></tr></table></figure><p>其实就是额外增加一个标志（<code>stamp</code>）来防止ABA的问题， 类似乐观锁的version。</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- HashMap红黑树</title>
      <link href="2020/05/25/source-code-hashmap-red-black-tree.html"/>
      <url>2020/05/25/source-code-hashmap-red-black-tree.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>前言<br>在阅读HashMap源码时，会发现在HashMap中使用了红黑树，所以需要先了解什么是红黑树，以及其原理。从而再进一步阅读HashMap中的链表到红黑树的转换，红黑树的增删节点等。</p></blockquote><blockquote><ol><li>什么是红黑树？</li><li>在HashMap中是怎么应用的？</li></ol></blockquote><h3 id="什么是红黑树？"><a href="#什么是红黑树？" class="headerlink" title="什么是红黑树？"></a>什么是红黑树？</h3><blockquote><p>红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。它在1972年由鲁道夫·贝尔发明，被称为”对称二叉B树”，它现代的名字源于Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文。红黑树的结构复杂，但它的操作有着良好的最坏情况运行时间，并且在实践中高效：它可以在O(logN)时间内完成查找、插入和删除，这里的n是树中元素的数目。</p></blockquote><h3 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h3><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：</p><ol><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/red-black-tree001.jpeg" alt="红黑树001"></p><h3 id="红黑树操作"><a href="#红黑树操作" class="headerlink" title="红黑树操作"></a>红黑树操作</h3><h4 id="左旋、右旋"><a href="#左旋、右旋" class="headerlink" title="左旋、右旋"></a>左旋、右旋</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/krck8S.gif" alt="krck8S"></p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/OUd2GL.gif" alt="OUd2GL"></p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><ol><li>以二叉查找树的方法增加节点</li><li>新插入节点为红色（如果设为黑色，就会导致根到叶子的路径上有一条路上，多一个额外的黑节点，这个是很难调整的。但是设为红色节点后，可能会导致出现两个连续红色节点的冲突，那么可以通过颜色调换（color flips）和树旋转来调整。）</li></ol><p>注意：</p><ol><li>性质1和性质3是永远保持着的。</li><li>性质4只在增加红色节点、重绘黑色节点为红色，或做旋转时受到威胁。</li><li>性质5只在增加黑色节点、重绘红色节点为黑色，或做旋转时受到威胁。</li></ol><p>插入时会遇到以下五种情形：</p><blockquote><p>情形1：插入第一个节点<br>情形2：插入新节点，父节点是黑色<br>情形3：插入新节点，父节点是红色，叔父节点是红色<br>情形4：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是右子节点，父节点又是其父节点的左子节点<br>情形5：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是左子节点，父节点又是其父节点的左子节点。</p></blockquote><ul><li>情形1：</li></ul><p>操作：插入第一个节点<br>违反性质2：” 根是黑色。 “<br>情形：直接插入红色节点，然后进行染色为黑色</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/red-black-tree1.gif" alt="红黑树1"></p><ul><li>情形2：</li></ul><p>操作：插入新节点，父节点是黑色<br>未违反性质<br>情形：直接插入</p><ul><li>情形3：</li></ul><p>操作：插入新节点，父节点是红色，叔父节点是红色<br>违反性质4：” 每个红色节点必须有两个黑色的子节点。 “<br>情形：将祖父节点染色，祖父节点染色后再进行重新判断进行染色或旋转</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/red-black-tree3.gif" alt="红黑树3"></p><ul><li>情形4：</li></ul><p>操作：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是右子节点，父节点又是其父节点的左子节点<br>违反性质4：” 每个红色节点必须有两个黑色的子节点。 “<br>情形：进行左旋，旋转后父节点变成左子节点，新节点变成父节点，然后重新判断进行染色或旋转</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/red-black-tree4.gif" alt="红黑树4"></p><ul><li>情形5：</li></ul><p>操作：插入新节点，父节点是红色，叔父节点是黑色或缺省，新节点是左子节点，父节点又是其父节点的左子节点。<br>违反性质4：” 每个红色节点必须有两个黑色的子节点。 “<br>情形：父节点染色为黑色，进行右旋，祖父节点变为右子节点，然后重新判断进行染色或旋转</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/red-black-tree5.gif" alt="红黑树5"></p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">LinkedHashMap</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;<br>    TreeNode&lt;K,V&gt; parent;  <span class="hljs-comment">// red-black tree links</span><br>    TreeNode&lt;K,V&gt; left;<br>    TreeNode&lt;K,V&gt; right;<br>    TreeNode&lt;K,V&gt; prev;    <span class="hljs-comment">// needed to unlink next upon deletion</span><br>    <span class="hljs-keyword">boolean</span> red;<br>    <span class="hljs-comment">// ... 省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三个参数"><a href="#三个参数" class="headerlink" title="三个参数"></a>三个参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 链表转为树阈值。 </span><br><span class="hljs-comment"> * 大于等于8时，会转换为树。 </span><br><span class="hljs-comment"> * 8 是综合性能考虑确定的值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TREEIFY_THRESHOLD = <span class="hljs-number">8</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从树转换为链表的阈值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> UNTREEIFY_THRESHOLD = <span class="hljs-number">6</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最小树形化容量，只有哈希表元素数到达64才会进行树转换</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="hljs-number">64</span>;<br></code></pre></td></tr></table></figure><h4 id="链表转红黑树-treeifyBin"><a href="#链表转红黑树-treeifyBin" class="headerlink" title="链表转红黑树-treeifyBin"></a>链表转红黑树-treeifyBin</h4><ol><li>数组（哈希表）长度到达64</li><li>当链表长度大于等于8是会将链表转换为红黑树</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">treeifyBin</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-keyword">int</span> hash)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, index; Node&lt;K,V&gt; e;<br>    <span class="hljs-comment">// 数组为null或者数组长度小于MIN_TREEIFY_CAPACITY（64）时，进行扩容</span><br>    <span class="hljs-keyword">if</span> (tab == <span class="hljs-keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<br>        resize();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 头尾节点 hd-头 tl-尾</span><br>        TreeNode&lt;K,V&gt; hd = <span class="hljs-keyword">null</span>, tl = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">// 创建树节点 Node -&gt; TreeNode</span><br>            <span class="hljs-comment">// 循环执行完之后得到的是双向链表</span><br>            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="hljs-keyword">null</span>);<br>            <span class="hljs-keyword">if</span> (tl == <span class="hljs-keyword">null</span>)<br>                hd = p;<br>            <span class="hljs-keyword">else</span> &#123;<br>                p.prev = tl;<br>                tl.next = p;<br>            &#125;<br>            tl = p;<br>        &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">// 此时得到的仅仅是双向链表</span><br>        <span class="hljs-comment">// 指针指向链表头</span><br>        <span class="hljs-keyword">if</span> ((tab[index] = hd) != <span class="hljs-keyword">null</span>)<br>            <span class="hljs-comment">// 将双向链表转换为树</span><br>            hd.treeify(tab);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">treeify</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;<br>    TreeNode&lt;K,V&gt; root = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="hljs-keyword">this</span>, next; x != <span class="hljs-keyword">null</span>; x = next) &#123;<br>        next = (TreeNode&lt;K,V&gt;)x.next;<br>        x.left = x.right = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 情形1：插入第一个节点</span><br>            x.parent = <span class="hljs-keyword">null</span>;<br>            x.red = <span class="hljs-keyword">false</span>;<br>            root = x;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 当前节点的 key 和 hash</span><br>            K k = x.key;<br>            <span class="hljs-keyword">int</span> h = x.hash;<br>            Class&lt;?&gt; kc = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-comment">// 再次循环</span><br>            <span class="hljs-keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;<br>                <span class="hljs-keyword">int</span> dir, ph;<br>                <span class="hljs-comment">// 内层循环的key</span><br>                K pk = p.key;<br>                <span class="hljs-comment">// 当前节点的hash和内层循环的hash值作比较</span><br>                <span class="hljs-keyword">if</span> ((ph = p.hash) &gt; h)<br>                    <span class="hljs-comment">// &lt; 0 left查找</span><br>                    dir = -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ph &lt; h)<br>                    <span class="hljs-comment">// &gt; 0 right 查找</span><br>                    dir = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((kc == <span class="hljs-keyword">null</span> &amp;&amp;<br>                            (kc = comparableClassFor(k)) == <span class="hljs-keyword">null</span>) ||<br>                            (dir = compareComparables(kc, k, pk)) == <span class="hljs-number">0</span>)<br>                    <span class="hljs-comment">// 比较对象</span><br>                    dir = tieBreakOrder(k, pk);<br><br>                TreeNode&lt;K,V&gt; xp = p;<br>                <span class="hljs-comment">// dir &lt;= 0 则走 left查找 &gt; 0 则走 right查找</span><br>                <span class="hljs-keyword">if</span> ((p = (dir &lt;= <span class="hljs-number">0</span>) ? p.left : p.right) == <span class="hljs-keyword">null</span>) &#123;<br>                    x.parent = xp;<br>                    <span class="hljs-keyword">if</span> (dir &lt;= <span class="hljs-number">0</span>)<br>                        xp.left = x;<br>                    <span class="hljs-keyword">else</span><br>                        xp.right = x;<br>                    <span class="hljs-comment">// 正式转换为红黑树</span><br>                    root = balanceInsertion(root, x);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    moveRootToFront(tab, root);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// root 根节点</span><br><span class="hljs-comment">// x 要操作的节点</span><br><span class="hljs-keyword">static</span> &lt;K,V&gt; <span class="hljs-function">TreeNode&lt;K,V&gt; <span class="hljs-title">balanceInsertion</span><span class="hljs-params">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x)</span> </span>&#123;<br>    <span class="hljs-comment">// 默认节点为红色</span><br>    x.red = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-comment">// xp：x的父节点</span><br>    <span class="hljs-comment">// xpp：x的祖父节点</span><br>    <span class="hljs-comment">// xppl：x祖父节点的左子节点</span><br>    <span class="hljs-comment">// xppr：x祖父节点的右子节点</span><br>    <span class="hljs-keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;<br>        <br>        <span class="hljs-comment">// 情形1： 父节点为null， 直接置为根</span><br>        <span class="hljs-keyword">if</span> ((xp = x.parent) == <span class="hljs-keyword">null</span>) &#123;<br>            x.red = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<br>        <span class="hljs-comment">// 父节点黑色 或者 祖父节点为空，直接返回</span><br>        <span class="hljs-comment">// 情形2：插入新节点，父节点是黑色</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> root;<br><br>        <span class="hljs-comment">// 父节点是祖父节点的左子节点</span><br>        <span class="hljs-keyword">if</span> (xp == (xppl = xpp.left)) &#123;<br>            <span class="hljs-comment">// 祖父节点的右子节点不为空且是红色</span><br>            <span class="hljs-comment">// 情形3：插入新节点，父节点是红色，叔父节点是红色</span><br>            <span class="hljs-keyword">if</span> ((xppr = xpp.right) != <span class="hljs-keyword">null</span> &amp;&amp; xppr.red) &#123;<br>                xppr.red = <span class="hljs-keyword">false</span>; <span class="hljs-comment">//祖父节点的右子节点设置为黑色</span><br>                xp.red = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 父节点设置为黑色</span><br>                xpp.red = <span class="hljs-keyword">true</span>; <span class="hljs-comment">// 祖父节点设置为红色</span><br>                x = xpp; <span class="hljs-comment">// 继续操作祖父节点</span><br>            &#125;<br>            <span class="hljs-comment">// 旋转</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 新插入的是右子节点</span><br>                <span class="hljs-keyword">if</span> (x == xp.right) &#123;<br>                    <span class="hljs-comment">// 插入的x是父节点的右子节点， 进行左旋</span><br>                    root = rotateLeft(root, x = xp);<br>                    xpp = (xp = x.parent) == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : xp.parent;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (xp != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-comment">// 父节点设置为黑色</span><br>                    xp.red = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">if</span> (xpp != <span class="hljs-keyword">null</span>) &#123;<br>                        xpp.red = <span class="hljs-keyword">true</span>;<br>                        <span class="hljs-comment">// 右旋</span><br>                        root = rotateRight(root, xpp);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 父节点是祖父节点的右子节点</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 祖父节点的左子节点不为空且为红色</span><br>            <span class="hljs-keyword">if</span> (xppl != <span class="hljs-keyword">null</span> &amp;&amp; xppl.red) &#123;<br>                xppl.red = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 祖父节点的左子节点设置为黑色</span><br>                xp.red = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 父节点设置为黑色</span><br>                xpp.red = <span class="hljs-keyword">true</span>; <span class="hljs-comment">// 祖父节点设置为红色</span><br>                x = xpp; <span class="hljs-comment">// 继续操作祖父节点</span><br>            &#125;<br>            <span class="hljs-comment">// 旋转</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (x == xp.left) &#123;<br>                    root = rotateRight(root, x = xp);<br>                    xpp = (xp = x.parent) == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : xp.parent;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (xp != <span class="hljs-keyword">null</span>) &#123;<br>                    xp.red = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">if</span> (xpp != <span class="hljs-keyword">null</span>) &#123;<br>                        xpp.red = <span class="hljs-keyword">true</span>;<br>                        root = rotateLeft(root, xpp);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- HashMap扩容</title>
      <link href="2020/05/17/source-code-hashmap-resize.html"/>
      <url>2020/05/17/source-code-hashmap-resize.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>描述下HashMap put(k,v)的流程？<br>它的扩容流程是怎么样的？</p></blockquote><h3 id="HashMap-put-k-v-流程"><a href="#HashMap-put-k-v-流程" class="headerlink" title="HashMap put(k,v)流程"></a>HashMap put(k,v)流程</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/3pSob4.png" alt="3pSob4"></p><ol><li>通过hash(key方法)获取到key的hash值</li><li>调用put方法, 将value存放到指定的位置<ol><li>根据hash值确定当前key所在node数组的索引 <code>(n - 1) &amp; hash</code></li><li>如果node[i]==null 则直接创建新数组</li><li>如果node[i]!=null<ol><li>判断 当前node的头结点的 hash和key是否都相等, 相等则需要操作的就是该node</li><li>判断当前节点是否为TreeNode，对TreeNode进行操作，并返回结果e</li><li>如果是链表则遍历链表，key存在则返回节点e，不存在则赋值</li><li>判断节点e有没有被赋值，覆盖旧值</li></ol></li><li>hashMap size进行加1，同时判断v新size是否大于扩容阈值从而判断是否需要扩容</li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> V <span class="hljs-title">putVal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">boolean</span> onlyIfAbsent,</span></span><br><span class="hljs-function"><span class="hljs-params">                   <span class="hljs-keyword">boolean</span> evict)</span> </span>&#123;<br>        <span class="hljs-comment">// 声明Node数组tab, Node节点</span><br>        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-keyword">int</span> n, i;<br>        <span class="hljs-comment">// 对tab数组赋值为当前HashMap的table, 并判断是否为空, 或者长度为0</span><br>        <span class="hljs-comment">// 为0进行则resize()数组, 并对 n赋值为当前tab的长度</span><br>        <span class="hljs-comment">// resize() 对HashMap的table扩容, 并返回扩容后的新数组</span><br>        <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>            n = (tab = resize()).length;<br>        <span class="hljs-comment">// 对 node p 进行赋值, 数组所在位置 即 node p 如果是null 则直接赋值</span><br>        <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-keyword">null</span>)<br>            tab[i] = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// p 不为null, 声明 node e, key k</span><br>            Node&lt;K,V&gt; e; K k;<br>            <span class="hljs-comment">// 如果hash值相等且key相等, 直接将 e 赋值为当前node的头节点</span><br>            <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>                ((k = p.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                e = p;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            <span class="hljs-comment">// 如果是红黑树, 则对树进行操作, 返回节点e</span><br>                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-keyword">this</span>, tab, hash, key, value);<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 对链表进行遍历, 找到对应的节点</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                    <span class="hljs-comment">// 将 e 赋值为  头节点p的next, 如果下一个节点为null</span><br>                    <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-keyword">null</span>) &#123;<br>                        <span class="hljs-comment">// 对节点进行赋值</span><br>                        p.next = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>                        <span class="hljs-comment">// 如果长度到达数转换阈值, 则需要转换为红黑树</span><br>                        <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                            treeifyBin(tab, hash);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-comment">// 如果e节点的hash相等, key相等, 则 直接跳出循环 e 已经被赋值为 p.next</span><br>                    <span class="hljs-comment">// 此时e节点的value没有被赋值</span><br>                    <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                        ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-comment">// 指针指向下一个节点, 继续遍历</span><br>                    p = e;<br>                &#125;<br>            &#125;<br>        <br>            <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>                V oldValue = e.value;<br>                <span class="hljs-comment">// 对旧值进行覆盖, 并返回旧值</span><br>                <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-keyword">null</span>)<br>                    e.value = value;<br>                afterNodeAccess(e);<br>                <span class="hljs-keyword">return</span> oldValue;<br>            &#125;<br>        &#125;<br>        ++modCount;<br>        <span class="hljs-comment">// 是否需要扩容</span><br>        <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>            resize();<br>        afterNodeInsertion(evict);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="resize-扩容过程"><a href="#resize-扩容过程" class="headerlink" title="resize()扩容过程"></a>resize()扩容过程</h3><ol><li>JDK 1.7 扩容流程, 每次都需要数组扩容后, 链表需要重新计算在新数组的位置</li><li>JDK 1.8 不需要重新计算 (优化点)<ol><li>数组下标: (n - 1) &amp; hash 即数组长度-1 &amp; key的hash</li><li>扩容后的数组下标: ((n &lt;&lt; 1) - 1) &amp; hash 相当于在 高位1之前加了个1</li></ol></li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/GRQHSY.png" alt="GRQHSY"></p><p>如图所示, 真正发生影响的是新增的那一位(红色箭头所指), 所以 oldCap &amp; hash 完全可以判断该值是放在旧索引值的位置还是放在旧索引值+旧数组长度的位置</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    <span class="hljs-comment">// 旧数组</span><br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-comment">// 旧数组长度</span><br>    <span class="hljs-keyword">int</span> oldCap = (oldTab == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-comment">// 旧的扩容阈值</span><br>    <span class="hljs-keyword">int</span> oldThr = threshold;<br>    <span class="hljs-comment">// 新的数组长度和新扩容阈值</span><br>    <span class="hljs-keyword">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 旧数组存在</span><br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        &#125;<br>        <span class="hljs-comment">// 新数组长度为旧数组长度的2倍</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            <span class="hljs-comment">// 扩容阈值是旧扩容阈值的2倍</span><br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>    &#125;<br>    <span class="hljs-comment">// 旧数组不存在, 相当于首次put(K, V)时, 将数组长度置为扩容阈值</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>        newCap = oldThr;<br>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>        <span class="hljs-comment">// 旧数组不存在, new HashMap()未指定长度, 初次put(K, V), 设置为默认值</span><br>        newCap = DEFAULT_INITIAL_CAPACITY;<br>        newThr = (<span class="hljs-keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    &#125;<br>    <span class="hljs-comment">// 新的扩容阈值是0, 则将扩容阈值设置为 新数组长度*负载因子</span><br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY ?<br>                  (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);<br>    &#125;<br>    <span class="hljs-comment">// 对全局的扩容阈值进行赋值</span><br>    threshold = newThr;<br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>    <span class="hljs-comment">// 创建新数组, 长度为新长度, 即原数组长度的2倍</span><br>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[newCap];<br>    <span class="hljs-comment">// 将table复制为新数组</span><br>    table = newTab;<br>    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 对旧数组进行遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>            Node&lt;K,V&gt; e;<br>            <span class="hljs-comment">// 旧节点node赋值</span><br>            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-keyword">null</span>) &#123;<br>                oldTab[j] = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-keyword">null</span>)<br>                <span class="hljs-comment">// 只有头结点, 直接计算新的位置并赋值</span><br>                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                <span class="hljs-comment">// 树单独处理</span><br>                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-keyword">this</span>, newTab, j, oldCap);<br>                <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span><br>                    Node&lt;K,V&gt; loHead = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;<br>                    Node&lt;K,V&gt; hiHead = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;<br>                    Node&lt;K,V&gt; next;<br>                    <span class="hljs-keyword">do</span> &#123;<br>                        <span class="hljs-comment">// next节点</span><br>                        next = e.next;<br>                        <span class="hljs-comment">// 节点hash与旧数组长度 &amp; 的结果来决定元素所在位置, 参考上面图示所讲</span><br>                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-comment">// 在元索引出创建新链表</span><br>                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-keyword">null</span>)<br>                                loHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                loTail.next = e;<br>                            loTail = e;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-comment">// 新索引出创建链表</span><br>                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-keyword">null</span>)<br>                                hiHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                hiTail.next = e;<br>                            hiTail = e;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-keyword">null</span>);<br>                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-keyword">null</span>) &#123;<br>                        loTail.next = <span class="hljs-keyword">null</span>;<br>                        <span class="hljs-comment">// 索引j处直接赋值</span><br>                        newTab[j] = loHead;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-keyword">null</span>) &#123;<br>                        hiTail.next = <span class="hljs-keyword">null</span>;<br>                        <span class="hljs-comment">// 索引 j + 老数组长度位置存放hiHead</span><br>                        newTab[j + oldCap] = hiHead;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newTab;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JDK源码笔记】- HashMap的初始化</title>
      <link href="2020/05/11/source-code-hashmap-init.html"/>
      <url>2020/05/11/source-code-hashmap-init.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>HashMap初始化参数都是什么？默认是多少？<br>为什么建议初始化设置容量？<br>tableSizeFor方法是做什么的？<br>如何获取到一个key的hash值？及计算下标？</p></blockquote><h3 id="HashMap初始化参数都是什么？默认是多少？"><a href="#HashMap初始化参数都是什么？默认是多少？" class="headerlink" title="HashMap初始化参数都是什么？默认是多少？"></a>HashMap初始化参数都是什么？默认是多少？</h3><p>HashMap初始化参数分别是初始容量和负载因子。</p><p>初始容量(threshold)：默认 16， 必须是2的幂， 最大容量为 1 &lt;&lt; 30</p><p>负载因子(loadFactor)：是指哈希表的负载因子，当哈希表的长度大于<code>capacity * loadFactor</code>时会进行扩容，默认 0.75f</p><h3 id="为什么建议初始化设置容量"><a href="#为什么建议初始化设置容量" class="headerlink" title="为什么建议初始化设置容量"></a>为什么建议初始化设置容量</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/3aQLYq.png" alt="3aQLYq"></p><p>这块涉及到HashMap的扩容， 在<code>阿里巴巴Java开发手册</code>中已经说明了原因。主要是为了减少频繁的扩容造成的资源损耗。</p><h3 id="tableSizeFor方法是做什么的？"><a href="#tableSizeFor方法是做什么的？" class="headerlink" title="tableSizeFor方法是做什么的？"></a>tableSizeFor方法是做什么的？</h3><p>初始化HashMap时, 如果传入初始容量, 在初始化时会调用 <code>tableSizeFor(initialCapacity)</code> 方法寻找大于等于当前值的下一个2的幂值.</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tableSizeFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cap)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = cap - <span class="hljs-number">1</span>; <span class="hljs-comment">//  -1操作, 防止当cap正好是2的幂时的处理</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">// n无符号右移1位, 然后和n做 | 运算, (1|0=1 1|1=1 0|0=0 0|1=1)</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>; <span class="hljs-comment">// n无符号右移2位, 然后和n做 | 运算,</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>; <span class="hljs-comment">// n无符号右移4位, 然后和n做 | 运算,</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>; <span class="hljs-comment">// n无符号右移8位, 然后和n做 | 运算,</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>; <span class="hljs-comment">// n无符号右移16位, 然后和n做 | 运算,</span><br><br>    <span class="hljs-comment">// 最后获得的结果为 cap-1的下一个2的幂值-1, 只需要对n+1即可</span><br>    <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>假设cap值为100, 即0110 0100</li><li>cap的下一个2的幂为 0111 1111 即 1000 0000</li><li>0000 = 0111 1111 + 1</li><li>只需要考虑将 首个为1的最高位之后的值置为1, 然后+1即可</li><li>为防止cap本来就是2的幂, 则需要先进行减一操作</li></ol><p>如图所示:<br><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/51Xhtj.png" alt="51Xhtj"></p><p>最后执行的结果进行加1即可</p><h3 id="如何获取到一个key的hash值？"><a href="#如何获取到一个key的hash值？" class="headerlink" title="如何获取到一个key的hash值？"></a>如何获取到一个key的hash值？</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> h;<br>    <span class="hljs-comment">// key的hashCode ^ 上自己的高16位， 如果是null的话则hash为0</span><br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>获取到了hash值， 那如何计算在数组的那个位置呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// n为数组长度  数组下标</span><br>i = (n - <span class="hljs-number">1</span>) &amp; hash<br></code></pre></td></tr></table></figure><p>数组长度都是 2的幂<br>假设 n = 1 &gt;&gt; x<br>则 n - 1 则表示 一个低x位全为1的数</p><p>(n - 1) &amp; hash 则相当于 一个低x位全为1的数和hash做&amp;操作.</p><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/article/OAZssV.png" alt="OAZssV"></p><p>通过图可以看出, 参与运算的只有低x位, 相当于之前的所有值都不会有效. 所以前面的hash(key) 将key.hashCode()高低16位做^操作, 可以保证, 高低16位都能参与运算.一定程度上避免hash碰撞.在源码注释中已经说明, 是肯定会有碰撞, 但是这是权衡之后的结果.</p>]]></content>
      
      
      <categories>
          
          <category> 源码笔记 </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown代码折叠</title>
      <link href="2020/04/20/markdown-code-folding.html"/>
      <url>2020/04/20/markdown-code-folding.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><h4 id="折叠内容"><a href="#折叠内容" class="headerlink" title="折叠内容"></a>折叠内容</h4><details><summary>折叠内容</summary>在markdown中折叠一部分内容, 点击可以展开.</details><h4 id="折叠代码"><a href="#折叠代码" class="headerlink" title="折叠代码"></a>折叠代码</h4><details><summary>折叠代码</summary><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></details><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>使用html</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span>折叠内容<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br>在markdown中折叠一部分内容, 点击可以展开.<br><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span>折叠代码<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br><br> 代码块<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雪花算法</title>
      <link href="2020/04/13/snowflake-algorithm.html"/>
      <url>2020/04/13/snowflake-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>简单介绍下雪花算法, 以及Java版雪花算法的代码.<br>仅仅是一个最简单版本, 更深层次的指针回拨等. 相当于在开发过成功可以先使用.<br>尽量还是使用统一的分布式流水号生成系统, 保证流水号全局唯一.</p></blockquote><h3 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">0 0000000000 0000000000 0000000000 0000000000 0 00000 00000 000000000000<br></code></pre></td></tr></table></figure><p>使用64位long型数字作为全局唯一id<br>1位 无意义 0<br>41位 时间戳<br>5位 机房id<br>5位 机器id<br>12位自增序号 表示同一时间同一机房同一机器生成的序列号</p><ol><li><p>第一位为什么无意义<br> 二进制中 第一位代表符号位, 默认 0 表示生成的序列号为正数</p></li><li><p>41位时间戳<br> 41位最大能表示 2^41-1 的数字. 毫秒值 69.7年<br> (2^41-1)/1000/60/60/24</p><p> 当时间大于69.7即时间戳差值大于 2199023255551, 会开始出现负值流水号</p></li><li><p>10位<br> 机房id+机器id 2^10 1024台机器</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 但是使用中不可能每部署一台机器都改下编号, 所以我做出以下改动</span><br><span class="hljs-comment">// 8位机器号(最大256) 2位机房号</span><br><span class="hljs-comment">// 机器号使用IP地址后三位 机房id 默认1</span><br><span class="hljs-comment">// 只需要确保机器的ip后三位不同即可</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> MACHINE_BIT = <span class="hljs-number">8</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> DATA_CENTER_BIT = <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> DATA_CENTER_ID = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> address;<br><span class="hljs-keyword">static</span> &#123;<br>    InetAddress localIp = IpUtils.getLocalIp();<br>    address = localIp.getAddress()[<span class="hljs-number">3</span>] &amp; <span class="hljs-number">0xff</span>;<br>    log.info(<span class="hljs-string">&quot;当前系统的 address 为: &#123;&#125;&quot;</span>, address);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>12位序列号<br> 表示同一毫秒内生成的id 2^12-1 个正整数</p></li></ol><p>SnowFlake每秒能够产生26万ID左右</p><p>优点:<br>生成ID时不依赖于DB，完全在内存生成，高性能高可用。<br>ID呈趋势递增，后续插入索引树的时候性能较好。<br>缺点:<br>依赖于系统时钟的一致性。如果某台机器的系统时钟回拨，有可能造成ID冲突，或者ID乱序</p><h3 id="SerialNumber"><a href="#SerialNumber" class="headerlink" title="SerialNumber"></a>SerialNumber</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SerialNumber</span>  </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 起始的时间戳 2018-01-01 00:00:00</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> START_STAMP = <span class="hljs-number">1514736000000L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每一部分占用的位数</span><br><span class="hljs-comment">     * 序列号 占用位数 12 位 (同一毫秒内生成的id 2^12-1 个正整数)</span><br><span class="hljs-comment">     * 机器标识  占用位数 8 位 (一般是使用5位)</span><br><span class="hljs-comment">     * 数据中心 占用位数 2 位 (一般是使用5位)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> SEQUENCE_BIT = <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> MACHINE_BIT = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> DATA_CENTER_BIT = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每一部分的最大值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> MAX_DATA_CENTER_NUM = ~(-<span class="hljs-number">1L</span> &lt;&lt; DATA_CENTER_BIT);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> MAX_MACHINE_NUM = ~(-<span class="hljs-number">1L</span> &lt;&lt; MACHINE_BIT);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> MAX_SEQUENCE = ~(-<span class="hljs-number">1L</span> &lt;&lt; SEQUENCE_BIT);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每一部分向左的位移</span><br><span class="hljs-comment">     * 机器Id左移12位 (SEQUENCE_BIT = 12)</span><br><span class="hljs-comment">     * 数据中心左移20位 (SEQUENCE_BIT + MACHINE_BIT = 12 + 8)</span><br><span class="hljs-comment">     * 时间戳左移22位 (DATA_CENTER_LEFT + DATA_CENTER_BIT = 12 + 8 + 2)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> MACHINE_LEFT = SEQUENCE_BIT;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> DATA_CENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> TIME_STAMP_LEFT = DATA_CENTER_LEFT + DATA_CENTER_BIT;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据中心 机器标识 序列号 上一次时间戳</span><br><span class="hljs-comment">     * 数据中心标识和机器标识一般是外部传入</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> DATA_CENTER_ID = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> address;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequence = <span class="hljs-number">0L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> lastStamp = -<span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyMMdd&quot;</span>);<br><br>    <span class="hljs-keyword">static</span> &#123;<br>      InetAddress localIp = IpUtils.getLocalIp();<br>      address = localIp.getAddress()[<span class="hljs-number">3</span>] &amp; <span class="hljs-number">0xff</span>;<br>      log.info(<span class="hljs-string">&quot;当前系统的 address 为: &#123;&#125;&quot;</span>, address);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 产生下一个ID</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">long</span> <span class="hljs-title">nextId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> currStamp = getNewStamp();<br>        <span class="hljs-keyword">if</span> (currStamp &lt; lastStamp) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Clock moved backwards.  Refusing to generate id&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (currStamp == lastStamp) &#123;<br>            <span class="hljs-comment">// 相同毫秒内，序列号自增 (sequence + 1) &amp; (~(-1L &lt;&lt; SEQUENCE_BIT))</span><br>            sequence = (sequence + <span class="hljs-number">1</span>) &amp; MAX_SEQUENCE;<br>            <span class="hljs-comment">// 同一毫秒的序列数已经达到最大</span><br>            <span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0L</span>) &#123;<br>                currStamp = getNextMill();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 不同毫秒内，序列号置为0</span><br>            sequence = <span class="hljs-number">0L</span>;<br>        &#125;<br><br>        lastStamp = currStamp;<br>        <span class="hljs-comment">// 时间戳部分 数据中心部分 机器标识部分 序列号部分</span><br>        <span class="hljs-keyword">return</span> (currStamp - START_STAMP) &lt;&lt; TIME_STAMP_LEFT | DATA_CENTER_ID &lt;&lt; DATA_CENTER_LEFT<br>            | address &lt;&lt; MACHINE_LEFT | sequence;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getNextMill</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> mill = getNewStamp();<br>        <span class="hljs-keyword">while</span> (mill &lt;= lastStamp) &#123;<br>            mill = getNewStamp();<br>        &#125;<br>        <span class="hljs-keyword">return</span> mill;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getNewStamp</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IpUtils"><a href="#IpUtils" class="headerlink" title="IpUtils"></a>IpUtils</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019/12/19 16:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IpUtils</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InetAddress <span class="hljs-title">getLocalIp</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (Enumeration&lt;NetworkInterface&gt; e = NetworkInterface.getNetworkInterfaces(); e.hasMoreElements(); ) &#123;<br>                NetworkInterface item = e.nextElement();<br>                <span class="hljs-keyword">for</span> (InterfaceAddress address : item.getInterfaceAddresses()) &#123;<br>                    <span class="hljs-keyword">if</span> (item.isLoopback() || !item.isUp()) &#123;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (address.getAddress() <span class="hljs-keyword">instanceof</span> Inet4Address) &#123;<br>                        <span class="hljs-keyword">return</span> address.getAddress();<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> InetAddress.getLocalHost();<br>        &#125; <span class="hljs-keyword">catch</span> (SocketException | UnknownHostException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 流水号 </tag>
            
            <tag> 雪花算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目启动失败:java.lang.NoClassDefFoundError</title>
      <link href="2020/04/12/no-class-def-found-error-rule-configuration.html"/>
      <url>2020/04/12/no-class-def-found-error-rule-configuration.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>近期遇到一个很久没有启动过的项目, 然后启动失败, 报 java.lang.NoClassDefFoundError, 现在记录问题排查情况.</p></blockquote><h4 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h4><ul><li>错误代码较长, 可以收缩, 直接看排查</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Error starting ApplicationContext. To display the conditions report re-run your application with &#39;debug&#39; enabled.]<br>[2020-04-10 13:26:11.478]-[main]-[]-[ERROR]-[org.springframework.boot.SpringApplication:821]-[Application run failed]<br>org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat<br>        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:155) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]<br>        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742) [spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389) [spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.SpringApplication.run(SpringApplication.java:311) [spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213) [spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202) [spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at com.opay.im.WebApplication.main(WebApplication.java:32) [classes!&#x2F;:1.0-SNAPSHOT]<br>        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_221]<br>        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_221]<br>        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_221]<br>        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_221]<br>        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]<br>        at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]<br>        at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]<br>        at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:58) [opay-im-web-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]<br>Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat<br>        at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:124) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.&lt;init&gt;(TomcatWebServer.java:86) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:414) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:178) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:179) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:152) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        ... 16 more<br>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;servletEndpointRegistrar&#39; defined in class path resource [org&#x2F;springframework&#x2F;boot&#x2F;actuate&#x2F;autoconfigure&#x2F;endpoint&#x2F;web&#x2F;ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method &#39;servletEndpointRegistrar&#39; threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;healthEndpoint&#39; defined in class path resource [org&#x2F;springframework&#x2F;boot&#x2F;actuate&#x2F;autoconfigure&#x2F;health&#x2F;HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method &#39;healthEndpoint&#39; parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;healthIndicatorRegistry&#39; defined in class path resource [org&#x2F;springframework&#x2F;boot&#x2F;actuate&#x2F;autoconfigure&#x2F;health&#x2F;HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method &#39;healthIndicatorRegistry&#39; threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration&#39;: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;dataSource&#39; defined in class path resource [com&#x2F;opay&#x2F;im&#x2F;config&#x2F;DatabaseConfig.class]: Unsatisfied dependency expressed through method &#39;dataSource&#39; parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;defaultDataSource&#39; defined in class path resource [com&#x2F;opay&#x2F;im&#x2F;config&#x2F;DatabaseConfig.class]: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org&#x2F;apache&#x2F;shardingsphere&#x2F;api&#x2F;config&#x2F;RuleConfiguration<br>        at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]<br>        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]<br>        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]<br>        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]<br>        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]<br>        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]<br>        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]<br>        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]<br>        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]<br>        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-5.1.8.RELEASE.jar!&#x2F;:5.1.8.RELEASE]<br>        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:211) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:202) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:96) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.web.servlet.ServletContextInitializerBeans.&lt;init&gt;(ServletContextInitializerBeans.java:85) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br>        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:252) ~[spring-boot-2.1.6.RELEASE.jar!&#x2F;:2.1.6.RELEASE]<br><br></code></pre></td></tr></table></figure><h4 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h4><ol><li>开始排查是因为缺少 <code>sharding-core-api-4.0.0-RC2.2-1.8.jar</code> 包下的一个文件, 但是本地是有的</li><li>本地可以启动</li><li>服务器启动失败, 可能是jar包缺少</li><li>最后结果发现 sharding-core-api-4.0.0-RC2.2-1.8.jar 是通过公司封装的一个包传递进来的, 而封装的那个jar包在私服上已经被删除了. <del>删除原因</del></li></ol>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac创建data目录失败</title>
      <link href="2020/01/05/mac-create-data-directory-failed.html"/>
      <url>2020/01/05/mac-create-data-directory-failed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>部分项目log日志输出路径为 /data/log, 发现无法创建目录<br>错误信息: <code>mkdir: cannot create directory ‘data’: Read-only file system</code></p></blockquote><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><h5 id="关闭SPI"><a href="#关闭SPI" class="headerlink" title="关闭SPI"></a>关闭SPI</h5><ol><li>重启 按住CMD+R进入恢复模式</li><li>打开终端<br><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/feature/mac-spi.jpg" alt="spi关闭"></li><li>终端输入命令：csrutil disable</li></ol><h5 id="挂载data"><a href="#挂载data" class="headerlink" title="挂载data"></a>挂载data</h5><ol><li>在用户目录(可以自己找一个目录下创建data)</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">~  % &gt; <span class="hljs-built_in">cd</span> ~<br>~  % &gt; mkdir data<br></code></pre></td></tr></table></figure><ol start="2"><li>执行 <code>sudo mount -uw /</code> 重新挂载根目录</li><li>建立软链<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ln -s /Users/liuzhihang/data /data<br></code></pre></td></tr></table></figure></li><li>之后可以重启再打开spi了<br><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/feature/mac-spi2.png" alt="spi关闭"></li></ol>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中插入Bilibili视频</title>
      <link href="2019/09/14/hexo-inserts-bilibili-video.html"/>
      <url>2019/09/14/hexo-inserts-bilibili-video.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>修改matery主题首页显示视频为Bilibili视频</p><p>在Markdown插入Bilibili视频, 并设置大小.</p></blockquote><h3 id="首先找到分享嵌入代码"><a href="#首先找到分享嵌入代码" class="headerlink" title="首先找到分享嵌入代码"></a>首先找到分享嵌入代码</h3><p><img src="https://i.loli.net/2019/10/10/di3Cxcr9VLvjqM6.png" alt="Bilibili分享截图"></p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//player.bilibili.com/player.html?aid=17963687&amp;cid=29326684&amp;page=1&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="在markdown中使用嵌入代码"><a href="#在markdown中使用嵌入代码" class="headerlink" title="在markdown中使用嵌入代码"></a>在markdown中使用嵌入代码</h3><iframe src="//player.bilibili.com/player.html?aid=17963687&cid=29326684&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="调整大小和居中等"><a href="#调整大小和居中等" class="headerlink" title="调整大小和居中等"></a>调整大小和居中等</h3><p><a href="https://www.w3school.com.cn/tags/tag_iframe.asp">iframe标签属性设置</a></p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    调整大小: width=&quot;xxx&quot; height=&quot;xxx&quot;</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//player.bilibili.com/player.html?aid=17963687&amp;cid=29326684&amp;page=1&quot;</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;600&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;400&quot;</span>  <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="//player.bilibili.com/player.html?aid=17963687&cid=29326684&page=1" width="700" height="480"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="设置自适应"><a href="#设置自适应" class="headerlink" title="设置自适应"></a>设置自适应</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//player.bilibili.com/player.html?aid=17963687&amp;cid=29326684&amp;page=1&quot;</span>  <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=17963687&cid=29326684&page=1"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><h3 id="matery-主题修改首页展示视频"><a href="#matery-主题修改首页展示视频" class="headerlink" title="matery 主题修改首页展示视频"></a>matery 主题修改首页展示视频</h3><p>找到 /themes/hexo-theme-matery/layout/_widget/video.ejs 将第十一行左右代码改成Bilibili视频即可, 引入的 script 可以删掉.</p><p>修改后如下.</p><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;video-player&quot;</span>&gt;<br>    &lt;% <span class="hljs-keyword">if</span> (theme.video.showTitle) &#123; %&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;title center-align&quot;</span>&gt;<br>            &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;fas fa-video-camera&quot;</span>&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- theme.video.title %&gt;<br>        &lt;/div&gt;<br>    &lt;% &#125; %&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col l8 offset-l2 m10 offset-m1 s12&quot;</span>&gt;<br>            &lt;div id=<span class="hljs-string">&quot;dplayer&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;dplayer-video&quot;</span>&gt;<br>                &lt;div style=<span class="hljs-string">&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;</span>&gt;<br>                    &lt;iframe src=<span class="hljs-string">&quot;//player.bilibili.com/player.html?aid=16316393&amp;cid=26620787&amp;page=1&quot;</span>  scrolling=<span class="hljs-string">&quot;no&quot;</span> border=<span class="hljs-string">&quot;0&quot;</span> frameborder=<span class="hljs-string">&quot;no&quot;</span> framespacing=<span class="hljs-string">&quot;0&quot;</span> allowfullscreen=<span class="hljs-string">&quot;true&quot;</span> style=<span class="hljs-string">&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;</span>&gt;&lt;/iframe&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis分布式锁的生产问题解决方案</title>
      <link href="2019/08/18/redis-distributed-lock-production-problem-solution.html"/>
      <url>2019/08/18/redis-distributed-lock-production-problem-solution.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><pre><code>SET KEY VALUE TIME NXDEL KEY</code></pre><p>一般使用 NX, 只有在锁不存在的时候才加锁成功, 设置时间是为了锁永远得不到释放</p><h3 id="存在问题及解决方法"><a href="#存在问题及解决方法" class="headerlink" title="存在问题及解决方法"></a>存在问题及解决方法</h3><ol><li><p>A加锁, B释放</p><p> 方法: Redisson 在tryLock时</p> <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span> threadId = Thread.currentThread().getId();<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">getLockName</span><span class="hljs-params">(<span class="hljs-keyword">long</span> threadId)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> id + <span class="hljs-string">&quot;:&quot;</span> + threadId;<br>&#125;<br><br><span class="hljs-comment">// id 为 UUID</span><br></code></pre></td></tr></table></figure><p> 会将当前 uuId+线程id写入到锁信息中, unlock时会校验是否是当前线程</p></li><li><p>A lock锁住之后, 设置了时间, 但是在时间内未完成, 导致锁自动释放, 然后B获取锁同时进行操作</p><p> 方法: Redisson 在lock时会启动异步线程, 自动延期, 时间为 lockWatchdogTimeout(默认30s)</p> <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Timeout task = commandExecutor.getConnectionManager().newTimeout(<span class="hljs-keyword">new</span> TimerTask() &#123;<br>    省略...<br>&#125;, internalLockLeaseTime / <span class="hljs-number">3</span>, TimeUnit.MILLISECONDS);<br><br></code></pre></td></tr></table></figure><p> 看源码是延时 1/3的时间后开始, 就是每次1/3时间的时候延期一次. 这样理解不知道对不对</p></li><li><p>主从下, A 加锁 Master 成功后未同步给Slave 便宕机, 导致 B发现未加锁<br> 方法: 可以修改源码, 同时加锁Master-Slave 才算加锁成功</p></li><li><p>集群状态下可以参考RedLock(红锁), 加锁多台机器, 多数成功才算成功(locks.size()/2 + 1)</p> <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedissonRedLock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RedissonMultiLock</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RedissonRedLock</span><span class="hljs-params">(RLock... locks)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(locks);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何落地最终一致性事务</title>
      <link href="2019/08/17/how-to-land-the-final-consistency-transaction.html"/>
      <url>2019/08/17/how-to-land-the-final-consistency-transaction.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="作业：如果对自己的系统落地最终一致性事务，如何落地实现？"><a href="#作业：如果对自己的系统落地最终一致性事务，如何落地实现？" class="headerlink" title="作业：如果对自己的系统落地最终一致性事务，如何落地实现？"></a>作业：如果对自己的系统落地最终一致性事务，如何落地实现？</h3><ol><li>首先熟悉自己负责的业务, 熟悉系统间交互流程, 哪些可以异步, 哪些是必须同步</li><li>异步的时候要考虑是否需要一致性, 当前系统通知流程如图</li></ol><h3 id="如何落地最终一致性事务"><a href="#如何落地最终一致性事务" class="headerlink" title="如何落地最终一致性事务"></a>如何落地最终一致性事务</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/feature/0812-task.png" alt="最终一致性事务方案"></p><h3 id="根据课程思考最终一致性事务修改"><a href="#根据课程思考最终一致性事务修改" class="headerlink" title="根据课程思考最终一致性事务修改:"></a>根据课程思考最终一致性事务修改:</h3><ol><li>在收到交易请求, 成功时可以 commit half message</li><li>同时 需要实现 check方法, 供RocketMQ回调, 检查本地事务状态</li><li>在交易成功或失败时再进行commit或rollback</li><li>rollback消息 RocketMQ会定期删除</li><li>通知系统收到消息存储到本地并通知商户</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>但是考虑到在这边系统完全没有必要增加事务, 因为发送消息到MQ是在交易结束后, 直接用一个字段判断状态, 然后用定时保证投递到MQ即可.</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">RocketMQ的两段提交 half message<br>执行流程<br>根据流程结果: commit&#x2F;rockback<br></code></pre></td></tr></table></figure><p>可以改成</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">执行流程<br>RocketMQ send(普通消息)<br></code></pre></td></tr></table></figure><p>在这边的使用场景中, 因为提交了 half message 也不会发送消息, 等到流程执行结束了, 然后使用send发送普通消息即可.</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交易系统架构图</title>
      <link href="2019/08/10/trading-system-architecture.html"/>
      <url>2019/08/10/trading-system-architecture.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="交易系统架构"><a href="#交易系统架构" class="headerlink" title="交易系统架构"></a>交易系统架构</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/feature/0806-task.png" alt="交易系统架构"></p><h3 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程:"></a>请求流程:</h3><ol><li>请求首先到SLB(阿里云)经过负载均衡后, 到Nginx</li><li>Nginx做简单负载均衡后发给交易API系统, 4C8G * 5 ECS(阿里云)</li><li>交易会根据请求参数, 路由到各个子系统, 使用dubbo</li><li>子系统收到请求, 请求风控系统校验风控</li><li>请求应用中心获取应用参数 (appId, appKey等)</li><li>拼装报文,请求渠道系统</li><li>返回信息</li></ol><h3 id="日志报送流程"><a href="#日志报送流程" class="headerlink" title="日志报送流程"></a>日志报送流程</h3><ol><li>交易成功报送清结算, 报送数据中心</li><li>filebeat拉取日志, 报送kafka, 因filebeat升级 同时存在5.x和6.x 需要加中间一层, 之前是直接报logstash</li><li>logstash对数据进行过滤然后根据type 分别保送到 elasticsearch和redis</li><li>监控系统监控redis队列数据, 满足规则, 报警(发消息到通知系统)</li><li>监控系统对es数据进行过滤, 放到mysql, 用来展示商户, 渠道的交易变化等信息</li><li>kibana(直接用的kibana)提供给技术支持查询日志. es数据会定期删除, 保留15-30天的数据, 仅仅技术支持用, 不需要效率很高, 所以机器配置相对较差.</li></ol><h3 id="扩容方案"><a href="#扩容方案" class="headerlink" title="扩容方案"></a>扩容方案</h3><p>公司体量较小, QPS高峰期也就500左右, TPS高峰期在100~200, 所以基本没有遇到问题.<br>之前有过一段时间公众号支付交易量较大, 主要做法是增加公众号机器, 同时增加API系统机器.<br>假如交易量提高, 一般应对就是增加机器, 和提高机器配置, 基本上都可以应对.</p><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>定时系统是仅仅通过dubbo发送调用请求, 没有业务逻辑. 所以单体基本没有遇到挂掉. 也在考虑分布式定时任务.</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud架构原理图</title>
      <link href="2019/08/04/springcloud-architecture-schematic.html"/>
      <url>2019/08/04/springcloud-architecture-schematic.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h3 id="springcloud-通信原理"><a href="#springcloud-通信原理" class="headerlink" title="springcloud 通信原理"></a>springcloud 通信原理</h3><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/feature/0731-task.png" alt="通信原理"></p><h3 id="1-Eureka-集群"><a href="#1-Eureka-集群" class="headerlink" title="1. Eureka 集群"></a>1. Eureka 集群</h3><ol><li>Eureka启动后, 会向其他节点注册, 相互直接视为 peer, 并互相同步注册信息.</li></ol><h3 id="2-缓存机制"><a href="#2-缓存机制" class="headerlink" title="2. 缓存机制"></a>2. 缓存机制</h3><p>Eureka存在三个map: registry、readWriteCacheMap、readOnlyCacheMap</p><p>registry: CurrentHashMap 实时更新<br>readWriteCacheMap: Guava Cache/LoadingCache     也是实时更新<br>readOnlyCacheMap: CurrentHashMap 30秒同步 readWriteCacheMap一次</p><h3 id="3-服务注册"><a href="#3-服务注册" class="headerlink" title="3. 服务注册"></a>3. 服务注册</h3><p>服务注册后每30s发送一次心跳(renew)<br>客户端每30秒请注册中心获取一次配置, 并存到本地内存中</p><p>注册中心会定时检查心跳, 连续没有3个回踢掉服务</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo底层原理架构图</title>
      <link href="2019/08/03/dubbo-bottom-structure-diagram.html"/>
      <url>2019/08/03/dubbo-bottom-structure-diagram.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java进阶训练营学习笔记<br>课程: <a href="https://apppukyptrl1086.pc.xiaoe-tech.com/detail/p_5d3110c3c0e9d_FnmTTtj4/6">Java进阶训练营</a><br>老师: 中华石杉<br>邀请码: <a href="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/feature/IMG_0340_phrrry.jpg">二维码</a></p></blockquote><h4 id="操作流程图"><a href="#操作流程图" class="headerlink" title="操作流程图"></a>操作流程图</h4><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/feature/0730-task.png" alt="操作流程"></p><h4 id="1-服务注册-故障及下线"><a href="#1-服务注册-故障及下线" class="headerlink" title="1. 服务注册, 故障及下线"></a>1. 服务注册, 故障及下线</h4><ol><li>注册: provider和consumer同时在zk上注册临时节点, 同时consumer订阅zk /dubbo/**/providers provider地址, providers发生变化, zk自动推送给consumer</li></ol><p>zk上结构如下</p><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">ls /dubbo/cn.xxx.xxxService<br><br>[consumers, routers, providers, configurators]<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs url">[consumer:&#x2F;&#x2F;机器ip&#x2F;接口?application&#x3D;服务名&amp;category&#x3D;consumers&amp;check&#x3D;false&amp;default.check&#x3D;false&amp;default.group&#x3D;beta&amp;default.timeout&#x3D;5000&amp;default.version&#x3D;1.0.0&amp;dubbo&#x3D;2.6.2&amp;interface&#x3D;接口&amp;methods&#x3D;方法1,方法2&amp;pid&#x3D;7828&amp;revision&#x3D;0.0.1&amp;side&#x3D;consumer&amp;timestamp&#x3D;1556173624632]<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs url">[dubbo:&#x2F;&#x2F;机器1ip:端口&#x2F;接口?anyhost&#x3D;true&amp;application&#x3D;WalletOrderApplicationConsumer&amp;delay&#x3D;2000&amp;dubbo&#x3D;2.5.3&amp;group&#x3D;beta&amp;heartbeat&#x3D;10000&amp;interface&#x3D;接口&amp;methods&#x3D;方法1,方法2&amp;pid&#x3D;22419&amp;retries&#x3D;0&amp;revision&#x3D;1.0.0&amp;side&#x3D;provider&amp;timeout&#x3D;10000&amp;timestamp&#x3D;1564743170669&amp;version&#x3D;1.0.0,<br>dubbo:&#x2F;&#x2F;机器2ip:端口&#x2F;接口?anyhost&#x3D;true&amp;application&#x3D;WalletOrderApplicationConsumer&amp;delay&#x3D;2000&amp;dubbo&#x3D;2.5.3&amp;group&#x3D;beta&amp;heartbeat&#x3D;10000&amp;interface&#x3D;cn.ipaynow.webank.wallet.order.api.provider.DataCenterTaskService&amp;methods&#x3D;syncRechargesRefund,syncTrans,syncTransCancel,syncTransRefunds,syncRecharges&amp;pid&#x3D;16801&amp;retries&#x3D;0&amp;revision&#x3D;0.0.1&amp;side&#x3D;provider&amp;timeout&#x3D;10000&amp;timestamp&#x3D;1563792977340&amp;version&#x3D;1.0.0]<br></code></pre></td></tr></table></figure><ol start="2"><li>故障: zk自动删除临时节点</li><li>下线: 取消注册, 主动删除节点</li></ol><h4 id="2-Proxy-动态代理"><a href="#2-Proxy-动态代理" class="headerlink" title="2. Proxy 动态代理"></a>2. Proxy 动态代理</h4><p>根据配置的接口, 生成动态代理对象, 使用 JDK + JAVAASSIST 方式</p><ol><li><p>在服务提供端，将服务的具体实现类转为Invoker</p></li><li><p>在消费端，通过 getProxy(Invoker<T> invoker)将invoker转为客户端需要的接口</p></li><li><p>Invoker封装了Provider地址及Service接口信息</p></li></ol><h4 id="3-Cluster-集群层"><a href="#3-Cluster-集群层" class="headerlink" title="3. Cluster 集群层"></a>3. Cluster 集群层</h4><p>获取到要调用的Invoker</p><ol><li>多个服务端会有多个 Invoker对象, 组合成Directory, Directory在zk推送Provider节点变更时, 会发生变化</li><li>Router, 按照路由规则选出本次可以调用的 Directory子集,  zk注册中心 routers节点下配置</li><li>LoadBalance 从子集中按照负载均衡选出本次调用<ol><li>Random LoadBalance 随机</li><li>RoundRobin LoadBalance 轮询</li><li>LeastActive LoadBalance 最少活跃</li><li>ConsistentHash LoadBalance 一致性哈希</li></ol></li><li>容错<ol><li>Failover Cluster 失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries=”2″ 来设置重试次数(不含第一次)。</li><li>Failfast Cluster：快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</li><li>Failsafe Cluster：失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</li><li>Failback Cluster：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</li><li>Forking Cluster：并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=”2″ 来设置最大并行数。</li></ol></li></ol><h4 id="4-Protocol-远程调用层"><a href="#4-Protocol-远程调用层" class="headerlink" title="4. Protocol 远程调用层"></a>4. Protocol 远程调用层</h4><p>包含两个接口, 分别是 暴露服务(export) 和 引用服务(refer) 分别对应provider 和 consumer<br>选择通信协议 dubbo, hessian, http等</p><h4 id="5-Exchange-数据交换层"><a href="#5-Exchange-数据交换层" class="headerlink" title="5. Exchange 数据交换层"></a>5. Exchange 数据交换层</h4><p>将请求信息封装为Request, 然后发送给 Transport层, 并将返回信息封装为Response</p><h4 id="6-Transport-网络传输层"><a href="#6-Transport-网络传输层" class="headerlink" title="6. Transport 网络传输层"></a>6. Transport 网络传输层</h4><p>使用netty或mina进行网络通信</p><h4 id="7-serialize-序列化层"><a href="#7-serialize-序列化层" class="headerlink" title="7. serialize 序列化层"></a>7. serialize 序列化层</h4><p>将请求报文和返回报文记性序列化和反序列化</p><h4 id="8-provider收到请求后先进行反序列化-然后在解析请求-通过动态代理调用相应方法"><a href="#8-provider收到请求后先进行反序列化-然后在解析请求-通过动态代理调用相应方法" class="headerlink" title="8. provider收到请求后先进行反序列化, 然后在解析请求, 通过动态代理调用相应方法"></a>8. provider收到请求后先进行反序列化, 然后在解析请求, 通过动态代理调用相应方法</h4>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目中使用SpringSecurity和JWT做权限认证</title>
      <link href="2019/07/22/springsecurity-jwt-springboot-project.html"/>
      <url>2019/07/22/springsecurity-jwt-springboot-project.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>前段时间做了一个项目, 因为涉及到权限认证, 所以分别调研了 SpringSecurity 和 Apache Shiro. 最后选择使用了 SpringSecurity + JWT做权限认证,  现在项目已经结束, 总相关笔记.<br>项目下载地址 <a href="https://github.com/liuzhihang/jwt-demo">jwt-demo</a></p></blockquote><ol><li>使用JWT生成token</li><li>token存储在数据库中</li><li>使用 application/json 登录</li><li>使用手机号进行登录</li><li>URI动态拦截</li></ol><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ol><li>分别添加 SpringSecurity JWT 和 fastjson 依赖</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--json--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="基础准备对象"><a href="#基础准备对象" class="headerlink" title="基础准备对象"></a>基础准备对象</h3><ul><li>主要是在<strong>用户登录成功handle</strong>时使用JWT生成Token返回给客户端.</li></ul><h4 id="基础使用dto"><a href="#基础使用dto" class="headerlink" title="基础使用dto"></a>基础使用dto</h4><p>请求返回基类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseReqDto</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String version;<br><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseRespDto</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String resultCode;<br><br>    <span class="hljs-keyword">private</span> String resultMsg;<br><br>    <span class="hljs-keyword">private</span> String resultTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>登录请求返回对象</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginReqDto</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String token;<br><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginRespDto</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseRespDto</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String token;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="用于验证的用户"><a href="#用于验证的用户" class="headerlink" title="用于验证的用户"></a>用于验证的用户</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.demo.bean;<br><br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户信息校验验证码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDetailsImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetails</span>, <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 权限集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Collection&lt;? extends GrantedAuthority&gt; authorities;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.authorities;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAuthorities</span><span class="hljs-params">(Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.authorities = authorities;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonExpired</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonLocked</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCredentialsNonExpired</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEnabled</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="用户未登录handle"><a href="#用户未登录handle" class="headerlink" title="用户未登录handle"></a>用户未登录handle</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户登录认证, 未登录返回信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-06-04 13:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthenticationEntryPointImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AuthenticationEntryPoint</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyyMMddHHmmss&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commence</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br><br>        LoginRespDto respDto = <span class="hljs-keyword">new</span> LoginRespDto();<br>        respDto.setResultCode(<span class="hljs-string">&quot;0001&quot;</span>);<br>        respDto.setResultMsg(<span class="hljs-string">&quot;用户未登录&quot;</span>);<br>        respDto.setResultTime(LocalDateTime.now().format(FORMATTER));<br><br>        response.getWriter().write(JSON.toJSONString(respDto));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="用户登录验证失败handle"><a href="#用户登录验证失败handle" class="headerlink" title="用户登录验证失败handle"></a>用户登录验证失败handle</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户登录认证失败返回的信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-06-04 13:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthenticationFailureHandlerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AuthenticationFailureHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyyMMddHHmmss&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br><br>        LoginRespDto respDto = <span class="hljs-keyword">new</span> LoginRespDto();<br>        respDto.setResultCode(<span class="hljs-string">&quot;0001&quot;</span>);<br>        respDto.setResultMsg(<span class="hljs-string">&quot;用户登录认证失败&quot;</span>);<br>        respDto.setResultTime(LocalDateTime.now().format(FORMATTER));<br><br>        response.getWriter().write(JSON.toJSONString(respDto));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="用户无权访问handle"><a href="#用户无权访问handle" class="headerlink" title="用户无权访问handle"></a>用户无权访问handle</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当用户访问无权限页面时, 返回信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-06-04 14:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccessDeniedHandlerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccessDeniedHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyyMMddHHmmss&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br><br>        LoginRespDto respDto = <span class="hljs-keyword">new</span> LoginRespDto();<br>        respDto.setResultCode(<span class="hljs-string">&quot;0002&quot;</span>);<br>        respDto.setResultMsg(<span class="hljs-string">&quot;用户无权访问&quot;</span>);<br>        respDto.setResultTime(LocalDateTime.now().format(FORMATTER));<br><br>        response.getWriter().write(JSON.toJSONString(respDto));<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="用户登录成功handle"><a href="#用户登录成功handle" class="headerlink" title="用户登录成功handle"></a>用户登录成功handle</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户登录成功之后的返回信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-06-04 14:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthenticationSuccessHandlerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AuthenticationSuccessHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyyMMddHHmmss&quot;</span>);<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> JwtTokenUtil jwtTokenUtil;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="hljs-function"><span class="hljs-params">                                        Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();<br><br>        String jwtToken = jwtTokenUtil.generateToken(userDetails);<br><br>        <span class="hljs-comment">// 把生成的token更新到数据库中</span><br>        <span class="hljs-comment">// 更新DB操作 ...</span><br><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br><br>        LoginRespDto respDto = <span class="hljs-keyword">new</span> LoginRespDto();<br>        respDto.setToken(jwtToken);<br>        respDto.setResultCode(<span class="hljs-string">&quot;0000&quot;</span>);<br>        respDto.setResultMsg(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>        respDto.setResultTime(LocalDateTime.now().format(FORMATTER));<br><br>        response.getWriter().write(JSON.toJSONString(respDto));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JwtTokenUtil"><a href="#JwtTokenUtil" class="headerlink" title="JwtTokenUtil"></a>JwtTokenUtil</h2><p>主要用来生成token和通过token解析对象等操作.</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.demo.utils;<br><br><span class="hljs-keyword">import</span> com.liuzhihang.demo.bean.UserDetailsImpl;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.time.Instant;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用 java-jwt jwt类库</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-06-05 09:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtTokenUtil</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> SignatureAlgorithm SIGN_TYPE = SignatureAlgorithm.HS256;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SECRET = <span class="hljs-string">&quot;jwt-secret&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * JWT超时时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> EXPIRED_TIME = <span class="hljs-number">7</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * claims 为自定义的私有声明, 要放在前面</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 生成token</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">generateToken</span><span class="hljs-params">(UserDetails userDetails)</span> </span>&#123;<br><br>        <span class="hljs-keyword">long</span> instantNow = Instant.now().toEpochMilli();<br><br>        Claims claims = Jwts.claims();<br>        claims.put(Claims.SUBJECT, userDetails.getUsername());<br><br>        <span class="hljs-keyword">return</span> Jwts.builder().setClaims(claims).setIssuedAt(<span class="hljs-keyword">new</span> Date(instantNow))<br>                .setExpiration(<span class="hljs-keyword">new</span> Date(instantNow + EXPIRED_TIME))<br>                .signWith(SIGN_TYPE, SECRET).compact();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * claims 为自定义的私有声明, 要放在前面</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 生成token</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">generateToken</span><span class="hljs-params">(String userName)</span> </span>&#123;<br><br>        <span class="hljs-keyword">long</span> instantNow = Instant.now().toEpochMilli();<br><br>        Claims claims = Jwts.claims();<br>        claims.put(Claims.SUBJECT, userName);<br><br>        <span class="hljs-keyword">return</span> Jwts.builder().setClaims(claims).setIssuedAt(<span class="hljs-keyword">new</span> Date(instantNow))<br>                .setExpiration(<span class="hljs-keyword">new</span> Date(instantNow + EXPIRED_TIME))<br>                .signWith(SIGN_TYPE, SECRET).compact();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将token解析, 映射为 UserDetails</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwtToken</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">getUserDetailsFromToken</span><span class="hljs-params">(String jwtToken)</span> </span>&#123;<br><br>        Claims claimsFromToken = getClaimsFromToken(jwtToken);<br><br>        String userName = claimsFromToken.get(Claims.SUBJECT, String.class);<br><br>        UserDetailsImpl userDetails = <span class="hljs-keyword">new</span> UserDetailsImpl();<br>        userDetails.setUsername(userName);<br><br>        <span class="hljs-keyword">return</span> userDetails;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证token</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">validateToken</span><span class="hljs-params">(String token, UserDetails userDetails)</span> </span>&#123;<br>        UserDetailsImpl user = (UserDetailsImpl) userDetails;<br>        String username = getPhoneNoFromToken(token);<br><br>        <span class="hljs-keyword">return</span> (username.equals(user.getUsername()) &amp;&amp; !isTokenExpired(token));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 刷新令牌</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 原令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 新令牌</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">refreshToken</span><span class="hljs-params">(String token)</span> </span>&#123;<br>        String refreshedToken;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Claims claims = getClaimsFromToken(token);<br><br>            <span class="hljs-keyword">long</span> instantNow = Instant.now().toEpochMilli();<br><br>            refreshedToken = Jwts.builder().setClaims(claims).setIssuedAt(<span class="hljs-keyword">new</span> Date(instantNow))<br>                    .setExpiration(<span class="hljs-keyword">new</span> Date(instantNow + EXPIRED_TIME))<br>                    .signWith(SIGN_TYPE, SECRET).compact();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            refreshedToken = <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> refreshedToken;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取token是否过期</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">isTokenExpired</span><span class="hljs-params">(String token)</span> </span>&#123;<br>        Date expiration = getExpirationDateFromToken(token);<br>        <span class="hljs-keyword">return</span> expiration.before(<span class="hljs-keyword">new</span> Date());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据token获取username</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPhoneNoFromToken</span><span class="hljs-params">(String token)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getClaimsFromToken(token).getSubject();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取token的过期时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getExpirationDateFromToken</span><span class="hljs-params">(String token)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getClaimsFromToken(token).getExpiration();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析JWT</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Claims <span class="hljs-title">getClaimsFromToken</span><span class="hljs-params">(String token)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token).getBody();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="WebSecurityConfig-核心配置"><a href="#WebSecurityConfig-核心配置" class="headerlink" title="WebSecurityConfig 核心配置"></a>WebSecurityConfig 核心配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.demo.config;<br><br><span class="hljs-keyword">import</span> com.liuzhihang.demo.filter.CustomizeAuthenticationFilter;<br><span class="hljs-keyword">import</span> com.liuzhihang.demo.filter.JwtPerTokenFilter;<br><span class="hljs-keyword">import</span> com.liuzhihang.demo.service.UserDetailServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;<br><span class="hljs-keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-06-03 14:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailServiceImpl userDetailServiceImpl;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> JwtPerTokenFilter jwtPerTokenFilter;<br><br>    <span class="hljs-meta">@Resource(name = &quot;authenticationEntryPointImpl&quot;)</span><br>    <span class="hljs-keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;<br><br>    <span class="hljs-meta">@Resource(name = &quot;authenticationSuccessHandlerImpl&quot;)</span><br>    <span class="hljs-keyword">private</span> AuthenticationSuccessHandler authenticationSuccessHandler;<br><br>    <span class="hljs-meta">@Resource(name = &quot;authenticationFailureHandlerImpl&quot;)</span><br>    <span class="hljs-keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler;<br><br>    <span class="hljs-meta">@Resource(name = &quot;accessDeniedHandlerImpl&quot;)</span><br>    <span class="hljs-keyword">private</span> AccessDeniedHandler accessDeniedHandler;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建用于认证授权的用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> auth</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configureUserInfo</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 放入自己的认证授权用户, 内部逻辑需要自己实现</span><br>        <span class="hljs-comment">// UserDetailServiceImpl implements UserDetailsService</span><br>        auth.userDetailsService(userDetailServiceImpl);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        http<br>                <span class="hljs-comment">// 使用JWT, 关闭session</span><br>                .csrf().disable().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br><br>                .and().httpBasic().authenticationEntryPoint(authenticationEntryPoint)<br><br>                <span class="hljs-comment">// 登录的权限, 成功返回信息, 失败返回信息</span><br>                .and().formLogin().permitAll()<br><br>                .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>)<br><br>                <span class="hljs-comment">// 配置url 权限 antMatchers: 匹配url 权限</span><br>                .and().authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-string">&quot;/getVersion&quot;</span>)<br>                .permitAll()<br>                <span class="hljs-comment">// 其他需要登录才能访问</span><br>                .anyRequest().access(<span class="hljs-string">&quot;@dynamicAuthorityService.hasPermission(request,authentication)&quot;</span>)<br><br>                <span class="hljs-comment">// 访问无权限 location 时</span><br>                .and().exceptionHandling().accessDeniedHandler(accessDeniedHandler)<br><br>                <span class="hljs-comment">// 自定义过滤</span><br>                .and().addFilterAt(customAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)<br>                .addFilterBefore(jwtPerTokenFilter, UsernamePasswordAuthenticationFilter.class)<br><br>                .headers().cacheControl();<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 密码加密器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * BCryptPasswordEncoder：相同的密码明文每次生成的密文都不同，安全性更高</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function">CustomizeAuthenticationFilter <span class="hljs-title">customAuthenticationFilter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        CustomizeAuthenticationFilter filter = <span class="hljs-keyword">new</span> CustomizeAuthenticationFilter();<br>        filter.setAuthenticationSuccessHandler(authenticationSuccessHandler);<br>        filter.setAuthenticationFailureHandler(authenticationFailureHandler);<br>        filter.setAuthenticationManager(authenticationManagerBean());<br>        <span class="hljs-keyword">return</span> filter;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="登录校验过程"><a href="#登录校验过程" class="headerlink" title="登录校验过程"></a>登录校验过程</h2><div class="mermaid">graph TD;    A(请求登录) --&gt; B(CustomizeAuthenticationFilter#attemptAuthentication 解析请求的json);    B --&gt; C(UserDetailServiceImpl#loadUserByUsername 验证用户名密码);    C --&gt; D(AuthenticationSuccessHandlerImpl#onAuthenticationSuccess 构建返回参数 包括token);    D --&gt; E(返回结果)</div><h3 id="自定义拦截器解析-json-报文"><a href="#自定义拦截器解析-json-报文" class="headerlink" title="自定义拦截器解析 json 报文"></a>自定义拦截器解析 json 报文</h3><p>前端请求登录报文类型为 application/json 需要后端增加拦截器, 对登录请求报文进行解析</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.demo.filter;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONException;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationServiceException;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 自定义拦截器, 重写UsernamePasswordAuthenticationFilter 从而可以处理 application/json 中的json请求报文</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-06-12 19:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UsernamePasswordAuthenticationFilter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">attemptAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br><br>        <span class="hljs-comment">// attempt Authentication when Content-Type is json</span><br>        <span class="hljs-keyword">if</span> (request.getContentType().equalsIgnoreCase(MediaType.APPLICATION_JSON_UTF8_VALUE)<br>            || request.getContentType().equalsIgnoreCase(MediaType.APPLICATION_JSON_VALUE)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                BufferedReader br = request.getReader();<br>                String str;<br>                StringBuilder jsonStr = <span class="hljs-keyword">new</span> StringBuilder();<br>                <span class="hljs-keyword">while</span> ((str = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                    jsonStr.append(str);<br>                &#125;<br><br>                log.info(<span class="hljs-string">&quot;本次登录请求参数:&#123;&#125;&quot;</span>, jsonStr);<br><br>                JSONObject jsonObject = JSON.parseObject(jsonStr.toString());<br><br>                UsernamePasswordAuthenticationToken authRequest = <span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(<br>                    jsonObject.getString(<span class="hljs-string">&quot;username&quot;</span>), jsonObject.getString(<span class="hljs-string">&quot;password&quot;</span>));<br>                setDetails(request, authRequest);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getAuthenticationManager().authenticate(authRequest);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                log.info(<span class="hljs-string">&quot;用户登录, 请求参数 不正确&quot;</span>);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AuthenticationServiceException(<span class="hljs-string">&quot;获取报文请求参数失败&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (JSONException e) &#123;<br>                log.info(<span class="hljs-string">&quot;用户登录, 请求报文格式 不正确&quot;</span>);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AuthenticationServiceException(<span class="hljs-string">&quot;请求报文, 转换Json失败&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.error(<span class="hljs-string">&quot;用户登录, contentType 不正确&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AuthenticationServiceException(<br>                <span class="hljs-string">&quot;请求 contentType 不正确, 请使用 application/json;charset=UTF-8 或者 application/json;&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="用户认证模块"><a href="#用户认证模块" class="headerlink" title="用户认证模块"></a>用户认证模块</h3><ul><li>根据获取到的username从数据库中查询到密码, 将用户名密码赋值给UserDetails对象, 返回其他的框架会进行校验</li><li>这边使用中是使用的手机号+验证码登录, 所以 上面json解析的也是 phoneNo+verificationCode</li><li>在这块 username仅仅代指登录名, 可以是手机号可以是别的.</li><li>这边使用中验证码是从redis中获取的. 获取不到返回失败, 获取到和传递的不一致也算失败.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.demo.service;<br><br><span class="hljs-keyword">import</span> com.liuzhihang.demo.bean.UserDetailsImpl;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component(&quot;userDetailServiceImpl&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDetailServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来验证登录名是否有权限进行登录</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 可以通过数据库进行校验 也可以通过redis 等等</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> UsernameNotFoundException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br><br><br>        UserDetailsImpl userDetailsImpl = <span class="hljs-keyword">new</span> UserDetailsImpl();<br>        userDetailsImpl.setUsername(<span class="hljs-string">&quot;liuzhihang&quot;</span>);<br>        userDetailsImpl.setPassword(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456789&quot;</span>));<br>        <span class="hljs-keyword">return</span> userDetailsImpl;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="请求校验过程"><a href="#请求校验过程" class="headerlink" title="请求校验过程"></a>请求校验过程</h2><div class="mermaid">graph TD;    A(请求接口) --&gt; B(JwtPerTokenFilter#doFilterInternal 验证Header中的token);    B --&gt; C(DynamicAuthorityService#hasPermission 验证有没有请求url权限);    C --&gt; D(处理逻辑);    D --&gt; E(返回结果)</div><h3 id="JWTToken拦截器"><a href="#JWTToken拦截器" class="headerlink" title="JWTToken拦截器"></a>JWTToken拦截器</h3><p>主要是拦截请求, 验证Header中的token是否正确</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.demo.filter;<br><br><span class="hljs-keyword">import</span> com.liuzhihang.demo.utils.JwtTokenUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.WebAuthenticationDetailsSource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-06-05 09:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtPerTokenFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OncePerRequestFilter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtTokenUtil jwtTokenUtil;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 存放Token的Header Key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String HEADER_STRING = <span class="hljs-string">&quot;token&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        String token = request.getHeader(HEADER_STRING);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != token &amp;&amp; !jwtTokenUtil.isTokenExpired(token)) &#123;<br>            UserDetails userDetails = jwtTokenUtil.getUserDetailsFromToken(token);<br>            String username = userDetails.getUsername();<br><br>            <span class="hljs-keyword">if</span> (username != <span class="hljs-keyword">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class="hljs-keyword">null</span>) &#123;<br><br>                <span class="hljs-comment">// 通过 username 查询数据库 获取token 然后和库中token作比较</span><br><br>                <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;liuzhihang&quot;</span>)) &#123;<br><br>                    UsernamePasswordAuthenticationToken authentication =<br>                            <span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(userDetails, <span class="hljs-keyword">null</span>, userDetails.getAuthorities());<br>                    authentication.setDetails(<span class="hljs-keyword">new</span> WebAuthenticationDetailsSource().buildDetails(request));<br>                    SecurityContextHolder.getContext().setAuthentication(authentication);<br>                &#125;<br>            &#125;<br>        &#125;<br>        filterChain.doFilter(request, response);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="URI动态校验"><a href="#URI动态校验" class="headerlink" title="URI动态校验"></a>URI动态校验</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.demo.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态权限认证</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-06-25 15:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component(value = &quot;dynamicAuthorityService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicAuthorityService</span> </span>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermission</span><span class="hljs-params">(HttpServletRequest request, Authentication authentication)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Object principal = authentication.getPrincipal();<br>            <span class="hljs-keyword">if</span> (principal <span class="hljs-keyword">instanceof</span> UserDetails &amp;&amp; authentication <span class="hljs-keyword">instanceof</span> UsernamePasswordAuthenticationToken) &#123;<br>                <span class="hljs-comment">// 本次请求的uri</span><br>                String uri = request.getRequestURI();<br><br>                <span class="hljs-comment">// 获取当前用户</span><br>                UserDetails userDetails = (UserDetails) principal;<br><br>                String username = userDetails.getUsername();<br>                log.info(<span class="hljs-string">&quot;本次用户请求认证, username:&#123;&#125;, uri:&#123;&#125;&quot;</span>, username, uri);<br><br>                <span class="hljs-comment">// 从数据库取逻辑</span><br>                <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;liuzhihang&quot;</span>))&#123;<br>                    Set&lt;String&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>                    set.add(<span class="hljs-string">&quot;/homeInfo&quot;</span>);<br>                    set.add(<span class="hljs-string">&quot;/getAllUser&quot;</span>);<br>                    set.add(<span class="hljs-string">&quot;/editUserInfo&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (set.contains(uri)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;用户请求登录, uri:&#123;&#125; error&quot;</span>, request.getRequestURI(), e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>脚本在 <a href="https://github.com/liuzhihang/jwt-demo/blob/master/src/test/java/ReqTest.http">httpclient脚本</a></p><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs http">POST localhost:8080/login<br><span class="hljs-attribute">Content-Type</span>: application/json<br><br>&#123;<br>  &quot;username&quot;: &quot;liuzhihang&quot;,<br>  &quot;password&quot;: &quot;123456789&quot;<br>&#125;<br>### 请求接口脚本<br><br>POST localhost:8080/homeInfo<br><span class="hljs-attribute">Content-Type</span>: application/json<br><span class="hljs-attribute">token</span>: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsaXV6aGloYW5nIiwiaWF0IjoxNTY5MDI1NjY4LCJleHAiOjE1Njk2MzA0Njh9.Kot_uLnwtcq-t5o4x3V-xBnpf-mKEi7OV2eAfgMCKLk<br>###<br></code></pre></td></tr></table></figure><p>返回:</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;resultCode&quot;</span>: <span class="hljs-string">&quot;0000&quot;</span>,<br>  <span class="hljs-attr">&quot;resultMsg&quot;</span>: <span class="hljs-string">&quot;登录成功&quot;</span>,<br>  <span class="hljs-attr">&quot;resultTime&quot;</span>: <span class="hljs-string">&quot;20190920191038&quot;</span>,<br>  <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsaXV6aGloYW5nIiwiaWF0IjoxNTY4OTc3ODM4LCJleHAiOjE1Njk1ODI2Mzh9.MAS9VkFdCF3agkCgTtc0VzPMFjY42vFyIvAEzkSeAfs&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/larger5/article/details/81063438">前后端分离 SpringBoot + SpringSecurity + JWT + RBAC 实现用户无状态请求验证</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk使用MD5生成Id</title>
      <link href="2019/07/20/gitalk-uses-md5-to-generate-an-id.html"/>
      <url>2019/07/20/gitalk-uses-md5-to-generate-an-id.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Gitalk默认使用: location.pathname 作为 gitalk 的id, 但是location.path必须小于50位切换主题时, 每个主题使用的处理方式都不相同, 有可能会导致换了主题, 发现之前的评论不见了, 下面介绍使用MD5作为id, 同时在换主题时一定要修改这个id的规则.</p></blockquote><h3 id="Gitalk使用"><a href="#Gitalk使用" class="headerlink" title="Gitalk使用"></a>Gitalk使用</h3><p>使用<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">Gitalk</a>方法:</p><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> gitalk = <span class="hljs-keyword">new</span> Gitalk(&#123;<br>  clientID: <span class="hljs-string">&#x27;GitHub Application Client ID&#x27;</span>,<br>  clientSecret: <span class="hljs-string">&#x27;GitHub Application Client Secret&#x27;</span>,<br>  repo: <span class="hljs-string">&#x27;GitHub repo&#x27;</span>,<br>  owner: <span class="hljs-string">&#x27;GitHub repo owner&#x27;</span>,<br>  admin: [<span class="hljs-string">&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;</span>],<br>  id: location.pathname,      <span class="hljs-comment">// Ensure uniqueness and length less than 50</span><br>  distractionFreeMode: <span class="hljs-literal">false</span>  <span class="hljs-comment">// Facebook-like distraction free mode</span><br>&#125;)<br><br>gitalk.render(<span class="hljs-string">&#x27;gitalk-container&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="使用MD5生成id"><a href="#使用MD5生成id" class="headerlink" title="使用MD5生成id"></a>使用MD5生成id</h3><ol><li>引入js</li></ol><p><a href="https://github.com/blueimp/JavaScript-MD5">MD5</a> js 下载地址</p><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;js/md5.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>修改js</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">var</span> gitalk_id = md5(location.pathname)<br>    <span class="hljs-keyword">if</span> (&lt;%- page.comments_type == <span class="hljs-string">&#x27;404&#x27;</span>   %&gt;) &#123;<br>        gitalk_id = md5(<span class="hljs-string">&#x27;https://liuzhihang.com/404&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">let</span> gitalk = <span class="hljs-keyword">new</span> Gitalk(&#123;<br>        clientID: <span class="hljs-string">&#x27;&lt;%- theme.gitalk.oauth.clientId %&gt;&#x27;</span>,<br>        clientSecret: <span class="hljs-string">&#x27;&lt;%- theme.gitalk.oauth.clientSecret %&gt;&#x27;</span>,<br>        repo: <span class="hljs-string">&#x27;&lt;%- theme.gitalk.repo %&gt;&#x27;</span>,<br>        owner: <span class="hljs-string">&#x27;&lt;%- theme.gitalk.owner %&gt;&#x27;</span>,<br>        admin: &lt;%- <span class="hljs-built_in">JSON</span>.stringify(theme.gitalk.admin) %&gt;,<br>        id: gitalk_id,<br>        distractionFreeMode: <span class="hljs-literal">false</span>  <span class="hljs-comment">// Facebook-like distraction free mode</span><br>    &#125;);<br><br>    gitalk.render(<span class="hljs-string">&#x27;gitalk-container&#x27;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA插件--Toolkit</title>
      <link href="2019/05/11/idea-plugin-toolkit.html"/>
      <url>2019/05/11/idea-plugin-toolkit.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Toolkit"><a href="#Toolkit" class="headerlink" title="Toolkit"></a>Toolkit</h1><div><a href="https://plugins.jetbrains.com/plugin/12384-toolkit"><img src="https://img.shields.io/jetbrains/plugin/v/12384-toolkit.svg" alt="JetBrains Plugins"></a><a href="https://plugins.jetbrains.com/plugin/12384-toolkit/versions"><img src="http://phpstorm.espend.de/badge/12384/version" alt="Version"></a><a href="https://plugins.jetbrains.com/plugin/12384-toolkit"><img src="https://img.shields.io/jetbrains/plugin/d/12384-toolkit.svg" alt="Downloads"></a><a href="https://github.com/liuzhihang/toolkit/blob/master/LICENSE"><img src="https://img.shields.io/badge/license-MIT-red.svg" alt="License"></a></div><p>一个小工具包, 暂时还有很多功能需要扩展.</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul><li>Mybatis<ul><li>通过侧栏箭头在 MyBatis XML文件和 Mapper文件之间相互跳转</li><li>mapper文件id简单检查</li></ul></li><li>Json<ul><li>JavaBean复制为Json字符串</li><li>Json字符串格式化</li><li>Json字符串转换为JavaBean</li><li>Json压缩</li></ul></li><li>XML: Xml格式化</li></ul><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ul><li>文末演示</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p><strong>在线安装:</strong></p><ul><li><code>File</code> -&gt; <code>Setting</code> -&gt; <code>Plugins</code> -&gt; 搜索 <code>Toolkit</code></li></ul></li><li><p><strong>手动安装:</strong></p><ul><li><a href="https://github.com/liuzhihang/toolkit/releases">下载插件</a> -&gt; <code>File</code> -&gt; <code>Setting</code> -&gt; <code>Plugins</code> -&gt; <code>Install Plugin from Disk...</code></li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>右键菜单选择 <code>Tookit</code></li></ul><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h2 id="v1-0-7-2020-02-27"><a href="#v1-0-7-2020-02-27" class="headerlink" title="v1.0.7 (2020-02-27)"></a><a href="https://github.com/liuzhihang/toolkit/releases/tag/v1.0.7">v1.0.7</a> (2020-02-27)</h2><ul><li>修改使用包装类型</li></ul><p><a href="./doc/ChangeNotes.md">查看更多历史更新记录</a></p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><h5 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis:"></a>MyBatis:</h5><p>&emsp;mybatis support: <a href="https://github.com/zhaoqin102/mybatis-support">https://github.com/zhaoqin102/mybatis-support</a></p><p>&emsp;free-idea-mybatis: <a href="https://github.com/wuzhizhan/free-idea-mybatis">https://github.com/wuzhizhan/free-idea-mybatis</a></p><h5 id="Json"><a href="#Json" class="headerlink" title="Json:"></a>Json:</h5><p>&emsp;GsonFormat: <a href="https://github.com/zzz40500/GsonFormat">https://github.com/zzz40500/GsonFormat</a></p><h2 id="本工具使用-JetBrains-IDEA-进行开发"><a href="#本工具使用-JetBrains-IDEA-进行开发" class="headerlink" title="本工具使用 JetBrains IDEA 进行开发"></a>本工具使用 JetBrains IDEA 进行开发</h2><p><a href="https://www.jetbrains.com/?from=Toolkit"><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/toolkit/jetbrains-logo.png" width="20%" height="20%"></a><a href="https://www.jetbrains.com/?from=Toolkit"><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/toolkit/idea-logo.png" width="20%" height="20%"> </a></p><h2 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h2><p><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/toolkit/copy-as-json.png" alt="copy-as-json"><br><img src="https://cdn.jsdelivr.net/gh/liuzhihang/oss/pic/toolkit/gif.gif" alt="gif"></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch cat API</title>
      <link href="2019/03/14/elasticsearch-cat-api.html"/>
      <url>2019/03/14/elasticsearch-cat-api.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="cat-API"><a href="#cat-API" class="headerlink" title="cat API"></a>cat API</h4><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html">官方地址</a></p><blockquote><p>GET /_cat/XXX?v<br>GET /_cat/XXX?v&amp;format=json</p></blockquote><p>v 是指带着列信息</p><p>支持指定返回内容的格式 默认为text</p><p>?format=text(json/smile/yaml/cbor)</p><a id="more"></a><h5 id="查看节点别名"><a href="#查看节点别名" class="headerlink" title="查看节点别名"></a>查看节点别名</h5><blockquote><p>GET /_cat/aliases?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/aliases?v”</p></blockquote><h5 id="每个节点分配了几个shard，对磁盘的占用空间大小，使用率"><a href="#每个节点分配了几个shard，对磁盘的占用空间大小，使用率" class="headerlink" title="每个节点分配了几个shard，对磁盘的占用空间大小，使用率"></a>每个节点分配了几个shard，对磁盘的占用空间大小，使用率</h5><blockquote><p>GET /_cat/allocation?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/allocation?v”</p></blockquote><h5 id="群集或单个索引的document计数"><a href="#群集或单个索引的document计数" class="headerlink" title="群集或单个索引的document计数"></a>群集或单个索引的document计数</h5><blockquote><p>GET /_cat/count?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/count?v</p><p>GET /_cat/count/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/count/index_name?v”</p></blockquote><h5 id="显示集群中每个数据节点上fielddata当前正在使用的堆内存量"><a href="#显示集群中每个数据节点上fielddata当前正在使用的堆内存量" class="headerlink" title="显示集群中每个数据节点上fielddata当前正在使用的堆内存量"></a>显示集群中每个数据节点上fielddata当前正在使用的堆内存量</h5><blockquote><p>GET /_cat/fielddata?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/fielddata?v”</p></blockquote><h5 id="查看集群健康情况"><a href="#查看集群健康情况" class="headerlink" title="查看集群健康情况"></a>查看集群健康情况</h5><blockquote><p>GET /_cat/health?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/health?v”</p></blockquote><h5 id="查看索引的信息"><a href="#查看索引的信息" class="headerlink" title="查看索引的信息"></a>查看索引的信息</h5><blockquote><p>GET _cat/indices?v<br>GET _cat/indices/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/indices/twi*?v&amp;s=index”</p></blockquote><h5 id="查看master信息"><a href="#查看master信息" class="headerlink" title="查看master信息"></a>查看master信息</h5><blockquote><p>GET /_cat/master?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/master?v”</p></blockquote><h5 id="查看node信息"><a href="#查看node信息" class="headerlink" title="查看node信息"></a>查看node信息</h5><blockquote><p>GET /_cat/nodes?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/nodes?v”</p></blockquote><h5 id="当前pending没执行完的task的具体情况，执行的是什么操作"><a href="#当前pending没执行完的task的具体情况，执行的是什么操作" class="headerlink" title="当前pending没执行完的task的具体情况，执行的是什么操作"></a>当前pending没执行完的task的具体情况，执行的是什么操作</h5><blockquote><p>创建索引，更新映射，分配或失败分片的列表<br>GET /_cat/pending_tasks?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/pending_tasks?v”</p></blockquote><h5 id="查看安装的插件"><a href="#查看安装的插件" class="headerlink" title="查看安装的插件"></a>查看安装的插件</h5><blockquote><p>GET /_cat/plugins?v&amp;s=component&amp;h=name,component,version,description<br>curl -X GET “192.168.xxx.xxx:9200/_cat/plugins?v&amp;s=component&amp;h=name,component,version,description”</p></blockquote><h5 id="shard-recovery恢复的过程情况"><a href="#shard-recovery恢复的过程情况" class="headerlink" title="shard recovery恢复的过程情况"></a>shard recovery恢复的过程情况</h5><blockquote><p>GET /_cat/recovery?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/recovery?v”</p></blockquote><h5 id="查看在群集中注册的快照存储库"><a href="#查看在群集中注册的快照存储库" class="headerlink" title="查看在群集中注册的快照存储库"></a>查看在群集中注册的快照存储库</h5><blockquote><p>GET /_cat/repositories?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/repositories?v</p></blockquote><h5 id="查看线程池使用"><a href="#查看线程池使用" class="headerlink" title="查看线程池使用"></a>查看线程池使用</h5><blockquote><p>GET /_cat/thread_pool<br>curl -X GET “192.168.xxx.xxx:9200/_cat/thread_pool”</p></blockquote><h5 id="查看shard情况"><a href="#查看shard情况" class="headerlink" title="查看shard情况"></a>查看shard情况</h5><blockquote><p>GET _cat/shards?v<br>GET _cat/shards/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/shards/index_name?v</p></blockquote><h5 id="索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索"><a href="#索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索" class="headerlink" title="索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索"></a>索引segment文件的情况，在哪个node上，有多少个document，占用了多少磁盘空间，有多少数据在内存中，是否可以搜索</h5><blockquote><p>GET /_cat/segments?v<br>GET _cat/segments/index_name?v<br>curl -X GET “192.168.xxx.xxx:9200/_cat/segments/index_name?v</p></blockquote><h5 id="查看tempalte"><a href="#查看tempalte" class="headerlink" title="查看tempalte"></a>查看tempalte</h5><blockquote><p>GET /_cat/templates?v&amp;s=name<br>curl -X GET “192.168.xxx.xxx:9200/_cat/templates?v&amp;s=name”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么es集群至少需要三个节点</title>
      <link href="2019/03/13/why-does-the-es-cluster-require-at-least-three-nodes.html"/>
      <url>2019/03/13/why-does-the-es-cluster-require-at-least-three-nodes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="elasticsearch集群"><a href="#elasticsearch集群" class="headerlink" title="elasticsearch集群"></a>elasticsearch集群</h4><div class="mermaid">graph LR;    A(Master Node) --- B(Data Node);    A --- C(Data Node);    B --- C;</div><p>Master: 在Elasticsearch中Master仅仅负责维护集群的状态</p><blockquote><ol><li>创建或删除索引</li><li>跟踪哪些节点是集群的一部分</li><li>决定将哪些碎片分配给哪个节点</li><li>等集群范围的操作</li></ol></blockquote><p>上面的一些集群信息, 是由Master节点进行维护, 但是 Master也会把节点信息, 同步给其他节点, 但是只有master节点可以修改.</p><a id="more"></a><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html">点击查看Elasticsearch节点介绍</a></p><h4 id="为什么要至少三个节点"><a href="#为什么要至少三个节点" class="headerlink" title="为什么要至少三个节点"></a>为什么要至少三个节点</h4><p>首先查看 Elasticsearch 的配置文件, 如下:<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-zen.html">Zen Discovery 官方介绍</a></p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 传递初始主机列表，以便在启动新节点时执行发现</span><br><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;192.168.xxx.xxx:9300&quot;</span>, <span class="hljs-string">&quot;192.168.xxx.xxx:9300&quot;</span>]<br><span class="hljs-comment"># 选举Maste时需要的节点数 (total number of master-eligible nodes / 2 + 1) 防止“防止脑裂”</span><br><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">2</span><br><span class="hljs-comment"># 一个节点多久ping一次，默认1s</span><br><span class="hljs-attr">discovery.zen.fd.ping_interval:</span> <span class="hljs-string">1s</span><br><span class="hljs-comment"># 等待ping返回时间，默认30s</span><br><span class="hljs-attr">discovery.zen.fd.ping_timeout:</span> <span class="hljs-string">30s</span><br><span class="hljs-comment"># ping超时重试次数，默认3次</span><br><span class="hljs-attr">discovery.zen.fd.ping_retries:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><pre><code>discovery.zen.minimum_master_nodes: 2</code></pre><p>其中 minimum_master_nodes 配置是为了防止脑裂</p><h5 id="假设-Elasticsearch-有两个节点"><a href="#假设-Elasticsearch-有两个节点" class="headerlink" title="假设 Elasticsearch 有两个节点"></a>假设 Elasticsearch 有两个节点</h5><div class="mermaid">graph LR;    A(Master Node) --- B(Data Node);</div><div class="mermaid">graph LR;    A(Master Node) -.X.- B(Data Node);</div><ol><li><p>discovery.zen.minimum_master_nodes: 1</p><blockquote><p>此时出现网络波动, 导致 A—B 之间短暂断开连接,  根据选举规则, B将自己选举为 Master, 当网络波动结束, 就会出现两个Master的情况.</p></blockquote> <div class="mermaid">graph LR;    A(Master Node 宕机) --- B(Data Node);</div></li></ol><ol start="2"><li>discovery.zen.minimum_master_nodes: 2<blockquote><p>Master 出现故障, 则 B 将永远不可能将自己选择为 Master</p></blockquote></li></ol><h5 id="Elasticsearch-有三个节点"><a href="#Elasticsearch-有三个节点" class="headerlink" title="Elasticsearch 有三个节点"></a>Elasticsearch 有三个节点</h5><p>三节点配置: discovery.zen.minimum_master_nodes: 2</p><div class="mermaid">graph LR;    A(Master Node) -.X.- B(Data Node);    A -.X.- C(Data Node);    B --- C;</div><p>出现网络波动 A 节点 和 别的节点短暂断开连接</p><div class="mermaid">graph LR;    A(Master Node -&gt; Data Node) -.X.- B(Data Node -&gt; Master Node);    A -.X.- C(Data Node);    B --- C;</div><p>A节点降级, B和C 进行选举, 此处模拟选举B为 Master Node</p><div class="mermaid">graph LR;    A(Data Node) --- B(Master Node);    A --- C(Data Node);    B --- C;</div><p>网络恢复后的节点状况.</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上可以看出, 通过配置 minimum_master_nodes 来防止出现脑裂<br>同时在生产过程中, 为了尽量保持集群高可用, 至少需要三台机器搭建集群</p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 数据写入流程</title>
      <link href="2019/03/12/elasticsearch-data-writing-process.html"/>
      <url>2019/03/12/elasticsearch-data-writing-process.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h4><p><img src="/resources/image/elk/elasticsearch-writing-process.png" alt="elasticsearch写入过程"></p><ol><li><p>客户端随机选择一个node发送数据, 此时该node为协调节点(coordinating node)<br> 1.1. coordinating node 通过 _id计算出该document在哪个shard上, 假设为shard0, 计算方式如下:</p><blockquote><p>hash(_id) % number_of_primary_shards</p></blockquote><p> 1.2. node 根据 cluster state 获取到 shard0 在 node1 上</p><a id="more"></a></li><li><p>将消息发送到 node1 的 P0 上</p></li><li><p>P0 收到数据后, 将数据同步到 自己的 replica shard R0上</p></li><li><p>P0 和 R0 都处理完毕, 才会返回客户端成功</p></li></ol><blockquote><p>Px 为 primary shard<br>Rx 为 replica shard<br>当客户端请求为查询时, 路由到任意 shard(primary shard 或者 replica shard) 查询到数据即可返回.</p></blockquote><h4 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h4><p><img src="/resources/image/elk/elasticsearch-writing-detailed-process.png" alt="elasticsearch-writing-detailed-process"></p><ol><li>P0收到document, 同时将数据写入到 内存buffer和translog中</li><li>每隔1s或buffer满时, buffer中的数据会 refresh 到segment中, 而后进入os cache, 一旦segment进入到 cache中,其中的数据, 则可以被搜索到<blockquote><p>refresh 时间可以手动设置, 也可以手动触发 refresh</p></blockquote></li><li>清空buffer, translog不处理</li><li>重复1-3操作, translog不断增大, translog每隔30分钟,或大到一定量时, 会触发commit操作</li><li>将buffer中内容刷新到segment中, 并清空buffer</li><li>将一个commit point 写入到磁盘文件中, 标识此次commit 对应的 segment</li><li>执行 fsync 将 os cache 中的数据强制刷新到磁盘文件中</li><li>删除 translog 文件</li></ol><h5 id="删除和更新操作"><a href="#删除和更新操作" class="headerlink" title="删除和更新操作"></a>删除和更新操作</h5><blockquote><p>在commit时, 如果操作为删除, 生成一个 .del文件, 其中将该document标记位deleted, 并不是真正的物理删除, 此时如果有查询请求, 会先查询 .del文件中是否有该记录, 如果有, 则回复不存在.<br>在commit时, 如果为更新操作, 则是将原document标记位deleted, 同时写入一条新数据</p></blockquote><h5 id="服务宕机重启-translog-日志作用"><a href="#服务宕机重启-translog-日志作用" class="headerlink" title="服务宕机重启, translog 日志作用"></a>服务宕机重启, translog 日志作用</h5><blockquote><p>translog是先写入到 os cache中, 然后每隔5s写入到磁盘文件中, 假如服务宕掉, 可能会失去5s数据, 也可以修改写入磁盘的时机, 但是可能会影响性能<br>translog中记录的是数据操作信息, 在服务宕机重启时, 会读取translog磁盘文件, 然后将translog中的数据重新恢复到 segment中, 然后进行后续操作</p></blockquote><h5 id="segment-merge-过程"><a href="#segment-merge-过程" class="headerlink" title="segment merge 过程"></a>segment merge 过程</h5><blockquote><p>segment 持续生成, 会导致 segment不断变多, 占用<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E5%8F%A5%E6%9F%84">文件句柄</a>, cpu资源等等<br>es后台有一个专门的程序负责合并segment, 将小的 segment 合成大的segment, 同时写一个commit point, 标识 新的segment file.<br>打开新的segment供查询使用, 删除旧的 segment<br>segment 合并过程中, 被标记位 deleted 的document 不会被合并. 即: 在合并 segment时, 才将 document 真正物理删除<br>合并的segment 可以使磁盘上已经commit的索引 也可以是内存中还未commit的索引</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash input多个kafka异常</title>
      <link href="2019/03/04/logstash-input-multiple-kafka-exceptions.html"/>
      <url>2019/03/04/logstash-input-multiple-kafka-exceptions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><div class="mermaid">graph LR;    filebeat --&gt; logstash;    log4j --&gt; logstash;    logstash --&gt; es;</div><p>filebeat 和 log4j appender 同时到 kafka, logstash在启动时报错, 错误如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">javax.management.InstanceAlreadyExistsException: kafka.consumer:type&#x3D;app-info,id&#x3D;logstash-0<br></code></pre></td></tr></table></figure><a id="more"></a><h5 id="问题原因及解决"><a href="#问题原因及解决" class="headerlink" title="问题原因及解决"></a>问题原因及解决</h5><p>input 消费kafka时, 分别指定不同的 client_id.</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">kafka &#123;<br>        bootstrap_servers &#x3D;&gt; [&quot;192.168.103.43:9092&quot;] # 注意这里配置的kafka的broker地址不是zk的地址<br>        client_id &#x3D;&gt; &quot;kafka_client_1&quot;<br>        group_id &#x3D;&gt; &quot;logstash&quot;<br>        topics &#x3D;&gt; [&quot;ipaynow_log&quot;]  # kafka topic 名称<br>        consumer_threads &#x3D;&gt; 5<br>        decorate_events &#x3D;&gt; true<br>        type &#x3D;&gt; &quot;string&quot;<br>        codec &#x3D;&gt; &quot;json&quot;<br>&#125;<br><br>kafka &#123;<br>        bootstrap_servers &#x3D;&gt; [&quot;192.168.103.43:9092&quot;] # 注意这里配置的kafka的broker地址不是zk的地址<br>        client_id &#x3D;&gt; &quot;kafka_client_2&quot;<br>        group_id &#x3D;&gt; &quot;logstash&quot;<br>        topics &#x3D;&gt; [&quot;ipaynow-hunter&quot;]  # kafka topic 名称<br>        consumer_threads &#x3D;&gt; 5<br>        decorate_events &#x3D;&gt; true<br>        type &#x3D;&gt; &quot;string&quot;<br>        codec &#x3D;&gt; plain &#123; charset&#x3D;&gt;&quot;UTF-8&quot; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序无异常中断</title>
      <link href="2019/02/15/no-abnormal-interruption-of-the-program.html"/>
      <url>2019/02/15/no-abnormal-interruption-of-the-program.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><ol><li>程序执行到某一处之后停顿, 不能继续执行, 不抛出异常, 无返回值</li><li>本地测试正常</li><li>debug可以正常执行</li><li>操作为入库之前, 创建对象, 是一个很简单的set操作</li></ol><blockquote><p>payInfoExtra.setToAccType(agPayReqDto.getToAccType().getValue());</p><p>其中get操作获取的为一个枚举, 主要操作为从枚举中获取value set到另一个对象中</p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> AccTypeEnum <span class="hljs-title">getToAccType</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> toAccType;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="问题原因及解决"><a href="#问题原因及解决" class="headerlink" title="问题原因及解决"></a>问题原因及解决</h4><p>小伙伴在他们项目中复用本项目中的枚举类, 没有修改包名类名, 但是把枚举中value字段从 byte改成了String, 同时放在了依赖中, 提供给我们使用.<br>解决方案就很简单了, 让小伙伴修改包名类名就可以了.<br>原枚举类如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">AccTypeEnum</span> </span>&#123;<br><br>    PRI((<span class="hljs-keyword">byte</span>) <span class="hljs-number">0</span>, <span class="hljs-string">&quot;对私&quot;</span>),<br>    PUB((<span class="hljs-keyword">byte</span>) <span class="hljs-number">1</span>, <span class="hljs-string">&quot;对公&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span> value;<br>    <span class="hljs-keyword">private</span> String desc;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>skywalking5集群部署</title>
      <link href="2018/12/27/skywalking5-cluster-deployment.html"/>
      <url>2018/12/27/skywalking5-cluster-deployment.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><ol><li>skywalking-5.0.0-GA</li><li>zookeeper-3.4.10</li><li>elasticsearch-5.6.14</li></ol><p>下载地址如下:</p><pre><code>skywalking: http://skywalking.apache.org/downloads/zookeeper: http://mirrors.hust.edu.cn/apache/zookeeper/elasticsearch: https://www.elastic.co/downloads/past-releases</code></pre><a id="more"></a><h4 id="安装zk集群"><a href="#安装zk集群" class="headerlink" title="安装zk集群"></a>安装zk集群</h4><ol><li>下载并解压zk<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz<br>tar -xvf zookeeper-3.4.10.tar.gz<br></code></pre></td></tr></table></figure></li><li>修改配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> zookeeper-3.4.10/conf/<br>cp zoo_sample.cfg zoo.cfg<br>vim zoo.cfg<br></code></pre></td></tr></table></figure></li><li>内容如下<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tickTime=2000<br>initLimit=10<br>syncLimit=5<br>dataDir=/opt/<span class="hljs-built_in">export</span>/app/zookeeper-3.4.10/data<br>clientPort=2181<br>server.1=192.168.***.236:2888:3888<br>server.2=192.168.***.237:2888:3888<br></code></pre></td></tr></table></figure></li><li>写入集群myid<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 1 &gt; /opt/<span class="hljs-built_in">export</span>/app/zookeeper-3.4.10/data/myid<br><span class="hljs-comment"># 另一台机器则写入2</span><br></code></pre></td></tr></table></figure></li><li>zk基本命令<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在zk的bin目录下</span><br><span class="hljs-comment"># 启动</span><br>./zkServer.sh start<br><span class="hljs-comment"># 停止</span><br>./zkServer.sh stop<br><span class="hljs-comment"># 查看状态</span><br>./zkServer.sh status<br><span class="hljs-comment"># 查看zk的节点</span><br>./zkCli.sh<br><span class="hljs-comment"># 连接后使用 ls / 命令查看</span><br>ls /skywalking<br></code></pre></td></tr></table></figure></li></ol><h4 id="安装es集群"><a href="#安装es集群" class="headerlink" title="安装es集群"></a>安装es集群</h4><ol><li>下载并解压es<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.14.tar.gz<br>tar -xvf elasticsearch-5.6.14.tar.gz<br></code></pre></td></tr></table></figure></li><li>修改配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> elasticsearch-5.6.14/config/<br>vim elasticsearch.yml<br></code></pre></td></tr></table></figure></li><li>内容如下<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">cluster.name: CollectorDBCluster<br>node.name: node-1<br>path.data: /opt/<span class="hljs-built_in">export</span>/app/elasticsearch-5.6.14/data<br>path.logs: /opt/<span class="hljs-built_in">export</span>/app/elasticsearch-5.6.14/logs<br>network.host: 192.168.***.234<br>discovery.zen.ping.unicast.hosts: [<span class="hljs-string">&quot;192.168.***.234:9300&quot;</span>, <span class="hljs-string">&quot;192.168.***.235:9300&quot;</span>]<br>discovery.zen.minimum_master_nodes: 2<br>bootstrap.memory_lock: <span class="hljs-literal">false</span><br>bootstrap.system_call_filter: <span class="hljs-literal">false</span><br><span class="hljs-comment"># 修改上报数据线程池大小</span><br>thread_pool.bulk.queue_size: 1000<br></code></pre></td></tr></table></figure></li><li>常用命令<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 后台启动</span><br>bin/elasticsearch -d<br><span class="hljs-comment"># 删除所有索引</span><br>curl -XDELETE 192.168.***.234:9200/*<br></code></pre></td></tr></table></figure></li></ol><h4 id="安装skywalking"><a href="#安装skywalking" class="headerlink" title="安装skywalking"></a>安装skywalking</h4><p>☞ <a href="https://github.com/apache/incubator-skywalking/blob/v5.0.0-GA/docs/cn/Deploy-backend-in-cluster-mode-CN.md">官方地址</a></p><ol><li>下载并解压<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget http://mirrors.shu.edu.cn/apache/incubator/skywalking/5.0.0-GA/apache-skywalking-apm-incubating-5.0.0-GA.tar.gz<br>tar -xvf apache-skywalking-apm-incubating-5.0.0-GA.tar.gz<br>mv apache-skywalking-apm-incubating-5.0.0-GA skywalking-5.0.0-GA<br></code></pre></td></tr></table></figure></li><li>修改配置<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> skywalking-5.0.0-GA/config/<br>vim application.yml<br></code></pre></td></tr></table></figure></li><li>修改内容如下<ol><li>集群配置 <figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">cluster:<br>    zookeeper:<br>        hostPort: 192.168.***.236:2181,192.168.***.237:2181<br>        sessionTimeout: 100000<br></code></pre></td></tr></table></figure></li><li>es配置 <figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">storage:<br>    elasticsearch:<br>        clusterName: CollectorDBCluster<br>        clusterTransportSniffer: <span class="hljs-literal">true</span><br>        clusterNodes: 192.168.***.234:9300,192.168.***.235:9300<br>        <span class="hljs-comment"># 其他配置</span><br></code></pre></td></tr></table></figure></li><li>其他配置 <figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># host配置修改</span><br>host: 192.168.***.236<br></code></pre></td></tr></table></figure></li></ol></li><li>修改webapp配置<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vim webapp/webapp.yml<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">collector:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/graphql</span><br>    <span class="hljs-attr">ribbon:</span><br>        <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">10000</span><br>        <span class="hljs-attr">listOfServers:</span> <span class="hljs-number">192.168</span><span class="hljs-string">.**.236:10800,192.168.**.237:10800</span><br></code></pre></td></tr></table></figure></li><li>常用命令<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动collector+webUI</span><br>bin/startup.sh<br><span class="hljs-comment"># 只启动collector或webUI</span><br>bin/collectorService.sh<br>bin/webappService.sh<br></code></pre></td></tr></table></figure></li><li>探针使用<br> ☞ <a href="https://github.com/apache/incubator-skywalking/blob/v5.0.0-GA/docs/cn/Deploy-skywalking-agent-CN.md">官方地址</a><pre><code> java -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -jar yourApp.jar</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> skywalking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> skywalking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash时间戳差8个小时</title>
      <link href="2018/12/20/logstash-timestamp-difference-8-hours.html"/>
      <url>2018/12/20/logstash-timestamp-difference-8-hours.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h4><p>原始配置:</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs logstash"><br>elasticsearch &#123;<br>        # manage_template &#x3D;&gt; false<br>        template_overwrite &#x3D;&gt; true<br>        template &#x3D;&gt; &quot;&#x2F;opt&#x2F;export&#x2F;app&#x2F;logstash-6.4.2&#x2F;bin&#x2F;dynamic_templates.json&quot;<br>        user &#x3D;&gt; xxxxxxx<br>        password &#x3D;&gt; xxxxxxx<br>        index &#x3D;&gt; &quot;%&#123;sys_name&#125;-%&#123;+YYYY.MM.dd&#125;&quot;<br>        hosts &#x3D;&gt; [&quot;172.19.3.51:9200&quot;,&quot;172.19.3.52:9200&quot;]<br>&#125;<br></code></pre></td></tr></table></figure><p>在使用logstash输出内容要es中时, 指定index为系统名称+时间(年月日), 时间会自动匹配‘@timestamp’字段并格式化, 但是在实际使用过程中, 发现在上午八点之前的消息会被创建到昨天的索引里面.查阅相关资料, 有介绍在时间戳上面增加8个小时的方式, 也可以使用. 这里结合自己业务使用的其他方式.</p><a id="more"></a><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li><p>主要报送内容为filebeat的日志信息, 日志统一有时间戳, 格式如下:</p><pre><code> [trans-mediapay]-[2018-12-19 02:00:00:187]-[queryThreadPool-14]-[]-[WeBankServiceImpl.java:101]-[INFO ]-[测试2点的日志]</code></pre></li><li><p>解析时间戳的时间</p><ol><li>先匹配整体日志, 获取’log_time’字段</li><li>匹配’log_time’字段</li><li>生成元数据 ‘[@metadata][index_suffix]’<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">filter &#123;<br><br> <span class="hljs-comment">#  日志聚合使用全量配置</span><br>grok &#123;<br>match =&gt; &#123;<br><span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;\[%&#123;DATA:sys_name&#125;\]-\[%&#123;DATA:log_time&#125;\]-\[%&#123;DATA:thread_name&#125;\]-\[%&#123;DATA:trace_id&#125;\]-\[%&#123;DATA:class_name&#125;\]-\[%&#123;DATA:log_level&#125;\]-%&#123;GREEDYDATA:log_msg&#125;&quot;</span><br>&#125;<br>&#125;<br>grok&#123;<br>        match =&gt; &#123; <span class="hljs-string">&quot;log_time&quot;</span> =&gt; [<span class="hljs-string">&quot;%&#123;INT:index_year&#125;-%&#123;INT:index_mouth&#125;-%&#123;INT:index_day&#125;&quot;</span>]&#125;<br>    &#125;<br>    mutate &#123;<br>    <span class="hljs-comment"># 使用元数据 [@metadata][index_suffix]</span><br>add_field =&gt; &#123; <span class="hljs-string">&quot;[@metadata][index_suffix]&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;index_year&#125;.%&#123;index_mouth&#125;.%&#123;index_day&#125;&quot;</span> &#125;<br>        remove_field =&gt; [<span class="hljs-string">&quot;host&quot;</span>,<span class="hljs-string">&quot;beat&quot;</span>,<span class="hljs-string">&quot;tags&quot;</span>,<span class="hljs-string">&quot;[beat][name]&quot;</span>,<span class="hljs-string">&quot;[beat][version]&quot;</span>,<span class="hljs-string">&quot;prospector&quot;</span>,<span class="hljs-string">&quot;@version&quot;</span>,<span class="hljs-string">&quot;offset&quot;</span>,<span class="hljs-string">&quot;input&quot;</span>,<span class="hljs-string">&quot;y_index&quot;</span>,<span class="hljs-string">&quot;M_index&quot;</span>,<span class="hljs-string">&quot;d_index&quot;</span>]<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>输出时使用元数据, 该字段不会出现在es的字段中</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">elasticsearch &#123;<br>        <span class="hljs-comment"># manage_template =&gt; false</span><br>        template_overwrite =&gt; <span class="hljs-literal">true</span><br>        template =&gt; <span class="hljs-string">&quot;/opt/export/app/logstash-6.4.2/bin/dynamic_templates.json&quot;</span><br>        user =&gt; xxxxxxx<br>        password =&gt; xxxxxxx<br>        index =&gt; <span class="hljs-string">&quot;%&#123;sys_name&#125;-%&#123;[@metadata][index_suffix]&#125;&quot;</span><br>        hosts =&gt; [<span class="hljs-string">&quot;xxxx:9200&quot;</span>,<span class="hljs-string">&quot;xxxx:9200&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取IP和byte转long遇到的小问题</title>
      <link href="2018/12/10/get-the-small-problem-encountered-by-ip-and-byte-to-long.html"/>
      <url>2018/12/10/get-the-small-problem-encountered-by-ip-and-byte-to-long.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>因为业务需求新项目的流水号系统从 ‘数据库自增步长+分段式锁’ 换成使用 <a href="https://github.com/liuzhihang/tool_demo/blob/master/src/main/java/com/ipaynow/tool/snowflake/SnowFlake.java">雪花流水号</a>, 修改机器标识和数据中心字段为自动获取ip后三位, 人工保证ip后三位不相同</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><a href="https://github.com/liuzhihang/tool_demo/blob/master/src/main/java/com/ipaynow/tool/snowflake/SnowFlakeSerial.java">雪花流水号 - 改造版</a></p><p>修改内容如下:<br>删除构造, 修改数据位数, 添加静态代码块</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> MACHINE_BIT = <span class="hljs-number">8</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> DATA_CENTER_BIT = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        InetAddress localHost = InetAddress.getLocalHost();<br>        address = localHost.getAddress()[<span class="hljs-number">3</span>] &amp; <span class="hljs-number">0xff</span>;<br>        System.out.println(<span class="hljs-string">&quot;当前系统的 address 为: &quot;</span> + address);<br>    &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;DATA_CENTER_ID can&#x27;t be greater than MAX_DATA_CENTER_NUM or less than 0&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><h5 id="服务器配置host"><a href="#服务器配置host" class="headerlink" title="服务器配置host"></a>服务器配置host</h5><p>服务器对应的 hostname 需要配置ip地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">cat /etc/hosts<br></code></pre></td></tr></table></figure><h5 id="byte-转换-long需要-amp-0xff"><a href="#byte-转换-long需要-amp-0xff" class="headerlink" title="byte 转换 long需要 &amp; 0xff"></a>byte 转换 long需要 &amp; 0xff</h5><p>当获取ip大于127时转换出来为负值, 所以需要 &amp; 0xff</p>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于LinkHashMap的LRU缓存淘汰</title>
      <link href="2018/11/19/elimination-of-lru-cache-based-on-linkhashmap.html"/>
      <url>2018/11/19/elimination-of-lru-cache-based-on-linkhashmap.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="LRU缓存淘汰"><a href="#LRU缓存淘汰" class="headerlink" title="LRU缓存淘汰"></a>LRU缓存淘汰</h5><p>LRU缓存淘汰是redis中的一种淘汰策略, 当内存大小不足以存放数据时, 此时存入新数据, 将删除较早存入的数据.<br>在dubbo中使用LRU来缓存 hostName.<br>在mysql中使用LRU来缓存 serverSideStatementCheckCache 和 serverSideStatementCache.</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ipaynow.tool.lru;<br><br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于LinkedHashMap LRU 缓存淘汰, 以下框架中都有使用</span><br><span class="hljs-comment"> * dubbo com.alibaba.dubbo.common.utils.LRUCache</span><br><span class="hljs-comment"> * com.mysql.jdbc.util.LRUCache</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/11/20 10:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRULinkedHashMap</span>&lt;<span class="hljs-title">K</span>, <span class="hljs-title">V</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">LinkedHashMap</span>&lt;<span class="hljs-title">K</span>, <span class="hljs-title">V</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置最大容量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> maxCapacity;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_MAX_CAPACITY = <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LRULinkedHashMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.maxCapacity = DEFAULT_MAX_CAPACITY;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LRULinkedHashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxCapacity)</span> </span>&#123;<br>        <span class="hljs-comment">// accessOrder设置为true 按照时间排序</span><br>        <span class="hljs-keyword">super</span>(maxCapacity, DEFAULT_LOAD_FACTOR, <span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">this</span>.maxCapacity = maxCapacity;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当链表长度大于最大容量时 删除最旧的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">removeEldestEntry</span><span class="hljs-params">(Map.Entry&lt;K, V&gt; eldest)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> size() &gt; maxCapacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsKey</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.containsKey(key);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.get(key);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.put(key, value);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">remove</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.remove(key);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.size();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">super</span>.clear();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxCapacity</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> maxCapacity;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMaxCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxCapacity)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.maxCapacity = maxCapacity;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="测试代码及结果"><a href="#测试代码及结果" class="headerlink" title="测试代码及结果"></a>测试代码及结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ipaynow.tool.lru;<br><br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/11/20 10:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRUTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        LRULinkedHashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> LRULinkedHashMap&lt;&gt;(<span class="hljs-number">5</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            map.put(LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>)), <span class="hljs-string">&quot;value&quot;</span> + i);<br>        &#125;<br><br><br>        <span class="hljs-keyword">for</span> (Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator(); iterator.hasNext(); ) &#123;<br>            Map.Entry&lt;String, String&gt; entry = iterator.next();<br>            String key = entry.getKey();<br>            String value = entry.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;------------&quot;</span> + value);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出结果:</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">2018-11-20 11:13:21 398------------value5<br>2018-11-20 11:13:22 399------------value6<br>2018-11-20 11:13:23 400------------value7<br>2018-11-20 11:13:24 400------------value8<br>2018-11-20 11:13:25 400------------value9<br><br>Process finished with <span class="hljs-built_in">exit</span> code 0<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK常用启动命令</title>
      <link href="2018/10/29/elk-common-start-command.html"/>
      <url>2018/10/29/elk-common-start-command.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="elasticsearch启动命令"><a href="#elasticsearch启动命令" class="headerlink" title="elasticsearch启动命令"></a>elasticsearch启动命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 前台启动 关闭窗口连接后自动退出</span><br>./bin/elasticsearch<br><br><span class="hljs-comment"># 后台启动</span><br>./bin/elasticsearch  -d<br></code></pre></td></tr></table></figure><a id="more"></a><h4 id="logstash启动命令"><a href="#logstash启动命令" class="headerlink" title="logstash启动命令"></a>logstash启动命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 前台启动 -f 后面为配置文件</span><br>./logstash -f logstash.conf<br><br><span class="hljs-comment"># 后台启动</span><br>nohup ./logstash -f logstash.conf &amp;<br></code></pre></td></tr></table></figure><h4 id="kibana启动命令"><a href="#kibana启动命令" class="headerlink" title="kibana启动命令"></a>kibana启动命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 前台启动</span><br>./bin/kibana<br><br><span class="hljs-comment"># 后台启动</span><br>./bin/kibana &amp;<br></code></pre></td></tr></table></figure><h5 id="kibana停止命令"><a href="#kibana停止命令" class="headerlink" title="kibana停止命令"></a>kibana停止命令</h5><p>当ps -ef | grep kibana 查不到时 可以<br>lsof -i:5601<br>kill -9 线程</p><h4 id="filebeat启动命令"><a href="#filebeat启动命令" class="headerlink" title="filebeat启动命令"></a>filebeat启动命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 前台启动</span><br>./filebeat -e -c filebeat.yml<br><br><span class="hljs-comment"># 后台启动 不输出日志/输出日志</span><br>nohup ./filebeat -e -c filebeat.yml &gt;/dev/null 2&gt;&amp;1 &amp;<br>nohup ./filebeat -e -c filebeat.yml &gt; filebeat.log &amp;<br></code></pre></td></tr></table></figure><h5 id="jar包启动命令"><a href="#jar包启动命令" class="headerlink" title="jar包启动命令"></a>jar包启动命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 前台启动</span><br>java -jar server.ja<br><br><span class="hljs-comment"># 后台启动</span><br>nohup java -jar server.jar &amp;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>search-guard-6 配置用户</title>
      <link href="2018/10/24/searchguard6-configuration-user.html"/>
      <url>2018/10/24/searchguard6-configuration-user.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="search-guard-配置用户"><a href="#search-guard-配置用户" class="headerlink" title="search-guard 配置用户"></a>search-guard 配置用户</h4><p>路径: /opt/export/app/elasticsearch-6.4.2/plugins/search-guard-6/sgconfig</p><h5 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h5><p>执行以下命令, 输入明文</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">plugins/search-guard-6/tools/hasher.sh -p mycleartextpassword<br></code></pre></td></tr></table></figure><a id="more"></a><h5 id="1-配置用户及密码"><a href="#1-配置用户及密码" class="headerlink" title="1. 配置用户及密码"></a>1. 配置用户及密码</h5><p>文件: sg_internal_users.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">zhangsan:</span><br>  <span class="hljs-attr">hash:</span> <span class="hljs-string">$2y$12$yKXk785zSTtB3kE7g.XnbOPrc690g9JE50Znwum924i2M/xYGG4qq</span><br>  <span class="hljs-attr">roles:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">trans_group</span><br></code></pre></td></tr></table></figure><p>格式:</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-string">姓名:</span><br>  <span class="hljs-string">密码:</span> <span class="hljs-string">XXXX(明文的hash,</span> <span class="hljs-string">使用search-guard的工具生成)</span><br>  <span class="hljs-string">角色:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">角色名称</span><br></code></pre></td></tr></table></figure><h5 id="2-配置权限"><a href="#2-配置权限" class="headerlink" title="2. 配置权限"></a>2. 配置权限</h5><p>文件: sg_roles.xml</p><p>配置’?kibana’ 及’?kibana-6’ 权限是为了保证用户在kibana中能够正常使用kibana</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sg_trans_group:</span><br>  <span class="hljs-attr">cluster:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cluster:monitor/nodes</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cluster:monitor/health</span><br>  <span class="hljs-attr">indices:</span><br>    <span class="hljs-attr">&#x27;log-system&#x27;:</span><br>      <span class="hljs-string">&#x27;*&#x27;</span><span class="hljs-string">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">indices:admin/mappings/fields/get</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">indices:admin/validate/query</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">indices:data/read/search</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">indices:data/read/msearch</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">indices:admin/get</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">indices:data/read/field_stats</span><br>    <span class="hljs-string">&#x27;?kibana&#x27;</span><span class="hljs-string">:</span><br>      <span class="hljs-string">&#x27;*&#x27;</span><span class="hljs-string">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">MANAGE</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">INDEX</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">READ</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DELETE</span><br>    <span class="hljs-string">&#x27;?kibana-6&#x27;</span><span class="hljs-string">:</span><br>      <span class="hljs-string">&#x27;*&#x27;</span><span class="hljs-string">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">MANAGE</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">INDEX</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">READ</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DELETE</span><br></code></pre></td></tr></table></figure><p>格式:</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-string">权限名称:</span><br>  <span class="hljs-string">集群:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">集群名称:权限</span><br>  <span class="hljs-string">索引:</span><br>    <span class="hljs-string">&#x27;索引名称&#x27;</span><span class="hljs-string">:</span><br>      <span class="hljs-string">&#x27;类型&#x27;</span><span class="hljs-string">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">权限</span><br></code></pre></td></tr></table></figure><h5 id="3-配置角色映射"><a href="#3-配置角色映射" class="headerlink" title="3. 配置角色映射"></a>3. 配置角色映射</h5><p>文件: sg_roles_mapping.yml</p><p>配置完用户的账户密码, 以及相应角色权限之后, 需要将用户和权限进行关联, 关联之后即可使用</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sg_trans_group:</span><br>   <span class="hljs-attr">backendroles:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">trans_group</span><br></code></pre></td></tr></table></figure><p>格式:</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-string">映射名称:</span><br>  <span class="hljs-string">角色:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">用户的角色</span><br></code></pre></td></tr></table></figure><p>也可以使用以下方式进行关联:</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sg_trans_group:</span><br>   <span class="hljs-attr">users:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">zhangsan</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">lisi</span><br><span class="hljs-comment"># 即</span><br><span class="hljs-string">映射名称:</span><br>  <span class="hljs-string">用户名称:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">用户名</span><br></code></pre></td></tr></table></figure><h5 id="4-使配置生效"><a href="#4-使配置生效" class="headerlink" title="4. 使配置生效"></a>4. 使配置生效</h5><p>使用以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./sgadmin.sh -cn 集群名称 -<span class="hljs-built_in">cd</span> ../sgconfig -ks ../../../config/sgadmin-keystore.jks -kspass changeit -ts ../../../config/truststore.jks -tspass changeit -nhnv<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>search-guard-6 安装</title>
      <link href="2018/10/23/searchguard6-installation.html"/>
      <url>2018/10/23/searchguard6-installation.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="ES-安装-search-guard-6"><a href="#ES-安装-search-guard-6" class="headerlink" title="ES 安装 search-guard-6"></a>ES 安装 search-guard-6</h4><h6 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h6><p>☞ <a href="https://docs.search-guard.com/latest/demo-installer">官方网站</a><br>在ES目录下执行命令</p><pre><code>bin/elasticsearch-plugin install -b com.floragunn:search-guard-6:6.4.2-23.1</code></pre><p>注: 安装版本需要和Elasticsearch版本相对应. <a href="https://docs.search-guard.com/latest/search-guard-versions">查看版本</a></p><p>这里不使用官方的快速构建方法</p><a id="more"></a><h6 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h6><ol><li><p>下载脚本<br> <code>git clone https://github.com/floragunncom/search-guard-ssl.git</code></p></li><li><p>证书配置<br> 路径<br> <code>**/elasticsearch-6.4.2/search-guard-ssl/example-pki-scripts</code></p><p> 目录内容 etc下可对证书进行配置<br> <img src="/resources/image/elk/configuration.png" alt="证书配置"></p></li><li><p>修改<a href="search-guard-ssl/example-pki-scripts/example.sh">example.sh</a></p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>OPENSSL_VER=<span class="hljs-string">&quot;<span class="hljs-subst">$(openssl version)</span>&quot;</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$OPENSSL_VER</span> == *<span class="hljs-string">&quot;0.9&quot;</span>* ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Your OpenSSL version is too old: <span class="hljs-variable">$OPENSSL_VER</span>&quot;</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Please install version 1.0.1 or later&quot;</span><br>        <span class="hljs-built_in">exit</span> -1<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Your OpenSSL version is: <span class="hljs-variable">$OPENSSL_VER</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">set</span> -e<br>./clean.sh<br><span class="hljs-comment"># 第一个参数为CA根证书密码，第二个参数为TS密码(truststore，信任证书密码)</span><br>./gen_root_ca.sh capass changeit<br><span class="hljs-comment"># 生成节点证书： 第一个参数为节点编号，第二个参数为keystore文件密码，第三个参数为CA根证书密码。</span><br><span class="hljs-comment"># 此处我们只生成两个节点证书</span><br>./gen_node_cert.sh 0 changeit capass &amp;&amp; ./gen_node_cert.sh 1 changeit capass<br><span class="hljs-comment"># 生成客户端证书： 第一个参数为客户端名称, 第二个参数为keystore文件名称，第三个参数为CA根证书名称。</span><br>./gen_client_node_cert.sh spock changeit capass<br>./gen_client_node_cert.sh kirk changeit capass<br>./gen_client_node_cert.sh logstash changeit capass<br>./gen_client_node_cert.sh filebeat changeit capass<br>./gen_client_node_cert.sh kibana changeit capass<br><span class="hljs-comment"># 生成一个sgadmin客户端证书，用于配置管理</span><br>./gen_client_node_cert.sh sgadmin changeit capass<br><span class="hljs-comment"># 生成一个javaapi访问的客户端证书</span><br>./gen_client_node_cert.sh javaapi changeit capass<br>rm -f ./*tmp*<br></code></pre></td></tr></table></figure><ol start="4"><li>生成证书移动到elasticsearch config 在ES目录下</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./example.sh<br>cp node-0-keystore.jks sgadmin-keystore.jks truststore.jks /opt/<span class="hljs-built_in">export</span>/app/elasticsearch-6.4.2/config/<br></code></pre></td></tr></table></figure><ol start="5"><li>配置elasticsearch.yml, 增加以下配置</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 配置节点间通信证书，节点间通信使用TLS是强制的</span><br><span class="hljs-attr">searchguard.ssl.transport.keystore_filepath:</span> <span class="hljs-string">node-0-keystore.jks</span><br><span class="hljs-attr">searchguard.ssl.transport.keystore_password:</span> <span class="hljs-string">changeit</span><br><span class="hljs-attr">searchguard.ssl.transport.truststore_filepath:</span> <span class="hljs-string">truststore.jks</span><br><span class="hljs-attr">searchguard.ssl.transport.truststore_password:</span> <span class="hljs-string">changeit</span><br><span class="hljs-comment"># 设置不校验hostname</span><br><span class="hljs-attr">searchguard.ssl.transport.enforce_hostname_verification:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">searchguard.ssl.transport.resolve_hostname:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 配置管理员证书DN</span><br><span class="hljs-attr">searchguard.authcz.admin_dn:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">CN=sgadmin,OU=client,O=client,L=Test,</span> <span class="hljs-string">C=DE</span><br><br><span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">bootstrap.system_call_filter:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">xpack.security.enabled:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><ol start="6"><li>启动访问需要权限</li></ol><h6 id="添加脚本权限并初始化用户"><a href="#添加脚本权限并初始化用户" class="headerlink" title="添加脚本权限并初始化用户"></a>添加脚本权限并初始化用户</h6><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/<span class="hljs-built_in">export</span>/app/elasticsearch-6.4.2/plugins/search-guard-6/tools<br>chmod +x *.sh<br>./sgadmin.sh -cn cluster-es -<span class="hljs-built_in">cd</span> ../sgconfig -ks ../../../config/sgadmin-keystore.jks -kspass changeit -ts ../../../config/truststore.jks -tspass changeit -nhnv<br></code></pre></td></tr></table></figure><p>每次更新用户权限或者新增修改用户, 只需要重新执行第三条命令, 更新用户信息即可</p><h4 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h4><p>参照官方网站安装配置即可. <a href="https://docs.search-guard.com/latest/demo-installer">官方网站</a>, 或者按照以下步骤.</p><ol><li>在kibana安装目录下执行一下吗命令</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">bin/kibana-plugin install https://search.maven.org/remotecontent?filepath=com/floragunn/search-guard-kibana-plugin/6.4.2-15/search-guard-kibana-plugin-6.4.2-15.zip<br></code></pre></td></tr></table></figure><ol start="2"><li>修改kibana.yml</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Use HTTPS instead of HTTP</span><br><span class="hljs-comment"># elasticsearch.url: &quot;https://localhost:9200&quot;</span><br><span class="hljs-attr">elasticsearch.url:</span> <span class="hljs-string">&quot;http://localhost:9200&quot;</span><br><br><span class="hljs-comment"># Configure the Kibana internal server user</span><br><span class="hljs-attr">elasticsearch.username:</span> <span class="hljs-string">&quot;kibanaserver&quot;</span><br><span class="hljs-attr">elasticsearch.password:</span> <span class="hljs-string">&quot;kibanaserver&quot;</span><br><br><span class="hljs-comment"># Disable SSL verification because we use self-signed demo certificates</span><br><span class="hljs-attr">elasticsearch.ssl.verificationMode:</span> <span class="hljs-string">none</span><br><br><span class="hljs-comment"># Whitelist the Search Guard Multi Tenancy Header</span><br><span class="hljs-attr">elasticsearch.requestHeadersWhitelist:</span> [ <span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;sgtenant&quot;</span> ]<br></code></pre></td></tr></table></figure><ol start="3"><li>打开对应域名登录<br><code>http://localhost:5601/</code></li></ol><h4 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h4><p>以上内容为参考自<a href="https://www.jianshu.com/u/d58afc984a4f">M醉逍遥</a>, 并搭建成功后总结记录, 以作备忘. 链接如下:<br><a href="https://www.jianshu.com/p/319913a944af">https://www.jianshu.com/p/319913a944af</a></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="2018/10/08/hexo-build-blog.html"/>
      <url>2018/10/08/hexo-build-blog.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>下载地址: <a href="https://nodejs.org/en/">https://nodejs.org</a></p><p>查看当前版本: node -v</p><p><img src="/resources/hexo/node-v.png" alt="node-v"></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><pre><code>npm install</code></pre><p>也可以使用<a href="https://npm.taobao.org/">淘宝镜像</a></p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm install hexo</code></pre><a id="more"></a><h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><pre><code>hexo init</code></pre><h5 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h5><pre><code>hexo clean</code></pre><h5 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h5><pre><code>hexo ghexo generate</code></pre><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><pre><code>hexo shexo server</code></pre><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><pre><code>hexo dhexo deploy</code></pre><h5 id="生成并部署"><a href="#生成并部署" class="headerlink" title="生成并部署"></a>生成并部署</h5><pre><code>hexo g -d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器cpu占用率高</title>
      <link href="2018/09/25/server-cpu-occupancy-rate-is-high.html"/>
      <url>2018/09/25/server-cpu-occupancy-rate-is-high.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-top-命令找到占用cpu最高的进程"><a href="#1-top-命令找到占用cpu最高的进程" class="headerlink" title="1. top 命令找到占用cpu最高的进程"></a>1. top 命令找到占用cpu最高的进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">top - 14:37:14 up 34 days, 13:27,  2 users,  load average: 0.21, 0.29, 0.29<br>Tasks: 151 total,   1 running, 150 sleeping,   0 stopped,   0 zombie<br>Cpu(s):  4.4%us,  2.7%sy,  0.0%ni, 90.9%id,  0.5%wa,  0.0%hi,  0.2%si,  1.3%st<br>Mem:  16334064k total, 16171240k used,   162824k free,    16716k buffers<br>Swap: 16383996k total,  4470816k used, 11913180k free,   539788k cached<br><br>PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND<br>1818 tomcat    20   0 3643m 983m 7548 S  0.7 24.8 190:40.13 java<br><br></code></pre></td></tr></table></figure><a id="more"></a><p>字段解释:<br>top - 时间 运行时间 用户 系统负载<br>Tasks: 进程相关信息<br>Cpu(s): cpu相关信息<br>Mem: 内存相关<br>Swap: 交换区相关信息</p><p>进程相关信息<br>PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</p><h3 id="2-使用top-H-p-查看该进程内所有线程"><a href="#2-使用top-H-p-查看该进程内所有线程" class="headerlink" title="2. 使用top -H -p  查看该进程内所有线程"></a>2. 使用top -H -p <pid> 查看该进程内所有线程</h3><p>top -H -p 1818</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND<br>6656 tomcat    20   0 4193m 608m  11m R 21.0  3.8   1419:44 java<br><br></code></pre></td></tr></table></figure><h3 id="3-printf-“-x-n”-将10进制线程号转换为16进制结果"><a href="#3-printf-“-x-n”-将10进制线程号转换为16进制结果" class="headerlink" title="3. printf “%x\n”  将10进制线程号转换为16进制结果"></a>3. printf “%x\n” <pid> 将10进制线程号转换为16进制结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[liuzhihang@test08 ~]$ <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%x\n&quot;</span> 1876<br>754<br>[liuzhihang@test08 ~]$<br><br></code></pre></td></tr></table></figure><h3 id="4-jstack-grep"><a href="#4-jstack-grep" class="headerlink" title="4. jstack  |grep "></a>4. jstack <pid> |grep <tid></h3><p>jstack 1818 | grep 754 -A 30</p><p>pid 为第一次执行top命令时的 pid<br>tid 为将第二次的pid进行十六进制转换后的结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;catalina-8180-89&quot;</span> <span class="hljs-comment">#1842 daemon prio=5 os_prio=0 tid=0x00007f4ec4096000 nid=0x5d96 waiting on condition [0x00007f4e87545000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>at sun.misc.Unsafe.park(Native Method)<br>- parking to <span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span>  &lt;0x00000000f418f898&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="hljs-variable">$ConditionObject</span>)<br>at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="hljs-variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)<br>at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)<br>at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)<br>at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)<br>at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)<br>at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)<br>at java.util.concurrent.ThreadPoolExecutor<span class="hljs-variable">$Worker</span>.run(ThreadPoolExecutor.java:624)<br>at org.apache.tomcat.util.threads.TaskThread<span class="hljs-variable">$WrappingRunnable</span>.run(TaskThread.java:61)<br>at java.lang.Thread.run(Thread.java:748)<br><br><span class="hljs-string">&quot;catalina-8180-88&quot;</span> <span class="hljs-comment">#1841 daemon prio=5 os_prio=0 tid=0x00007f4eb848e800 nid=0x5d94 waiting on condition [0x00007f4e8bd8b000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>at sun.misc.Unsafe.park(Native Method)<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final finally finalize区别</title>
      <link href="2018/09/06/final-finally-finalize-difference.html"/>
      <url>2018/09/06/final-finally-finalize-difference.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final为java关键字, 可以作用于成员变量、方法、类上<br>1.作用于成员变量上, 基本类型则值不可修改, 如果成员变量为对象, 则该对象的引用不可修改.<br>2.作用于方法, 该方法不可被重写<br>3.作用于类, 该类不可继承</p><a id="more"></a><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>异常处理的关键字, 无论异常是否发生, finally内逻辑总会执行.</p><h4 id="finally-和-return-的执行顺序"><a href="#finally-和-return-的执行顺序" class="headerlink" title="finally 和 return 的执行顺序"></a>finally 和 return 的执行顺序</h4><p>1.一般使用逻辑, return在try-catch-finally之后, 证明, 无论是否异常, finally都会执行</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        System.out.println(finallyTest());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">finallyTest</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;处理逻辑&quot;</span>);<br>            <span class="hljs-comment">// int i = 1 / 0;</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;异常逻辑&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;finally执行了&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;最终return返回&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在try/catch内添加return<br>try/catch内的return执行完后会继续执行finally, 但是从打印结果来开, finally的语句先打印, 原因是因为 return的</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        System.out.println(finallyTest());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">finallyTest</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;处理逻辑&quot;</span>);<br>            <span class="hljs-comment">// int i = 1 / 0;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;try - return返回&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;异常逻辑&quot;</span>);<br>            <span class="hljs-comment">// return &quot;catch - return返回&quot;;</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;finally执行了&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;最终return返回&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">处理逻辑<br>finally执行了<br>try - <span class="hljs-built_in">return</span>返回<br></code></pre></td></tr></table></figure><p>3.finally里面添加return语句<br>finally里面return执行完后会直接返回, 不会再执行try块中的return语句</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        System.out.println(finallyTest());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">finallyTest</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;处理逻辑&quot;</span>);<br>            <span class="hljs-comment">// int i = 1 / 0;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;try - return返回&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;异常逻辑&quot;</span>);<br>            <span class="hljs-comment">// return &quot;catch - return返回&quot;;</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;finally执行了&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;finally - return返回&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">// return &quot;最终return返回&quot;;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">处理逻辑<br>finally执行了<br>finally - <span class="hljs-built_in">return</span>返回<br></code></pre></td></tr></table></figure><p>4.finally内添加逻辑改变变量值<br>1).try中的return值只是暂时放在栈中, 所以最终返回的还是 10, finally中并没有改变其值<br>2).try中的return值如果是对象, 栈中存放的是对象的引用, 对象属性值还是可以通过finally修改</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        System.out.println(finallyTest());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">finallyTest</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;处理逻辑&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;try - return返回: &quot;</span> + temp;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;异常逻辑&quot;</span>);<br>            <span class="hljs-comment">// return &quot;catch - return返回&quot;;</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            temp = <span class="hljs-number">100</span>;<br>            System.out.println(<span class="hljs-string">&quot;finally执行了&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;最终return返回: &quot;</span> + temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">处理逻辑<br>finally执行了<br>try - <span class="hljs-built_in">return</span>返回: 10<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Temp temp = <span class="hljs-keyword">new</span> Temp();<br>        temp.temp = <span class="hljs-number">1</span>;<br>        System.out.println(finallyTest(temp).toString());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Temp <span class="hljs-title">finallyTest</span><span class="hljs-params">(Temp temp)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;处理逻辑&quot;</span>);<br>            <span class="hljs-keyword">return</span> temp;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;异常逻辑&quot;</span>);<br>            <span class="hljs-comment">// return &quot;catch - return返回&quot;;</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            temp.temp = <span class="hljs-number">100</span>;<br>            System.out.println(<span class="hljs-string">&quot;finally执行了&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Temp</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Temp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;temp=&quot;</span> + temp +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">处理逻辑<br>finally执行了<br>Temp&#123;temp=100&#125;<br></code></pre></td></tr></table></figure><h3 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h3><p>Object类的方法, 子类可重写, 主要是垃圾回收时使用.</p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池原理及源码解析</title>
      <link href="2018/09/05/thread-pool-principle-and-source-code-analysis.html"/>
      <url>2018/09/05/thread-pool-principle-and-source-code-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="线程池处理流程"><a href="#线程池处理流程" class="headerlink" title="线程池处理流程"></a>线程池处理流程</h3><p><img src="/resources/concurrent/thread-pool.png" alt="线程池处理流程"></p><ol><li>判断核心线程池是否已满, 不满则创建新线程执行任务</li><li>等待队列如果有界, 判断等待队列是否已满, 不满, 则添加任务到等待队列</li><li>判断最大线程数是否已满, 不满则创建新线程执行任务</li><li>最大线程数已满, 按照既定策略处理新任务<a id="more"></a><h3 id="全参构造及各参数含义"><a href="#全参构造及各参数含义" class="headerlink" title="全参构造及各参数含义"></a>全参构造及各参数含义</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolExecutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractExecutorService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize, // 核心线程数</span></span><br><span class="hljs-function"><span class="hljs-params">                              <span class="hljs-keyword">int</span> maximumPoolSize, // 最大线程数</span></span><br><span class="hljs-function"><span class="hljs-params">                              <span class="hljs-keyword">long</span> keepAliveTime, // 核心线程外线程的存活时间</span></span><br><span class="hljs-function"><span class="hljs-params">                              TimeUnit unit, // 存活时间的单位</span></span><br><span class="hljs-function"><span class="hljs-params">                              BlockingQueue&lt;Runnable&gt; workQueue, // 保存等待执行的线程的阻塞队列</span></span><br><span class="hljs-function"><span class="hljs-params">                              ThreadFactory threadFactory, // 线程工厂</span></span><br><span class="hljs-function"><span class="hljs-params">                              RejectedExecutionHandler handler)</span> </span>&#123; <span class="hljs-comment">// 线程拒绝策略</span><br>        <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>            maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>            maximumPoolSize &lt; corePoolSize ||<br>            keepAliveTime &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>        <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-keyword">null</span> || threadFactory == <span class="hljs-keyword">null</span> || handler == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        <span class="hljs-keyword">this</span>.acc = System.getSecurityManager() == <span class="hljs-keyword">null</span> ?<br>                <span class="hljs-keyword">null</span> :<br>                AccessController.getContext();<br>        <span class="hljs-keyword">this</span>.corePoolSize = corePoolSize;<br>        <span class="hljs-keyword">this</span>.maximumPoolSize = maximumPoolSize;<br>        <span class="hljs-keyword">this</span>.workQueue = workQueue;<br>        <span class="hljs-keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br>        <span class="hljs-keyword">this</span>.threadFactory = threadFactory;<br>        <span class="hljs-keyword">this</span>.handler = handler;<br>    &#125;<br>    <span class="hljs-comment">// 省略 . . .</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>workQueue阻塞队列<br>ArrayBlockingQueue: 是一个基于数组结构的有界阻塞队列, 此队列按 FIFO(先进先出) 原则对元素进行排序.<br>LinkedBlockingQueue: 一个基于链表结构的阻塞队列,此队列按 FIFO(先进先出) 排序元素, 吞吐量通常要高于ArrayBlockingQueue. 静态工厂方法Executors.newFixedThreadPool()使用了这个队列<br>SynchronousQueue: 一个不存储元素的阻塞队列. 每个插入操作必须等到另一个线程调用移除操作, 否则插入操作一直处于阻塞状态, 吞吐量通常要高于LinkedBlockingQueue, 静态工厂方法Executors.newCachedThreadPool使用了这个队列.<br>PriorityBlockingQueue: 一个具有优先级的无限阻塞队列.</li></ol><p>2.threadFactory线程工厂<br>可以使用默认的工厂也可以自定义工厂, 或者使用 google guava 提供的工厂, 可以为线程命名和设置是否为守护线程</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">// 默认工厂<br>ThreadFactory threadFactory = Executors.defaultThreadFactory();<br>// google guava工具提供<br>ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat(<span class="hljs-string">&quot;demo-pool-%d&quot;</span>).build();<br></code></pre></td></tr></table></figure><p>3.handler线程拒绝策略<br>当线程池达到最大线程数, 并且队列满了, 新的线程要采取的处理策略.<br>1.AbortPolicy 拒绝新任务并抛出RejectedExecutionException异常<br>2.CallerRunsPolicy 直接在调用程序的线程中运行<br>3.DiscardOldestPolicy 放弃最早的任务, 即队列最前面的任务<br>4.DiscardPolicy 丢弃, 不处理</p><h3 id="Executors初始化线程池的四种方式"><a href="#Executors初始化线程池的四种方式" class="headerlink" title="Executors初始化线程池的四种方式"></a>Executors初始化线程池的四种方式</h3><p>这四种初始化线程池的方式, 前三种都是调用 ThreadPoolExecutor 类的构造创建的线程池, 只不过使用的阻塞队列方式不同.</p><ol><li>newFixedThreadPool()</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Executors</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 固定线程池</span><br><span class="hljs-comment">     * 核心线程数 = 最大线程数</span><br><span class="hljs-comment">     * 超时时间为0</span><br><span class="hljs-comment">     * LinkedBlockingQueue无界队列, 会持续等待</span><br><span class="hljs-comment">     * 使用默认拒绝策略 AbortPolicy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nThreads)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,<br>                                      <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                      <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>newCachedThreadPool()</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Executors</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无界线程池</span><br><span class="hljs-comment">     * 核心线程数0 最大线程数 (2³¹ -1)</span><br><span class="hljs-comment">     * 超时时间 60秒</span><br><span class="hljs-comment">     * SynchronousQueue不存储元素的阻塞队列</span><br><span class="hljs-comment">     * 线程空闲时间超过60秒, 会自动释放资源, 提交任务如果没有空闲线程, 则会创建新线程</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newCachedThreadPool</span><span class="hljs-params">()</span> </span>&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">0</span>, Integer.MAX_VALUE,<br>                                         <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                         <span class="hljs-keyword">new</span> SynchronousQueue&lt;Runnable&gt;());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.newSingleThreadExecutor()</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Executors</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建只有 1个线程的线程池</span><br><span class="hljs-comment">     * 如果线程异常, 则创建一个新的线程继续执行任务</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newSingleThreadExecutor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FinalizableDelegatedExecutorService<br>            (<span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                                    <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                    <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.newSingleThreadExecutor()</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Executors</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ScheduledThreadPoolExecutor 继承 ThreadPoolExecutor 类</span><br><span class="hljs-comment">     * 可以在指定时间周期内执行任务</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ScheduledExecutorService <span class="hljs-title">newScheduledThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize)</span> </span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolExecutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractExecutorService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * ctx 为原子类型的变量, 有两个概念</span><br><span class="hljs-comment">    * workerCount, 表示有效的线程数</span><br><span class="hljs-comment">    * runState, 表示线程状态, 是否正在运行, 关闭等</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicInteger ctl = <span class="hljs-keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="hljs-number">0</span>));<br>    <span class="hljs-comment">// 29</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="hljs-number">3</span>;<br>    <span class="hljs-comment">// 容量 2²⁹-1</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CAPACITY   = (<span class="hljs-number">1</span> &lt;&lt; COUNT_BITS) - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// runState is stored in the high-order bits 线程池的五中状态</span><br>    <span class="hljs-comment">// 即高3位为111, 接受新任务并处理排队任务</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> RUNNING    = -<span class="hljs-number">1</span> &lt;&lt; COUNT_BITS;<br>    <span class="hljs-comment">// 即高3位为000, 不接受新任务, 但处理排队任务</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SHUTDOWN   =  <span class="hljs-number">0</span> &lt;&lt; COUNT_BITS;<br>    <span class="hljs-comment">// 即高3位为001, 不接受新任务, 不处理排队任务, 并中断正在进行的任务</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> STOP       =  <span class="hljs-number">1</span> &lt;&lt; COUNT_BITS;<br>    <span class="hljs-comment">// 即高3位为010, 所有任务都已终止, 工作线程为0, 线程转换到状态TIDYING, 将运行terminate()钩子方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TIDYING    =  <span class="hljs-number">2</span> &lt;&lt; COUNT_BITS;<br>    <span class="hljs-comment">// 即高3位为011, 标识terminate（）已经完成</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TERMINATED =  <span class="hljs-number">3</span> &lt;&lt; COUNT_BITS;<br>    <span class="hljs-comment">// Packing and unpacking ctl 用来计算线程的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">runStateOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span>     </span>&#123; <span class="hljs-keyword">return</span> c &amp; ~CAPACITY; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">workerCountOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span>  </span>&#123; <span class="hljs-keyword">return</span> c &amp; CAPACITY; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ctlOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rs, <span class="hljs-keyword">int</span> wc)</span> </span>&#123; <span class="hljs-keyword">return</span> rs | wc; &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="execute方法"><a href="#execute方法" class="headerlink" title="execute方法"></a>execute方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolExecutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractExecutorService</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable command)</span> </span>&#123;<br>        <span class="hljs-comment">// 空则抛出异常</span><br>        <span class="hljs-keyword">if</span> (command == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        <span class="hljs-comment">// 获取当前线程池的状态</span><br>        <span class="hljs-keyword">int</span> c = ctl.get();<br>        <span class="hljs-comment">// 计算工作线程数 并判断是否小于核心线程数</span><br>        <span class="hljs-keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;<br>            <span class="hljs-comment">// addWorker提交任务, 提交成功则结束</span><br>            <span class="hljs-keyword">if</span> (addWorker(command, <span class="hljs-keyword">true</span>))<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-comment">// 提交失败再次获取当前状态</span><br>            c = ctl.get();<br>        &#125;<br>        <span class="hljs-comment">// 判断线程状态, 并插入队列, 失败则移除</span><br>        <span class="hljs-keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;<br>            <span class="hljs-comment">// 再次获取状态</span><br>            <span class="hljs-keyword">int</span> recheck = ctl.get();<br>            <span class="hljs-comment">// 如果状态不是RUNNING, 并移除失败</span><br>            <span class="hljs-keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))<br>                <span class="hljs-comment">// 调用拒绝策略</span><br>                reject(command);<br>            <span class="hljs-comment">// 如果工作线程为0 则调用 addWorker</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (workerCountOf(recheck) == <span class="hljs-number">0</span>)<br>                addWorker(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);<br>        &#125;<br>        <span class="hljs-comment">// 提交任务失败 走拒绝策略</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!addWorker(command, <span class="hljs-keyword">false</span>))<br>            reject(command);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="addWorker方法"><a href="#addWorker方法" class="headerlink" title="addWorker方法"></a>addWorker方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolExecutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractExecutorService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查任务是否可以提交</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addWorker</span><span class="hljs-params">(Runnable firstTask, <span class="hljs-keyword">boolean</span> core)</span> </span>&#123;<br>        retry:<br>        <span class="hljs-comment">// 外层循环</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 获取当前状态</span><br>            <span class="hljs-keyword">int</span> c = ctl.get();<br>            <span class="hljs-keyword">int</span> rs = runStateOf(c);<br><br>            <span class="hljs-comment">// Check if queue empty only if necessary. 检查线程池是否关闭</span><br>            <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;<br>                ! (rs == SHUTDOWN &amp;&amp;<br>                   firstTask == <span class="hljs-keyword">null</span> &amp;&amp;<br>                   ! workQueue.isEmpty()))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            <span class="hljs-comment">// 内层循环</span><br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-keyword">int</span> wc = workerCountOf(c);<br>                <span class="hljs-comment">// 工作线程大于容量 或者大于 核心或最大线程数</span><br>                <span class="hljs-keyword">if</span> (wc &gt;= CAPACITY ||<br>                    wc &gt;= (core ? corePoolSize : maximumPoolSize))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                <span class="hljs-comment">// CAS 线程数增加, 成功则调到外层循环</span><br>                <span class="hljs-keyword">if</span> (compareAndIncrementWorkerCount(c))<br>                    <span class="hljs-keyword">break</span> retry;<br>                <span class="hljs-comment">// 失败则再次获取线程状态</span><br>                c = ctl.get();  <span class="hljs-comment">// Re-read ctl</span><br>                <span class="hljs-comment">// 不相等则重新走外层循环</span><br>                <span class="hljs-keyword">if</span> (runStateOf(c) != rs)<br>                    <span class="hljs-keyword">continue</span> retry;<br>                <span class="hljs-comment">// else CAS failed due to workerCount change; retry inner loop</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 创建新worker 开始新线程</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">boolean</span> workerStarted = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">boolean</span> workerAdded = <span class="hljs-keyword">false</span>;<br>        Worker w = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            w = <span class="hljs-keyword">new</span> Worker(firstTask);<br>            <span class="hljs-keyword">final</span> Thread t = w.thread;<br>            <span class="hljs-keyword">if</span> (t != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">final</span> ReentrantLock mainLock = <span class="hljs-keyword">this</span>.mainLock;<br>                <span class="hljs-comment">// 加锁</span><br>                mainLock.lock();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// Recheck while holding lock.</span><br>                    <span class="hljs-comment">// Back out on ThreadFactory failure or if</span><br>                    <span class="hljs-comment">// shut down before lock acquired.</span><br>                    <span class="hljs-keyword">int</span> rs = runStateOf(ctl.get());<br><br>                    <span class="hljs-keyword">if</span> (rs &lt; SHUTDOWN ||<br>                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="hljs-keyword">null</span>)) &#123;<br>                        <span class="hljs-comment">// 判断线程是否存活, 已存活抛出非法异常</span><br>                        <span class="hljs-keyword">if</span> (t.isAlive()) <span class="hljs-comment">// precheck that t is startable</span><br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalThreadStateException();<br>                        <span class="hljs-comment">//  设置包含池中的所有工作线程。仅在持有mainLock时访问 workers是 HashSet 集合</span><br>                        <span class="hljs-comment">//  private final HashSet&lt;Worker&gt; workers = new HashSet&lt;Worker&gt;();</span><br>                        workers.add(w);<br>                        <span class="hljs-keyword">int</span> s = workers.size();<br>                        <span class="hljs-comment">// 设置池最大大小, 并将 workerAdded设置为 true</span><br>                        <span class="hljs-keyword">if</span> (s &gt; largestPoolSize)<br>                            largestPoolSize = s;<br>                        workerAdded = <span class="hljs-keyword">true</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 解锁</span><br>                    mainLock.unlock();<br>                &#125;<br>                <span class="hljs-comment">// 添加成功 开始启动线程 并将 workerStarted 设置为 true</span><br>                <span class="hljs-keyword">if</span> (workerAdded) &#123;<br>                    t.start();<br>                    workerStarted = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 启动线程失败</span><br>            <span class="hljs-keyword">if</span> (! workerStarted)<br>                addWorkerFailed(w);<br>        &#125;<br>        <span class="hljs-keyword">return</span> workerStarted;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动线程失败, 加锁</span><br><span class="hljs-comment">     * 移除线程, 并减少线程总数</span><br><span class="hljs-comment">     * 转换状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addWorkerFailed</span><span class="hljs-params">(Worker w)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> ReentrantLock mainLock = <span class="hljs-keyword">this</span>.mainLock;<br>        mainLock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (w != <span class="hljs-keyword">null</span>)<br>                workers.remove(w);<br>            decrementWorkerCount();<br>            tryTerminate();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            mainLock.unlock();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程相关</title>
      <link href="2018/09/04/multithreaded-correlation.html"/>
      <url>2018/09/04/multithreaded-correlation.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>多个线程同时或交替运行, 单核CPU为顺序执行(交替执行), 多核情况下, 每个CPU有自己的运算器, 所以在多个CPU中可以同时运行.</p><a id="more"></a><h3 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h3><p>1.继承Thread</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.run();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行完毕&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        MyThread myThread = <span class="hljs-keyword">new</span> MyThread();<br>        myThread.setName(<span class="hljs-string">&quot;测试&quot;</span>);<br>        myThread.start();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行完毕&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>开始线程, 可以看出main线程和测试线程是两个独立的线程<br>调用myThread.run();方法相当于直接在主线程运行run方法, 而不是开启一个新的线程去执行</p><p>2.实现Runnable接口</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行完毕&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        MyRunable runable = <span class="hljs-keyword">new</span> MyRunable();<br><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(runable);<br>        thread.start();<br><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行完毕&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.使用线程池<br>3.1 可以在spring中配置相关线程池, 使用时从容器取出即可, 也可以自己声明线程池</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;threadPool&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 核心线程数，默认为1 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;corePoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 最大线程数，默认为Integer.MAX_VALUE --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 队列最大长度，一般需要设置值&gt;=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE</span><br><span class="hljs-comment">    &lt;property name=&quot;queueCapacity&quot; value=&quot;1000&quot; /&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 线程池维护线程所允许的空闲时间，默认为60s --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keepAliveSeconds&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;300&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 队列最大长度 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;queueCapacity&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2000&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rejectedExecutionHandler&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- AbortPolicy:直接抛出java.utils.concurrent.RejectedExecutionException异常 --&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 --&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 --&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 --&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.2 Executors 创建线程池</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        ExecutorService threadPool = Executors.newCachedThreadPool();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            threadPool.execute(<span class="hljs-keyword">new</span> MyRunable());<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当手动创建线程池时, 如果IDEA安装阿里 P3C 插件后会报错提示以下内容, 建议</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br>说明： Executors 返回的线程池对象的弊端如下：<br>1） FixedThreadPool 和 SingleThreadPool:<br>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。<br>2） CachedThreadPool 和 ScheduledThreadPool:<br>允许的创建线程数量为 Integer.MAX_VALUE， 可能会创建大量的线程，从而导致 OOM。<br></code></pre></td></tr></table></figure><p>建议使用如下方式:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 定时任务 建议为线程起名</span><br>        ScheduledExecutorService executorService = <span class="hljs-keyword">new</span> ScheduledThreadPoolExecutor(<span class="hljs-number">3</span>,<br>                <span class="hljs-keyword">new</span> BasicThreadFactory.Builder().namingPattern(<span class="hljs-string">&quot;example-schedule-pool-%d&quot;</span>).build());<br>            executorService.scheduleAtFixedRate(<span class="hljs-keyword">new</span> MyRunable(), <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 线程工厂</span><br>        ThreadFactory namedThreadFactory = <span class="hljs-keyword">new</span> ThreadFactoryBuilder()<br>                .setNameFormat(<span class="hljs-string">&quot;demo-pool-%d&quot;</span>).build();<br><br>        <span class="hljs-comment">//Common Thread Pool</span><br>        ExecutorService pool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="hljs-number">1024</span>), namedThreadFactory, <span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy());<br><br>        pool.execute(()-&gt; System.out.println(Thread.currentThread().getName()));<br>        pool.shutdown();<span class="hljs-comment">//gracefully shutdown</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>1.myThread.setPriority(1);设置优先级<br>2.优先级从低到高为 1-10, Thread类提供 Thread.MIN_PRIORITY=1, Thread.NORM_PRIORITY=5, Thread.MAX_PRIORITY=10<br>3.默认优先级为 5 即 NORM_PRIORITY<br>4.优先级高的仅代表获取进入运行机会的几率大, 并不代表一定会比优先级低的先执行</p><h3 id="sleep-和wait"><a href="#sleep-和wait" class="headerlink" title="sleep()和wait()"></a>sleep()和wait()</h3><p>1.sleep()线程未释放锁, 时间结束后线程继续执行<br>2.wait线程释放锁, 需要使用notify或notifyAll<br>3.wait常用于线程之间的交互</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.tool.alternate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 交替打印奇偶数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/9/4 18:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlternateNum</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Num num = <span class="hljs-keyword">new</span> Num();<br><br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Odd(num));<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Even(num));<br><br>        thread1.start();<br>        thread2.start();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Num</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> anInt = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Odd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Num num;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Odd</span><span class="hljs-params">(Num num)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.num = num;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (num.anInt &lt; <span class="hljs-number">1000</span>) &#123;<br>            <span class="hljs-comment">// 使用同一把锁</span><br>            <span class="hljs-keyword">synchronized</span> (num) &#123;<br>                <span class="hljs-keyword">if</span> (num.flag) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;奇数 -&gt; &quot;</span> + num.anInt);<br>                    num.anInt++;<br>                    num.flag = <span class="hljs-keyword">false</span>;<br>                    num.notify();<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        num.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Even</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Num num;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Even</span><span class="hljs-params">(Num num)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.num = num;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (num.anInt &lt; <span class="hljs-number">1000</span>) &#123;<br>            <span class="hljs-comment">// 使用同一把锁</span><br>            <span class="hljs-keyword">synchronized</span> (num) &#123;<br>                <span class="hljs-keyword">if</span> (!num.flag) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;偶数 -&gt; &quot;</span> + num.anInt);<br>                    num.anInt++;<br>                    num.flag = <span class="hljs-keyword">true</span>;<br>                    num.notify();<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        num.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射和序列化破解单例</title>
      <link href="2018/08/27/reflection-and-serialization-cracking-singleton.html"/>
      <url>2018/08/27/reflection-and-serialization-cracking-singleton.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>主要介绍通过反射的方式获取单例对象, 验证<a href="https://liuzhihangs.github.io/2018/02/21/lazy-singleton-mode-thread-safe.html">单例模式</a>的安全性.<br>主要从以下几个角度来介绍反射下的单例<br>饿汉式<br>双重锁检查<br><a href="https://liuzhihangs.github.io/2018/08/17/use-enumeration-to-implement-a-singleton.html">枚举单例</a></p><a id="more"></a><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p><a href="https://github.com/liuzhihang/demo_design_pattern/blob/master/src/main/java/com/liuzhihang/demo/singleton/HungerPattern.java">饿汉式</a>直接使用反射即可破解单例模式</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            HungerPattern hungerPattern = HungerPattern.getHungerPattern();<br><br>            Class&lt;HungerPattern&gt; hungerPatternClass = HungerPattern.class;<br><br>            Constructor&lt;HungerPattern&gt; conA = hungerPatternClass.getDeclaredConstructor();<br>            Constructor&lt;HungerPattern&gt; conB = hungerPatternClass.getDeclaredConstructor();<br><br>            conA.setAccessible(<span class="hljs-keyword">true</span>);<br>            conB.setAccessible(<span class="hljs-keyword">true</span>);<br><br>            HungerPattern instanceA = conA.newInstance();<br>            HungerPattern instanceB = conB.newInstance();<br>            <span class="hljs-comment">// instanceA 和 instanceB 不是同一对象</span><br>            System.out.println(hungerPattern.hashCode());<br>            System.out.println(instanceA.hashCode());<br>            System.out.println(instanceB.hashCode());<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">D:\jdk1.8\bin\java.exe . . .<br>713338599<br>168423058<br>821270929<br><br>Process finished with <span class="hljs-built_in">exit</span> code 0<br><br></code></pre></td></tr></table></figure><h3 id="双重锁检查"><a href="#双重锁检查" class="headerlink" title="双重锁检查"></a>双重锁检查</h3><p><a href="https://github.com/liuzhihang/demo_design_pattern/blob/master/src/main/java/com/liuzhihang/demo/singleton/DoubleCheckLockLazyPattern.java">双重锁检查</a>同样存在相同的情况</p><ol><li>直接使用<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectTest</span> </span>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            DoubleCheckLockLazyPattern pattern = DoubleCheckLockLazyPattern.getDoubleCheckLockLazyPattern();<br><br>            Class&lt;DoubleCheckLockLazyPattern&gt; patternClass = DoubleCheckLockLazyPattern.class;<br><br>            Constructor&lt;DoubleCheckLockLazyPattern&gt; conA = patternClass.getDeclaredConstructor();<br>            Constructor&lt;DoubleCheckLockLazyPattern&gt; conB = patternClass.getDeclaredConstructor();<br><br>            conA.setAccessible(<span class="hljs-keyword">true</span>);<br>            conB.setAccessible(<span class="hljs-keyword">true</span>);<br><br>            DoubleCheckLockLazyPattern patternA = conA.newInstance();<br>            DoubleCheckLockLazyPattern patternB = conA.newInstance();<br><br>            System.out.println(pattern.hashCode());<br>            System.out.println(patternA.hashCode());<br>            System.out.println(patternB.hashCode());<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">D:\jdk1.8\bin\java.exe . . .<br>713338599<br>168423058<br>821270929<br><br>Process finished with <span class="hljs-built_in">exit</span> code 0<br></code></pre></td></tr></table></figure><ol start="2"><li>在双重锁检查私有构造内加入异常</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">public class DoubleCheckLockLazyPattern &#123;<br><br>    private <span class="hljs-function"><span class="hljs-title">DoubleCheckLockLazyPattern</span></span>() &#123;<br><br>        // 加入异常判断, 防止反射<br>        <span class="hljs-keyword">if</span> (doubleCheckLockLazyPattern != null) &#123;<br>            throw new RuntimeException();<br>        &#125;<br><br>    &#125;<br><br>    private static volatile DoubleCheckLockLazyPattern doubleCheckLockLazyPattern = null;<br><br>    public static DoubleCheckLockLazyPattern <span class="hljs-function"><span class="hljs-title">getDoubleCheckLockLazyPattern</span></span>() &#123;<br><br>        try &#123;<br>            <span class="hljs-keyword">if</span> (doubleCheckLockLazyPattern == null) &#123;<br>                // 一系列操作<br>                Thread.sleep(100);<br>                synchronized (DoubleCheckLockLazyPattern.class) &#123;<br>                    // 二次检查<br>                    <span class="hljs-keyword">if</span> (doubleCheckLockLazyPattern == null) &#123;<br>                        doubleCheckLockLazyPattern = new DoubleCheckLockLazyPattern();<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>        &#125; catch (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-built_in">return</span> doubleCheckLockLazyPattern;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">D:\jdk1.8\bin\java.exe . . .<br>java.lang.reflect.InvocationTargetException<br>at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)<br>at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)<br>at java.lang.reflect.Constructor.newInstance(Constructor.java:423)<br>at com.liuzhihang.demo.singleton.ReflectTest.main(ReflectTest.java:24)<br>Caused by: java.lang.RuntimeException<br>at com.liuzhihang.demo.singleton.DoubleCheckLockLazyPattern.&lt;init&gt;(DoubleCheckLockLazyPattern.java:15)<br>... 5 more<br><br></code></pre></td></tr></table></figure><ol start="3"><li>通过序列化反序列化获取对象</li></ol><p>DoubleCheckLockLazyPattern 实现序列化</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><br>public class ReflectTest &#123;<br><br>    public static void main(String[] args) &#123;<br><br>        try &#123;<br>            DoubleCheckLockLazyPattern pattern = DoubleCheckLockLazyPattern.getDoubleCheckLockLazyPattern();<br><br>            FileOutputStream fos= new FileOutputStream(<span class="hljs-string">&quot;C:/Users/liuzhihang/desktop/pattern.txt&quot;</span>);<br>            ObjectOutputStream oos = new ObjectOutputStream(fos);<br>            oos.writeObject(pattern);<br>            oos.close();<br>            fos.close();<br>            ObjectInputStream oisA = new ObjectInputStream(new FileInputStream(<span class="hljs-string">&quot;C:/Users/liuzhihang/desktop/pattern.txt&quot;</span>));<br>            DoubleCheckLockLazyPattern patternA= (DoubleCheckLockLazyPattern) oisA.readObject();<br><br>            ObjectInputStream oisB = new ObjectInputStream(new FileInputStream(<span class="hljs-string">&quot;C:/Users/liuzhihang/desktop/pattern.txt&quot;</span>));<br>            DoubleCheckLockLazyPattern patternB= (DoubleCheckLockLazyPattern) oisB.readObject();<br><br>            System.out.println(pattern.hashCode());<br>            System.out.println(patternA.hashCode());<br>            System.out.println(patternB.hashCode());<br><br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">D:\jdk1.8\bin\java.exe . . .<br>258952499<br>1702297201<br>1996181658<br><br>Process finished with <span class="hljs-built_in">exit</span> code 0<br></code></pre></td></tr></table></figure><ol start="4"><li>修改反序列化方法, 可以防止反序列化</li></ol><p>添加以下方法</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">private Object <span class="hljs-function"><span class="hljs-title">readResolve</span></span>() &#123;<br>    <span class="hljs-built_in">return</span> doubleCheckLockLazyPattern;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">D:\jdk1.8\bin\java.exe . . .<br>258952499<br>258952499<br>258952499<br><br>Process finished with <span class="hljs-built_in">exit</span> code 0<br></code></pre></td></tr></table></figure><h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SingletonEnum</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单例</span><br><span class="hljs-comment">     */</span><br>    INSTANCE;<br><br>    <span class="hljs-keyword">private</span> Resource resource;<br><br><br>    SingletonEnum() &#123;<br>        <span class="hljs-keyword">this</span>.resource = <span class="hljs-keyword">new</span> Resource();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Resource <span class="hljs-title">getResource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> resource;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Resource</span> </span>&#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="枚举单例分析"><a href="#枚举单例分析" class="headerlink" title="枚举单例分析"></a>枚举单例分析</h4><p>在枚举反射获取对象时抛出异常, 通过 Constructor类 源码可以看出, 在反射创建对象时会判断是否是枚举修饰, 是则抛出异常</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><br>@CallerSensitive<br>  public T newInstance(Object ... initargs)<br>      throws InstantiationException, IllegalAccessException,<br>             IllegalArgumentException, InvocationTargetException<br>  &#123;<br>      <span class="hljs-keyword">if</span> (!override) &#123;<br>          <span class="hljs-keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;<br>              Class&lt;?&gt; <span class="hljs-built_in">caller</span> = Reflection.getCallerClass();<br>              checkAccess(<span class="hljs-built_in">caller</span>, clazz, null, modifiers);<br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != 0)<br>          throw new IllegalArgumentException(<span class="hljs-string">&quot;Cannot reflectively create enum objects&quot;</span>);<br>      ConstructorAccessor ca = constructorAccessor;   // <span class="hljs-built_in">read</span> volatile<br>      <span class="hljs-keyword">if</span> (ca == null) &#123;<br>          ca = acquireConstructorAccessor();<br>      &#125;<br>      @SuppressWarnings(<span class="hljs-string">&quot;unchecked&quot;</span>)<br>      T inst = (T) ca.newInstance(initargs);<br>      <span class="hljs-built_in">return</span> inst;<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>同时在父类 Enum类 中重写了 readObject方法, 所以枚举也可以避免反序列化</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">/**<br> * prevent default deserialization<br> */<br>private void readObject(ObjectInputStream <span class="hljs-keyword">in</span>) throws IOException,<br>    ClassNotFoundException &#123;<br>    throw new InvalidObjectException(<span class="hljs-string">&quot;can&#x27;t deserialize enum&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="2018/08/24/reflection.html"/>
      <url>2018/08/24/reflection.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>java反射可以在运行时获取对象的成员和属性, 并且可以动态的创建对象并调用对象的属性.<br>反射一般编程中很少使用,但是在很多框架中都使用了反射, 比如配置Spring的Xml配置文件中, 就使用全类名配置方式, 其实就是反射的一种使用方式.</p><p>同时反射对单例模式有一定的影响, 可以参考<a href="https://liuzhihang.com/2018/08/27/reflection-and-serialization-cracking-singleton.html">反射获取单例对象</a></p><a id="more"></a><h3 id="获取反射对象"><a href="#获取反射对象" class="headerlink" title="获取反射对象"></a>获取反射对象</h3><p>获取反射Class对象一共三种方式</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">// 1. 使用实例获取<br>User user = new User();<br>Class&lt;? extends User&gt; aClass = user.getClass();<br>// 2. 使用类获取<br>Class&lt;User&gt; userClass = User.class;<br>// 3. 全类名获取, 可能会抛出 ClassNotFoundException 异常<br>Class&lt;?&gt; aClass1 = Class.forName(<span class="hljs-string">&quot;com.liuzhihang.tool.reflect.User&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><ol><li>获取字段<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">// 获取所有公有字段 (public)<br>Field[] fields = aClass.getFields();<br>// 获取所有字段 (public 缺省, protected, private)<br>Field[] fields = aClass.getDeclaredFields()<br>// 获取指定公共字段<br>Field age = aClass.getField(<span class="hljs-string">&quot;age&quot;</span>);<br>// 获取指定字段 (public 缺省, protected, private)<br>Field userName = aClass.getDeclaredField(<span class="hljs-string">&quot;userName&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="获取构造"><a href="#获取构造" class="headerlink" title="获取构造"></a>获取构造</h3><ol><li>获取构造<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">// 获取所有构造 不能获取私有<br>Constructor&lt;?&gt;[] constructors = aClass.getConstructors();<br><br>// 获取指定参数类型的构造 不能获取私有 空则获取空参构造 getConstructor(Class&lt;?&gt;... parameterTypes)<br>Constructor&lt;User&gt; constructor = aClass.getConstructor(String.class);<br><br>// 获取所有构造 包含私有<br>Constructor&lt;?&gt;[] declaredConstructors = aClass.getDeclaredConstructors();<br><br>// 获取指定参数类型的构造 可以获取私有 空则获取空参构造 getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)<br>Constructor&lt;User&gt; declaredConstructor = aClass.getDeclaredConstructor(String.class);<br><br></code></pre></td></tr></table></figure></li><li>使用构造创建对象</li></ol><p>可以通过 constructor.setAccessible(true); 暴力破解忽略访问修饰符, 来使用私有构造参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Constructor&lt;User&gt; constructor = aClass.getDeclaredConstructor(String.class);<br>// 暴力破解<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>User <span class="hljs-built_in">test</span> = constructor.newInstance(<span class="hljs-string">&quot;test&quot;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><ol><li>获取方法<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">// 获取所有公共方法(包含父类)<br>Method[] methods = aClass.getMethods();<br>// 获取所有方法<br>Method[] methods = aClass.getDeclaredMethods();<br>// 获取私有方法 第一个参数填方法名称<br>Method address = aClass.getDeclaredMethod(<span class="hljs-string">&quot;setAddress&quot;</span>, String.class);<br>// 获取公共方法<br>Method address = aClass.getMethod(<span class="hljs-string">&quot;setAddress&quot;</span>, String.class);<br><br></code></pre></td></tr></table></figure></li><li>使用方法<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><br>Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.liuzhihang.tool.reflect.User&quot;</span>)<br><br>Method address = aClass.getDeclaredMethod(<span class="hljs-string">&quot;setAddress&quot;</span>, String.class);<br><br>User user = aClass.getConstructor().newInstance();<br><br>System.out.println(user.toString());<br>// 解除私有限制<br>address.setAccessible(<span class="hljs-literal">true</span>);<br>// 使用invoke来调用方法<br>address.invoke(user, <span class="hljs-string">&quot;北京&quot;</span>);<br><br>System.out.println(user.toString());<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="获取其他属性"><a href="#获取其他属性" class="headerlink" title="获取其他属性"></a>获取其他属性</h3><p>还可以获取类实现的接口, 父类, 注解, 以及判断类的类型等多种使用方式.</p>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkList相关学习</title>
      <link href="2018/08/23/linklist-related-learning.html"/>
      <url>2018/08/23/linklist-related-learning.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>LinkList也是工作中常见的集合, 底层使用双向链表结构<br>比较适合新增和删除, 查询和修改需要遍历相对<a href="https://liuzhihang.com/2018/08/23/arraylist-related-learning.html">ArrayList</a>比较消耗性能</p></blockquote><a id="more"></a><h3 id="内部类-Node"><a href="#内部类-Node" class="headerlink" title="内部类 Node"></a>内部类 Node</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <span class="hljs-comment">// 元素值</span><br>    E item;<br>    <span class="hljs-comment">// 下一个节点</span><br>    Node&lt;E&gt; next;<br>    <span class="hljs-comment">// 上一个几点</span><br>    Node&lt;E&gt; prev;<br>    <span class="hljs-comment">// 构造一个新节点 指向上一个节点和下一个节点</span><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-keyword">this</span>.item = element;<br>        <span class="hljs-keyword">this</span>.next = next;<br>        <span class="hljs-keyword">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="add-新增"><a href="#add-新增" class="headerlink" title="add 新增"></a>add 新增</h3><p>通过代码可以看出, 在新增元素时只需要创建一个新节点 Node, 并将原始链表最后一个Node的next指向新Node</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">public boolean add(E e) &#123;<br>    linkLast(e);<br>    <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>/**<br> * Links e as last element.<br> */<br>void linkLast(E e) &#123;<br>    // 声明 l 为最后一个节点<br>    final Node&lt;E&gt; l = last;<br>    // 创建新节点, 指向上一个节点, 下一个节点为空<br>    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);<br>    // 最后一个节点为新创建的节点<br>    last = newNode;<br>    // 判断是否为第一个元素, 否则将 新创建的 Node加入链表<br>    <span class="hljs-keyword">if</span> (l == null)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="remove-删除"><a href="#remove-删除" class="headerlink" title="remove 删除"></a>remove 删除</h3><p>1.删除操作需要遍历链表找到相应元素, 然后移动指针即可<br>2.删除首尾元素直接移动指针即可 removeFirst()/removeLast() 方法</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><br>public boolean remove(Object o) &#123;<br>    <span class="hljs-keyword">if</span> (o == null) &#123;<br>        // 遍历链表<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (x.item == null) &#123;<br>                unlink(x);<br>                <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (o.equals(x.item)) &#123;<br>                unlink(x);<br>                <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br>/**<br> * 删除元素<br> */<br>E unlink(Node&lt;E&gt; x) &#123;<br>    // assert x != null;<br>    final E element = x.item;<br>    final Node&lt;E&gt; next = x.next;<br>    final Node&lt;E&gt; prev = x.prev;<br>    // 判断上一个Node是否为空<br>    <span class="hljs-keyword">if</span> (prev == null) &#123;<br>        // 空, 该节点为链表头, 将下一个节点设置为链表头<br>        first = next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        // 不为空, 将上一个节点的next 指向当前节点的 next, 并将当前节点的 prev置为空<br>        prev.next = next;<br>        x.prev = null;<br>    &#125;<br>    // 判断下一个Node是否为空<br>    <span class="hljs-keyword">if</span> (next == null) &#123;<br>        // 空, 该节点为链表尾, 将链表尾设置为当前节点的上一个节点<br>        last = prev;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        // 不为空, 将下一个节点的prev, 设置为上一个节点, 并将当前节点的 next置为空<br>        next.prev = prev;<br>        x.next = null;<br>    &#125;<br><br>    x.item = null;<br>    size--;<br>    modCount++;<br>    <span class="hljs-built_in">return</span> element;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="get-set"><a href="#get-set" class="headerlink" title="get/set"></a>get/set</h3><p>get/set时都需要获取指定索引的元素, 使用二分法查找, 然后进行遍历查找, 所以此处相较于<a href="https://liuzhihang.com/2018/08/23/arraylist-related-learning.html">ArrayList</a>多了遍历查询, 虽然使用了二分法进行优化, 但是get/set操作相比ArrayList来说性能还是相对较差</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">public E get(int index) &#123;<br>    // 校验索引<br>    checkElementIndex(index);<br>    // 二分法遍历查找节点<br>    <span class="hljs-built_in">return</span> node(index).item;<br>&#125;<br><br>public E <span class="hljs-built_in">set</span>(int index, E element) &#123;<br>    // 校验索引<br>    checkElementIndex(index);<br>    // 二分法遍历查找节点<br>    Node&lt;E&gt; x = node(index);<br>    // 修改Node节点的 item值<br>    E oldVal = x.item;<br>    x.item = element;<br>    <span class="hljs-built_in">return</span> oldVal;<br>&#125;<br><br>/**<br> * 返回指定索引处非null节点.<br> */<br>Node&lt;E&gt; node(int index) &#123;<br>    // assert isElementIndex(index);<br><br>    // 判断索引是否小于长度的一半 (二分法) 然后遍历查找<br>    <span class="hljs-keyword">if</span> (index &lt; (size &gt;&gt; 1)) &#123;<br>        Node&lt;E&gt; x = first;<br>        <span class="hljs-keyword">for</span> (int i = 0; i &lt; index; i++)<br>            x = x.next;<br>        <span class="hljs-built_in">return</span> x;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;E&gt; x = last;<br>        <span class="hljs-keyword">for</span> (int i = size - 1; i &gt; index; i--)<br>            x = x.prev;<br>        <span class="hljs-built_in">return</span> x;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
            <tag> LinkList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList相关学习</title>
      <link href="2018/08/23/arraylist-related-learning.html"/>
      <url>2018/08/23/arraylist-related-learning.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>ArrayList是工作中常用的集合, 基于数组实现, 可以插入空数据, 也支持随机访问.<br>ArrayList比较适合 get/set操作, 因为 add/remove需要移动数据, 相对来说比较消耗性能.</p></blockquote><h3 id="默认初始长度"><a href="#默认初始长度" class="headerlink" title="默认初始长度"></a>默认初始长度</h3><p>1.默认初始长度为 10<br>2.底层结构为Object[] 数组</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">private static final int DEFAULT_CAPACITY = 10;<br><br>private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br><br>/**<br> * 构造一个初始容量为10的空列表<br> */<br>public <span class="hljs-function"><span class="hljs-title">ArrayList</span></span>() &#123;<br>    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="添加方法-add"><a href="#添加方法-add" class="headerlink" title="添加方法 add()"></a>添加方法 add()</h3><ol><li>向数组中添加元素, 流程如下</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">/**<br> * 将指定的元素追加到此列表的末尾.<br> */<br>public boolean add(E e) &#123;<br>    // 扩容<br>    ensureCapacityInternal(size + 1);  // Increments modCount!!<br>    // 添加元素<br>    elementData[size++] = e;<br>    <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.扩容过程</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><br>transient Object[] elementData;<br><br>// 扩容<br>private void ensureCapacityInternal(int minCapacity) &#123;<br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>&#125;<br>// 计算容量, elementData为空 则使用默认容量 10, 指定容量<br>private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;<br>    <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        <span class="hljs-built_in">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>    &#125;<br>    <span class="hljs-built_in">return</span> minCapacity;<br>&#125;<br>// 修改次数自增, 并且如果 新的长度-原长度&gt;0 则使用 grow(minCapacity)方法进行扩容<br>private void ensureExplicitCapacity(int minCapacity) &#123;<br>    modCount++;<br><br>    // overflow-conscious code<br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; 0)<br>        grow(minCapacity);<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>添加元素赋值<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">elementData[size++] = e;<br></code></pre></td></tr></table></figure></li></ol><h3 id="扩容流程-grow-minCapacity"><a href="#扩容流程-grow-minCapacity" class="headerlink" title="扩容流程 grow(minCapacity)"></a>扩容流程 grow(minCapacity)</h3><p>通过扩容流程可以看出扩容过程中, 是将创建一个原数组1.5倍大小的新数组, 同时将数组元素复制到新数组, 所以一般使用中, 尽量指定数组大小, 从而避免数组的复制.</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 增加容量确保能容纳 minCapacity 数量的元素</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-comment">// 获取当前 elementData 的长度</span><br>    <span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br>    <span class="hljs-comment">// 获取新的长度 为当前长度的 1.5倍</span><br>    <span class="hljs-keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 比较并交换</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-comment">// 防止超出最大长度</span><br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span><br>    <span class="hljs-comment">// 数组复制</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除-remove-方法"><a href="#删除-remove-方法" class="headerlink" title="删除 remove 方法"></a>删除 remove 方法</h3><p>删除过程中使用 System.arraycopy 本地方法, 对数组进行复制, 所以 ArrayList的 新增和删除方法性能不如, <a href="https://liuzhihang.com/2018/08/23/linklist-related-learning.html">LinkList</a>, 但是 get和set方法, 则直接根据索引修改数据, 比较适合对数据进行修改的操作.</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">/**<br> * 删除指定位置的元素, 后面的元素将前移<br> */<br>public E remove(int index) &#123;<br><br>    // 检查索引 否则抛出 IndexOutOfBoundsException(outOfBoundsMsg(index))<br>    rangeCheck(index);<br>    // 修改次数自增<br>    modCount++;<br>    E oldValue = elementData(index);<br><br>    int numMoved = size - index - 1;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; 0)<br>        // 数组复制<br>        System.arraycopy(elementData, index+1, elementData, index,<br>                         numMoved);<br>    elementData[--size] = null; // clear to <span class="hljs-built_in">let</span> GC <span class="hljs-keyword">do</span> its work<br><br>    <span class="hljs-built_in">return</span> oldValue;<br>&#125;<br>/**<br> * 删除指定元素<br> */<br>public boolean remove(Object o) &#123;<br>    <span class="hljs-keyword">if</span> (o == null) &#123;<br>        <span class="hljs-keyword">for</span> (int index = 0; index &lt; size; index++)<br>            <span class="hljs-keyword">if</span> (elementData[index] == null) &#123;<br>                fastRemove(index);<br>                <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (int index = 0; index &lt; size; index++)<br>            <span class="hljs-keyword">if</span> (o.equals(elementData[index])) &#123;<br>                fastRemove(index);<br>                <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>    &#125;<br>    <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>/**<br> * System.arraycopy 方法拷贝 删除<br> */<br>private void fastRemove(int index) &#123;<br>    modCount++;<br>    int numMoved = size - index - 1;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; 0)<br>        System.arraycopy(elementData, index+1, elementData, index,<br>                         numMoved);<br>    elementData[--size] = null; // clear to <span class="hljs-built_in">let</span> GC <span class="hljs-keyword">do</span> its work<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@Value注入属性的小bug</title>
      <link href="2018/08/21/value-injects-a-small-bug-in-the-property.html"/>
      <url>2018/08/21/value-injects-a-small-bug-in-the-property.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Value注入属性"><a href="#Value注入属性" class="headerlink" title="@Value注入属性"></a>@Value注入属性</h4><p>工作中一些公共属性, 一般通过@Value注入的对象的属性中, 使用方式如下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeChatConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 微信支付参数</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;wx.appId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String WX_APP_ID;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过@Value注解, 将配置文件中的值注入到对象属性中, 在使用时只需要注入WeChatConfig对象然后调用即可, 而实际工作中, 往往用静态属性, 方便使用, 于是可以写成如下方式</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeChatConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 微信支付参数</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;wx.appId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String WX_APP_ID;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用此方式不会报错, 但是却取不到属性值, 并且不会报错. 变通方式可以如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeChatConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 微信支付参数</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;wx.appId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String WX_APP_ID;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;wx.app.id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWxAppId</span><span class="hljs-params">(String wxAppId)</span> </span>&#123;<br>        WX_APP_ID = wxAppId;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意: 此处的 set方法不可以设置为静态, 否则同样不能注入属性</p>]]></content>
      
      
      <categories>
          
          <category> issue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用枚举实现单例</title>
      <link href="2018/08/17/use-enumeration-to-implement-a-singleton.html"/>
      <url>2018/08/17/use-enumeration-to-implement-a-singleton.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>介绍使用枚举的方式创建单例, 其他方式可以参考<a href="https://liuzhihang.com/2018/02/21/singleton-pattern.html">单例模式</a></p><a id="more"></a><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用枚举单例</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/8/17 17:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonPattern</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonPattern</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonPattern <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span>   SingleEnum.INSTANCE.getSingletonPattern();<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SingleEnum</span> </span>&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 单例</span><br><span class="hljs-comment">         */</span><br>        INSTANCE;<br><br>        <span class="hljs-keyword">private</span> SingletonPattern singletonPattern;<br><br>        SingleEnum() &#123;<br>            <span class="hljs-keyword">this</span>.singletonPattern = <span class="hljs-keyword">new</span> SingletonPattern();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> SingletonPattern <span class="hljs-title">getSingletonPattern</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> singletonPattern;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.比双重锁检查相对简洁<br>2.线程安全<br>3.自动处理序列化<br>4.防止反射</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch基本语句</title>
      <link href="2018/06/26/elasticsearch-basic-statement.html"/>
      <url>2018/06/26/elasticsearch-basic-statement.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="查看集群"><a href="#查看集群" class="headerlink" title="查看集群"></a>查看集群</h3><h4 id="1-查看集群健康"><a href="#1-查看集群健康" class="headerlink" title="1. 查看集群健康"></a>1. 查看集群健康</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/_cat/health?v&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-查看集群节点"><a href="#2-查看集群节点" class="headerlink" title="2. 查看集群节点"></a>2. 查看集群节点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/_cat/nodes?v&quot;</span><br></code></pre></td></tr></table></figure><a id="more"></a><h4 id="3-查看集群所有索引"><a href="#3-查看集群所有索引" class="headerlink" title="3. 查看集群所有索引"></a>3. 查看集群所有索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/_cat/indices?v&quot;</span><br></code></pre></td></tr></table></figure><h3 id="get-获取指定数据"><a href="#get-获取指定数据" class="headerlink" title="get 获取指定数据"></a>get 获取指定数据</h3><h4 id="1-直接获取数据"><a href="#1-直接获取数据" class="headerlink" title="1. 直接获取数据"></a>1. 直接获取数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty&quot;</span><br></code></pre></td></tr></table></figure><p>格式为 /{index}/{type}/{id}</p><table><thead><tr><th align="left">字段</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">monitor_log_mch_order_out</td><td align="left">索引 (_index)</td></tr><tr><td align="left">logs</td><td align="left">索引的类型 (_type), 不知道类型可以用 _all 匹配</td></tr><tr><td align="left">AWSudIFgTuj3oZBEhyxK</td><td align="left">id (_id)</td></tr><tr><td align="left">pretty</td><td align="left">json格式显示数据, 可省略</td></tr></tbody></table><h4 id="2-屏蔽或只查看-source"><a href="#2-屏蔽或只查看-source" class="headerlink" title="2. 屏蔽或只查看 _source"></a>2. 屏蔽或只查看 _source</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty&amp;_source=false&quot;</span><br></code></pre></td></tr></table></figure><p>添加 _source=false 即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK/_source?pretty&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-过滤字段"><a href="#3-过滤字段" class="headerlink" title="3. 过滤字段"></a>3. 过滤字段</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty&amp;_source_include=log*&amp;_source_exclude=logType&quot;</span><br></code></pre></td></tr></table></figure><p>获取包含 log* 且不为 logType 的字段</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/logs/AWSudIFgTuj3oZBEhyxK?pretty&amp;_source=logType,logLevel&quot;</span><br></code></pre></td></tr></table></figure><p>只查询指定字段的简易写法</p><h3 id="mget-多条件匹配查询"><a href="#mget-多条件匹配查询" class="headerlink" title="mget 多条件匹配查询"></a>mget 多条件匹配查询</h3><ol><li><p>匹配多个索引, 同时查询多个id的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/_mget?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;docs&quot; : [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;_index&quot; : &quot;monitor_log_mch_order_out&quot;,</span><br><span class="hljs-string">            &quot;_type&quot; : &quot;logs&quot;,</span><br><span class="hljs-string">            &quot;_id&quot; : &quot;AWSudIFgTuj3oZBEhyxK&quot;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;_index&quot; : &quot;monitor_log_mch_order_out&quot;,</span><br><span class="hljs-string">            &quot;_type&quot; : &quot;logs&quot;,</span><br><span class="hljs-string">            &quot;_id&quot; : &quot;AWSuXewETuj3oZBEhywS&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>可以将索引写在host后面, 代表查询的都为同一索引下的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/_mget?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;docs&quot; : [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;_type&quot; : &quot;logs&quot;,</span><br><span class="hljs-string">            &quot;_id&quot; : &quot;AWSudIFgTuj3oZBEhyxK&quot;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;_type&quot; : &quot;logs&quot;,</span><br><span class="hljs-string">            &quot;_id&quot; : &quot;AWSuXewETuj3oZBEhywS&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>合并index和type, 代表查询的都为同一索引下type也相同的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/logs/_mget?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;docs&quot; : [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;_id&quot; : &quot;AWSudIFgTuj3oZBEhyxK&quot;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;_id&quot; : &quot;AWSuXewETuj3oZBEhywS&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>简化后如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/logs/_mget?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;ids&quot; : [&quot;AWSudIFgTuj3oZBEhyxK&quot;, &quot;AWSuXewETuj3oZBEhywS&quot;]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><p>注: 当多个条件的 _type 相同时 可以使用 _all 或者省略</p><ol start="4"><li>过滤字段, 每个Id分别对 _source进行过滤<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/_mget?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;docs&quot; : [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;_id&quot; : &quot;AWSudIFgTuj3oZBEhyxK&quot;,</span><br><span class="hljs-string">            &quot;_source&quot; : false</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;_id&quot; : &quot;AWSuXewETuj3oZBEhywS&quot;,</span><br><span class="hljs-string">            &quot;_source&quot; : [&quot;bizId&quot;, &quot;method&quot;]</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;_id&quot; : &quot;AWSuLAYqTuj3oZBEhysH&quot;,</span><br><span class="hljs-string">            &quot;_source&quot; : &#123;</span><br><span class="hljs-string">                &quot;include&quot;: [&quot;log*&quot;],</span><br><span class="hljs-string">                &quot;exclude&quot;: [&quot;logLevel&quot;]</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="search-搜索"><a href="#search-搜索" class="headerlink" title="_search 搜索"></a>_search 搜索</h3><h4 id="1-匹配bizId-查询"><a href="#1-匹配bizId-查询" class="headerlink" title="1. 匹配bizId 查询"></a>1. 匹配bizId 查询</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/_search?pretty&amp;q=bizId:2009011201807190133430748068&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-同时指定类型"><a href="#2-同时指定类型" class="headerlink" title="2. 同时指定类型"></a>2. 同时指定类型</h4><p>同时指定类型, 多个类型用 ‘,’ 隔开, 也支持多个索引勇士搜索, 多个索引用 ‘,’ 隔开, 或者模糊搜索</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/logs/_search?pretty&amp;q=bizId:2009011201807190133430748068&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-占位符-all-匹配所有索引"><a href="#3-占位符-all-匹配所有索引" class="headerlink" title="3. 占位符 _all 匹配所有索引"></a>3. 占位符 _all 匹配所有索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/_all/logs/_search?pretty&amp;q=bizId:2009011201807190133430748068&quot;</span><br></code></pre></td></tr></table></figure><h4 id="4-匹配所有索引所有类型"><a href="#4-匹配所有索引所有类型" class="headerlink" title="4. 匹配所有索引所有类型"></a>4. 匹配所有索引所有类型</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/_search?pretty&amp;q=bizId:2009011201807190133430748068&quot;</span><br></code></pre></td></tr></table></figure><p>注: q 代表映射query_string</p><h4 id="5-请求体的方式"><a href="#5-请求体的方式" class="headerlink" title="5. 请求体的方式"></a>5. 请求体的方式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/logs/_search?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;query&quot; : &#123;</span><br><span class="hljs-string">        &quot;term&quot; : &#123; &quot;bizId&quot; : &quot;2009011201807190133430748068&quot; &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="6-分页查询-from-size"><a href="#6-分页查询-from-size" class="headerlink" title="6. 分页查询 from/size"></a>6. 分页查询 from/size</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/logs/_search?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;from&quot; : 0, &quot;size&quot; : 1,</span><br><span class="hljs-string">    &quot;query&quot; : &#123;</span><br><span class="hljs-string">        &quot;term&quot; : &#123; &quot;bizId&quot; : &quot;2009011201807190133430748068&quot; &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="7-查询并过滤字段"><a href="#7-查询并过滤字段" class="headerlink" title="7. 查询并过滤字段"></a>7. 查询并过滤字段</h4><p>根据字段查询并筛选掉指定字段</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/_search?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;_source&quot;: &#123;</span><br><span class="hljs-string">        &quot;includes&quot;: [ &quot;costTime&quot;, &quot;bizId&quot; ],</span><br><span class="hljs-string">        &quot;excludes&quot;: [ &quot;logLevel&quot; ]</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;query&quot; : &#123;</span><br><span class="hljs-string">        &quot;term&quot; : &#123; &quot;bizId&quot; : &quot;2009011201807190133430748068&quot; &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><h4 id="1-按照时间范围查询"><a href="#1-按照时间范围查询" class="headerlink" title="1. 按照时间范围查询"></a>1. 按照时间范围查询</h4><p>可以省略索引查询全部</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/monitor_log_mch_order_out/_search?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;query&quot;: &#123;</span><br><span class="hljs-string">        &quot;range&quot; : &#123;</span><br><span class="hljs-string">            &quot;time&quot; : &#123;</span><br><span class="hljs-string">                &quot;gte&quot;: &quot;2018-07-19 00:14:25:000&quot;,</span><br><span class="hljs-string">                &quot;lte&quot;: &quot;2018-07-19 00:14:30:000&quot;,</span><br><span class="hljs-string">                &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash配置</title>
      <link href="2018/06/20/logstash-configuration.html"/>
      <url>2018/06/20/logstash-configuration.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">input</span> &#123;<br>    <span class="hljs-string">beats</span> &#123;<br>        <span class="hljs-string">port</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">&quot;5043&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置日志输入方式为 filebeat, 并配置端口</p><a id="more"></a><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">filter</span> &#123;<br><br>    <span class="hljs-string">grok</span> &#123;<br>        <span class="hljs-string">match</span> <span class="hljs-string">=&gt;</span> &#123;<br>        <span class="hljs-string">&quot;message&quot;</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">&quot;\[<span class="hljs-template-variable">%&#123;DATA:time&#125;</span>\]-\[<span class="hljs-template-variable">%&#123;DATA:method&#125;</span>\] - \[<span class="hljs-template-variable">%&#123;DATA:catalina&#125;</span>\] -\[<span class="hljs-template-variable">%&#123;DATA:logLevel&#125;</span>\] - \[<span class="hljs-template-variable">%&#123;DATA:index_prefix&#125;</span>\|<span class="hljs-template-variable">%&#123;WORD:logType&#125;</span>\|<span class="hljs-template-variable">%&#123;WORD:sysNo&#125;</span>\|<span class="hljs-template-variable">%&#123;WORD:objType&#125;</span>\|<span class="hljs-template-variable">%&#123;DATA:funcode&#125;</span>\|<span class="hljs-template-variable">%&#123;WORD:monitorObjNo&#125;</span>\|<span class="hljs-template-variable">%&#123;WORD:bizId&#125;</span>\|<span class="hljs-template-variable">%&#123;WORD:respCode&#125;</span>\|<span class="hljs-template-variable">%&#123;DATA:respMsg&#125;</span>\|<span class="hljs-template-variable">%&#123;WORD:costTime&#125;</span>|<span class="hljs-template-variable">%&#123;DATA:exField&#125;</span>\]&quot;</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-string">grok</span>&#123;<br>         <span class="hljs-string">match</span> <span class="hljs-string">=&gt;</span> &#123; <span class="hljs-string">&quot;time&quot;</span> <span class="hljs-string">=&gt;</span> [<span class="hljs-string">&quot;<span class="hljs-template-variable">%&#123;INT:y_index&#125;</span>-<span class="hljs-template-variable">%&#123;INT:M_index&#125;</span>-<span class="hljs-template-variable">%&#123;INT:d_index&#125;</span>&quot;</span>]&#125;<br>    &#125;<br><br>    <span class="hljs-string">mutate</span> &#123;<br>        <span class="hljs-string">add_field</span> <span class="hljs-string">=&gt;</span> &#123; <span class="hljs-string">&quot;[@metadata][index_suffix]&quot;</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">%&#123;y_index&#125;</span><span class="hljs-template-variable">%&#123;M_index&#125;</span><span class="hljs-template-variable">%&#123;d_index&#125;</span>&quot;</span> &#125;<br>        <span class="hljs-string">remove_field</span> <span class="hljs-string">=&gt;</span> [<span class="hljs-string">&quot;beat&quot;</span>,<span class="hljs-string">&quot;host&quot;</span>,<span class="hljs-string">&quot;thread&quot;</span>,<span class="hljs-string">&quot;class&quot;</span>,<span class="hljs-string">&quot;source&quot;</span>,<span class="hljs-string">&quot;tags&quot;</span>,<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;y_index&quot;</span>,<span class="hljs-string">&quot;M_index&quot;</span>,<span class="hljs-string">&quot;d_index&quot;</span>]<br>        <span class="hljs-string">lowercase</span> <span class="hljs-string">=&gt;</span> [ <span class="hljs-string">&quot;index_prefix&quot;</span> ]<br>        <span class="hljs-string">lowercase</span> <span class="hljs-string">=&gt;</span> [ <span class="hljs-string">&quot;funcode&quot;</span> ]<br>        <span class="hljs-string">lowercase</span> <span class="hljs-string">=&gt;</span> [ <span class="hljs-string">&quot;objType&quot;</span> ]<br>        <span class="hljs-string">lowercase</span> <span class="hljs-string">=&gt;</span> [ <span class="hljs-string">&quot;monitorObjNo&quot;</span> ]<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>使用gork过滤器对日志进行筛选, 并对部分字段赋值.</li><li>使用mutate插件对字段进行转换, add_field 为添加字段 [@metadata][index_suffix] 意思是添加临时字段, 该字段不会输出到es中</li></ol><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">output</span> &#123;<br><br>        <span class="hljs-string">if</span>  [<span class="hljs-string">logType</span>] <span class="hljs-string">==</span> <span class="hljs-string">&quot;info&quot;</span>  &#123;<br>                 <span class="hljs-string">elasticsearch</span> &#123;<br>                        <span class="hljs-string">hosts</span> <span class="hljs-string">=&gt;</span> [ <span class="hljs-string">&quot;xxx.xxx.xxx.xxx:9200&quot;</span> ]<br>                        <span class="hljs-string">index</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">%&#123;index_prefix&#125;</span>_<span class="hljs-template-variable">%&#123;objType&#125;</span>_<span class="hljs-template-variable">%&#123;funcode&#125;</span>_<span class="hljs-template-variable">%&#123;[@metadata][index_suffix]&#125;</span>&quot;</span><br>                        <span class="hljs-string">user</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">elastic</span><br>                        <span class="hljs-string">password</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">xxx</span><br>                 &#125;<br>        &#125;<br><br><br><br>        <span class="hljs-string">if</span> [<span class="hljs-string">logType</span>] <span class="hljs-string">==</span> <span class="hljs-string">&quot;error&quot;</span> &#123;<br>                <span class="hljs-string">redis</span> &#123;<br>                        <span class="hljs-string">data_type</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">&quot;list&quot;</span><br>                        <span class="hljs-string">db</span> <span class="hljs-string">=&gt;</span> <span class="hljs-number">0</span><br>                        <span class="hljs-comment">#key =&gt; &quot;%&#123;index_prefix&#125;_%&#123;sysNo&#125;_%&#123;objType&#125;_%&#123;funcode&#125;_%&#123;[@metadata][index_suffix]&#125;&quot;</span><br>                        <span class="hljs-string">key</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">%&#123;index_prefix&#125;</span>_<span class="hljs-template-variable">%&#123;sysNo&#125;</span>_<span class="hljs-template-variable">%&#123;objType&#125;</span>_<span class="hljs-template-variable">%&#123;monitorObjNo&#125;</span>&quot;</span><br>                        <span class="hljs-string">host</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">&quot;xxx.xxx.xxx.xxx&quot;</span><br>                        <span class="hljs-string">port</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">&quot;6379&quot;</span><br>                        <span class="hljs-string">password</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">&quot;xxx&quot;</span><br>                &#125;<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>将过滤后的字段按照类型输出到Es或者redis队列中</p><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><pre><code>    ./bin/logstash -f first-pipelines.yml    nohup ./logstash -f ../first-pipelines.yml &gt;/dev/null 2&gt;&amp;1 &amp;</code></pre><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 输出到控制台</span><br><span class="hljs-string">stdout</span> &#123; <span class="hljs-string">codec</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">rubydebug</span> &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>filebeat配置</title>
      <link href="2018/06/20/filebeat-configuration.html"/>
      <url>2018/06/20/filebeat-configuration.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="filebeat配置"><a href="#filebeat配置" class="headerlink" title="filebeat配置"></a>filebeat配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">filebeat.prospectors:</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">input_type:</span> <span class="hljs-string">log</span><br><span class="hljs-comment">#读取日志的路径</span><br>  <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/export/log/info-xxx.log</span><br>  <span class="hljs-attr">fields:</span><br>    <span class="hljs-attr">log_type:</span> <span class="hljs-string">&quot;monitor_log&quot;</span><br><br>  <span class="hljs-attr">fields_under_root:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#过滤部分日志</span><br>  <span class="hljs-attr">include_lines:</span> [<span class="hljs-string">&#x27;Monitor_log&#x27;</span>]<br><br><span class="hljs-comment">#----------------------------- Logstash output --------------------------------</span><br><span class="hljs-attr">output.logstash:</span><br>  <span class="hljs-comment"># The Logstash hosts</span><br>  <span class="hljs-attr">hosts:</span> [<span class="hljs-string">&quot;xxx.xxx.xxx.xxx:5043&quot;</span>,<span class="hljs-string">&quot;xxx.xxx.xxx.xxx:5043&quot;</span>]<br>  <span class="hljs-attr">loadbalance:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#================================ Logging =====================================</span><br><br><span class="hljs-attr">logging.level:</span> <span class="hljs-string">info</span><br><span class="hljs-attr">logging.to_files:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">logging.to_syslog:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">logging.files:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/export/app/filebeat/logs</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mybeat.log</span><br>  <span class="hljs-attr">keepfiles:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>过滤不包含指定字段的日志, 并仅仅输出到logstash, 也可以直接输出到Elasticsearch</p><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><ol><li>前台启动：关闭窗口连接后自动退出</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./filebeat -e -c filebeat.yml<br></code></pre></td></tr></table></figure><ol start="2"><li>后台启动:</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nohup ./filebeat -e -c filebeat.yml &gt;/dev/null 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><ol start="3"><li>关闭:</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 xxxx<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控系统架构</title>
      <link href="2018/06/20/monitoring-system-architecture.html"/>
      <url>2018/06/20/monitoring-system-architecture.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="监控系统基本框架"><a href="#监控系统基本框架" class="headerlink" title="监控系统基本框架"></a>监控系统基本框架</h3><p><img src="/resources/image/elk/elk.png" alt="监控系统基本架构"></p><a id="more"></a><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li>各业务系统按照指定格式打印日志</li><li>filebeat自动读取日志信息, 并进行过滤, 输出到logstash</li><li>logstash进行二次处理, 将日志内容格式化, 并将 info日志和error日志分别存放到Elasticsearch和redis队列中</li><li>监控系统定时从Es和redis中获取数据, 存放到mysql并进行报警分析</li><li>使用EChart图形化展示信息<br>…</li></ol>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程的生命周期</title>
      <link href="2018/06/15/thread-life-cycle.html"/>
      <url>2018/06/15/thread-life-cycle.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p><img src="/resources/concurrent/thread-life.png" alt="java内存模型"></p><a id="more"></a><h3 id="图解析"><a href="#图解析" class="headerlink" title="图解析"></a>图解析</h3><p>1.一般情况下线程主要经历: 准备, 就绪, 运行, 死亡四种状态.<br>2.准备:即创建线程, 包括集成Thread, 线程池, spring方式等等<br>3.就绪:线程创建并调用start()方法并不代表线程将立即获得资源, 而是进入到就绪状态进行资源分配<br>4.运行:抢占到资源的线程将执行, 执行过程可能会含有一些别的操作<br>&emsp;1).线程等待, 直到调用 notify()或notifyAll()方法被唤醒, 这里唤醒后不会立即继续执行线程, 而是进入就绪状态重新抢占资源<br>&emsp;2).线程休眠, 直到休眠时间结束, 同样结束后不会立即继续执行线程, 而是进入就绪状态重新抢占资源<br>&emsp;3).线程阻塞, IO资源阻塞, 锁等方式使线程进入阻塞队列, 释放锁将继续执行<br>5.死亡: 调用<del>stop()</del>方法, 线程中断, 或线程执行完毕则线程死亡</p>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized锁的介绍</title>
      <link href="2018/06/13/introduction-of-synchronized-lock.html"/>
      <url>2018/06/13/introduction-of-synchronized-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="synchronized锁的使用"><a href="#synchronized锁的使用" class="headerlink" title="synchronized锁的使用"></a>synchronized锁的使用</h3><p>synchronized可以使用在方法和代码块中, 使用的方式不同锁代表的含义不同, 下面将从几个方面进行介绍.</p><ul><li>普通方法</li><li>静态方法</li><li>代码块synchronized(this)</li><li>代码块synchronized(*.class)</li></ul><a id="more"></a><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>在使用synchronized关键字中锁主要分为两类, 一种是对象锁, 另一种类锁</li><li>普通加锁方法和synchronized(this)都是对象锁, 静态加锁方法和synchronized(*.class)都是类锁</li><li>对象锁: 同一对象持有锁, 相同对象等待, 其他对象不受影响; 不同对象持有锁, 互不影响.</li><li>类锁: 类锁时, 只要该类的对象持有锁, 无论是否为同一对象访问静态同步方法时都等待, 访问非静态同步方法不受影响.</li><li>对象锁和类锁互相不影响</li></ul><h3 id="测试代码及过程"><a href="#测试代码及过程" class="headerlink" title="测试代码及过程"></a>测试代码及过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.tool.sync;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/7/11 16:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncMainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SyncTest syncTest1 = <span class="hljs-keyword">new</span> SyncTest();<br>        <span class="hljs-comment">// SyncTest syncTest2 = new SyncTest();</span><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; syncTest1.methodA(), <span class="hljs-string">&quot;线程 01 &quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; syncTest1.methodB(), <span class="hljs-string">&quot;线程 02 &quot;</span>).start();<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;start&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;sleep&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">500</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;start&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;sleep&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">300</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;end&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>以上为一个简单的测试代码, 指使用两个线程分别调用两个方法, 通过打印结果可以看出顺序是乱序的, 其中线程的 start() 顺序并不代表线程的执行顺序, 在下面测试中假设是 “线程01” 先执行.</p><h4 id="1-A-B-方法分别添加synchronized关键字-同一对象"><a href="#1-A-B-方法分别添加synchronized关键字-同一对象" class="headerlink" title="1.A B 方法分别添加synchronized关键字 + 同一对象"></a>1.A B 方法分别添加synchronized关键字 + 同一对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结论: 方法 A 阻塞, 方法 B 等待 A 执行完毕后才继续执行.</p><h4 id="2-A-B-方法分别添加synchronized关键字-不同对象"><a href="#2-A-B-方法分别添加synchronized关键字-不同对象" class="headerlink" title="2.A B 方法分别添加synchronized关键字 + 不同对象"></a>2.A B 方法分别添加synchronized关键字 + 不同对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncMainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SyncTest syncTest1 = <span class="hljs-keyword">new</span> SyncTest();<br>        SyncTest syncTest2 = <span class="hljs-keyword">new</span> SyncTest();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; syncTest1.methodA(), <span class="hljs-string">&quot;线程 01 &quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; syncTest2.methodB(), <span class="hljs-string">&quot;线程 02 &quot;</span>).start();<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结论: 方法 A 阻塞, 方法 B 不受影响.</p><h4 id="3-A-方法分别添加synchronized关键字-B方法不添加"><a href="#3-A-方法分别添加synchronized关键字-B方法不添加" class="headerlink" title="3.A 方法分别添加synchronized关键字 B方法不添加"></a>3.A 方法分别添加synchronized关键字 B方法不添加</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结论: 方法 A 阻塞, 方法 B 不受影响.</p><h4 id="4-A-B-方法分别添加-static-synchronized-不同对象"><a href="#4-A-B-方法分别添加-static-synchronized-不同对象" class="headerlink" title="4.A B 方法分别添加 static synchronized  + 不同对象"></a>4.A B 方法分别添加 static synchronized  + 不同对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncMainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SyncTest syncTest1 = <span class="hljs-keyword">new</span> SyncTest();<br>        SyncTest syncTest2 = <span class="hljs-keyword">new</span> SyncTest();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; syncTest1.methodA(), <span class="hljs-string">&quot;线程 01 &quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; syncTest2.methodB(), <span class="hljs-string">&quot;线程 02 &quot;</span>).start();<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结论: 方法 A 阻塞, 方法 B 等待 A结束后继续执行.</p><h4 id="5-A-方法添加-static-synchronized-B-方法添加-synchronized-不同对象"><a href="#5-A-方法添加-static-synchronized-B-方法添加-synchronized-不同对象" class="headerlink" title="5.A 方法添加 static synchronized, B 方法添加 synchronized  + 不同对象"></a>5.A 方法添加 static synchronized, B 方法添加 synchronized  + 不同对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncMainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SyncTest syncTest1 = <span class="hljs-keyword">new</span> SyncTest();<br>        SyncTest syncTest2 = <span class="hljs-keyword">new</span> SyncTest();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; syncTest1.methodA(), <span class="hljs-string">&quot;线程 01 &quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; syncTest2.methodB(), <span class="hljs-string">&quot;线程 02 &quot;</span>).start();<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结论: 方法 A 阻塞, 方法 B 不受影响.</p><h4 id="6-A-B-方法内添加-synchronized-this"><a href="#6-A-B-方法内添加-synchronized-this" class="headerlink" title="6.A B 方法内添加 synchronized(this)"></a>6.A B 方法内添加 synchronized(this)</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结论: 同一对象 A 阻塞 B等待, 不同对象 A阻塞 B不受影响</p><h4 id="7-A-B-方法内添加-synchronized-SyncTest-class"><a href="#7-A-B-方法内添加-synchronized-SyncTest-class" class="headerlink" title="7.A B 方法内添加 synchronized(SyncTest.class)"></a>7.A B 方法内添加 synchronized(SyncTest.class)</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (SyncTest.class) &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (SyncTest.class) &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结论: 同一/不同对象 A 阻塞 B等待</p><h4 id="8-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-this"><a href="#8-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-this" class="headerlink" title="8.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(this)"></a>8.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(this)</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (SyncTest.class) &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结论: 同一/不同对象 A 阻塞 B不受影响</p><h4 id="9-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-OtherObj"><a href="#9-A-方法内添加-synchronized-SyncTest-class-B-方法内添加-synchronized-OtherObj" class="headerlink" title="9.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(OtherObj)"></a>9.A 方法内添加 synchronized(SyncTest.class), B 方法内添加 synchronized(OtherObj)</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncTest</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String string = <span class="hljs-string">&quot;lock&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (SyncTest.class) &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (string) &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结论: 同一/不同对象 A 阻塞 B不受影响</p>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized同步锁原理</title>
      <link href="2018/06/11/synchronized-synchronous-lock-principle.html"/>
      <url>2018/06/11/synchronized-synchronous-lock-principle.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>在多线程操作中volatile关键字可以保证共享变量的内存可见性, 但是并不能保证操作的原子性, 这时候就需要用到锁, synchronized同步锁是java关键字, 是内置的语言实现.</li><li>synchronized加锁和线程结束或异常锁的释放过程由JVM进行控制</li><li>synchronized关键字可以使用在方法和同步代码块中, 不同的使用方式, 锁的结果是不同的</li><li>重量级锁 + 可重入</li></ul><a id="more"></a><h3 id="synchronized底层原理"><a href="#synchronized底层原理" class="headerlink" title="synchronized底层原理"></a>synchronized底层原理</h3><p>1.代码示例</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.tool.java;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/06/11 16:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynchronizedTest</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> i;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> j;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">syncTest1</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>        i++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">syncTest2</span><span class="hljs-params">()</span> </span>&#123;<br><br>        j++;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.使用 javap -v SynchronizedTest.class 查看代码的对应字节码如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">$ javap -v SynchronizedTest.class<br>Classfile &#x2F;C:&#x2F;Users&#x2F;liuzhihang&#x2F;Desktop&#x2F;SynchronizedTest.class<br>  Last modified 2018-7-10; size 518 bytes<br>  MD5 checksum ba48def77b226e7b9ac28121ec423c16<br>  Compiled from &quot;SynchronizedTest.java&quot;<br>public class com.liuzhihang.tool.java.SynchronizedTest<br>  minor version: 0<br>  major version: 52<br>  flags: ACC_PUBLIC, ACC_SUPER<br>Constant pool:<br>&#x2F;&#x2F; 常量池省略<br>&#123;<br>  &#x2F;&#x2F; 构造方法省略<br><br>  public void syncTest1();<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack&#x3D;3, locals&#x3D;3, args_size&#x3D;1<br>         0: aload_0<br>         1: dup<br>         2: astore_1<br>         3: monitorenter<br>         4: aload_0<br>         5: dup<br>         6: getfield      #2                    &#x2F;&#x2F; Field i:I<br>         9: iconst_1<br>        10: iadd<br>        11: putfield      #2                    &#x2F;&#x2F; Field i:I<br>        14: aload_1<br>        15: monitorexit<br>        16: goto          24<br>        19: astore_2<br>        20: aload_1<br>        21: monitorexit<br>        22: aload_2<br>        23: athrow<br>        24: return<br>      Exception table:<br>  &#x2F;&#x2F; 省略代码<br><br>  public synchronized void syncTest2();<br>    descriptor: ()V<br>    flags: ACC_PUBLIC, ACC_SYNCHRONIZED<br>    Code:<br>      stack&#x3D;3, locals&#x3D;1, args_size&#x3D;1<br>         0: aload_0<br>         1: dup<br>         2: getfield      #3                  &#x2F;&#x2F; Field j:I<br>         5: iconst_1<br>         6: iadd<br>         7: putfield      #3                  &#x2F;&#x2F; Field j:I<br>        10: return<br>      LineNumberTable:<br>        line 22: 0<br>        line 23: 10<br>&#125;<br>SourceFile: &quot;SynchronizedTest.java&quot;<br><br></code></pre></td></tr></table></figure><p>3.结论</p><ul><li>同步语句块的实现使用的是 monitorenter 和 monitorexit 指令, 其中有两个 monitorexit 因为不能确保是正常结束还是异常结束, 所以另一个是用来确保异常结束时释放 monitor指令.</li><li>同步方法时使用的是 flags中的 ACC_SYNCHRONIZED 来标识该方法为同步方法, JVM在调用该方法时便会执行相应的同步调用.</li><li>每个线程都维护自己的监视器(monitor), 只要是同步调用进行相关操作时要先获得 monitor, 否则将被阻塞</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volatile关键字</title>
      <link href="2018/06/09/volatile-keyword.html"/>
      <url>2018/06/09/volatile-keyword.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在多线程操作共享变量时, 会使用volatile修饰共享变量, 比如单例模式的双重锁检查中, 并且在concurrent包下也大量使用了volatile关键字;<br>volatile可以对类属性进行修饰, 从而确保线程每次都是从主存中获取属性, 操作完毕后写回主存.</p><a id="more"></a><h3 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h3><img src="/resources/concurrent/volatile.png" width="800" hegiht="800" align=center /><p> 在多线程同时对共享变量进行操作过程中, 每个线程会拷贝一份共享变量到自己的工作内存中进行相关操作, 操作完毕后会将结果写入到主存中.<br> 而volatile关键字可以保证操作的可见性和有序性, 但是却不能保证原子性.</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>指一个操作或者多个操作要么全部执行要么全部都不执行, 操作过程整体是一个原子, 不被分割打断.</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>当多个线程访问同一个变量时, 一个线程修改了这个变量的值, 其他线程能够立即看得到修改的值.</p><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>即程序执行的顺序按照代码的先后顺序执行<br>主要原因是因为处理器在处理程序时会进行指令重排, 对代码进行优化, 指令重排在单线程中得到的结果是一致的, 但是在多线程中就会造成各种错误.</p><h3 id="volatile关键字作用"><a href="#volatile关键字作用" class="headerlink" title="volatile关键字作用"></a>volatile关键字作用</h3><p>1.使用volatile关键字修饰的变量,会强制将修改的值写入到主存中<br>2.volatile不保证原子性, 在多线程操作下仅能保证操作别的线程可见, 在多线程情况下同时操作共享变量依然会有数据不正确的情况.<br>3.volatile会防止指令重排</p>]]></content>
      
      
      <categories>
          
          <category> 并发和锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAop代理的选择</title>
      <link href="2018/05/21/springaop-agent-selection.html"/>
      <url>2018/05/21/springaop-agent-selection.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Spring动态创建bean过程, 是如何进行选择使用 jdk还是cglib进行代理的, 可以通过源码进行解析</p><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>通过断点进行跟踪主要执行过程在 DefaultAopProxyFactory, 通过判断条件是使用Cglib还是Jdk</p><a id="more"></a><h3 id="相关源码解析"><a href="#相关源码解析" class="headerlink" title="相关源码解析"></a>相关源码解析</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultAopProxyFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AopProxyFactory</span>, <span class="hljs-title">Serializable</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> AopProxy <span class="hljs-title">createAopProxy</span><span class="hljs-params">(AdvisedSupport config)</span> <span class="hljs-keyword">throws</span> AopConfigException </span>&#123;<br>    <span class="hljs-comment">//判断条件 是否优化, 返回是否直接代理目标类以及任何接口或者没有用户提供的代理接口</span><br><span class="hljs-keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;<br>Class&lt;?&gt; targetClass = config.getTargetClass();<br><span class="hljs-keyword">if</span> (targetClass == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AopConfigException(<span class="hljs-string">&quot;TargetSource cannot determine target class: &quot;</span> +<br><span class="hljs-string">&quot;Either an interface or a target is required for proxy creation.&quot;</span>);<br>&#125;<br><span class="hljs-comment">//判断是否是接口, 和已经使用jdk代理</span><br><span class="hljs-keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> JdkDynamicAopProxy(config);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ObjenesisCglibAopProxy(config);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> JdkDynamicAopProxy(config);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Determine whether the supplied &#123;<span class="hljs-doctag">@link</span> AdvisedSupport&#125; has only the</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.aop.SpringProxy&#125; interface specified</span><br><span class="hljs-comment"> * (or no proxy interfaces specified at all).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNoUserSuppliedProxyInterfaces</span><span class="hljs-params">(AdvisedSupport config)</span> </span>&#123;<br>Class&lt;?&gt;[] ifcs = config.getProxiedInterfaces();<br><span class="hljs-keyword">return</span> (ifcs.length == <span class="hljs-number">0</span> || (ifcs.length == <span class="hljs-number">1</span> &amp;&amp; SpringProxy.class.isAssignableFrom(ifcs[<span class="hljs-number">0</span>])));<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cglib动态代理</title>
      <link href="2018/05/18/cglib-dynamic-proxy.html"/>
      <url>2018/05/18/cglib-dynamic-proxy.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Spring动态代理可以选择使用jdk动态代理, 或者cglib动态代理,  cglib动态代理位于 net.sf.cglib.proxy 包下.</p><p>使用时涉及<br>接口: net.sf.cglib.proxy.MethodInterceptor<br>用来生成动态子类的类类: net.sf.cglib.proxy.Enhancer</p><p>注意: cglib 动态代理是基于类的代理, 是通过对指定的业务类生成一个子类, 并覆盖其中业务方法实现代理. 因为使用继承, 所以被代理类不能使 final 修饰</p><a id="more"></a><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>1.创建MethodInterceptor接口的实现类, 并编写intercept方法的实现<br>2.通过methodProxy.invokeSuper(o, objects);调用父类的方法<br>3.创建Enhancer, 通过 setSuperclass(Class superclass)方法指定父类(被代理类), 通过 setCallback(final Callback callback)方法指定代理<br>4.enhancer.create() 生成代理, 调用被代理类的方法</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>按照步骤编写简易逻辑代码.</p><h4 id="创建MethodInterceptor接口的实现类"><a href="#创建MethodInterceptor接口的实现类" class="headerlink" title="创建MethodInterceptor接口的实现类"></a>创建MethodInterceptor接口的实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于类的代理 即使类没有实现接口也可以被代理</span><br><span class="hljs-comment"> * 主要是基于类生成一个继承的子类 所以 类和方法不要声明为 final</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/5/18 10:10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMethodInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;cglib动态代理 before . . .&quot;</span>);<br><br>        Object invoke = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            invoke = methodProxy.invokeSuper(o, objects);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>            System.err.println(<span class="hljs-string">&quot;cglib动态代理 error: &quot;</span> + throwable.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>            System.out.println(<span class="hljs-string">&quot;cglib动态代理 after . . .&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> invoke;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建Enhancer"><a href="#创建Enhancer" class="headerlink" title="创建Enhancer"></a>创建Enhancer</h4><p>创建Enhancer, 通过 setSuperclass(Class superclass)方法指定父类(被代理类), 通过 setCallback(final Callback callback)方法指定代理</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CglibMainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer();<br>        enhancer.setSuperclass(SubjectCglib.class);<br>        enhancer.setCallback(<span class="hljs-keyword">new</span> MyMethodInterceptor());<br><br>        SubjectCglib subjectCglib = (SubjectCglib) enhancer.create();<br><br>        System.err.println(subjectCglib.getAge(<span class="hljs-string">&quot;liuzhihang&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="可以将二者合并到MyInterceptor中"><a href="#可以将二者合并到MyInterceptor中" class="headerlink" title="可以将二者合并到MyInterceptor中"></a>可以将二者合并到MyInterceptor中</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于类的代理 即使类没有实现接口也可以被代理</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/5/18 10:10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCglibInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span> </span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> Object object;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getInstance</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.object = object;<br>        Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer();<br>        enhancer.setSuperclass(object.getClass());<br>        enhancer.setCallback(<span class="hljs-keyword">this</span>);<br><br>        <span class="hljs-keyword">return</span> enhancer.create();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;cglib动态代理 before . . .&quot;</span>);<br><br>        Object invoke = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            invoke = methodProxy.invokeSuper(o, objects);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>            System.err.println(<span class="hljs-string">&quot;cglib动态代理 error: &quot;</span> + throwable.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>            System.out.println(<span class="hljs-string">&quot;cglib动态代理 after . . .&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> invoke;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk动态代理及源码解析</title>
      <link href="2018/05/17/jdk-dynamic-proxy-and-source-code-analysis.html"/>
      <url>2018/05/17/jdk-dynamic-proxy-and-source-code-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Spring动态代理可以选择使用jdk动态代理, 或者cglib动态代理,  jdk动态代理位于 java.lang.reflect 包下.</p><p>使用时涉及<br>接口: java.lang.reflect.InvocationHandler<br>动态代理类: java.lang.reflect.Proxy</p><p>注意: JDK 动态代理是基于接口的代理, 只能对实现接口的类生成代理, 不能对类进行代理</p><a id="more"></a><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>1.创建InvocationHandler接口的实现类, 并编写invoke方法的实现<br>2.创建被代理类的接口及实现类<br>3.使用动态代理类Proxy的静态方法生成代理类实例<br>4.使用实例调用方法</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>按照步骤编写简易逻辑代码.</p><h4 id="创建InvocationHandler接口的实现类"><a href="#创建InvocationHandler接口的实现类" class="headerlink" title="创建InvocationHandler接口的实现类"></a>创建InvocationHandler接口的实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK 动态代理</span><br><span class="hljs-comment"> * 基于接口的代理, 只能对实现接口的类生成代理, 不能对类进行代理</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/5/17 10:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 目标对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyInvocationHandler</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;jdk 动态代理 before . . . &quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;当前代理方法为:&quot;</span> + method);<br>        Object invoke = method.invoke(target, args);<br><br>        System.out.println(<span class="hljs-string">&quot;jdk 动态代理 after . . . &quot;</span>);<br>        <span class="hljs-keyword">return</span> invoke;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建被代理类的接口及实现类"><a href="#创建被代理类的接口及实现类" class="headerlink" title="创建被代理类的接口及实现类"></a>创建被代理类的接口及实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 被代理类的接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/5/17 10:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取名字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取年龄</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">getAge</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 被代理类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/5/17 10:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubjectImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;SubjectImpl的获取名字方法 . . .&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;liuzhihang&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAge</span><span class="hljs-params">(String name)</span> </span>&#123;<br><br>        System.out.println(name + <span class="hljs-string">&quot;开始获取年龄 . . .&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;25&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用动态代理类Proxy的静态方法生成代理类实例"><a href="#使用动态代理类Proxy的静态方法生成代理类实例" class="headerlink" title="使用动态代理类Proxy的静态方法生成代理类实例"></a>使用动态代理类Proxy的静态方法生成代理类实例</h4><p>获取代理类实例有以下两种方式, 一种是通过Proxy.newProxyInstance(..)获取,  一种是通过 Proxy.getProxyClass(..) 方式获取<br>1.Proxy.newProxyInstance(..)</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当代理类实例调用方法时, 会自动跳转到代理类关联的 handler 对象, 通过 method.invoke(target, args) 进行调用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/5/17 10:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyMainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Subject subject = <span class="hljs-keyword">new</span> SubjectImpl();<br><br>        ClassLoader classLoader = subject.getClass().getClassLoader();<br>        Class&lt;?&gt;[] interfaces = subject.getClass().getInterfaces();<br><br>        MyInvocationHandler handler = <span class="hljs-keyword">new</span> MyInvocationHandler(subject);<br>        <span class="hljs-comment">// 生成代理类实例</span><br>        Subject proxyInstance = (Subject) Proxy.newProxyInstance(classLoader, interfaces, handler);<br><br>        String name = proxyInstance.getName();<br>        String instanceAge = proxyInstance.getAge(<span class="hljs-string">&quot;liuzhihang&quot;</span>);<br>        System.err.println(name + <span class="hljs-string">&quot; &quot;</span> + instanceAge);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.Proxy.getProxyClass(..)</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当代理类实例调用方法时, 会自动跳转到代理类关联的 handler 对象, 通过 method.invoke(target, args) 进行调用</span><br><span class="hljs-comment"> * 此方式有异常抛出</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/5/17 10:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyMainTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>        Subject subject = <span class="hljs-keyword">new</span> SubjectImpl();<br><br>        ClassLoader classLoader = subject.getClass().getClassLoader();<br>        Class&lt;?&gt;[] interfaces = subject.getClass().getInterfaces();<br><br>        MyInvocationHandler handler = <span class="hljs-keyword">new</span> MyInvocationHandler(subject);<br><br>            Class&lt;?&gt; proxyClass = Proxy.getProxyClass(classLoader, interfaces);<br>            Constructor&lt;?&gt; constructor = proxyClass.getConstructor(InvocationHandler.class);<br><br>            Subject subject1 = (Subject) constructor.newInstance(handler);<br>            String name1 = subject1.getName();<br>            String instanceAge1 = subject1.getAge(<span class="hljs-string">&quot;liuzhihang&quot;</span>);<br>            System.err.println(name1 + <span class="hljs-string">&quot; &quot;</span> + instanceAge1);<br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">D:\jdk1.8\bin\java.exe . . .<br>liuzhihang 25<br>jdk 动态代理 before . . .<br>当前代理方法为:public abstract java.lang.String com.liuzhihang.tool.proxy.jdk.Subject.getName()<br>SubjectImpl的获取名字方法 . . .<br>jdk 动态代理 after . . .<br>jdk 动态代理 before . . .<br>当前代理方法为:public abstract java.lang.String com.liuzhihang.tool.proxy.jdk.Subject.getAge(java.lang.String)<br>liuzhihang开始获取年龄 . . .<br>jdk 动态代理 after . . .<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure><p>结论: 代理实例在每次调用方法是都会通过代理类进行调用</p><h3 id="相关源码解析"><a href="#相关源码解析" class="headerlink" title="相关源码解析"></a>相关源码解析</h3><p>完整注释可自己查看相关源码, 源码过程应当DeBug多走走.<br>1.调用 Proxy.newProxyInstance 方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> &#x2F;**<br> * 返回指定接口的代理类实例，该接口将方法调用分派给指定的调用处理程序<br> *&#x2F;<br>@CallerSensitive<br>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException &#123;<br><br>    &#x2F;&#x2F; 非空校验<br>    Objects.requireNonNull(h);<br><br>    final Class&lt;?&gt;[] intfs &#x3D; interfaces.clone();<br><br>    &#x2F;&#x2F; 获取系统安全接口<br>    final SecurityManager sm &#x3D; System.getSecurityManager();<br>    if (sm !&#x3D; null) &#123;<br>        &#x2F;&#x2F; 校验权限<br>        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);<br>    &#125;<br><br>    &#x2F;*<br>     * 从缓存中获取代理类 或者 生成新的代理类<br>     *&#x2F;<br>    Class&lt;?&gt; cl &#x3D; getProxyClass0(loader, intfs);<br><br>    &#x2F;*<br>     * 通过反射获取构造函数对象并生成代理类实例<br>     *&#x2F;<br>    try &#123;<br>        if (sm !&#x3D; null) &#123;<br>            checkNewProxyPermission(Reflection.getCallerClass(), cl);<br>        &#125;<br>        &#x2F;&#x2F; 获取构造<br>        final Constructor&lt;?&gt; cons &#x3D; cl.getConstructor(constructorParams);<br>        final InvocationHandler ih &#x3D; h;<br>        &#x2F;&#x2F; 验证代理类的修饰符<br>        if (!Modifier.isPublic(cl.getModifiers())) &#123;<br>            &#x2F;&#x2F; 修改访问权限<br>            AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() &#123;<br>                public Void run() &#123;<br>                    &#x2F;&#x2F; 将此对象的可访问标志设置为指定的布尔值, true表示反射对象在使用时应禁止Java语言访问检查, false表示反射对象应强制执行Java语言访问检查<br>                    cons.setAccessible(true);<br>                    return null;<br>                &#125;<br>            &#125;);<br>        &#125;<br>        &#x2F;&#x2F;生成实例, 并将参数传入构造<br>        return cons.newInstance(new Object[]&#123;h&#125;);<br>    &#125; catch (IllegalAccessException | InstantiationException e) &#123;<br>        throw new InternalError(e.toString(), e);<br>    &#125; catch (InvocationTargetException e) &#123;<br>        Throwable t &#x3D; e.getCause();<br>        if (t instanceof RuntimeException) &#123;<br>            throw (RuntimeException) t;<br>        &#125; else &#123;<br>            throw new InternalError(t.toString(), t);<br>        &#125;<br>    &#125; catch (NoSuchMethodException e) &#123;<br>        throw new InternalError(e.toString(), e);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看出获取代理类是在 Class&lt;?&gt; cl = getProxyClass0(loader, intfs); 处, 继续相关逻辑<br>2.获取代理类相关逻辑</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;**<br> * 生成代理类, 之前必须进行权限检查<br> *&#x2F;<br>private static Class&lt;?&gt; getProxyClass0(ClassLoader loader,<br>                                       Class&lt;?&gt;... interfaces) &#123;<br>    if (interfaces.length &gt; 65535) &#123;<br>        throw new IllegalArgumentException(&quot;interface limit exceeded&quot;);<br>    &#125;<br><br>    &#x2F;&#x2F;如果由实现给定接口的给定加载器定义的代理类存在，则它将简单地返回缓存副本; 否则，它将通过Proxy Class Factory创建代理类<br>    return proxyClassCache.get(loader, interfaces);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.proxyClassCache.get(loader, interfaces);<br>java.lang.reflect.WeakCache#get(..) 介绍</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> &#x2F;**<br> * 通过缓存查找值, 如果缓存中没有给定的（key，sub Key）对的条目或条目已被清除，则它总是评估&#123;Key sub Key Factory&#125;函数并可选择评估&#123;Factory value&#125;函数<br> *&#x2F;<br>public V get(K key, P parameter) &#123;<br>    &#x2F;&#x2F; 非空校验<br>    Objects.requireNonNull(parameter);<br>    &#x2F;&#x2F; 判断移除队列<br>    expungeStaleEntries();<br>    &#x2F;&#x2F; 缓存key<br>    Object cacheKey &#x3D; CacheKey.valueOf(key, refQueue);<br><br>    &#x2F;&#x2F; 延迟加载使用二级map<br>    ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap &#x3D; map.get(cacheKey);<br>    if (valuesMap &#x3D;&#x3D; null) &#123;<br>        ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; oldValuesMap<br>                &#x3D; map.putIfAbsent(cacheKey,<br>                valuesMap &#x3D; new ConcurrentHashMap&lt;&gt;());<br>        if (oldValuesMap !&#x3D; null) &#123;<br>            valuesMap &#x3D; oldValuesMap;<br>        &#125;<br>    &#125;<br><br>    &#x2F;&#x2F; 创建子key 并根据key 检索supplier<br>    Object subKey &#x3D; Objects.requireNonNull(subKeyFactory.apply(key, parameter));<br>    &#x2F;&#x2F; 根据key获取supplier<br>    Supplier&lt;V&gt; supplier &#x3D; valuesMap.get(subKey);<br>    Factory factory &#x3D; null;<br><br>    while (true) &#123;<br>        if (supplier !&#x3D; null) &#123;<br>            &#x2F;&#x2F; supplier 可能为 Factory 或者 CacheValue&lt;V&gt; 的实例, 从缓存中获取到则直接返回<br>            V value &#x3D; supplier.get();<br>            if (value !&#x3D; null) &#123;<br>                return value;<br>            &#125;<br>        &#125;<br><br>        &#x2F;&#x2F; factory不存在则创建<br>        if (factory &#x3D;&#x3D; null) &#123;<br>            factory &#x3D; new Factory(key, parameter, subKey, valuesMap);<br>        &#125;<br><br>        &#x2F;&#x2F; supplier 为null<br>        if (supplier &#x3D;&#x3D; null) &#123;<br>            &#x2F;&#x2F; 从valuesMap获取supplier<br>            supplier &#x3D; valuesMap.putIfAbsent(subKey, factory);<br>            if (supplier &#x3D;&#x3D; null) &#123;<br>                &#x2F;&#x2F; successfully installed Factory<br>                supplier &#x3D; factory;<br>            &#125;<br>            &#x2F;&#x2F; else retry with winning supplier<br>        &#125; else &#123;<br>            if (valuesMap.replace(subKey, supplier, factory)) &#123;<br>                &#x2F;&#x2F; successfully replaced<br>                &#x2F;&#x2F; cleared CacheEntry &#x2F; unsuccessful Factory<br>                &#x2F;&#x2F; with our Factory<br>                supplier &#x3D; factory;<br>            &#125; else &#123;<br>                &#x2F;&#x2F; retry with current supplier<br>                supplier &#x3D; valuesMap.get(subKey);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以发现重点在 Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter)); 获取 subKey 的过程中.<br>4.subKeyFactory.apply(key, parameter)<br>Debug发现在此处调用的是 java.lang.reflect.Proxy.ProxyClassFactory 静态内部类,<br>此处根据接口的数量生成二级缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一个工厂函数, 用于生成, 定义并返回给定ClassLoader和接口数组的代理类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyClassFactory</span></span><br>        implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;<br>&#123;<br>    <span class="hljs-comment">// 所有代理类的前缀</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String proxyClassNamePrefix = <span class="hljs-string">&quot;$Proxy&quot;</span>;<br><br>    <span class="hljs-comment">// next number to use for generation of unique proxy class names</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> AtomicLong nextUniqueNumber = <span class="hljs-keyword">new</span> AtomicLong();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;<br><br>        <span class="hljs-comment">// 在IdentityHashMap中, 当且仅当两个key严格相等（key1==key2）时，IdentityHashMap才认为两个key相等</span><br>        Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="hljs-keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);<br>        <span class="hljs-comment">// 循环接口数组</span><br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 验证类加载器是否将此接口的名称解析为同一个Class对象</span><br><span class="hljs-comment">             */</span><br>            Class&lt;?&gt; interfaceClass = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 获取接口的 class</span><br>                interfaceClass = Class.forName(intf.getName(), <span class="hljs-keyword">false</span>, loader);<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (interfaceClass != intf) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                        intf + <span class="hljs-string">&quot; is not visible from class loader&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 验证interfaceClass是否为接口</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span> (!interfaceClass.isInterface()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                        interfaceClass.getName() + <span class="hljs-string">&quot; is not an interface&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 验证接口是否重复</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                        <span class="hljs-string">&quot;repeated interface: &quot;</span> + interfaceClass.getName());<br>            &#125;<br>        &#125;<br><br>        String proxyPkg = <span class="hljs-keyword">null</span>;     <span class="hljs-comment">// package to define proxy class in</span><br>        <span class="hljs-keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 验证所有非公开代理接口是否在同一个包中</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;<br>            <span class="hljs-keyword">int</span> flags = intf.getModifiers();<br>            <span class="hljs-keyword">if</span> (!Modifier.isPublic(flags)) &#123;<br>                accessFlags = Modifier.FINAL;<br>                String name = intf.getName();<br>                <span class="hljs-keyword">int</span> n = name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>);<br>                String pkg = ((n == -<span class="hljs-number">1</span>) ? <span class="hljs-string">&quot;&quot;</span> : name.substring(<span class="hljs-number">0</span>, n + <span class="hljs-number">1</span>));<br>                <span class="hljs-keyword">if</span> (proxyPkg == <span class="hljs-keyword">null</span>) &#123;<br>                    proxyPkg = pkg;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!pkg.equals(proxyPkg)) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                            <span class="hljs-string">&quot;non-public interfaces from different packages&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (proxyPkg == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 如果没有非公开的代理接口，使用 com.sun.proxy package</span><br>            proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="hljs-string">&quot;.&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 为要生成的代理类选择一个名称</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">long</span> num = nextUniqueNumber.getAndIncrement();<br>        String proxyName = proxyPkg + proxyClassNamePrefix + num;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 生成代理类</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> defineClass0(loader, proxyName,<br>                    proxyClassFile, <span class="hljs-number">0</span>, proxyClassFile.length);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassFormatError e) &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * A ClassFormatError here means that (barring bugs in the</span><br><span class="hljs-comment">             * proxy class generation code) there was some other</span><br><span class="hljs-comment">             * invalid aspect of the arguments supplied to the proxy</span><br><span class="hljs-comment">             * class creation (such as virtual machine limitations</span><br><span class="hljs-comment">             * exceeded).</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(e.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.生辰给代理类<br>byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);<br>可以在测试类中添加以下内容打印出代理类:</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">System.setProperty(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);<br></code></pre></td></tr></table></figure><p>代理类内容如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by Fernflower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> com.sun.proxy;<br><br><span class="hljs-keyword">import</span> com.liuzhihang.tool.proxy.jdk.Subject;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.lang.reflect.UndeclaredThrowableException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> $<span class="hljs-title">Proxy0</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Method m1;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Method m3;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Method m2;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Method m4;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Method m0;<br><br>    <span class="hljs-keyword">public</span> $Proxy0(InvocationHandler var1) <span class="hljs-keyword">throws</span>  &#123;<br>        <span class="hljs-keyword">super</span>(var1);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object var1)</span> <span class="hljs-keyword">throws</span>  </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (Boolean)<span class="hljs-keyword">super</span>.h.invoke(<span class="hljs-keyword">this</span>, m1, <span class="hljs-keyword">new</span> Object[]&#123;var1&#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException | Error var3) &#123;<br>            <span class="hljs-keyword">throw</span> var3;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var4) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UndeclaredThrowableException(var4);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (String)<span class="hljs-keyword">super</span>.h.invoke(<span class="hljs-keyword">this</span>, m3, (Object[])<span class="hljs-keyword">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException | Error var2) &#123;<br>            <span class="hljs-keyword">throw</span> var2;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var3) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UndeclaredThrowableException(var3);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (String)<span class="hljs-keyword">super</span>.h.invoke(<span class="hljs-keyword">this</span>, m2, (Object[])<span class="hljs-keyword">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException | Error var2) &#123;<br>            <span class="hljs-keyword">throw</span> var2;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var3) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UndeclaredThrowableException(var3);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getAge</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span>  </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (String)<span class="hljs-keyword">super</span>.h.invoke(<span class="hljs-keyword">this</span>, m4, <span class="hljs-keyword">new</span> Object[]&#123;var1&#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException | Error var3) &#123;<br>            <span class="hljs-keyword">throw</span> var3;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var4) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UndeclaredThrowableException(var4);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (Integer)<span class="hljs-keyword">super</span>.h.invoke(<span class="hljs-keyword">this</span>, m0, (Object[])<span class="hljs-keyword">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException | Error var2) &#123;<br>            <span class="hljs-keyword">throw</span> var2;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var3) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UndeclaredThrowableException(var3);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            m1 = Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="hljs-string">&quot;equals&quot;</span>, Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>));<br>            m3 = Class.forName(<span class="hljs-string">&quot;com.liuzhihang.tool.proxy.jdk.Subject&quot;</span>).getMethod(<span class="hljs-string">&quot;getName&quot;</span>);<br>            m2 = Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="hljs-string">&quot;toString&quot;</span>);<br>            m4 = Class.forName(<span class="hljs-string">&quot;com.liuzhihang.tool.proxy.jdk.Subject&quot;</span>).getMethod(<span class="hljs-string">&quot;getAge&quot;</span>, Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>));<br>            m0 = Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException var2) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchMethodError(var2.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var3) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoClassDefFoundError(var3.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出生成的$Proxy0类继承Proxy动态代理类并实现了Subject被代理接口, 实现所有方法<br>通过 super.h.invoke(this, m1, new Object[]{var1}) 内部调用了 InvocationHandler.invoke(…)方法, 通过反射调用代理实例的方法</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒汉单例模式线程安全</title>
      <link href="2018/02/21/lazy-singleton-mode-thread-safe.html"/>
      <url>2018/02/21/lazy-singleton-mode-thread-safe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>一个类中只有一个实例, 且能够自行实例化提供这个实例, 同时提供全局访问的方法.</p></blockquote><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>1.构造私有化: 确保外部不能使用new直接创建对象<br>2.内部静态属性创建实例<br>3.对外公共静态获取对象方法</p><a id="more"></a><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单例模式</span><br><span class="hljs-comment"> * 1. 构造私有化: 确保外部不能使用new直接创建对象</span><br><span class="hljs-comment"> * 2. 内部静态属性创建实例</span><br><span class="hljs-comment"> * 3. 对外公共静态获取对象方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/3/27 17:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonPattern</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonPattern</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonPattern singletonPattern = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonPattern <span class="hljs-title">getSingletonPattern</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (singletonPattern == <span class="hljs-keyword">null</span>) &#123;<br>            singletonPattern = <span class="hljs-keyword">new</span> SingletonPattern();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> singletonPattern;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>1.懒汉式: 懒汉模式, 项目启动时不生成对象, 而是在首次创建该对象的时候生成唯一实例</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 懒汉模式, 项目启动时不生成对象, 而是在首次创建该对象的时候生成唯一实例</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/4/2 16:24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyPattern</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyPattern</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> LazyPattern lazyPattern = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyPattern <span class="hljs-title">getLazyPattern</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (lazyPattern == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// 模拟一系列耗时操作</span><br>                Thread.sleep(<span class="hljs-number">50</span>);<br>                lazyPattern = <span class="hljs-keyword">new</span> LazyPattern();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> lazyPattern;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.饿汉式: 项目启动时, 进行加载, 会导致项目启动较慢, 并且无论后面是否用到都会进行加载</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 饿汉式单例模式</span><br><span class="hljs-comment"> * 项目启动时, 进行加载, 会导致项目启动较慢, 并且无论后面是否用到都会进行加载</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/4/2 18:44</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HungerPattern</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">HungerPattern</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HungerPattern hungerPattern = <span class="hljs-keyword">new</span> HungerPattern();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HungerPattern <span class="hljs-title">getHungerPattern</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> hungerPattern;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>在多线程情况下对单例模式进行测试:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/3/27 19:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        ThreadTest[] threadTests = <span class="hljs-keyword">new</span> ThreadTest[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; threadTests.length; i++) &#123;<br>            threadTests[i] = <span class="hljs-keyword">new</span> ThreadTest();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; threadTests.length; i++) &#123;<br>            threadTests[i].start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 懒汉模式</span><br>        System.out.println(LazyPattern.getLazyPattern().hashCode());<br>        <span class="hljs-comment">// 饿汉模式</span><br>        <span class="hljs-comment">// System.out.println(HungerPattern.getHungerPattern().hashCode());</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果:</p><p>1.饿汉模式</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">D:\jdk1.8\bin\java.exe . . .<br>1294123621<br>1294123621<br>1294123621<br>1294123621<br>1294123621<br>1294123621<br>1294123621<br>1294123621<br>1294123621<br>1294123621<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure><p>2.懒汉模式</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">D:\jdk1.8\bin\java.exe . . .<br>140919816<br>1359128134<br>1385166630<br>924507082<br>67641385<br>508832262<br>574926395<br>140919816<br>1442414714<br>896298396<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure><p>结论: 在懒汉单例模式下不能保证线程的安全性</p><h3 id="懒汉模式的线程安全优化"><a href="#懒汉模式的线程安全优化" class="headerlink" title="懒汉模式的线程安全优化"></a>懒汉模式的线程安全优化</h3><p>饿汉模式会造成资源浪费, 启动慢等结果, 下面对懒汉模式进行线程安全优化.</p><h4 id="synchronized-锁住静态方法"><a href="#synchronized-锁住静态方法" class="headerlink" title="synchronized 锁住静态方法"></a>synchronized 锁住静态方法</h4><p>锁住静态方法 类级锁 影响范围较大, 导致效率相对较低</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 懒汉式</span><br><span class="hljs-comment"> * 在方法上添加 synchronized 关键字 锁类</span><br><span class="hljs-comment"> * 同步方法的方式, 导致效率相对较低</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/4/3 14:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncLazyPattern</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SyncLazyPattern</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SyncLazyPattern syncLazyPattern = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> SyncLazyPattern <span class="hljs-title">getSyncLazyPattern</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (syncLazyPattern == <span class="hljs-keyword">null</span>) &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>                syncLazyPattern = <span class="hljs-keyword">new</span> SyncLazyPattern();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> syncLazyPattern;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="synchronized-锁住代码块"><a href="#synchronized-锁住代码块" class="headerlink" title="synchronized 锁住代码块"></a>synchronized 锁住代码块</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.demo.singleton;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 锁代码块的方式虽然可以保证结果一致性</span><br><span class="hljs-comment"> * 但锁住很多操作, 同样会导致效率低下</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/4/3 15:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncCodeBlockLazyPattern</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SyncCodeBlockLazyPattern</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SyncCodeBlockLazyPattern syncCodeBlockLazyPattern = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SyncCodeBlockLazyPattern <span class="hljs-title">getSyncCodeBlockLazyPattern</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 锁住具体执行业务逻辑的代码</span><br>            <span class="hljs-keyword">synchronized</span> (SyncCodeBlockLazyPattern.class) &#123;<br>                <span class="hljs-keyword">if</span> (syncCodeBlockLazyPattern == <span class="hljs-keyword">null</span>) &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                    syncCodeBlockLazyPattern = <span class="hljs-keyword">new</span> SyncCodeBlockLazyPattern();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> syncCodeBlockLazyPattern;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双重检查锁机制-推荐"><a href="#双重检查锁机制-推荐" class="headerlink" title="双重检查锁机制(推荐)"></a>双重检查锁机制(推荐)</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.demo.singleton;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 双重锁检查机制, 仅锁住创建对象的部分代码</span><br><span class="hljs-comment"> * 注意: 在对象前 添加 volatile 关键字 确保可见性, 即 每次获取值从主内存中获取, 同时防止指令重排序</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/4/3 15:29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DubboCheckLockLazyPattern</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">DubboCheckLockLazyPattern</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> DubboCheckLockLazyPattern dubboCheckLockLazyPattern = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DubboCheckLockLazyPattern <span class="hljs-title">getDubboCheckLockLazyPattern</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (dubboCheckLockLazyPattern == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// 一系列操作</span><br>                Thread.sleep(<span class="hljs-number">100</span>);<br>                <span class="hljs-keyword">synchronized</span> (DubboCheckLockLazyPattern.class) &#123;<br>                    <span class="hljs-comment">// 二次检查</span><br>                    <span class="hljs-keyword">if</span> (dubboCheckLockLazyPattern == <span class="hljs-keyword">null</span>) &#123;<br>                        dubboCheckLockLazyPattern = <span class="hljs-keyword">new</span> DubboCheckLockLazyPattern();<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dubboCheckLockLazyPattern;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poi读写Excel简单介绍</title>
      <link href="2018/02/15/poi-read-and-write-excel-brief-introduction.html"/>
      <url>2018/02/15/poi-read-and-write-excel-brief-introduction.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Apache POI 可以对Microsoft Office 进行操作, 下面是工作中使用的对Excel进行读写操作的常用方式.</p></blockquote><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- excel poi --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><a id="more"></a><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>主要介绍读写时, 分别常用到的一些对象及其含义, 方便自己编写util.</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.tool.excel.poi;<br><br><span class="hljs-keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Row;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Sheet;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Workbook;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/4/20 16:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExcelTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// readerTest();</span><br>        writerTest();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writerTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;c:Users/liuzhihang/Desktop/test.xlsx&quot;</span>);<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;读取的文件存在!&quot;</span>);<br>            file.delete();<br>        &#125;<br>        file.createNewFile();<br>        <span class="hljs-comment">// 操作 .xls 的 workbook</span><br>        Workbook hssfWorkbook = <span class="hljs-keyword">new</span> HSSFWorkbook();<br>        <span class="hljs-comment">// 操作 .xlsx 的 workbook</span><br>        XSSFWorkbook xssfWorkbook = <span class="hljs-keyword">new</span> XSSFWorkbook();<br><br>        <span class="hljs-comment">// 创建 sheet 页</span><br>        XSSFSheet sheet = xssfWorkbook.createSheet();<br>        <span class="hljs-comment">// 创建 0 行 操作对象</span><br>        Row row0 = sheet.createRow(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 创建单元格并赋值</span><br>        row0.createCell(<span class="hljs-number">0</span>).setCellValue(<span class="hljs-string">&quot;序号&quot;</span>);<br><br>        OutputStream outputStream = <span class="hljs-keyword">new</span> FileOutputStream(file);<br>        <span class="hljs-comment">// 写入文件</span><br>        xssfWorkbook.write(outputStream);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readerTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;c:Users/liuzhihang/Desktop/parkingLotTempLate.xlsx&quot;</span>);<br><br>        Workbook workBook = ExcelUtil.getWorkBook(file);<br><br>        <span class="hljs-comment">// 获取 excel 页</span><br>        <span class="hljs-comment">// Sheet sheetByIndex = workBook.getSheetAt(0);</span><br>        <span class="hljs-comment">// Sheet sheetByName = workBook.getSheet(&quot;Sheet0&quot;);</span><br><br>        <span class="hljs-comment">// 操作 sheet</span><br>        Sheet sheet = workBook.getSheetAt(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 获取最后一行行数 从 0 开始</span><br>        <span class="hljs-keyword">int</span> lastRowNum = sheet.getLastRowNum();<br>        <span class="hljs-comment">// 获取总行数</span><br>        <span class="hljs-keyword">int</span> physicalNumberOfRows = sheet.getPhysicalNumberOfRows();<br><br>        <span class="hljs-comment">// 操作行 获取第0行</span><br>        Row row = sheet.getRow(<span class="hljs-number">0</span>);<br>        String value = row.getCell(<span class="hljs-number">0</span>).getStringCellValue();<br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="ExcelUtil-简单工具"><a href="#ExcelUtil-简单工具" class="headerlink" title="ExcelUtil 简单工具"></a>ExcelUtil 简单工具</h3><p>poi读写 excel 的简单工具 <a href="https://github.com/liuzhihang/my_project/blob/master/my_project_tool/src/main/java/com/liuzhihang/tool/excel/poi/ExcelUtil.java">ExcelUtil</a>, 实际工作中可结合javaBean使用并重新编写util.</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.tool.excel.poi;<br><br><span class="hljs-keyword">import</span> lombok.extern.log4j.Log4j2;<br><span class="hljs-keyword">import</span> org.apache.commons.lang.StringUtils;<br><span class="hljs-keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Cell;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Row;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Sheet;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Workbook;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/4/20 12:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Log4j2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExcelUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取两列excel 返回第二列的集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> workbook</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">readExcelForTwoColumns</span><span class="hljs-params">(Workbook workbook)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (workbook == <span class="hljs-keyword">null</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;获取 workbook 为null&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Sheet sheet = workbook.getSheetAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-comment">//获取总行数</span><br>            <span class="hljs-keyword">int</span> rowNum = sheet.getLastRowNum();<br>            <span class="hljs-comment">//正文内容应该从第二行开始，第一行为文件的标头的标题</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rowNum; i++) &#123;<br>                Row row = sheet.getRow(i + <span class="hljs-number">1</span>);<br>                String value = getCellValue(row.getCell(<span class="hljs-number">1</span>)).toString();<br>                <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(value)) &#123;<br>                    list.add(value);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(e.getMessage());<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写 excel</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> excelFile</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writerExcelForTwoColumns</span><span class="hljs-params">(File excelFile, List&lt;String&gt; list)</span> </span>&#123;<br><br>        OutputStream outputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            outputStream = <span class="hljs-keyword">new</span> FileOutputStream(excelFile);<br><br>            Workbook workBook = <span class="hljs-keyword">null</span>;<br>            String fileName = excelFile.getName();<br>            <span class="hljs-keyword">if</span> (fileName.endsWith(<span class="hljs-string">&quot;.xls&quot;</span>)) &#123;<br>                workBook = <span class="hljs-keyword">new</span> HSSFWorkbook();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fileName.endsWith(<span class="hljs-string">&quot;.xlsx&quot;</span>)) &#123;<br>                workBook = <span class="hljs-keyword">new</span> XSSFWorkbook();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                log.info(<span class="hljs-string">&quot;文件格式不正确!, 当前文件名:&#123;&#125;&quot;</span>, fileName);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;文件格式不正确&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 创建第 0 页</span><br>            Sheet sheet = workBook.createSheet();<br>            Row row1 = sheet.createRow(<span class="hljs-number">0</span>);<br>            row1.createCell(<span class="hljs-number">0</span>).setCellValue(<span class="hljs-string">&quot;序号&quot;</span>);<br>            row1.createCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;编号&quot;</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>                Row row = sheet.createRow(i + <span class="hljs-number">1</span>);<br>                row.createCell(<span class="hljs-number">0</span>).setCellValue(i + <span class="hljs-number">1</span>);<br>                row.createCell(<span class="hljs-number">1</span>).setCellValue(list.get(i));<br>            &#125;<br><br>            workBook.write(outputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;写excel失败&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                outputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取工作表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Workbook <span class="hljs-title">getWorkBook</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        String fileName = file.getName();<br>        Workbook workbook = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(file);<br>            <span class="hljs-keyword">if</span> (fileName.endsWith(<span class="hljs-string">&quot;.xls&quot;</span>)) &#123;<br>                workbook = <span class="hljs-keyword">new</span> HSSFWorkbook(inputStream);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fileName.endsWith(<span class="hljs-string">&quot;.xlsx&quot;</span>)) &#123;<br>                workbook = <span class="hljs-keyword">new</span> XSSFWorkbook(inputStream);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                log.info(<span class="hljs-string">&quot;文件格式不正确!, 当前文件名:&#123;&#125;&quot;</span>, fileName);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;文件格式不正确&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>        <span class="hljs-keyword">return</span> workbook;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取单元格的数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cell</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getCellValue</span><span class="hljs-params">(Cell cell)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (cell != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">switch</span> (cell.getCellTypeEnum()) &#123;<br>                <span class="hljs-comment">// 数字</span><br>                <span class="hljs-keyword">case</span> NUMERIC:<br>                    <span class="hljs-keyword">return</span> cell.getNumericCellValue();<br>                <span class="hljs-comment">// 字符串</span><br>                <span class="hljs-keyword">case</span> STRING:<br>                    <span class="hljs-keyword">return</span> cell.getStringCellValue();<br>                <span class="hljs-comment">// 公式</span><br>                <span class="hljs-keyword">case</span> FORMULA:<br>                    <span class="hljs-keyword">return</span> cell.getCellFormula();<br>                <span class="hljs-comment">// 布尔</span><br>                <span class="hljs-keyword">case</span> BOOLEAN:<br>                    <span class="hljs-keyword">return</span> cell.getBooleanCellValue();<br>                <span class="hljs-keyword">case</span> ERROR:<br>                    <span class="hljs-keyword">return</span> cell.getErrorCellValue();<br>                <span class="hljs-comment">// 空</span><br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poi </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>protostuff序列化工具</title>
      <link href="2018/02/05/protostuff-serialization-tool.html"/>
      <url>2018/02/05/protostuff-serialization-tool.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在很多地方都需要用到序列化, 比如在使用redis缓存对象时, 一般情况是实现java Serializable接口. 简单介绍下在慕课网学习到的一个新的序列化工具 —- protostuff.</p><p>在学习中介绍使用该工具可以大大减少对象序列化后字节所占空间, 并提高序列化时间等.</p><p>1.<a href="https://www.imooc.com/video/11823">慕课网课程地址</a><br>2.<a href="https://github.com/eishay/jvm-serializers/wiki">序列化相关工具比较</a></p><a id="more"></a><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- protostuff 序列化工具 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>protostuff-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>protostuff-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="相关使用"><a href="#相关使用" class="headerlink" title="相关使用"></a>相关使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.dyuproject.protostuff.LinkedBuffer;<br><span class="hljs-keyword">import</span> com.dyuproject.protostuff.ProtostuffIOUtil;<br><span class="hljs-keyword">import</span> com.dyuproject.protostuff.runtime.RuntimeSchema;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/4/18 15:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProtostuffUtil</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">byte</span>[] serialize(T t, Class&lt;T&gt; cls) &#123;<br><br>        RuntimeSchema&lt;T&gt; schema = RuntimeSchema.createFrom(cls);<br><br>        <span class="hljs-keyword">return</span> ProtostuffIOUtil.toByteArray(t, schema, LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">unSerialize</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] bytes, Class&lt;T&gt; cls)</span> </span>&#123;<br><br>        RuntimeSchema&lt;T&gt; schema = RuntimeSchema.createFrom(cls);<br>        T message = schema.newMessage();<br>        ProtostuffIOUtil.mergeFrom(bytes, message, schema);<br><br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/4/17 19:01</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-keyword">private</span> String userName;<br><br>&#125;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/4/17 19:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProtostuffTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(<span class="hljs-string">&quot;test0001&quot;</span>);<br>        user.setUserName(<span class="hljs-string">&quot;测试用户0001&quot;</span>);<br><br>        System.out.println(JSON.toJSONString(user));<br><br>        <span class="hljs-keyword">byte</span>[] serialize = ProtostuffUtil.serialize(user, User.class);<br><br>        User unSerialize = ProtostuffUtil.unSerialize(serialize, User.class);<br><br>        System.err.println(JSON.toJSONString(unSerialize));<br><br>    &#125;<br><br>&#125;<br><br>结果:<br>&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;test0001&quot;</span>,<span class="hljs-string">&quot;userName&quot;</span>:<span class="hljs-string">&quot;测试用户0001&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;test0001&quot;</span>,<span class="hljs-string">&quot;userName&quot;</span>:<span class="hljs-string">&quot;测试用户0001&quot;</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> serialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transactional声明式事务</title>
      <link href="2018/01/27/transactional-declarative-transaction.html"/>
      <url>2018/01/27/transactional-declarative-transaction.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>1.声明式事务管理建立在AOP之上的. 其本质是对方法前后进行拦截, 然后在目标方法开始之前创建或者加入一个事务, 在执行完目标方法之后根据执行情况提交或者回滚事务.<br>2.声明式事务最大的优点就是不需要通过编程的方式管理事务, 这样就不需要在业务逻辑代码中掺杂事务管理的代码, 只需在配置文件中做相关的事务规则声明(或通过基于@Transactional注解的方式), 便可以将事务规则应用到业务逻辑中.<br>3.声明式事务不足的地方在于, 与编程式事务相比, 只能作用到方法级别, 无法像编程式事务那样可以作用到代码块级别.</p><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><p>1.添加命名空间</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span>  <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">.</span> <span class="hljs-attr">.</span> <span class="hljs-attr">.</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-tag"><span class="hljs-string">        . . .</span></span><br><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/tx</span></span><br><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.添加相关事务支持</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指向数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;masterDataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开启事务的Annotation支持 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Transactional注解-使用"><a href="#Transactional注解-使用" class="headerlink" title="@Transactional注解 使用"></a>@Transactional注解 使用</h3><p>@Transactional 可以作用于接口,接口方法,类以及类方法上. 只需要在相应接口,类或方法上加上@Transactional注解即可.</p><h3 id="Transactional-注解介绍"><a href="#Transactional-注解介绍" class="headerlink" title="@Transactional 注解介绍"></a>@Transactional 注解介绍</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.transaction.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Documented;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Inherited;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-keyword">import</span> org.springframework.core.annotation.AliasFor;<br><span class="hljs-keyword">import</span> org.springframework.transaction.TransactionDefinition;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Isolation;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Propagation;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;) : 可用于接口, 类, 枚举, 注解, 方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Retention</span>(RetentionPolicy.RUNTIME) : 注解会在class字节码文件中存在，在运行时可以通过反射获取到</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Inherited</span> :　子类可以继承父类中的注解</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Documented</span> : 注解将被包含在javadoc中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Transactional &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 事务管理器的别名</span><br><span class="hljs-comment">     * 系统指定多个事务管理器时可通过别名进行区分</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AliasFor(&quot;transactionManager&quot;)</span><br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 可通过在 transactionManager 中设置 &lt;qualifier value=&quot;managerOne&quot;/&gt; 属性类指定名称</span><br><span class="hljs-comment">     * 可用于确定目标事务管理器，匹配特定的限定符值（或bean名称）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AliasFor(&quot;value&quot;)</span><br>    <span class="hljs-function">String <span class="hljs-title">transactionManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 事务的传播机制</span><br><span class="hljs-comment">     * 默认 Propagation.REQUIRED</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Propagation <span class="hljs-title">propagation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Propagation.REQUIRED</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 事务的隔离级别</span><br><span class="hljs-comment">     * 默认 Isolation.DEFAULT</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Isolation <span class="hljs-title">isolation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Isolation.DEFAULT</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 事务超时时间</span><br><span class="hljs-comment">     * 默认 TransactionDefinition.TIMEOUT_DEFAULT 即 -1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">timeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> TransactionDefinition.TIMEOUT_DEFAULT</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置事务只读</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">readOnly</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">false</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚</span><br><span class="hljs-comment">     * rollbackFor = Exception.class 或 rollbackFor = &#123;RuntimeException.class, Exception.class&#125;</span><br><span class="hljs-comment">     */</span><br>    Class&lt;? extends Throwable&gt;[] rollbackFor() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时, 事务进行回滚</span><br><span class="hljs-comment">     */</span><br>    String[] rollbackForClassName() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则不进行事务回滚</span><br><span class="hljs-comment">     */</span><br>    Class&lt;? extends Throwable&gt;[] noRollbackFor() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时, 事务不进行回滚</span><br><span class="hljs-comment">     */</span><br>    String[] noRollbackForClassName() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="传播行为介绍"><a href="#传播行为介绍" class="headerlink" title="传播行为介绍"></a>传播行为介绍</h3><p>事务的传播行为, 一共 7 种<br>1.枚举介绍</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.transaction.annotation;<br><br><span class="hljs-keyword">import</span> org.springframework.transaction.TransactionDefinition;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Propagation</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支持当前事务, 如果不存在, 则创建一个新事务</span><br><span class="hljs-comment">     * 事务的默认设置</span><br><span class="hljs-comment">     */</span><br>    REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支持当前事务, 如果不存在, 则以非事务方式执行</span><br><span class="hljs-comment">     */</span><br>    SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支持当前事务, 如果不存在则抛出异常</span><br><span class="hljs-comment">     */</span><br>    MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开始一个新的事务, 并暂停当前事务(如果存在)</span><br><span class="hljs-comment">     */</span><br>    REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 以非事务方式执行, 暂停当前事务(如果存在)</span><br><span class="hljs-comment">     */</span><br>    NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 以非事务方式执行, 如果存在则抛出异常</span><br><span class="hljs-comment">     */</span><br>    NEVER(TransactionDefinition.PROPAGATION_NEVER),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果当前事务存在, 则在嵌套事务中执行.</span><br><span class="hljs-comment">     * 如果事务不存在, 则等同于 PROPAGATION_REQUIRED</span><br><span class="hljs-comment">     */</span><br>    NESTED(TransactionDefinition.PROPAGATION_NESTED);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> value;<br><br>    Propagation(<span class="hljs-keyword">int</span> value) &#123; <span class="hljs-keyword">this</span>.value = value; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">value</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value; &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.列表</p><table><thead><tr><th>Propagation</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED</td><td>支持当前事务, 如果不存在, 则创建一个新事务</td></tr><tr><td>SUPPORTS</td><td>支持当前事务, 如果不存在, 则以非事务方式执行</td></tr><tr><td>MANDATORY</td><td>支持当前事务, 如果不存在则抛出异常</td></tr><tr><td>REQUIRES_NEW</td><td>开始一个新的事务, 并暂停当前事务(如果存在)</td></tr><tr><td>NOT_SUPPORTED</td><td>以非事务方式执行, 暂停当前事务(如果存在)</td></tr><tr><td>NEVER</td><td>以非事务方式执行, 如果存在则抛出异常</td></tr><tr><td>NESTED</td><td>如果当前事务存在, 则在嵌套事务中执行. 如果事务不存在, 则等同于 PROPAGATION_REQUIRED</td></tr></tbody></table><h3 id="隔离级别介绍"><a href="#隔离级别介绍" class="headerlink" title="隔离级别介绍"></a>隔离级别介绍</h3><p>1.枚举介绍</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.transaction.annotation;<br><br><span class="hljs-keyword">import</span> org.springframework.transaction.TransactionDefinition;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Isolation</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用底层数据存储默认的隔离级别</span><br><span class="hljs-comment">     * 一般存储底层默认为: READ_COMMITTED</span><br><span class="hljs-comment">     */</span><br>    DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读未提交</span><br><span class="hljs-comment">     * 会出现脏读和不可重复读, 一般不使用</span><br><span class="hljs-comment">     */</span><br>    READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读已提交</span><br><span class="hljs-comment">     * 该级别仅禁止事务读取其中未提交更改的行</span><br><span class="hljs-comment">     * 可能会出现不可重复读取和幻像读取</span><br><span class="hljs-comment">     */</span><br>    READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 可重复读</span><br><span class="hljs-comment">     * 禁止事务读取其中有未提交更改的行, 并且还禁止一个事务读取一行, 第二个事务更改该行. 并且第一个事务重新读取该行, 第二次获取不同值的情况</span><br><span class="hljs-comment">     * 即 禁止 读未提交, 不可重复读</span><br><span class="hljs-comment">     * 会出现幻读</span><br><span class="hljs-comment">     */</span><br>    REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 串行</span><br><span class="hljs-comment">     * 所有事物依次执行, 不会影响别的事务, 所以会防止 不可重复读 脏读 幻读</span><br><span class="hljs-comment">     * 会影响性能</span><br><span class="hljs-comment">     */</span><br>    SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> value;<br><br>    Isolation(<span class="hljs-keyword">int</span> value) &#123; <span class="hljs-keyword">this</span>.value = value; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">value</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value; &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.列表</p><table><thead><tr><th>Isolation</th><th>含义</th></tr></thead><tbody><tr><td>DEFAULT</td><td>使用底层数据存储默认的隔离级别, 一般存储底层默认为: READ_COMMITTED</td></tr><tr><td>READ_UNCOMMITTED</td><td>读未提交, 会出现脏读和不可重复读, 一般不使用</td></tr><tr><td>READ_COMMITTED</td><td>该级别仅禁止事务读取其中未提交更改的行. 可能会出现不可重复读取和幻像读取</td></tr><tr><td>REPEATABLE_READ</td><td>可重复读, 禁止事务读取其中有未提交更改的行, 并且还禁止一个事务读取一行, 第二个事务更改该行. 并且第一个事务重新读取该行, 第二次获取不同值的情况. 即 禁止 读未提交, 不可重复读. 会出现幻读</td></tr><tr><td>SERIALIZABLE</td><td>串行, 所有事物依次执行, 不会影响别的事务, 所以会防止 不可重复读 脏读 幻读. 会影响性能</td></tr></tbody></table><p>3.脏读 幻读 不可重复读</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>脏读</td><td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</td></tr><tr><td>幻读</td><td>事务读取时不存在该数据, 读取后发现该数据存在. 中间因为别的事务在进行插入操作</td></tr><tr><td>不可重复读</td><td>一个事务在读取该数据时另一个事务在修改该数据, 导致多次读取数据内容不一致</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> transactional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数包装类型的缓存</title>
      <link href="2018/01/15/integer-wrapper-type-cache.html"/>
      <url>2018/01/15/integer-wrapper-type-cache.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>部分包装类型存在缓存机制, 会在JVM启动时, 缓存一定数量的对象, 有助于节省内存, 提高性能.</p></blockquote><h3 id="缓存区间"><a href="#缓存区间" class="headerlink" title="缓存区间"></a>缓存区间</h3><table><thead><tr><th>类型</th><th>范围</th><th>是否修改</th></tr></thead><tbody><tr><td>Integer</td><td>-128 到 127</td><td>true : -XX:AutoBoxCacheMax=size 修改</td></tr><tr><td>ByteCache</td><td>-128 到 127</td><td>false</td></tr><tr><td>ShortCache</td><td>-128 到 127</td><td>false</td></tr><tr><td>LongCache</td><td>-128 到 127</td><td>false</td></tr><tr><td>CharacterCache</td><td>0 到 127</td><td>false</td></tr></tbody></table><a id="more"></a><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Integer a = <span class="hljs-number">100</span>;<br>Integer b = <span class="hljs-number">100</span>;<br>Integer c = <span class="hljs-number">1000</span>;<br>Integer d = <span class="hljs-number">1000</span>;<br>Integer e = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">100</span>);<br>Integer f = Integer.valueOf(<span class="hljs-number">100</span>);<br><br>System.out.println(a == b); <span class="hljs-comment">// true</span><br>System.out.println(c == d); <span class="hljs-comment">// false</span><br>System.out.println(a == e); <span class="hljs-comment">// false</span><br>System.out.println(f == e); <span class="hljs-comment">// false</span><br>System.out.println(a == f); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>== 在比较对象时, 判断是否指向同一地址</p><p>a b f 都是从缓存中取出数据, 所以地址是相同的</p><p>c d 不在缓存范围内, 所以是新的对象</p><p>e 是新对象</p><h3 id="IntegerCache"><a href="#IntegerCache" class="headerlink" title="IntegerCache"></a>IntegerCache</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerCache</span> </span>&#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> low = -<span class="hljs-number">128</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> high;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];<br><br>        <span class="hljs-keyword">static</span> &#123;<br>            <span class="hljs-comment">// high value may be configured by property</span><br>            <span class="hljs-keyword">int</span> h = <span class="hljs-number">127</span>;<br>            String integerCacheHighPropValue =<br>                sun.misc.VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>            <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">int</span> i = parseInt(integerCacheHighPropValue);<br>                    i = Math.max(i, <span class="hljs-number">127</span>);<br>                    <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                    <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>                &#125;<br>            &#125;<br>            high = h;<br><br>            cache = <span class="hljs-keyword">new</span> Integer[(high - low) + <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">int</span> j = low;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; cache.length; k++)<br>                cache[k] = <span class="hljs-keyword">new</span> Integer(j++);<br><br>            <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span><br>            <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">IntegerCache</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以通过设置 java.lang.Integer.IntegerCache.high 来修改缓存的值. 方法为修改 JVM 的启动参数 -XX:AutoBoxCacheMax=size</p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interceptor拦截器</title>
      <link href="2018/01/10/interceptor.html"/>
      <url>2018/01/10/interceptor.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Interceptor: 拦截器，作用类似 Filter, 主要作用是拦截用户请求, 在 Action 执行的前后各执行一段代码, 进行相应的业务处理.</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>权限认证<br>统一逻辑处理<br>日志监控等</p><a id="more"></a><h3 id="使用方式及方法介绍"><a href="#使用方式及方法介绍" class="headerlink" title="使用方式及方法介绍"></a>使用方式及方法介绍</h3><p>使用方式分为两种, 一种为: 实现HandlerInterceptor接口或者是继承实现了HandlerInterceptor接口的类, 另一种为: 实现Spring的WebRequestInterceptor接口, 或者是继承实现了WebRequestInterceptor的类.<br>1.HandlerInterceptor 介绍</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求处理之前调用 链式 会按照声明顺序依次执行</span><br><span class="hljs-comment">     * 返回 true 则继续执行下一个 Interceptor 无则执行 Controller</span><br><span class="hljs-comment">     * 返回 false 请求结束</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在请求处理之后，DispatcherServlet进行视图返回渲染之前进行调用，可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作。</span><br><span class="hljs-comment">     * 调度程序Servlet在执行链中处理一个处理程序，由任意数量的拦截器组成，处理器本身在最后。 使用这种方法，每个拦截器可以后处理一个执行，并按照执行链的相反顺序进行应用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求处理完成后的回调，即渲染视图后的回调。 将被调用处理程序执行的任何结果，从而允许适当的资源清理。</span><br><span class="hljs-comment">     * 注意：只有当这个拦截器的预处理方法已经成功完成并返回时才会被调用</span><br><span class="hljs-comment">     * 与postHandle方法一样，该方法将以相反的顺序在链中的每个拦截器上调用，因此第一个拦截器将成为最后被调用的拦截器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.WebRequestInterceptor 介绍</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.context.request;<br><br><span class="hljs-keyword">import</span> org.springframework.ui.ModelMap;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.WebRequest;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">WebRequestInterceptor</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在调用之前拦截请求处理程序的执行。 允许准备上下文资源（如Hibernate Session）并将它们公开为请求属性或线程本地对象.</span><br><span class="hljs-comment">     * 即 准备一些需要的资源, 例如, 将请求属性放置到 WebRequest 中</span><br><span class="hljs-comment">     * 无返回对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(WebRequest request)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在视图呈现前（如果有的话）在成功调用之后拦截请求处理程序的执行。</span><br><span class="hljs-comment">     * 允许在成功处理程序执行后修改上下文资源（例如，刷新休眠会话）</span><br><span class="hljs-comment">     * 可以通过修改 ModelMap 的属性来改变你返回的试图模型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(WebRequest request, ModelMap model)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 求处理完成后的回调，即渲染视图后的回调。 将被调用处理程序执行的任何结果，从而允许适当的资源清理。</span><br><span class="hljs-comment">     * 注意：只有在拦截器的预处理方法成功完成时才会调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(WebRequest request, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="xml-配置"><a href="#xml-配置" class="headerlink" title="xml 配置"></a>xml 配置</h3><p>1.在 *-servlet.xml 中添加 MVC schema</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;<br>xsi:schemaLocation=&quot; http://www.springframework.org/schema/mvc<br>http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd&quot;<br></code></pre></td></tr></table></figure><p>2.配置 mvc:interceptors 标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 拦截路径 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定拦截器 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.liuzhihang.myprojext.controller.interceptor.RequestInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.myprojext.controller.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 处理逻辑</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> interceptor </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>utils工具--ValidationUtil 参数校验</title>
      <link href="2017/12/30/utils-tool-validationutil-parameter-check.html"/>
      <url>2017/12/30/utils-tool-validationutil-parameter-check.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在工作中不可避免的要面对很多参数校验, 比如写新接口时需要对传入VO的必要字段进行校验, String 是否为空, Integer 最小值, 对象是否为null, 等等.<br>而使用 hibernate的validator工具对参数进行校验, 可以极大的简化流程, 当然不可避免的就是需要在被校验字段上加上注解信息.</p><h6 id="1-相关依赖"><a href="#1-相关依赖" class="headerlink" title="1. 相关依赖"></a>1. 相关依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 参数校验工具 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.4.2.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.web<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>el-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><a id="more"></a><h6 id="2-ValidationUtil"><a href="#2-ValidationUtil" class="headerlink" title="2. ValidationUtil"></a>2. ValidationUtil</h6><p>对加上相关注解字段进行校验, 使用到 <a href="https://github.com/liuzhihang/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/xml/JaxbUtil.java">ValidationUtil.java</a>和<a href="https://github.com/liuzhihang/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/validate/ValidationResult.java">ValidationResult.java</a>两个文件, 也可在工具中直接抛出异常.</p><p>ValidationUtil 内容如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.tool.validate;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.CollectionUtils;<br><br><span class="hljs-keyword">import</span> javax.validation.ConstraintViolation;<br><span class="hljs-keyword">import</span> javax.validation.Validation;<br><span class="hljs-keyword">import</span> javax.validation.Validator;<br><span class="hljs-keyword">import</span> java.beans.IntrospectionException;<br><span class="hljs-keyword">import</span> java.beans.Introspector;<br><span class="hljs-keyword">import</span> java.beans.PropertyDescriptor;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对添加 hibernate.validator 注解的字段进行校验</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 使用前 需要引入 hibernate-validator 依赖</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2017/11/22 11:08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValidationUtil</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Validator validator = Validation.buildDefaultValidatorFactory().getValidator();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 会 验证 所有字段</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回所有不符合的信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ValidationResult <span class="hljs-title">validateAllField</span><span class="hljs-params">(T obj)</span> </span>&#123;<br>        ValidationResult result = <span class="hljs-keyword">new</span> ValidationResult(<span class="hljs-keyword">true</span>);<br>        StringBuilder errorMsg = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-keyword">null</span>) &#123;<br>            result.setHasPass(<span class="hljs-keyword">false</span>);<br>            result.setErrorMsg(<span class="hljs-string">&quot;The class is null!&quot;</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        Set&lt;ConstraintViolation&lt;T&gt;&gt; violationSet = validator.validate(obj);<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isNotEmpty(violationSet)) &#123;<br>            <span class="hljs-keyword">for</span> (ConstraintViolation&lt;T&gt; violation : violationSet) &#123;<br>                errorMsg.append(violation.getMessage());<br>            &#125;<br>            result.setHasPass(<span class="hljs-keyword">false</span>);<br>            result.setErrorMsg(errorMsg.toString());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证指定字段 是否符合信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fieldName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ValidationResult <span class="hljs-title">validateOneField</span><span class="hljs-params">(T obj, String fieldName)</span> </span>&#123;<br>        ValidationResult result = <span class="hljs-keyword">new</span> ValidationResult(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-keyword">null</span>) &#123;<br>            result.setHasPass(<span class="hljs-keyword">false</span>);<br>            result.setErrorMsg(<span class="hljs-string">&quot;The class is null!&quot;</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        Set&lt;ConstraintViolation&lt;T&gt;&gt; violationSet = validator.validateProperty(obj, fieldName);<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isNotEmpty(violationSet)) &#123;<br>            <span class="hljs-keyword">for</span> (ConstraintViolation&lt;T&gt; violation : violationSet) &#123;<br>                result.setHasPass(<span class="hljs-keyword">false</span>);<br>                result.setErrorMsg(violation.getMessage());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证 所有字段, 当第一个不符合时 则直接返回信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ValidationResult <span class="hljs-title">validateAllFieldForOneBack</span><span class="hljs-params">(T obj)</span> </span>&#123;<br>        ValidationResult result = <span class="hljs-keyword">new</span> ValidationResult(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-keyword">null</span>) &#123;<br>            result.setHasPass(<span class="hljs-keyword">false</span>);<br>            result.setErrorMsg(<span class="hljs-string">&quot;The class is null!&quot;</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            PropertyDescriptor[] propertyDescriptors = Introspector.getBeanInfo(obj.getClass()).getPropertyDescriptors();<br>            <span class="hljs-keyword">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) &#123;<br>                result = validateOneField(obj, propertyDescriptor.getName());<br>                <span class="hljs-keyword">if</span> (result.getHasPass()) &#123;<br>                    <span class="hljs-keyword">return</span> result;<br>                &#125;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IntrospectionException e) &#123;<br>            result.setHasPass(<span class="hljs-keyword">false</span>);<br>            result.setErrorMsg(<span class="hljs-string">&quot;This validate has error : &quot;</span> + e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>ValidationResult 内容如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.tool.validate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2018/1/6 17:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValidationResult</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Boolean hasPass;<br><br>    <span class="hljs-keyword">private</span> String errorMsg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ValidationResult</span><span class="hljs-params">(Boolean hasPass)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.hasPass = hasPass;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">getHasPass</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> hasPass;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHasPass</span><span class="hljs-params">(Boolean hasPass)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.hasPass = hasPass;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getErrorMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> errorMsg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setErrorMsg</span><span class="hljs-params">(String errorMsg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.errorMsg = errorMsg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ValidationResult&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;hasPass=&quot;</span> + hasPass +<br>                <span class="hljs-string">&quot;, errorMsg=&#x27;&quot;</span> + errorMsg + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="3-常用注解"><a href="#3-常用注解" class="headerlink" title="3. 常用注解"></a>3. 常用注解</h6><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Bean Validation 中内置的 constraint<br>@Null   被注释的元素必须为 null<br>@NotNull    被注释的元素必须不为 null<br>@AssertTrue     被注释的元素必须为 true<br>@AssertFalse    被注释的元素必须为 false<br>@Min(value)     被注释的元素必须是一个数字，其值必须大于等于指定的最小值<br>@Max(value)     被注释的元素必须是一个数字，其值必须小于等于指定的最大值<br>@DecimalMin(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值<br>@DecimalMax(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值<br>@Size(max&#x3D;, min&#x3D;)   被注释的元素的大小必须在指定的范围内<br>@Digits (integer, fraction)     被注释的元素必须是一个数字，其值必须在可接受的范围内<br>@Past   被注释的元素必须是一个过去的日期<br>@Future     被注释的元素必须是一个将来的日期<br>@Pattern(regex&#x3D;,flag&#x3D;)  被注释的元素必须符合指定的正则表达式<br><br>Hibernate Validator 附加的 constraint<br>@NotBlank(message &#x3D;)   验证字符串非null，且长度必须大于0<br>@Email  被注释的元素必须是电子邮箱地址<br>@Length(min&#x3D;,max&#x3D;)  被注释的字符串的大小必须在指定的范围内<br>@NotEmpty   被注释的字符串的必须非空<br>@Range(min&#x3D;,max&#x3D;,message&#x3D;)  被注释的元素必须在合适的范围内<br></code></pre></td></tr></table></figure><h6 id="4-测试示例"><a href="#4-测试示例" class="headerlink" title="4 测试示例"></a>4 测试示例</h6><p><a href="https://github.com/liuzhihang/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/validate/ValidationVo.java">代码</a>:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.tool.validate;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.hibernate.validator.constraints.NotBlank;<br><span class="hljs-keyword">import</span> org.hibernate.validator.constraints.NotEmpty;<br><span class="hljs-keyword">import</span> javax.validation.constraints.Min;<br><span class="hljs-keyword">import</span> javax.validation.constraints.NotNull;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2017/11/22 18:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValidationVo</span> </span>&#123;<br><br>    <span class="hljs-meta">@NotBlank(message = &quot;The name must notEmpty!&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@NotNull(message = &quot;The age must notNull!&quot;)</span><br>    <span class="hljs-meta">@Min(value = 1, message = &quot;The age must greater than 0!&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ValidationVo validationVo = <span class="hljs-keyword">new</span> ValidationVo();<br>        System.out.println(ValidationUtil.validateAllField(validationVo).toString());<br>        validationVo.setAge(<span class="hljs-number">1</span>);<br>        System.out.println(ValidationUtil.validateAllField(validationVo).toString());<br>        validationVo.setName(<span class="hljs-string">&quot;二蛋&quot;</span>);<br>        System.out.println(ValidationUtil.validateAllField(validationVo).toString());<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">ValidationResult&#123;hasPass&#x3D;false, errorMsg&#x3D;&#39;The name must notEmpty!The age must notNull!&#39;&#125;<br>ValidationResult&#123;hasPass&#x3D;false, errorMsg&#x3D;&#39;The name must notEmpty!&#39;&#125;<br>ValidationResult&#123;hasPass&#x3D;true, errorMsg&#x3D;&#39;null&#39;&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> validation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml解析--dom4j</title>
      <link href="2017/12/30/xml-parsing-dom4j.html"/>
      <url>2017/12/30/xml-parsing-dom4j.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在工作中有时候会用到dom4j对xml文件或者字符串进行解析, 以下内容为随手笔记, 防止以后遗忘.</p><h5 id="1-相关依赖"><a href="#1-相关依赖" class="headerlink" title="1. 相关依赖"></a>1. 相关依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- dom4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><a id="more"></a><h5 id="2-获取dom对象"><a href="#2-获取dom对象" class="headerlink" title="2. 获取dom对象"></a>2. 获取dom对象</h5><p>获取dom对象方式主要以下几种:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 读取 xml 文件 方式</span><br>SAXReader reader = <span class="hljs-keyword">new</span> SAXReader();<br>Document doc1 = reader.read(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;src/main/java/com/liuzhihang/tool/xml/alipay.xml&quot;</span>));<br><br><span class="hljs-comment">// 解析 xml 文本 方式</span><br>String aliPayStr = XmlTest.getAliPayStr();<br>Document doc2 = DocumentHelper.parseText(aliPayStr);<br><br><span class="hljs-comment">// 主动创建</span><br>Document doc3 = DocumentHelper.createDocument();<br>Element element = doc3.addElement(<span class="hljs-string">&quot;Test&quot;</span>);<br></code></pre></td></tr></table></figure><h6 id="3-操作dom对象"><a href="#3-操作dom对象" class="headerlink" title="3. 操作dom对象"></a>3. 操作dom对象</h6><p>当获取到dom对象后便可以通过以下方式对dom进行操作</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取根节点</span><br>Element rootElement = dom.getRootElement();<br><span class="hljs-comment">// System.out.println(rootElement.getName());</span><br><br><span class="hljs-comment">// 获取子节点</span><br>Element element = rootElement.element(<span class="hljs-string">&quot;response&quot;</span>).element(<span class="hljs-string">&quot;alipay&quot;</span>);<br><span class="hljs-comment">// System.out.println(element.asXML());</span><br><br><span class="hljs-comment">// 获取节点的文字</span><br>String text = element.element(<span class="hljs-string">&quot;alipay_buyer_login_id&quot;</span>).getText();<br><span class="hljs-comment">// System.out.println(text);</span><br><br><span class="hljs-comment">// 获取节点下的所有节点 快捷键 iter / itco</span><br>List elements = element.elements();<br><span class="hljs-comment">// for (Object o : elements) &#123;</span><br><span class="hljs-comment">//     Element tempElement = (Element) o;</span><br><span class="hljs-comment">//     System.out.println(tempElement.getName() + &quot;\t&quot; + tempElement.getText());</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// for (Iterator iterator = elements.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="hljs-comment">//     Element next =  (Element)iterator.next();</span><br><span class="hljs-comment">//     System.out.println(next.getName() + &quot;\t&quot; + next.getText());</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 获取节点下所有节点 Iterator对象 快捷键 itit</span><br>Iterator iterator = element.elementIterator();<br><span class="hljs-comment">// while (iterator.hasNext()) &#123;</span><br><span class="hljs-comment">//     Element next =  (Element)iterator.next();</span><br><span class="hljs-comment">//     System.out.println(next.getName() + &quot;\t&quot; + next.getText());</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 添加节点</span><br>Element testElement = element.addElement(<span class="hljs-string">&quot;testElement&quot;</span>);<br><span class="hljs-comment">// 指定添加文字</span><br>testElement.setText(<span class="hljs-string">&quot;测试添加文字&quot;</span>);<br>System.out.println(element.asXML());<br><span class="hljs-comment">// 删除节点</span><br><span class="hljs-keyword">boolean</span> remove = element.remove(testElement);<br>System.out.println(remove + <span class="hljs-string">&quot;\n&quot;</span> + element.asXML());<br><br></code></pre></td></tr></table></figure><h6 id="4-详细代码"><a href="#4-详细代码" class="headerlink" title="4. 详细代码"></a>4. 详细代码</h6><p><a href="https://github.com/liuzhihang/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/xml/Dom4jTest.java">Dom4jTest.java</a></p>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml解析--JaxbUtil</title>
      <link href="2017/12/17/xml-parsing-jaxbutil.html"/>
      <url>2017/12/17/xml-parsing-jaxbutil.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要介绍使用jaxb对xml进行解析, 互转.</p><p>jaxb 是相对较多的xml工具, 只需要在javaBean的属性上添加相应注解, 就可以使用工具进行解析. 具体使用过程如下:</p><h5 id="1-编写javaBean并添加注解"><a href="#1-编写javaBean并添加注解" class="headerlink" title="1. 编写javaBean并添加注解"></a>1. 编写javaBean并添加注解</h5><p>使用过程中一般常用@XmlRootElement, @XmlAccessorType, @XmlElement, @XmlAttribute四个注解, 其余使用方式可以再自行深入研究.</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@XmlRootElement</span>: 根元素<br><span class="hljs-meta">@XmlAccessorType</span>: java对象生成xml文件时对java对象属性的访问方式<br>    属性为XmlAccessType.FIELD 指java所有成员变量<br><span class="hljs-meta">@XmlElement</span>: 子节点, name 可指定节点名<br><span class="hljs-meta">@XmlAttribute</span>: 映射为xml文件的属性, name 可指定属性名<br></code></pre></td></tr></table></figure><a id="more"></a><p>javaBean:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@XmlRootElement(name = &quot;alipay&quot;)</span><br><span class="hljs-meta">@XmlAccessorType(XmlAccessType.FIELD)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliPayXml</span> </span>&#123;<br><br>    <span class="hljs-meta">@XmlElement(name = &quot;alipay_buyer_login_id&quot; )</span><br>    <span class="hljs-keyword">private</span> String buyerLoginId;<br><br>    <span class="hljs-meta">@XmlElement(name = &quot;alipay_buyer_user_id&quot;)</span><br>    <span class="hljs-keyword">private</span> String buyerUserId;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-使用-JaxbUtil"><a href="#2-使用-JaxbUtil" class="headerlink" title="2. 使用 JaxbUtil"></a>2. 使用 JaxbUtil</h5><p><a href="https://github.com/liuzhihang/tool_demo/blob/master/src/main/java/com/liuzhihang/tool/xml/JaxbUtil.java">JaxbUtil</a>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuzhihang.tool.xml;<br><br><span class="hljs-keyword">import</span> javax.xml.bind.JAXBContext;<br><span class="hljs-keyword">import</span> javax.xml.bind.JAXBException;<br><span class="hljs-keyword">import</span> javax.xml.bind.Marshaller;<br><span class="hljs-keyword">import</span> javax.xml.bind.Unmarshaller;<br><span class="hljs-keyword">import</span> java.io.StringReader;<br><span class="hljs-keyword">import</span> java.io.StringWriter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Jaxb 工具</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2017/11/28 19:13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JaxbUtil</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CHARTSET = <span class="hljs-string">&quot;UTF-8&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">bean2Xml</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> JAXBException </span>&#123;<br>        <span class="hljs-keyword">return</span> bean2Xml(obj, CHARTSET);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">bean2Xml</span><span class="hljs-params">(Object obj, String chartset)</span> <span class="hljs-keyword">throws</span> JAXBException </span>&#123;<br>        JAXBContext jaxbContext = JAXBContext.newInstance(obj.getClass());<br>        Marshaller marshaller = jaxbContext.createMarshaller();<br>        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, <span class="hljs-keyword">true</span>);<br>        marshaller.setProperty(Marshaller.JAXB_ENCODING, chartset);<br>        StringWriter writer = <span class="hljs-keyword">new</span> StringWriter();<br>        marshaller.marshal(obj, writer);<br>        <span class="hljs-keyword">return</span> writer.getBuffer().toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">xml2Bean</span><span class="hljs-params">(String xmlString, Class&lt;T&gt; clazz)</span> <span class="hljs-keyword">throws</span> JAXBException </span>&#123;<br>        JAXBContext jaxbContext = JAXBContext.newInstance(clazz);<br>        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();<br>        T t = (T) unmarshaller.unmarshal(<span class="hljs-keyword">new</span> StringReader(xmlString));<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="3-测试代码"><a href="#3-测试代码" class="headerlink" title="3. 测试代码"></a>3. 测试代码</h5><p>待测试字符串: xmlStr</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">alipay</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">alipay_buyer_login_id</span>&gt;</span>176****3035<span class="hljs-tag">&lt;/<span class="hljs-name">alipay_buyer_login_id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">alipay_buyer_user_id</span>&gt;</span>2088912868994947<span class="hljs-tag">&lt;/<span class="hljs-name">alipay_buyer_user_id</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">alipay</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: liuzhihang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2017/12/17 23:11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JaxbTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JAXBException </span>&#123;<br>        String aliPayXmlStr = <span class="hljs-string">&quot;&lt;alipay&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;alipay_buyer_login_id&gt;176****3035&lt;/alipay_buyer_login_id&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;alipay_buyer_user_id&gt;2088912868994947&lt;/alipay_buyer_user_id&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/alipay&gt;&quot;</span>;<br><br>        AliPayXml aliPayXml = JaxbUtil.xml2Bean(aliPayXmlStr, AliPayXml.class);<br>        System.out.println(JSON.toJSONString(aliPayXml));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果:</p><p>打印的为json格式结果, 可debugger查看. 同样也可以将javaBean转换为xmlStr</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;&quot;buyerLoginId&quot;:&quot;176****3035&quot;,&quot;buyerUserId&quot;:&quot;2088912868994947&quot;&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
